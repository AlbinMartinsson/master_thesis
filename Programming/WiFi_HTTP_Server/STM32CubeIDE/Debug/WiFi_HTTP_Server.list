
WiFi_HTTP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 UNINIT_FIXED_LOC 000000d8  080ff000  080ff000  0002f000  2**3
                  ALLOC
  2 .text         00009b14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b34  08009cd4  08009cd4  00019cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800a808  0800a808  000200b8  2**0
                  CONTENTS
  5 .ARM          00000008  0800a808  0800a808  0001a808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800a810  0800a810  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800a810  0800a810  0001a810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800a814  0800a814  0001a814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000b8  20000000  0800a818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001368  200000b8  0800a8d0  000200b8  2**3
                  ALLOC
 11 ._user_heap   00010000  20001420  0800a8d0  00021420  2**0
                  ALLOC
 12 ._user_stack  00007f00  10000000  10000000  00030000  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_line   0001318c  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_info   0001b284  00000000  00000000  00033274  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000034a0  00000000  00000000  0004e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000014e8  00000000  00000000  00051998  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011d875  00000000  00000000  00052e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001378  00000000  00000000  001706f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0002fe91  00000000  00000000  00171a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001a1901  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006338  00000000  00000000  001a197c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009cbc 	.word	0x08009cbc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000bc 	.word	0x200000bc
 80001fc:	08009cbc 	.word	0x08009cbc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f000 ff8e 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005ba:	e003      	b.n	80005c4 <LoopCopyDataInit>

080005bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005c2:	3104      	adds	r1, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005cc:	d3f6      	bcc.n	80005bc <CopyDataInit>
	ldr	r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005d0:	e002      	b.n	80005d8 <LoopFillZerobss>

080005d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005d4:	f842 3b04 	str.w	r3, [r2], #4

080005d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <LoopForever+0x16>)
	cmp	r2, r3
 80005da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005dc:	d3f9      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f008 f813 	bl	8008608 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e2:	f000 f97f 	bl	80008e4 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005e8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005ec:	0800a818 	.word	0x0800a818
	ldr	r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005f4:	200000b8 	.word	0x200000b8
	ldr	r2, =_sbss
 80005f8:	200000b8 	.word	0x200000b8
	ldr	r3, = _ebss
 80005fc:	20001420 	.word	0x20001420

08000600 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_IRQHandler>
	...

08000604 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  uAddr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static uint32_t GetPage(uint32_t uAddr)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t page = 0U;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]

  if (uAddr < (FLASH_BASE + FLASH_BANK_SIZE))
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <GetPage+0x7c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	b29b      	uxth	r3, r3
 8000616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800061a:	4293      	cmp	r3, r2
 800061c:	d008      	beq.n	8000630 <GetPage+0x2c>
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <GetPage+0x7c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	029b      	lsls	r3, r3, #10
 8000624:	085a      	lsrs	r2, r3, #1
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <GetPage+0x80>)
 8000628:	4013      	ands	r3, r2
 800062a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800062e:	e001      	b.n	8000634 <GetPage+0x30>
 8000630:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4293      	cmp	r3, r2
 8000638:	d905      	bls.n	8000646 <GetPage+0x42>
  {
    /* Bank 1 */
    page = (uAddr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000640:	0b1b      	lsrs	r3, r3, #12
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e015      	b.n	8000672 <GetPage+0x6e>
  }
  else
  {
    /* Bank 2 */
    page = (uAddr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <GetPage+0x7c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	b29b      	uxth	r3, r3
 800064c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000650:	4293      	cmp	r3, r2
 8000652:	d008      	beq.n	8000666 <GetPage+0x62>
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <GetPage+0x7c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	029b      	lsls	r3, r3, #10
 800065a:	085a      	lsrs	r2, r3, #1
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <GetPage+0x80>)
 800065e:	4013      	ands	r3, r2
 8000660:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000664:	e001      	b.n	800066a <GetPage+0x66>
 8000666:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	0b1b      	lsrs	r3, r3, #12
 8000670:	60fb      	str	r3, [r7, #12]
  }

  return page;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	1fff75e0 	.word	0x1fff75e0
 8000684:	01fffe00 	.word	0x01fffe00

08000688 <GetBank>:
  * @brief  Gets the bank of a given address
  * @param  uAddr: Address of the FLASH Memory
  * @retval The bank of a given address
  */
static uint32_t GetBank(uint32_t uAddr)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t bank = 0U;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <GetBank+0x90>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800069c:	2b00      	cmp	r3, #0
 800069e:	d11a      	bne.n	80006d6 <GetBank+0x4e>
  {
    /* No Bank swap */
    if (uAddr < (FLASH_BASE + FLASH_BANK_SIZE))
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <GetBank+0x94>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d008      	beq.n	80006c0 <GetBank+0x38>
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <GetBank+0x94>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	029b      	lsls	r3, r3, #10
 80006b4:	085a      	lsrs	r2, r3, #1
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <GetBank+0x98>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80006be:	e001      	b.n	80006c4 <GetBank+0x3c>
 80006c0:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d902      	bls.n	80006d0 <GetBank+0x48>
    {
      bank = FLASH_BANK_1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e01c      	b.n	800070a <GetBank+0x82>
    }
    else
    {
      bank = FLASH_BANK_2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e019      	b.n	800070a <GetBank+0x82>
    }
  }
  else
  {
    /* Bank swap */
    if (uAddr < (FLASH_BASE + FLASH_BANK_SIZE))
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <GetBank+0x94>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d008      	beq.n	80006f6 <GetBank+0x6e>
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <GetBank+0x94>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	029b      	lsls	r3, r3, #10
 80006ea:	085a      	lsrs	r2, r3, #1
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <GetBank+0x98>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80006f4:	e001      	b.n	80006fa <GetBank+0x72>
 80006f6:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d902      	bls.n	8000706 <GetBank+0x7e>
    {
      bank = FLASH_BANK_2;
 8000700:	2302      	movs	r3, #2
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	e001      	b.n	800070a <GetBank+0x82>
    }
    else
    {
      bank = FLASH_BANK_1;
 8000706:	2301      	movs	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
    }
  }

  return bank;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40010000 	.word	0x40010000
 800071c:	1fff75e0 	.word	0x1fff75e0
 8000720:	01fffe00 	.word	0x01fffe00

08000724 <FLASH_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval HAL Status.
  */
uint32_t FLASH_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  uint32_t ret = HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	607b      	str	r3, [r7, #4]

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800072e:	f003 fa15 	bl	8003b5c <HAL_FLASH_Unlock>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d119      	bne.n	800076c <FLASH_Init+0x48>
  {

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <FLASH_Init+0x58>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a0f      	ldr	r2, [pc, #60]	; (800077c <FLASH_Init+0x58>)
 800073e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <FLASH_Init+0x58>)
 8000746:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800074a:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <FLASH_Init+0x58>)
 800074e:	f248 0291 	movw	r2, #32913	; 0x8091
 8000752:	611a      	str	r2, [r3, #16]

    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8000754:	f003 fa24 	bl	8003ba0 <HAL_FLASH_Lock>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d102      	bne.n	8000764 <FLASH_Init+0x40>
    {
      ret = HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	e006      	b.n	8000772 <FLASH_Init+0x4e>
    }
    else
    {
      printf("FLASH_If_Init : failed to lock\n");
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <FLASH_Init+0x5c>)
 8000766:	f008 f8cd 	bl	8008904 <puts>
 800076a:	e002      	b.n	8000772 <FLASH_Init+0x4e>
    }
  }
  else
  {
    printf("FLASH_If_Init : failed to unlock\n");
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <FLASH_Init+0x60>)
 800076e:	f008 f8c9 	bl	8008904 <puts>
  }
  return ret;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40022000 	.word	0x40022000
 8000780:	08009cd4 	.word	0x08009cd4
 8000784:	08009cf4 	.word	0x08009cf4

08000788 <FLASH_Erase_Size>:
  * @param  Start: Start of user flash area
  * @param  uLength: number of bytes.
  * @retval HAL status.
  */
int FLASH_Erase_Size(uint32_t uStart, uint32_t uLength)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t page_error = 0U;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef x_erase_init;
  uint32_t e_ret_status = HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t first_page = 0U, nb_of_pages = 0U, bank_number = 0U;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]

  /* Initialize Flash */
  e_ret_status = FLASH_Init();
 80007a6:	f7ff ffbd 	bl	8000724 <FLASH_Init>
 80007aa:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (e_ret_status == HAL_OK)
 80007ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d139      	bne.n	8000826 <FLASH_Erase_Size+0x9e>
  {
    /* Unlock the Flash to enable the flash control register access *************/
    if (HAL_FLASH_Unlock() == HAL_OK)
 80007b2:	f003 f9d3 	bl	8003b5c <HAL_FLASH_Unlock>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d130      	bne.n	800081e <FLASH_Erase_Size+0x96>
    {
      /* Get the 1st page to erase */
      first_page = GetPage(uStart);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff21 	bl	8000604 <GetPage>
 80007c2:	62b8      	str	r0, [r7, #40]	; 0x28
      /* Get the number of pages to erase from 1st page */
      nb_of_pages = GetPage(uStart + uLength - 1U) - first_page + 1U;
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	3b01      	subs	r3, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff19 	bl	8000604 <GetPage>
 80007d2:	4602      	mov	r2, r0
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
      /* Get the bank */
      bank_number = GetBank(uStart);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff53 	bl	8000688 <GetBank>
 80007e2:	6238      	str	r0, [r7, #32]

      /* Fill EraseInit structure*/
      x_erase_init.TypeErase   = FLASH_TYPEERASE_PAGES;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
      x_erase_init.Banks       = bank_number;
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	613b      	str	r3, [r7, #16]
      x_erase_init.Page        = first_page;
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	617b      	str	r3, [r7, #20]
      x_erase_init.NbPages     = nb_of_pages;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	61bb      	str	r3, [r7, #24]

      if (HAL_FLASHEx_Erase(&x_erase_init, &page_error) != HAL_OK)
 80007f4:	f107 021c 	add.w	r2, r7, #28
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fa9a 	bl	8003d38 <HAL_FLASHEx_Erase>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <FLASH_Erase_Size+0x90>
      {
        /* Error occurred while page erase */
        HAL_FLASH_GetError();
 800080a:	f003 f9d9 	bl	8003bc0 <HAL_FLASH_GetError>
        printf("ERROR flash erase\n");
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <FLASH_Erase_Size+0xb0>)
 8000810:	f008 f878 	bl	8008904 <puts>
        e_ret_status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      /* Lock the Flash to disable the flash control register access (recommended
      to protect the FLASH memory against possible unwanted operation) *********/
      HAL_FLASH_Lock();
 8000818:	f003 f9c2 	bl	8003ba0 <HAL_FLASH_Lock>
 800081c:	e006      	b.n	800082c <FLASH_Erase_Size+0xa4>
    }
    else
    {
      printf("ERROR cannot unlock\n");
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <FLASH_Erase_Size+0xb4>)
 8000820:	f008 f870 	bl	8008904 <puts>
 8000824:	e002      	b.n	800082c <FLASH_Erase_Size+0xa4>
    }
  }
  else
  {
    printf("cannot init\n");
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <FLASH_Erase_Size+0xb8>)
 8000828:	f008 f86c 	bl	8008904 <puts>
  }
  return e_ret_status;
 800082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800082e:	4618      	mov	r0, r3
 8000830:	3730      	adds	r7, #48	; 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	08009d18 	.word	0x08009d18
 800083c:	08009d2c 	.word	0x08009d2c
 8000840:	08009d40 	.word	0x08009d40

08000844 <FLASH_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
int FLASH_Write(uint32_t uDestination, uint32_t *pSource, uint32_t uLength)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t e_ret_status = HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
  uint32_t i = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]

  /* Initialize Flash */
  e_ret_status = FLASH_Init();
 8000858:	f7ff ff64 	bl	8000724 <FLASH_Init>
 800085c:	6178      	str	r0, [r7, #20]

  if (e_ret_status == HAL_OK)
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d139      	bne.n	80008d8 <FLASH_Write+0x94>
  {
    /* Unlock the Flash to enable the flash control register access *************/
    if (HAL_FLASH_Unlock() != HAL_OK)
 8000864:	f003 f97a 	bl	8003b5c <HAL_FLASH_Unlock>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <FLASH_Write+0x2e>
    {
      return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e033      	b.n	80008da <FLASH_Write+0x96>
    }
    else
    {
      /* DataLength must be a multiple of 64 bit */
      for (i = 0U; i < uLength / 8U; i++)
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	e028      	b.n	80008ca <FLASH_Write+0x86>
      {
        /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
        be done by word */
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, uDestination, *((uint64_t *)(pSource + 2U * i))) == HAL_OK)
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	4413      	add	r3, r2
 8000880:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000884:	461a      	mov	r2, r3
 8000886:	4623      	mov	r3, r4
 8000888:	68f9      	ldr	r1, [r7, #12]
 800088a:	2000      	movs	r0, #0
 800088c:	f003 f8fa 	bl	8003a84 <HAL_FLASH_Program>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d113      	bne.n	80008be <FLASH_Write+0x7a>
        {
          /* Check the written value */
          if (*(uint64_t *)uDestination != *(uint64_t *)(pSource + 2U * i))
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	e9d3 1200 	ldrd	r1, r2, [r3]
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	68b8      	ldr	r0, [r7, #8]
 80008a2:	4403      	add	r3, r0
 80008a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008a8:	42a2      	cmp	r2, r4
 80008aa:	bf08      	it	eq
 80008ac:	4299      	cmpeq	r1, r3
 80008ae:	d002      	beq.n	80008b6 <FLASH_Write+0x72>
          {
            /* Flash content doesn't match SRAM content */
            e_ret_status = HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
            break;
 80008b4:	e00e      	b.n	80008d4 <FLASH_Write+0x90>
          }
          /* Increment FLASH Destination address */
          uDestination += 8U;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3308      	adds	r3, #8
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	e002      	b.n	80008c4 <FLASH_Write+0x80>
        }
        else
        {
          /* Error occurred while writing data in Flash memory */
          e_ret_status = HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
          break;
 80008c2:	e007      	b.n	80008d4 <FLASH_Write+0x90>
      for (i = 0U; i < uLength / 8U; i++)
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	3301      	adds	r3, #1
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d3d1      	bcc.n	8000878 <FLASH_Write+0x34>
        }
      }
      /* Lock the Flash to disable the flash control register access (recommended
      to protect the FLASH memory against possible unwanted operation) *********/
      HAL_FLASH_Lock();
 80008d4:	f003 f964 	bl	8003ba0 <HAL_FLASH_Lock>
    }
  }
  return e_ret_status;
 80008d8:	697b      	ldr	r3, [r7, #20]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	371c      	adds	r7, #28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}
	...

080008e4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f002 febe 	bl	8003668 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 fc64 	bl	80011b8 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f002 fc21 	bl	8003138 <BSP_LED_Init>

  /* USER push button is used to ask if reconfiguration is needed */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008f6:	2101      	movs	r1, #1
 80008f8:	2000      	movs	r0, #0
 80008fa:	f002 fc79 	bl	80031f0 <BSP_PB_Init>

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <main+0x74>)
 8000900:	4a16      	ldr	r2, [pc, #88]	; (800095c <main+0x78>)
 8000902:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <main+0x74>)
 8000906:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090a:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <main+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <main+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <main+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <main+0x74>)
 8000920:	220c      	movs	r2, #12
 8000922:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <main+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <main+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <main+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <main+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	; 0x28


  BSP_COM_Init(COM1, &hDiscoUart);
 800093c:	4906      	ldr	r1, [pc, #24]	; (8000958 <main+0x74>)
 800093e:	2000      	movs	r0, #0
 8000940:	f002 fcac 	bl	800329c <BSP_COM_Init>
  BSP_TSENSOR_Init();
 8000944:	f002 fe66 	bl	8003614 <BSP_TSENSOR_Init>


  printf("\n****** WIFI Web Server demonstration ******\n\n");
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <main+0x7c>)
 800094a:	f007 ffdb 	bl	8008904 <puts>

#endif /* TERMINAL_USE */

  wifi_server();
 800094e:	f000 f933 	bl	8000bb8 <wifi_server>
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20001340 	.word	0x20001340
 800095c:	40013800 	.word	0x40013800
 8000960:	08009d4c 	.word	0x08009d4c

08000964 <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800096a:	f002 f9cd 	bl	8002d08 <WIFI_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d123      	bne.n	80009bc <wifi_start+0x58>
  {
    printf("eS-WiFi Initialized.\n");
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <wifi_start+0x64>)
 8000976:	f007 ffc5 	bl	8008904 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4618      	mov	r0, r3
 800097e:	f002 fa11 	bl	8002da4 <WIFI_GetMAC_Address>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d113      	bne.n	80009b0 <wifi_start+0x4c>
    {
      LOG(("eS-WiFi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8000988:	783b      	ldrb	r3, [r7, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	787b      	ldrb	r3, [r7, #1]
 800098e:	461c      	mov	r4, r3
 8000990:	78bb      	ldrb	r3, [r7, #2]
 8000992:	461d      	mov	r5, r3
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	793a      	ldrb	r2, [r7, #4]
 8000998:	7979      	ldrb	r1, [r7, #5]
 800099a:	9102      	str	r1, [sp, #8]
 800099c:	9201      	str	r2, [sp, #4]
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	462b      	mov	r3, r5
 80009a2:	4622      	mov	r2, r4
 80009a4:	4601      	mov	r1, r0
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <wifi_start+0x68>)
 80009a8:	f007 ff24 	bl	80087f4 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	e007      	b.n	80009c0 <wifi_start+0x5c>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 80009b0:	4807      	ldr	r0, [pc, #28]	; (80009d0 <wifi_start+0x6c>)
 80009b2:	f007 ffa7 	bl	8008904 <puts>
      return -1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e001      	b.n	80009c0 <wifi_start+0x5c>
    return -1;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bdb0      	pop	{r4, r5, r7, pc}
 80009c8:	08009d7c 	.word	0x08009d7c
 80009cc:	08009d94 	.word	0x08009d94
 80009d0:	08009dc4 	.word	0x08009dc4
 80009d4:	00000000 	.word	0x00000000

080009d8 <wifi_connect>:



int wifi_connect(void)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b085      	sub	sp, #20
 80009dc:	af02      	add	r7, sp, #8
  wifi_start();
 80009de:	f7ff ffc1 	bl	8000964 <wifi_start>
  
  memset(&user_config, 0, sizeof(user_config));
 80009e2:	22d8      	movs	r2, #216	; 0xd8
 80009e4:	2100      	movs	r1, #0
 80009e6:	4864      	ldr	r0, [pc, #400]	; (8000b78 <wifi_connect+0x1a0>)
 80009e8:	f007 fe54 	bl	8008694 <memset>
  memcpy(&user_config, lUserConfigPtr, sizeof(user_config));
 80009ec:	4b63      	ldr	r3, [pc, #396]	; (8000b7c <wifi_connect+0x1a4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	22d8      	movs	r2, #216	; 0xd8
 80009f2:	4619      	mov	r1, r3
 80009f4:	4860      	ldr	r0, [pc, #384]	; (8000b78 <wifi_connect+0x1a0>)
 80009f6:	f007 fe42 	bl	800867e <memcpy>
  if (user_config.wifi_config_magic == USER_CONF_MAGIC)
 80009fa:	4b5f      	ldr	r3, [pc, #380]	; (8000b78 <wifi_connect+0x1a0>)
 80009fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a00:	a25b      	add	r2, pc, #364	; (adr r2, 8000b70 <wifi_connect+0x198>)
 8000a02:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000a06:	4294      	cmp	r4, r2
 8000a08:	bf08      	it	eq
 8000a0a:	428b      	cmpeq	r3, r1
 8000a0c:	d118      	bne.n	8000a40 <wifi_connect+0x68>
  {
    /* WiFi configuration is already in Flash. Ask if we want to change it */
    printf("Already configured SSID: %s security: %d\n",
           user_config.wifi_config.ssid, user_config.wifi_config.security);
 8000a0e:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <wifi_connect+0x1a0>)
 8000a10:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    printf("Already configured SSID: %s security: %d\n",
 8000a14:	461a      	mov	r2, r3
 8000a16:	495a      	ldr	r1, [pc, #360]	; (8000b80 <wifi_connect+0x1a8>)
 8000a18:	485a      	ldr	r0, [pc, #360]	; (8000b84 <wifi_connect+0x1ac>)
 8000a1a:	f007 feeb 	bl	80087f4 <iprintf>
    printf("Press board User button (blue) within 5 seconds if you want to change the configuration.\n");
 8000a1e:	485a      	ldr	r0, [pc, #360]	; (8000b88 <wifi_connect+0x1b0>)
 8000a20:	f007 ff70 	bl	8008904 <puts>
    Button_Reset();
 8000a24:	f000 fc02 	bl	800122c <Button_Reset>
    if (Button_WaitForPush(5000))
 8000a28:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a2c:	f000 fc0a 	bl	8001244 <Button_WaitForPush>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <wifi_connect+0x68>
    {
      /* we want to change the configuration already stored in Flash memory */
      memset(&user_config, 0, sizeof(user_config));
 8000a36:	22d8      	movs	r2, #216	; 0xd8
 8000a38:	2100      	movs	r1, #0
 8000a3a:	484f      	ldr	r0, [pc, #316]	; (8000b78 <wifi_connect+0x1a0>)
 8000a3c:	f007 fe2a 	bl	8008694 <memset>
    }
  }

  if (user_config.wifi_config_magic != USER_CONF_MAGIC)
 8000a40:	4b4d      	ldr	r3, [pc, #308]	; (8000b78 <wifi_connect+0x1a0>)
 8000a42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a46:	a24a      	add	r2, pc, #296	; (adr r2, 8000b70 <wifi_connect+0x198>)
 8000a48:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000a4c:	4294      	cmp	r4, r2
 8000a4e:	bf08      	it	eq
 8000a50:	428b      	cmpeq	r3, r1
 8000a52:	d041      	beq.n	8000ad8 <wifi_connect+0x100>
  {
    printf("\nEnter WiFi SSID : ");
 8000a54:	484d      	ldr	r0, [pc, #308]	; (8000b8c <wifi_connect+0x1b4>)
 8000a56:	f007 fecd 	bl	80087f4 <iprintf>
    gets(user_config.wifi_config.ssid);
 8000a5a:	4849      	ldr	r0, [pc, #292]	; (8000b80 <wifi_connect+0x1a8>)
 8000a5c:	f007 fdcc 	bl	80085f8 <gets>
    LOG(("\nYou have entered %s as SSID.\n", user_config.wifi_config.ssid));
 8000a60:	4947      	ldr	r1, [pc, #284]	; (8000b80 <wifi_connect+0x1a8>)
 8000a62:	484b      	ldr	r0, [pc, #300]	; (8000b90 <wifi_connect+0x1b8>)
 8000a64:	f007 fec6 	bl	80087f4 <iprintf>

    char c;
    do
    {
        printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): ");
 8000a68:	484a      	ldr	r0, [pc, #296]	; (8000b94 <wifi_connect+0x1bc>)
 8000a6a:	f007 fec3 	bl	80087f4 <iprintf>
        c = getchar();
 8000a6e:	f007 fd6f 	bl	8008550 <getchar>
 8000a72:	4603      	mov	r3, r0
 8000a74:	71bb      	strb	r3, [r7, #6]
    }
    while ( (c < '0')  || (c > '3'));
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	2b2f      	cmp	r3, #47	; 0x2f
 8000a7a:	d9f5      	bls.n	8000a68 <wifi_connect+0x90>
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	2b33      	cmp	r3, #51	; 0x33
 8000a80:	d8f2      	bhi.n	8000a68 <wifi_connect+0x90>
    user_config.wifi_config.security = c - '0';
 8000a82:	79bb      	ldrb	r3, [r7, #6]
 8000a84:	3b30      	subs	r3, #48	; 0x30
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <wifi_connect+0x1a0>)
 8000a8a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    LOG(("\nYou have entered %d as the security mode.\n", user_config.wifi_config.security));
 8000a8e:	4b3a      	ldr	r3, [pc, #232]	; (8000b78 <wifi_connect+0x1a0>)
 8000a90:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4840      	ldr	r0, [pc, #256]	; (8000b98 <wifi_connect+0x1c0>)
 8000a98:	f007 feac 	bl	80087f4 <iprintf>

    if (user_config.wifi_config.security != 0)
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <wifi_connect+0x1a0>)
 8000a9e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d005      	beq.n	8000ab2 <wifi_connect+0xda>
    {
      printf("\nEnter WiFi password : ");
 8000aa6:	483d      	ldr	r0, [pc, #244]	; (8000b9c <wifi_connect+0x1c4>)
 8000aa8:	f007 fea4 	bl	80087f4 <iprintf>
      gets(user_config.wifi_config.password);
 8000aac:	483c      	ldr	r0, [pc, #240]	; (8000ba0 <wifi_connect+0x1c8>)
 8000aae:	f007 fda3 	bl	80085f8 <gets>
    }
    user_config.wifi_config_magic = USER_CONF_MAGIC;
 8000ab2:	4a31      	ldr	r2, [pc, #196]	; (8000b78 <wifi_connect+0x1a0>)
 8000ab4:	a42e      	add	r4, pc, #184	; (adr r4, 8000b70 <wifi_connect+0x198>)
 8000ab6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000aba:	e9c2 3400 	strd	r3, r4, [r2]
    FLASH_Erase_Size((uint32_t)lUserConfigPtr, sizeof(user_config));
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <wifi_connect+0x1a4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	21d8      	movs	r1, #216	; 0xd8
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe5f 	bl	8000788 <FLASH_Erase_Size>
    FLASH_Write((uint32_t)lUserConfigPtr, (uint32_t*)&user_config, sizeof(user_config));
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <wifi_connect+0x1a4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	22d8      	movs	r2, #216	; 0xd8
 8000ad0:	4929      	ldr	r1, [pc, #164]	; (8000b78 <wifi_connect+0x1a0>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff feb6 	bl	8000844 <FLASH_Write>
  }

  printf("\nConnecting to %s\n", user_config.wifi_config.ssid);
 8000ad8:	4929      	ldr	r1, [pc, #164]	; (8000b80 <wifi_connect+0x1a8>)
 8000ada:	4832      	ldr	r0, [pc, #200]	; (8000ba4 <wifi_connect+0x1cc>)
 8000adc:	f007 fe8a 	bl	80087f4 <iprintf>
  WIFI_Ecn_t security;
  switch (user_config.wifi_config.security)
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <wifi_connect+0x1a0>)
 8000ae2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d006      	beq.n	8000af8 <wifi_connect+0x120>
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d007      	beq.n	8000afe <wifi_connect+0x126>
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d108      	bne.n	8000b04 <wifi_connect+0x12c>
  {
    case 0:
      security = WIFI_ECN_OPEN;
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]
      break;
 8000af6:	e008      	b.n	8000b0a <wifi_connect+0x132>
    case 1:
      security = WIFI_ECN_WEP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	71fb      	strb	r3, [r7, #7]
      break;
 8000afc:	e005      	b.n	8000b0a <wifi_connect+0x132>
    case 2:
      security =  WIFI_ECN_WPA_PSK;
 8000afe:	2302      	movs	r3, #2
 8000b00:	71fb      	strb	r3, [r7, #7]
      break;
 8000b02:	e002      	b.n	8000b0a <wifi_connect+0x132>
    case 3:
    default:
      security =  WIFI_ECN_WPA2_PSK;
 8000b04:	2303      	movs	r3, #3
 8000b06:	71fb      	strb	r3, [r7, #7]
      break;
 8000b08:	bf00      	nop
  }
  if (WIFI_Connect(user_config.wifi_config.ssid, user_config.wifi_config.password, security) == WIFI_STATUS_OK)
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4924      	ldr	r1, [pc, #144]	; (8000ba0 <wifi_connect+0x1c8>)
 8000b10:	481b      	ldr	r0, [pc, #108]	; (8000b80 <wifi_connect+0x1a8>)
 8000b12:	f002 f925 	bl	8002d60 <WIFI_Connect>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d11d      	bne.n	8000b58 <wifi_connect+0x180>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8000b1c:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <wifi_connect+0x1d0>)
 8000b1e:	f002 f957 	bl	8002dd0 <WIFI_GetIP_Address>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d111      	bne.n	8000b4c <wifi_connect+0x174>
    {
      LOG(("eS-WiFi module connected: got IP Address : %d.%d.%d.%d\n",
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <wifi_connect+0x1d0>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <wifi_connect+0x1d0>)
 8000b30:	785b      	ldrb	r3, [r3, #1]
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <wifi_connect+0x1d0>)
 8000b36:	789b      	ldrb	r3, [r3, #2]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <wifi_connect+0x1d0>)
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	4603      	mov	r3, r0
 8000b42:	481a      	ldr	r0, [pc, #104]	; (8000bac <wifi_connect+0x1d4>)
 8000b44:	f007 fe56 	bl	80087f4 <iprintf>
  else
  {
     LOG(("ERROR : es-wifi module NOT connected\n"));
     return -1;
  }
  return 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e00a      	b.n	8000b62 <wifi_connect+0x18a>
      LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 8000b4c:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <wifi_connect+0x1d8>)
 8000b4e:	f007 fed9 	bl	8008904 <puts>
      return -1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e004      	b.n	8000b62 <wifi_connect+0x18a>
     LOG(("ERROR : es-wifi module NOT connected\n"));
 8000b58:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <wifi_connect+0x1dc>)
 8000b5a:	f007 fed3 	bl	8008904 <puts>
     return -1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd90      	pop	{r4, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	f3af 8000 	nop.w
 8000b70:	89abcdef 	.word	0x89abcdef
 8000b74:	01234567 	.word	0x01234567
 8000b78:	200000d8 	.word	0x200000d8
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	200000e0 	.word	0x200000e0
 8000b84:	08009de8 	.word	0x08009de8
 8000b88:	08009e14 	.word	0x08009e14
 8000b8c:	08009e70 	.word	0x08009e70
 8000b90:	08009e84 	.word	0x08009e84
 8000b94:	08009ea4 	.word	0x08009ea4
 8000b98:	08009ee4 	.word	0x08009ee4
 8000b9c:	08009f10 	.word	0x08009f10
 8000ba0:	20000144 	.word	0x20000144
 8000ba4:	08009f28 	.word	0x08009f28
 8000ba8:	200005b0 	.word	0x200005b0
 8000bac:	08009f3c 	.word	0x08009f3c
 8000bb0:	08009f74 	.word	0x08009f74
 8000bb4:	08009fa4 	.word	0x08009fa4

08000bb8 <wifi_server>:

int wifi_server(void)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af02      	add	r7, sp, #8
  bool StopServer = false;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 8000bc2:	483f      	ldr	r0, [pc, #252]	; (8000cc0 <wifi_server+0x108>)
 8000bc4:	f007 fe9e 	bl	8008904 <puts>
  if (wifi_connect()!=0) return -1;
 8000bc8:	f7ff ff06 	bl	80009d8 <wifi_connect>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <wifi_server+0x20>
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e06e      	b.n	8000cb6 <wifi_server+0xfe>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8000bd8:	2350      	movs	r3, #80	; 0x50
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4b39      	ldr	r3, [pc, #228]	; (8000cc4 <wifi_server+0x10c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	2100      	movs	r1, #0
 8000be2:	2000      	movs	r0, #0
 8000be4:	f002 f910 	bl	8002e08 <WIFI_StartServer>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 8000bee:	4836      	ldr	r0, [pc, #216]	; (8000cc8 <wifi_server+0x110>)
 8000bf0:	f007 fe88 	bl	8008904 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <wifi_server+0x114>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <wifi_server+0x114>)
 8000bfc:	785b      	ldrb	r3, [r3, #1]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <wifi_server+0x114>)
 8000c02:	789b      	ldrb	r3, [r3, #2]
 8000c04:	4618      	mov	r0, r3
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <wifi_server+0x114>)
 8000c08:	78db      	ldrb	r3, [r3, #3]
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4830      	ldr	r0, [pc, #192]	; (8000cd0 <wifi_server+0x118>)
 8000c10:	f007 fdf0 	bl	80087f4 <iprintf>
  do
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;

    LOG(("Waiting connection to http://%d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <wifi_server+0x114>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <wifi_server+0x114>)
 8000c1c:	785b      	ldrb	r3, [r3, #1]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <wifi_server+0x114>)
 8000c22:	789b      	ldrb	r3, [r3, #2]
 8000c24:	4618      	mov	r0, r3
 8000c26:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <wifi_server+0x114>)
 8000c28:	78db      	ldrb	r3, [r3, #3]
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <wifi_server+0x11c>)
 8000c30:	f007 fde0 	bl	80087f4 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8000c34:	e002      	b.n	8000c3c <wifi_server+0x84>
    {
        LOG(("."));
 8000c36:	202e      	movs	r0, #46	; 0x2e
 8000c38:	f007 fdf4 	bl	8008824 <putchar>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	f107 0208 	add.w	r2, r7, #8
 8000c42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c46:	2000      	movs	r0, #0
 8000c48:	f002 f90e 	bl	8002e68 <WIFI_WaitServerConnection>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f1      	bne.n	8000c36 <wifi_server+0x7e>
    }

    LOG(("\nClient connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 8000c52:	7a3b      	ldrb	r3, [r7, #8]
 8000c54:	4619      	mov	r1, r3
 8000c56:	7a7b      	ldrb	r3, [r7, #9]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	7abb      	ldrb	r3, [r7, #10]
 8000c5c:	461c      	mov	r4, r3
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	88fa      	ldrh	r2, [r7, #6]
 8000c62:	9201      	str	r2, [sp, #4]
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	4623      	mov	r3, r4
 8000c68:	4602      	mov	r2, r0
 8000c6a:	481b      	ldr	r0, [pc, #108]	; (8000cd8 <wifi_server+0x120>)
 8000c6c:	f007 fdc2 	bl	80087f4 <iprintf>

    StopServer = WebServerProcess();
 8000c70:	f000 f83a 	bl	8000ce8 <WebServerProcess>
 8000c74:	4603      	mov	r3, r0
 8000c76:	73fb      	strb	r3, [r7, #15]

    if (WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f002 f937 	bl	8002eec <WIFI_CloseServerConnection>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <wifi_server+0xd8>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 8000c84:	4815      	ldr	r0, [pc, #84]	; (8000cdc <wifi_server+0x124>)
 8000c86:	f007 fe3d 	bl	8008904 <puts>
      return -1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e012      	b.n	8000cb6 <wifi_server+0xfe>
    }
  }
  while(StopServer == false);
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	f083 0301 	eor.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1bb      	bne.n	8000c14 <wifi_server+0x5c>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f002 f93b 	bl	8002f18 <WIFI_StopServer>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <wifi_server+0xf6>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <wifi_server+0x128>)
 8000caa:	f007 fe2b 	bl	8008904 <puts>
  }

  LOG(("Server is stop\n"));
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <wifi_server+0x12c>)
 8000cb0:	f007 fe28 	bl	8008904 <puts>
  return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08009fcc 	.word	0x08009fcc
 8000cc4:	08009fe8 	.word	0x08009fe8
 8000cc8:	08009fec 	.word	0x08009fec
 8000ccc:	200005b0 	.word	0x200005b0
 8000cd0:	0800a008 	.word	0x0800a008
 8000cd4:	0800a058 	.word	0x0800a058
 8000cd8:	0800a084 	.word	0x0800a084
 8000cdc:	0800a0a8 	.word	0x0800a0a8
 8000ce0:	0800a0dc 	.word	0x0800a0dc
 8000ce4:	0800a0f8 	.word	0x0800a0f8

08000ce8 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8000cf2:	f107 020c 	add.w	r2, r7, #12
 8000cf6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d02:	4955      	ldr	r1, [pc, #340]	; (8000e58 <WebServerProcess+0x170>)
 8000d04:	2000      	movs	r0, #0
 8000d06:	f002 f941 	bl	8002f8c <WIFI_ReceiveData>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f040 809a 	bne.w	8000e46 <WebServerProcess+0x15e>
  {
   LOG(("get %d byte from server\n",respLen));
 8000d12:	89bb      	ldrh	r3, [r7, #12]
 8000d14:	4619      	mov	r1, r3
 8000d16:	4851      	ldr	r0, [pc, #324]	; (8000e5c <WebServerProcess+0x174>)
 8000d18:	f007 fd6c 	bl	80087f4 <iprintf>

   if( respLen > 0)
 8000d1c:	89bb      	ldrh	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 8094 	beq.w	8000e4c <WebServerProcess+0x164>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8000d24:	494e      	ldr	r1, [pc, #312]	; (8000e60 <WebServerProcess+0x178>)
 8000d26:	484c      	ldr	r0, [pc, #304]	; (8000e58 <WebServerProcess+0x170>)
 8000d28:	f007 fe86 	bl	8008a38 <strstr>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d01c      	beq.n	8000d6c <WebServerProcess+0x84>
      {
        temp = (int) BSP_TSENSOR_ReadTemp();
 8000d32:	f002 fc8b 	bl	800364c <BSP_TSENSOR_ReadTemp>
 8000d36:	eef0 7a40 	vmov.f32	s15, s0
 8000d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d3e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d42:	793b      	ldrb	r3, [r7, #4]
 8000d44:	73bb      	strb	r3, [r7, #14]
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8000d46:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <WebServerProcess+0x17c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	7bba      	ldrb	r2, [r7, #14]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f8a1 	bl	8000e98 <SendWebPage>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <WebServerProcess+0x7c>
        {
          LOG(("> ERROR : Cannot send web page\n"));
 8000d5c:	4842      	ldr	r0, [pc, #264]	; (8000e68 <WebServerProcess+0x180>)
 8000d5e:	f007 fdd1 	bl	8008904 <puts>
 8000d62:	e073      	b.n	8000e4c <WebServerProcess+0x164>
        }
        else
        {
          LOG(("Send page after  GET command\n"));
 8000d64:	4841      	ldr	r0, [pc, #260]	; (8000e6c <WebServerProcess+0x184>)
 8000d66:	f007 fdcd 	bl	8008904 <puts>
 8000d6a:	e06f      	b.n	8000e4c <WebServerProcess+0x164>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 8000d6c:	4940      	ldr	r1, [pc, #256]	; (8000e70 <WebServerProcess+0x188>)
 8000d6e:	483a      	ldr	r0, [pc, #232]	; (8000e58 <WebServerProcess+0x170>)
 8000d70:	f007 fe62 	bl	8008a38 <strstr>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d068      	beq.n	8000e4c <WebServerProcess+0x164>
       {
         LOG(("Post request\n"));
 8000d7a:	483e      	ldr	r0, [pc, #248]	; (8000e74 <WebServerProcess+0x18c>)
 8000d7c:	f007 fdc2 	bl	8008904 <puts>

         if(strstr((char *)resp, "radio"))
 8000d80:	493d      	ldr	r1, [pc, #244]	; (8000e78 <WebServerProcess+0x190>)
 8000d82:	4835      	ldr	r0, [pc, #212]	; (8000e58 <WebServerProcess+0x170>)
 8000d84:	f007 fe58 	bl	8008a38 <strstr>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d024      	beq.n	8000dd8 <WebServerProcess+0xf0>
         {
           if(strstr((char *)resp, "radio=0"))
 8000d8e:	493b      	ldr	r1, [pc, #236]	; (8000e7c <WebServerProcess+0x194>)
 8000d90:	4831      	ldr	r0, [pc, #196]	; (8000e58 <WebServerProcess+0x170>)
 8000d92:	f007 fe51 	bl	8008a38 <strstr>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <WebServerProcess+0xc2>
           {
             LedState = 0;
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <WebServerProcess+0x17c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
             BSP_LED_Off(LED2);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f002 fa0e 	bl	80031c4 <BSP_LED_Off>
 8000da8:	e00c      	b.n	8000dc4 <WebServerProcess+0xdc>
           }
           else if(strstr((char *)resp, "radio=1"))
 8000daa:	4935      	ldr	r1, [pc, #212]	; (8000e80 <WebServerProcess+0x198>)
 8000dac:	482a      	ldr	r0, [pc, #168]	; (8000e58 <WebServerProcess+0x170>)
 8000dae:	f007 fe43 	bl	8008a38 <strstr>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d005      	beq.n	8000dc4 <WebServerProcess+0xdc>
           {
             LedState = 1;
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <WebServerProcess+0x17c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
             BSP_LED_On(LED2);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f002 f9ea 	bl	8003198 <BSP_LED_On>
           }
           temp = (int) BSP_TSENSOR_ReadTemp();
 8000dc4:	f002 fc42 	bl	800364c <BSP_TSENSOR_ReadTemp>
 8000dc8:	eef0 7a40 	vmov.f32	s15, s0
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000dd4:	793b      	ldrb	r3, [r7, #4]
 8000dd6:	73bb      	strb	r3, [r7, #14]
         }
         if(strstr((char *)resp, "stop_server"))
 8000dd8:	492a      	ldr	r1, [pc, #168]	; (8000e84 <WebServerProcess+0x19c>)
 8000dda:	481f      	ldr	r0, [pc, #124]	; (8000e58 <WebServerProcess+0x170>)
 8000ddc:	f007 fe2c 	bl	8008a38 <strstr>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d012      	beq.n	8000e0c <WebServerProcess+0x124>
         {
           if(strstr((char *)resp, "stop_server=0"))
 8000de6:	4928      	ldr	r1, [pc, #160]	; (8000e88 <WebServerProcess+0x1a0>)
 8000de8:	481b      	ldr	r0, [pc, #108]	; (8000e58 <WebServerProcess+0x170>)
 8000dea:	f007 fe25 	bl	8008a38 <strstr>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <WebServerProcess+0x112>
           {
             stopserver = false;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e008      	b.n	8000e0c <WebServerProcess+0x124>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 8000dfa:	4924      	ldr	r1, [pc, #144]	; (8000e8c <WebServerProcess+0x1a4>)
 8000dfc:	4816      	ldr	r0, [pc, #88]	; (8000e58 <WebServerProcess+0x170>)
 8000dfe:	f007 fe1b 	bl	8008a38 <strstr>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <WebServerProcess+0x124>
           {
             stopserver = true;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
           }
         }
         temp = (int) BSP_TSENSOR_ReadTemp();
 8000e0c:	f002 fc1e 	bl	800364c <BSP_TSENSOR_ReadTemp>
 8000e10:	eef0 7a40 	vmov.f32	s15, s0
 8000e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e18:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e1c:	793b      	ldrb	r3, [r7, #4]
 8000e1e:	73bb      	strb	r3, [r7, #14]
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <WebServerProcess+0x17c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	7bba      	ldrb	r2, [r7, #14]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f834 	bl	8000e98 <SendWebPage>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <WebServerProcess+0x156>
         {
           LOG(("> ERROR : Cannot send web page\n"));
 8000e36:	480c      	ldr	r0, [pc, #48]	; (8000e68 <WebServerProcess+0x180>)
 8000e38:	f007 fd64 	bl	8008904 <puts>
 8000e3c:	e006      	b.n	8000e4c <WebServerProcess+0x164>
         }
         else
         {
           LOG(("Send Page after POST command\n"));
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <WebServerProcess+0x1a8>)
 8000e40:	f007 fd60 	bl	8008904 <puts>
 8000e44:	e002      	b.n	8000e4c <WebServerProcess+0x164>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n"));
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <WebServerProcess+0x1ac>)
 8000e48:	f007 fd5c 	bl	8008904 <puts>
  }
  return stopserver;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]

 }
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200005b8 	.word	0x200005b8
 8000e5c:	0800a108 	.word	0x0800a108
 8000e60:	0800a124 	.word	0x0800a124
 8000e64:	200005b4 	.word	0x200005b4
 8000e68:	0800a128 	.word	0x0800a128
 8000e6c:	0800a148 	.word	0x0800a148
 8000e70:	0800a168 	.word	0x0800a168
 8000e74:	0800a170 	.word	0x0800a170
 8000e78:	0800a180 	.word	0x0800a180
 8000e7c:	0800a188 	.word	0x0800a188
 8000e80:	0800a190 	.word	0x0800a190
 8000e84:	0800a198 	.word	0x0800a198
 8000e88:	0800a1a4 	.word	0x0800a1a4
 8000e8c:	0800a1b4 	.word	0x0800a1b4
 8000e90:	0800a1c4 	.word	0x0800a1c4
 8000e94:	0800a1e4 	.word	0x0800a1e4

08000e98 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	b093      	sub	sp, #76	; 0x4c
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8000ea8:	4ab4      	ldr	r2, [pc, #720]	; (800117c <SendWebPage+0x2e4>)
 8000eaa:	4bb5      	ldr	r3, [pc, #724]	; (8001180 <SendWebPage+0x2e8>)
 8000eac:	4614      	mov	r4, r2
 8000eae:	461d      	mov	r5, r3
 8000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ec0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ec2:	8023      	strh	r3, [r4, #0]
 8000ec4:	3402      	adds	r4, #2
 8000ec6:	0c1b      	lsrs	r3, r3, #16
 8000ec8:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 8000eca:	48ac      	ldr	r0, [pc, #688]	; (800117c <SendWebPage+0x2e4>)
 8000ecc:	f7ff f998 	bl	8000200 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4ba9      	ldr	r3, [pc, #676]	; (800117c <SendWebPage+0x2e4>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4aaa      	ldr	r2, [pc, #680]	; (8001184 <SendWebPage+0x2ec>)
 8000eda:	461d      	mov	r5, r3
 8000edc:	4614      	mov	r4, r2
 8000ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee0:	6028      	str	r0, [r5, #0]
 8000ee2:	6069      	str	r1, [r5, #4]
 8000ee4:	60aa      	str	r2, [r5, #8]
 8000ee6:	60eb      	str	r3, [r5, #12]
 8000ee8:	7823      	ldrb	r3, [r4, #0]
 8000eea:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 8000eec:	48a3      	ldr	r0, [pc, #652]	; (800117c <SendWebPage+0x2e4>)
 8000eee:	f7ff f987 	bl	8000200 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4ba1      	ldr	r3, [pc, #644]	; (800117c <SendWebPage+0x2e4>)
 8000ef8:	4413      	add	r3, r2
 8000efa:	4aa3      	ldr	r2, [pc, #652]	; (8001188 <SendWebPage+0x2f0>)
 8000efc:	4614      	mov	r4, r2
 8000efe:	469c      	mov	ip, r3
 8000f00:	f104 0e20 	add.w	lr, r4, #32
 8000f04:	4665      	mov	r5, ip
 8000f06:	4626      	mov	r6, r4
 8000f08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f0a:	6028      	str	r0, [r5, #0]
 8000f0c:	6069      	str	r1, [r5, #4]
 8000f0e:	60aa      	str	r2, [r5, #8]
 8000f10:	60eb      	str	r3, [r5, #12]
 8000f12:	3410      	adds	r4, #16
 8000f14:	f10c 0c10 	add.w	ip, ip, #16
 8000f18:	4574      	cmp	r4, lr
 8000f1a:	d1f3      	bne.n	8000f04 <SendWebPage+0x6c>
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	4623      	mov	r3, r4
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>STM32L4S Discovery kit IoT node : Web server using WiFi with STM32</h2>\r\n");
 8000f24:	4895      	ldr	r0, [pc, #596]	; (800117c <SendWebPage+0x2e4>)
 8000f26:	f7ff f96b 	bl	8000200 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b93      	ldr	r3, [pc, #588]	; (800117c <SendWebPage+0x2e4>)
 8000f30:	4413      	add	r3, r2
 8000f32:	4a96      	ldr	r2, [pc, #600]	; (800118c <SendWebPage+0x2f4>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	4611      	mov	r1, r2
 8000f38:	234e      	movs	r3, #78	; 0x4e
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	f007 fb9f 	bl	800867e <memcpy>
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 8000f40:	488e      	ldr	r0, [pc, #568]	; (800117c <SendWebPage+0x2e4>)
 8000f42:	f7ff f95d 	bl	8000200 <strlen>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b8c      	ldr	r3, [pc, #560]	; (800117c <SendWebPage+0x2e4>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a90      	ldr	r2, [pc, #576]	; (8001190 <SendWebPage+0x2f8>)
 8000f50:	461c      	mov	r4, r3
 8000f52:	4613      	mov	r3, r2
 8000f54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f56:	6020      	str	r0, [r4, #0]
 8000f58:	6061      	str	r1, [r4, #4]
 8000f5a:	60a2      	str	r2, [r4, #8]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8000f60:	4886      	ldr	r0, [pc, #536]	; (800117c <SendWebPage+0x2e4>)
 8000f62:	f7ff f94d 	bl	8000200 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b84      	ldr	r3, [pc, #528]	; (800117c <SendWebPage+0x2e4>)
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a89      	ldr	r2, [pc, #548]	; (8001194 <SendWebPage+0x2fc>)
 8000f70:	4614      	mov	r4, r2
 8000f72:	469c      	mov	ip, r3
 8000f74:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000f78:	4665      	mov	r5, ip
 8000f7a:	4626      	mov	r6, r4
 8000f7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f7e:	6028      	str	r0, [r5, #0]
 8000f80:	6069      	str	r1, [r5, #4]
 8000f82:	60aa      	str	r2, [r5, #8]
 8000f84:	60eb      	str	r3, [r5, #12]
 8000f86:	3410      	adds	r4, #16
 8000f88:	f10c 0c10 	add.w	ip, ip, #16
 8000f8c:	4574      	cmp	r4, lr
 8000f8e:	d1f3      	bne.n	8000f78 <SendWebPage+0xe0>
  sprintf((char *)temp, "%d", temperature);
 8000f90:	79ba      	ldrb	r2, [r7, #6]
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	4980      	ldr	r1, [pc, #512]	; (8001198 <SendWebPage+0x300>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 fcf7 	bl	800898c <siprintf>
  strcat((char *)http, (char *)temp);
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4875      	ldr	r0, [pc, #468]	; (800117c <SendWebPage+0x2e4>)
 8000fa6:	f007 fd11 	bl	80089cc <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 8000faa:	4874      	ldr	r0, [pc, #464]	; (800117c <SendWebPage+0x2e4>)
 8000fac:	f7ff f928 	bl	8000200 <strlen>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b71      	ldr	r3, [pc, #452]	; (800117c <SendWebPage+0x2e4>)
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a78      	ldr	r2, [pc, #480]	; (800119c <SendWebPage+0x304>)
 8000fba:	461d      	mov	r5, r3
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc0:	6028      	str	r0, [r5, #0]
 8000fc2:	6069      	str	r1, [r5, #4]
 8000fc4:	60aa      	str	r2, [r5, #8]
 8000fc6:	60eb      	str	r3, [r5, #12]
 8000fc8:	7823      	ldrb	r3, [r4, #0]
 8000fca:	742b      	strb	r3, [r5, #16]

  if (ledIsOn)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d040      	beq.n	8001054 <SendWebPage+0x1bc>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 8000fd2:	486a      	ldr	r0, [pc, #424]	; (800117c <SendWebPage+0x2e4>)
 8000fd4:	f7ff f914 	bl	8000200 <strlen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b67      	ldr	r3, [pc, #412]	; (800117c <SendWebPage+0x2e4>)
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a6f      	ldr	r2, [pc, #444]	; (80011a0 <SendWebPage+0x308>)
 8000fe2:	4614      	mov	r4, r2
 8000fe4:	469c      	mov	ip, r3
 8000fe6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000fea:	4665      	mov	r5, ip
 8000fec:	4626      	mov	r6, r4
 8000fee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ff0:	6028      	str	r0, [r5, #0]
 8000ff2:	6069      	str	r1, [r5, #4]
 8000ff4:	60aa      	str	r2, [r5, #8]
 8000ff6:	60eb      	str	r3, [r5, #12]
 8000ff8:	3410      	adds	r4, #16
 8000ffa:	f10c 0c10 	add.w	ip, ip, #16
 8000ffe:	4574      	cmp	r4, lr
 8001000:	d1f3      	bne.n	8000fea <SendWebPage+0x152>
 8001002:	4663      	mov	r3, ip
 8001004:	4622      	mov	r2, r4
 8001006:	6810      	ldr	r0, [r2, #0]
 8001008:	6018      	str	r0, [r3, #0]
 800100a:	8891      	ldrh	r1, [r2, #4]
 800100c:	7992      	ldrb	r2, [r2, #6]
 800100e:	8099      	strh	r1, [r3, #4]
 8001010:	719a      	strb	r2, [r3, #6]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8001012:	485a      	ldr	r0, [pc, #360]	; (800117c <SendWebPage+0x2e4>)
 8001014:	f7ff f8f4 	bl	8000200 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b57      	ldr	r3, [pc, #348]	; (800117c <SendWebPage+0x2e4>)
 800101e:	4413      	add	r3, r2
 8001020:	4a60      	ldr	r2, [pc, #384]	; (80011a4 <SendWebPage+0x30c>)
 8001022:	4614      	mov	r4, r2
 8001024:	469c      	mov	ip, r3
 8001026:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800102a:	4665      	mov	r5, ip
 800102c:	4626      	mov	r6, r4
 800102e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001030:	6028      	str	r0, [r5, #0]
 8001032:	6069      	str	r1, [r5, #4]
 8001034:	60aa      	str	r2, [r5, #8]
 8001036:	60eb      	str	r3, [r5, #12]
 8001038:	3410      	adds	r4, #16
 800103a:	f10c 0c10 	add.w	ip, ip, #16
 800103e:	4574      	cmp	r4, lr
 8001040:	d1f3      	bne.n	800102a <SendWebPage+0x192>
 8001042:	4665      	mov	r5, ip
 8001044:	4623      	mov	r3, r4
 8001046:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001048:	6028      	str	r0, [r5, #0]
 800104a:	6069      	str	r1, [r5, #4]
 800104c:	60aa      	str	r2, [r5, #8]
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	81ab      	strh	r3, [r5, #12]
 8001052:	e03f      	b.n	80010d4 <SendWebPage+0x23c>
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8001054:	4849      	ldr	r0, [pc, #292]	; (800117c <SendWebPage+0x2e4>)
 8001056:	f7ff f8d3 	bl	8000200 <strlen>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b47      	ldr	r3, [pc, #284]	; (800117c <SendWebPage+0x2e4>)
 8001060:	4413      	add	r3, r2
 8001062:	4a51      	ldr	r2, [pc, #324]	; (80011a8 <SendWebPage+0x310>)
 8001064:	4614      	mov	r4, r2
 8001066:	469c      	mov	ip, r3
 8001068:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800106c:	4665      	mov	r5, ip
 800106e:	4626      	mov	r6, r4
 8001070:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001072:	6028      	str	r0, [r5, #0]
 8001074:	6069      	str	r1, [r5, #4]
 8001076:	60aa      	str	r2, [r5, #8]
 8001078:	60eb      	str	r3, [r5, #12]
 800107a:	3410      	adds	r4, #16
 800107c:	f10c 0c10 	add.w	ip, ip, #16
 8001080:	4574      	cmp	r4, lr
 8001082:	d1f3      	bne.n	800106c <SendWebPage+0x1d4>
 8001084:	4665      	mov	r5, ip
 8001086:	4623      	mov	r3, r4
 8001088:	cb07      	ldmia	r3!, {r0, r1, r2}
 800108a:	6028      	str	r0, [r5, #0]
 800108c:	6069      	str	r1, [r5, #4]
 800108e:	60aa      	str	r2, [r5, #8]
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	81ab      	strh	r3, [r5, #12]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 8001094:	4839      	ldr	r0, [pc, #228]	; (800117c <SendWebPage+0x2e4>)
 8001096:	f7ff f8b3 	bl	8000200 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <SendWebPage+0x2e4>)
 80010a0:	4413      	add	r3, r2
 80010a2:	4a42      	ldr	r2, [pc, #264]	; (80011ac <SendWebPage+0x314>)
 80010a4:	4614      	mov	r4, r2
 80010a6:	469c      	mov	ip, r3
 80010a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010ac:	4665      	mov	r5, ip
 80010ae:	4626      	mov	r6, r4
 80010b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010b2:	6028      	str	r0, [r5, #0]
 80010b4:	6069      	str	r1, [r5, #4]
 80010b6:	60aa      	str	r2, [r5, #8]
 80010b8:	60eb      	str	r3, [r5, #12]
 80010ba:	3410      	adds	r4, #16
 80010bc:	f10c 0c10 	add.w	ip, ip, #16
 80010c0:	4574      	cmp	r4, lr
 80010c2:	d1f3      	bne.n	80010ac <SendWebPage+0x214>
 80010c4:	4663      	mov	r3, ip
 80010c6:	4622      	mov	r2, r4
 80010c8:	6810      	ldr	r0, [r2, #0]
 80010ca:	6018      	str	r0, [r3, #0]
 80010cc:	8891      	ldrh	r1, [r2, #4]
 80010ce:	7992      	ldrb	r2, [r2, #6]
 80010d0:	8099      	strh	r1, [r3, #4]
 80010d2:	719a      	strb	r2, [r3, #6]
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 80010d4:	4829      	ldr	r0, [pc, #164]	; (800117c <SendWebPage+0x2e4>)
 80010d6:	f7ff f893 	bl	8000200 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <SendWebPage+0x2e4>)
 80010e0:	4413      	add	r3, r2
 80010e2:	4a33      	ldr	r2, [pc, #204]	; (80011b0 <SendWebPage+0x318>)
 80010e4:	4614      	mov	r4, r2
 80010e6:	469c      	mov	ip, r3
 80010e8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010ec:	4665      	mov	r5, ip
 80010ee:	4626      	mov	r6, r4
 80010f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010f2:	6028      	str	r0, [r5, #0]
 80010f4:	6069      	str	r1, [r5, #4]
 80010f6:	60aa      	str	r2, [r5, #8]
 80010f8:	60eb      	str	r3, [r5, #12]
 80010fa:	3410      	adds	r4, #16
 80010fc:	f10c 0c10 	add.w	ip, ip, #16
 8001100:	4574      	cmp	r4, lr
 8001102:	d1f3      	bne.n	80010ec <SendWebPage+0x254>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8001104:	481d      	ldr	r0, [pc, #116]	; (800117c <SendWebPage+0x2e4>)
 8001106:	f7ff f87b 	bl	8000200 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <SendWebPage+0x2e4>)
 8001110:	4413      	add	r3, r2
 8001112:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <SendWebPage+0x31c>)
 8001114:	461d      	mov	r5, r3
 8001116:	4614      	mov	r4, r2
 8001118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111a:	6028      	str	r0, [r5, #0]
 800111c:	6069      	str	r1, [r5, #4]
 800111e:	60aa      	str	r2, [r5, #8]
 8001120:	60eb      	str	r3, [r5, #12]
 8001122:	8823      	ldrh	r3, [r4, #0]
 8001124:	78a2      	ldrb	r2, [r4, #2]
 8001126:	822b      	strh	r3, [r5, #16]
 8001128:	4613      	mov	r3, r2
 800112a:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <SendWebPage+0x2e4>)
 800112e:	f7ff f867 	bl	8000200 <strlen>
 8001132:	4603      	mov	r3, r0
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 010a 	add.w	r1, r7, #10
 800113a:	f242 7310 	movw	r3, #10000	; 0x2710
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	460b      	mov	r3, r1
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <SendWebPage+0x2e4>)
 8001144:	2000      	movs	r0, #0
 8001146:	f001 feff 	bl	8002f48 <WIFI_SendData>
 800114a:	4603      	mov	r3, r0
 800114c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8001150:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10a      	bne.n	800116e <SendWebPage+0x2d6>
 8001158:	897b      	ldrh	r3, [r7, #10]
 800115a:	461c      	mov	r4, r3
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <SendWebPage+0x2e4>)
 800115e:	f7ff f84f 	bl	8000200 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	429c      	cmp	r4, r3
 8001166:	d002      	beq.n	800116e <SendWebPage+0x2d6>
  {
    ret = WIFI_STATUS_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return ret;
 800116e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001172:	4618      	mov	r0, r3
 8001174:	3744      	adds	r7, #68	; 0x44
 8001176:	46bd      	mov	sp, r7
 8001178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117a:	bf00      	nop
 800117c:	200001b0 	.word	0x200001b0
 8001180:	0800a1fc 	.word	0x0800a1fc
 8001184:	0800a23c 	.word	0x0800a23c
 8001188:	0800a250 	.word	0x0800a250
 800118c:	0800a274 	.word	0x0800a274
 8001190:	0800a2c4 	.word	0x0800a2c4
 8001194:	0800a2d4 	.word	0x0800a2d4
 8001198:	0800a314 	.word	0x0800a314
 800119c:	0800a318 	.word	0x0800a318
 80011a0:	0800a32c 	.word	0x0800a32c
 80011a4:	0800a364 	.word	0x0800a364
 80011a8:	0800a3a4 	.word	0x0800a3a4
 80011ac:	0800a3e4 	.word	0x0800a3e4
 80011b0:	0800a41c 	.word	0x0800a41c
 80011b4:	0800a44c 	.word	0x0800a44c

080011b8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b096      	sub	sp, #88	; 0x58
 80011bc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011be:	2310      	movs	r3, #16
 80011c0:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011c6:	2360      	movs	r3, #96	; 0x60
 80011c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011d2:	2301      	movs	r3, #1
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011da:	2328      	movs	r3, #40	; 0x28
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011de:	2302      	movs	r3, #2
 80011e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 80011e2:	2307      	movs	r3, #7
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011e6:	2304      	movs	r3, #4
 80011e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fe67 	bl	8004ec0 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d000      	beq.n	80011fa <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 80011f8:	e7fe      	b.n	80011f8 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80011fa:	230f      	movs	r3, #15
 80011fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	2303      	movs	r3, #3
 8001200:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800120e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001212:	2104      	movs	r1, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fa79 	bl	800570c <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d000      	beq.n	8001222 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 8001220:	e7fe      	b.n	8001220 <SystemClock_Config+0x68>
  }
}
 8001222:	bf00      	nop
 8001224:	3758      	adds	r7, #88	; 0x58
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <Button_Reset>:
/**
  * @brief Reset button state
  *        To be called before Button_WaitForPush()
  */
void Button_Reset()
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  button_flag = 0;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <Button_Reset+0x14>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	200000d4 	.word	0x200000d4

08001244 <Button_WaitForPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForPush(uint32_t delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t time_out = HAL_GetTick() + delay;
 800124c:	f002 fa7c 	bl	8003748 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

  do
  {
    if (button_flag > 0)
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <Button_WaitForPush+0x44>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <Button_WaitForPush+0x26>
    {
      return button_flag;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <Button_WaitForPush+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	e009      	b.n	800127e <Button_WaitForPush+0x3a>
    }
    HAL_Delay(100);
 800126a:	2064      	movs	r0, #100	; 0x64
 800126c:	f002 fa78 	bl	8003760 <HAL_Delay>
  }
  while (HAL_GetTick() < time_out);
 8001270:	f002 fa6a 	bl	8003748 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4293      	cmp	r3, r2
 800127a:	d8ed      	bhi.n	8001258 <Button_WaitForPush+0x14>

  return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000d4 	.word	0x200000d4

0800128c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8001294:	1d39      	adds	r1, r7, #4
 8001296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129a:	2201      	movs	r2, #1
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <__io_putchar+0x20>)
 800129e:	f006 fbac 	bl	80079fa <HAL_UART_Transmit>

  return ch;
 80012a2:	687b      	ldr	r3, [r7, #4]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20001340 	.word	0x20001340

080012b0 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 80012ba:	bf00      	nop
 80012bc:	1df9      	adds	r1, r7, #7
 80012be:	f247 5330 	movw	r3, #30000	; 0x7530
 80012c2:	2201      	movs	r2, #1
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <__io_getchar+0x2c>)
 80012c6:	f006 fc2f 	bl	8007b28 <HAL_UART_Receive>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f5      	bne.n	80012bc <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20001340 	.word	0x20001340

080012e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_EXTI_Callback+0x1e>
 80012f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012f4:	d000      	beq.n	80012f8 <HAL_GPIO_EXTI_Callback+0x18>
      SPI_WIFI_ISR();
      break;
    }
    default:
    {
      break;
 80012f6:	e005      	b.n	8001304 <HAL_GPIO_EXTI_Callback+0x24>
      Button_ISR();
 80012f8:	f000 f812 	bl	8001320 <Button_ISR>
      break;
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_EXTI_Callback+0x24>
      SPI_WIFI_ISR();
 80012fe:	f001 fcf3 	bl	8002ce8 <SPI_WIFI_ISR>
      break;
 8001302:	bf00      	nop
    }
  }
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <SPI3_IRQHandler+0x10>)
 8001312:	f005 fcb1 	bl	8006c78 <HAL_SPI_IRQHandler>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200009dc 	.word	0x200009dc

08001320 <Button_ISR>:

/**
  * @brief Update button ISR status
  */
static void Button_ISR(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  button_flag++;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <Button_ISR+0x1c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	3301      	adds	r3, #1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b03      	ldr	r3, [pc, #12]	; (800133c <Button_ISR+0x1c>)
 8001330:	701a      	strb	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200000d4 	.word	0x200000d4

08001340 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001394:	f002 f9c4 	bl	8003720 <HAL_IncTick>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013a0:	2002      	movs	r0, #2
 80013a2:	f002 ffed 	bl	8004380 <HAL_GPIO_EXTI_IRQHandler>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}

080013aa <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80013ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013b2:	f002 ffe5 	bl	8004380 <HAL_GPIO_EXTI_IRQHandler>
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
	/* The I/O library uses an internal buffer */
		/* It asks for 1024 characters even if only getc() is used. */
		/* If we use a for(;;) loop on the number of characters requested, */
		/* the user is forced to enter the exact number requested, even if only one is needed. */
		/* So here we return only 1 character even if requested length is > 1 */
		*ptr = __io_getchar();
 80013c6:	f7ff ff73 	bl	80012b0 <__io_getchar>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	701a      	strb	r2, [r3, #0]

		return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e009      	b.n	8001402 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	60ba      	str	r2, [r7, #8]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff48 	bl	800128c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf1      	blt.n	80013ee <_write+0x12>
	}
	return len;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_close>:

int _close(int file)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143c:	605a      	str	r2, [r3, #4]
	return 0;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_isatty>:

int _isatty(int file)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	return 1;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
	return 0;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x50>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x16>
		heap_end = &end;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <_sbrk+0x50>)
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <_sbrk+0x54>)
 8001490:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <_sbrk+0x50>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <_sbrk+0x50>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	466a      	mov	r2, sp
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d907      	bls.n	80014b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014a6:	f007 f84d 	bl	8008544 <__errno>
 80014aa:	4602      	mov	r2, r0
 80014ac:	230c      	movs	r3, #12
 80014ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	e006      	b.n	80014c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <_sbrk+0x50>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a03      	ldr	r2, [pc, #12]	; (80014cc <_sbrk+0x50>)
 80014c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200009b8 	.word	0x200009b8
 80014d0:	20001420 	.word	0x20001420

080014d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <SystemInit+0x64>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <SystemInit+0x64>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <SystemInit+0x68>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <SystemInit+0x68>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <SystemInit+0x68>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <SystemInit+0x68>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <SystemInit+0x68>)
 8001500:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001504:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001508:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <SystemInit+0x68>)
 800150c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001510:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <SystemInit+0x68>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <SystemInit+0x68>)
 8001518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <SystemInit+0x68>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SystemInit+0x64>)
 8001526:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152a:	609a      	str	r2, [r3, #8]
#endif
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00
 800153c:	40021000 	.word	0x40021000

08001540 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b2f      	cmp	r3, #47	; 0x2f
 800154e:	d906      	bls.n	800155e <Hex2Num+0x1e>
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b39      	cmp	r3, #57	; 0x39
 8001554:	d803      	bhi.n	800155e <Hex2Num+0x1e>
        return a - '0';
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3b30      	subs	r3, #48	; 0x30
 800155a:	b2db      	uxtb	r3, r3
 800155c:	e014      	b.n	8001588 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b60      	cmp	r3, #96	; 0x60
 8001562:	d906      	bls.n	8001572 <Hex2Num+0x32>
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b66      	cmp	r3, #102	; 0x66
 8001568:	d803      	bhi.n	8001572 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	3b57      	subs	r3, #87	; 0x57
 800156e:	b2db      	uxtb	r3, r3
 8001570:	e00a      	b.n	8001588 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b40      	cmp	r3, #64	; 0x40
 8001576:	d906      	bls.n	8001586 <Hex2Num+0x46>
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b46      	cmp	r3, #70	; 0x46
 800157c:	d803      	bhi.n	8001586 <Hex2Num+0x46>
        return (a - 'A') + 10;
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	3b37      	subs	r3, #55	; 0x37
 8001582:	b2db      	uxtb	r3, r3
 8001584:	e000      	b.n	8001588 <Hex2Num+0x48>
    }

    return 0;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80015a6:	e012      	b.n	80015ce <ParseHexNumber+0x3a>
        sum <<= 4;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ffc4 	bl	8001540 <Hex2Num>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
        ptr++;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3301      	adds	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
        i++;
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	3301      	adds	r3, #1
 80015cc:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b2f      	cmp	r3, #47	; 0x2f
 80015d4:	d903      	bls.n	80015de <ParseHexNumber+0x4a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b39      	cmp	r3, #57	; 0x39
 80015dc:	d9e4      	bls.n	80015a8 <ParseHexNumber+0x14>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b60      	cmp	r3, #96	; 0x60
 80015e4:	d903      	bls.n	80015ee <ParseHexNumber+0x5a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b66      	cmp	r3, #102	; 0x66
 80015ec:	d9dc      	bls.n	80015a8 <ParseHexNumber+0x14>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b40      	cmp	r3, #64	; 0x40
 80015f4:	d903      	bls.n	80015fe <ParseHexNumber+0x6a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b46      	cmp	r3, #70	; 0x46
 80015fc:	d9d4      	bls.n	80015a8 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <ParseHexNumber+0x76>
        *cnt = i;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	7afa      	ldrb	r2, [r7, #11]
 8001608:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	2300      	movs	r3, #0
 8001624:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b2d      	cmp	r3, #45	; 0x2d
 8001630:	d119      	bne.n	8001666 <ParseNumber+0x52>
        minus = 1;
 8001632:	2301      	movs	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3301      	adds	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
        i++;
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	3301      	adds	r3, #1
 8001640:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8001642:	e010      	b.n	8001666 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3b30      	subs	r3, #48	; 0x30
 8001656:	4413      	add	r3, r2
 8001658:	60bb      	str	r3, [r7, #8]
        ptr++;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3301      	adds	r3, #1
 800165e:	607b      	str	r3, [r7, #4]
        i++;
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	3301      	adds	r3, #1
 8001664:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b2f      	cmp	r3, #47	; 0x2f
 800166c:	d903      	bls.n	8001676 <ParseNumber+0x62>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b39      	cmp	r3, #57	; 0x39
 8001674:	d9e6      	bls.n	8001644 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <ParseNumber+0x6e>
        *cnt = i;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	7bba      	ldrb	r2, [r7, #14]
 8001680:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <ParseNumber+0x7a>
        return 0 - sum;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	425b      	negs	r3, r3
 800168c:	e000      	b.n	8001690 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 800168e:	68bb      	ldr	r3, [r7, #8]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80016aa:	e019      	b.n	80016e0 <ParseMAC+0x44>
    hexcnt = 1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b3a      	cmp	r3, #58	; 0x3a
 80016b6:	d00e      	beq.n	80016d6 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80016b8:	f107 030e 	add.w	r3, r7, #14
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff68 	bl	8001594 <ParseHexNumber>
 80016c4:	4601      	mov	r1, r0
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	73fa      	strb	r2, [r7, #15]
 80016cc:	461a      	mov	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	b2ca      	uxtb	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e1      	bne.n	80016ac <ParseMAC+0x10>
  }
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80016fe:	e019      	b.n	8001734 <ParseIP+0x44>
    hexcnt = 1;
 8001700:	2301      	movs	r3, #1
 8001702:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b2e      	cmp	r3, #46	; 0x2e
 800170a:	d00e      	beq.n	800172a <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800170c:	f107 030e 	add.w	r3, r7, #14
 8001710:	4619      	mov	r1, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ff7e 	bl	8001614 <ParseNumber>
 8001718:	4601      	mov	r1, r0
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	73fa      	strb	r2, [r7, #15]
 8001720:	461a      	mov	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	b2ca      	uxtb	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e1      	bne.n	8001700 <ParseIP+0x10>
  }
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	3302      	adds	r3, #2
 8001756:	4934      	ldr	r1, [pc, #208]	; (8001828 <AT_ParseInfo+0xe4>)
 8001758:	4618      	mov	r0, r3
 800175a:	f007 f987 	bl	8008a6c <strtok>
 800175e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001760:	e05a      	b.n	8001818 <AT_ParseInfo+0xd4>
    switch (num++) {
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	72fa      	strb	r2, [r7, #11]
 8001768:	2b06      	cmp	r3, #6
 800176a:	d84f      	bhi.n	800180c <AT_ParseInfo+0xc8>
 800176c:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <AT_ParseInfo+0x30>)
 800176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001772:	bf00      	nop
 8001774:	08001791 	.word	0x08001791
 8001778:	0800179f 	.word	0x0800179f
 800177c:	080017af 	.word	0x080017af
 8001780:	080017bf 	.word	0x080017bf
 8001784:	080017cf 	.word	0x080017cf
 8001788:	080017df 	.word	0x080017df
 800178c:	080017f3 	.word	0x080017f3
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	4618      	mov	r0, r3
 8001798:	f007 f939 	bl	8008a0e <strncpy>
      break;
 800179c:	e037      	b.n	800180e <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3320      	adds	r3, #32
 80017a2:	2218      	movs	r2, #24
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f007 f931 	bl	8008a0e <strncpy>
      break;
 80017ac:	e02f      	b.n	800180e <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3338      	adds	r3, #56	; 0x38
 80017b2:	2210      	movs	r2, #16
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f007 f929 	bl	8008a0e <strncpy>
      break;
 80017bc:	e027      	b.n	800180e <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3348      	adds	r3, #72	; 0x48
 80017c2:	2210      	movs	r2, #16
 80017c4:	68f9      	ldr	r1, [r7, #12]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f007 f921 	bl	8008a0e <strncpy>
      break;
 80017cc:	e01f      	b.n	800180e <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3358      	adds	r3, #88	; 0x58
 80017d2:	2210      	movs	r2, #16
 80017d4:	68f9      	ldr	r1, [r7, #12]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f007 f919 	bl	8008a0e <strncpy>
      break;
 80017dc:	e017      	b.n	800180e <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80017de:	2100      	movs	r1, #0
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff ff17 	bl	8001614 <ParseNumber>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 80017f0:	e00d      	b.n	800180e <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80017f2:	490e      	ldr	r1, [pc, #56]	; (800182c <AT_ParseInfo+0xe8>)
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f007 f939 	bl	8008a6c <strtok>
 80017fa:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3368      	adds	r3, #104	; 0x68
 8001800:	2220      	movs	r2, #32
 8001802:	68f9      	ldr	r1, [r7, #12]
 8001804:	4618      	mov	r0, r3
 8001806:	f007 f902 	bl	8008a0e <strncpy>
      break;
 800180a:	e000      	b.n	800180e <AT_ParseInfo+0xca>

    default: break;
 800180c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800180e:	4906      	ldr	r1, [pc, #24]	; (8001828 <AT_ParseInfo+0xe4>)
 8001810:	2000      	movs	r0, #0
 8001812:	f007 f92b 	bl	8008a6c <strtok>
 8001816:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1a1      	bne.n	8001762 <AT_ParseInfo+0x1e>
  }
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	0800a490 	.word	0x0800a490
 800182c:	0800a494 	.word	0x0800a494

08001830 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3302      	adds	r3, #2
 8001842:	4952      	ldr	r1, [pc, #328]	; (800198c <AT_ParseConnSettings+0x15c>)
 8001844:	4618      	mov	r0, r3
 8001846:	f007 f911 	bl	8008a6c <strtok>
 800184a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800184c:	e095      	b.n	800197a <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	73fa      	strb	r2, [r7, #15]
 8001854:	2b0b      	cmp	r3, #11
 8001856:	d87f      	bhi.n	8001958 <AT_ParseConnSettings+0x128>
 8001858:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <AT_ParseConnSettings+0x30>)
 800185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185e:	bf00      	nop
 8001860:	08001891 	.word	0x08001891
 8001864:	0800189f 	.word	0x0800189f
 8001868:	080018af 	.word	0x080018af
 800186c:	080018c3 	.word	0x080018c3
 8001870:	080018d7 	.word	0x080018d7
 8001874:	080018eb 	.word	0x080018eb
 8001878:	080018f9 	.word	0x080018f9
 800187c:	08001907 	.word	0x08001907
 8001880:	08001915 	.word	0x08001915
 8001884:	08001923 	.word	0x08001923
 8001888:	08001931 	.word	0x08001931
 800188c:	08001945 	.word	0x08001945
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2221      	movs	r2, #33	; 0x21
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	4618      	mov	r0, r3
 8001898:	f007 f8b9 	bl	8008a0e <strncpy>
      break;
 800189c:	e05d      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	3321      	adds	r3, #33	; 0x21
 80018a2:	2221      	movs	r2, #33	; 0x21
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f007 f8b1 	bl	8008a0e <strncpy>
      break;
 80018ac:	e055      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80018ae:	2100      	movs	r1, #0
 80018b0:	68b8      	ldr	r0, [r7, #8]
 80018b2:	f7ff feaf 	bl	8001614 <ParseNumber>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80018c0:	e04b      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80018c2:	2100      	movs	r1, #0
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f7ff fea5 	bl	8001614 <ParseNumber>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80018d4:	e041      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80018d6:	2100      	movs	r1, #0
 80018d8:	68b8      	ldr	r0, [r7, #8]
 80018da:	f7ff fe9b 	bl	8001614 <ParseNumber>
 80018de:	4603      	mov	r3, r0
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80018e8:	e037      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	3348      	adds	r3, #72	; 0x48
 80018ee:	4619      	mov	r1, r3
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f7ff fefd 	bl	80016f0 <ParseIP>
      break;
 80018f6:	e030      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	334c      	adds	r3, #76	; 0x4c
 80018fc:	4619      	mov	r1, r3
 80018fe:	68b8      	ldr	r0, [r7, #8]
 8001900:	f7ff fef6 	bl	80016f0 <ParseIP>
      break;
 8001904:	e029      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	3350      	adds	r3, #80	; 0x50
 800190a:	4619      	mov	r1, r3
 800190c:	68b8      	ldr	r0, [r7, #8]
 800190e:	f7ff feef 	bl	80016f0 <ParseIP>
      break;
 8001912:	e022      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3354      	adds	r3, #84	; 0x54
 8001918:	4619      	mov	r1, r3
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f7ff fee8 	bl	80016f0 <ParseIP>
      break;
 8001920:	e01b      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	3358      	adds	r3, #88	; 0x58
 8001926:	4619      	mov	r1, r3
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f7ff fee1 	bl	80016f0 <ParseIP>
      break;
 800192e:	e014      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001930:	2100      	movs	r1, #0
 8001932:	68b8      	ldr	r0, [r7, #8]
 8001934:	f7ff fe6e 	bl	8001614 <ParseNumber>
 8001938:	4603      	mov	r3, r0
 800193a:	b2da      	uxtb	r2, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8001942:	e00a      	b.n	800195a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8001944:	2100      	movs	r1, #0
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	f7ff fe64 	bl	8001614 <ParseNumber>
 800194c:	4603      	mov	r3, r0
 800194e:	b2da      	uxtb	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001956:	e000      	b.n	800195a <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001958:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800195a:	490c      	ldr	r1, [pc, #48]	; (800198c <AT_ParseConnSettings+0x15c>)
 800195c:	2000      	movs	r0, #0
 800195e:	f007 f885 	bl	8008a6c <strtok>
 8001962:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <AT_ParseConnSettings+0x14a>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3b01      	subs	r3, #1
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b2c      	cmp	r3, #44	; 0x2c
 8001972:	d102      	bne.n	800197a <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	3301      	adds	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f47f af66 	bne.w	800184e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	0800a490 	.word	0x0800a490

08001990 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3302      	adds	r3, #2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b31      	cmp	r3, #49	; 0x31
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	701a      	strb	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f7fe fc12 	bl	8000200 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	b299      	uxth	r1, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80019e6:	461a      	mov	r2, r3
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	47a0      	blx	r4
 80019ec:	4603      	mov	r3, r0
 80019ee:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	dd3e      	ble.n	8001a74 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001a02:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	dd27      	ble.n	8001a66 <AT_ExecuteCommand+0xaa>
 8001a16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a1e:	dc22      	bgt.n	8001a66 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001a20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a24:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a28:	d105      	bne.n	8001a36 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8001a2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001a36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 8001a42:	490f      	ldr	r1, [pc, #60]	; (8001a80 <AT_ExecuteCommand+0xc4>)
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f006 fff7 	bl	8008a38 <strstr>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <AT_ExecuteCommand+0x98>
      {
        return ES_WIFI_STATUS_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e010      	b.n	8001a76 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001a54:	490b      	ldr	r1, [pc, #44]	; (8001a84 <AT_ExecuteCommand+0xc8>)
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f006 ffee 	bl	8008a38 <strstr>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <AT_ExecuteCommand+0xaa>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001a62:	2305      	movs	r3, #5
 8001a64:	e007      	b.n	8001a76 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001a66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a6a:	f113 0f04 	cmn.w	r3, #4
 8001a6e:	d101      	bne.n	8001a74 <AT_ExecuteCommand+0xb8>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001a70:	2306      	movs	r3, #6
 8001a72:	e000      	b.n	8001a76 <AT_ExecuteCommand+0xba>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001a74:	2304      	movs	r3, #4
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	0800a4a4 	.word	0x0800a4a4
 8001a84:	0800a4b0 	.word	0x0800a4b0

08001a88 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 8001aa2:	68b8      	ldr	r0, [r7, #8]
 8001aa4:	f7fe fbac 	bl	8000200 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001aac:	8a7b      	ldrh	r3, [r7, #18]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <AT_RequestSendData+0x32>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e053      	b.n	8001b62 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001ac6:	8a79      	ldrh	r1, [r7, #18]
 8001ac8:	68b8      	ldr	r0, [r7, #8]
 8001aca:	4798      	blx	r3
 8001acc:	4603      	mov	r3, r0
 8001ace:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001ad0:	8a3a      	ldrh	r2, [r7, #16]
 8001ad2:	8a7b      	ldrh	r3, [r7, #18]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d143      	bne.n	8001b60 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001ae4:	8879      	ldrh	r1, [r7, #2]
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001aee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d131      	bne.n	8001b5c <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001b04:	2100      	movs	r1, #0
 8001b06:	6a38      	ldr	r0, [r7, #32]
 8001b08:	4798      	blx	r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001b0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	dd19      	ble.n	8001b4a <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8001b16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b1a:	6a3a      	ldr	r2, [r7, #32]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001b22:	4912      	ldr	r1, [pc, #72]	; (8001b6c <AT_RequestSendData+0xe4>)
 8001b24:	6a38      	ldr	r0, [r7, #32]
 8001b26:	f006 ff87 	bl	8008a38 <strstr>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <AT_RequestSendData+0xac>
        {
          return ES_WIFI_STATUS_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e016      	b.n	8001b62 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <AT_RequestSendData+0xe8>)
 8001b36:	6a38      	ldr	r0, [r7, #32]
 8001b38:	f006 ff7e 	bl	8008a38 <strstr>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <AT_RequestSendData+0xbe>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001b42:	2305      	movs	r3, #5
 8001b44:	e00d      	b.n	8001b62 <AT_RequestSendData+0xda>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 8001b46:	2302      	movs	r3, #2
 8001b48:	e00b      	b.n	8001b62 <AT_RequestSendData+0xda>
        }
      }
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001b4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b4e:	f113 0f04 	cmn.w	r3, #4
 8001b52:	d101      	bne.n	8001b58 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001b54:	2306      	movs	r3, #6
 8001b56:	e004      	b.n	8001b62 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e002      	b.n	8001b62 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e000      	b.n	8001b62 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001b60:	2304      	movs	r3, #4
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	0800a4a4 	.word	0x0800a4a4
 8001b70:	0800a4b0 	.word	0x0800a4b0

08001b74 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b88:	613b      	str	r3, [r7, #16]

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001b90:	68b8      	ldr	r0, [r7, #8]
 8001b92:	f7fe fb35 	bl	8000200 <strlen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68b8      	ldr	r0, [r7, #8]
 8001ba4:	47a0      	blx	r4
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	dd6f      	ble.n	8001c8c <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001bb8:	2100      	movs	r1, #0
 8001bba:	6938      	ldr	r0, [r7, #16]
 8001bbc:	4798      	blx	r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	617b      	str	r3, [r7, #20]
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f113 0f04 	cmn.w	r3, #4
 8001bc8:	d101      	bne.n	8001bce <AT_RequestReceiveData+0x5a>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
 8001bca:	2306      	movs	r3, #6
 8001bcc:	e05f      	b.n	8001c8e <AT_RequestReceiveData+0x11a>
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b0d      	cmp	r3, #13
 8001bd4:	d104      	bne.n	8001be0 <AT_RequestReceiveData+0x6c>
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b0a      	cmp	r3, #10
 8001bde:	d001      	beq.n	8001be4 <AT_RequestReceiveData+0x70>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8001be0:	2304      	movs	r3, #4
 8001be2:	e054      	b.n	8001c8e <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3b02      	subs	r3, #2
 8001be8:	617b      	str	r3, [r7, #20]
    p+=2;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	3302      	adds	r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b07      	cmp	r3, #7
 8001bf4:	d94a      	bls.n	8001c8c <AT_RequestReceiveData+0x118>
    {
     while(len && (p[len-1]==0x15)) len--;
 8001bf6:	e002      	b.n	8001bfe <AT_RequestReceiveData+0x8a>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <AT_RequestReceiveData+0x9e>
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b15      	cmp	r3, #21
 8001c10:	d0f2      	beq.n	8001bf8 <AT_RequestReceiveData+0x84>
     p[len] = '\0';
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3b08      	subs	r3, #8
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4413      	add	r3, r2
 8001c24:	491c      	ldr	r1, [pc, #112]	; (8001c98 <AT_RequestReceiveData+0x124>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f006 ff06 	bl	8008a38 <strstr>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d016      	beq.n	8001c60 <AT_RequestReceiveData+0xec>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b08      	subs	r3, #8
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d202      	bcs.n	8001c4e <AT_RequestReceiveData+0xda>
       {
         *ReadData = Reqlen;
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	6939      	ldr	r1, [r7, #16]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f006 fd11 	bl	800867e <memcpy>
       return ES_WIFI_STATUS_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e016      	b.n	8001c8e <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3b04      	subs	r3, #4
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4413      	add	r3, r2
 8001c68:	2204      	movs	r2, #4
 8001c6a:	490c      	ldr	r1, [pc, #48]	; (8001c9c <AT_RequestReceiveData+0x128>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f006 fcf7 	bl	8008660 <memcmp>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <AT_RequestReceiveData+0x10e>
     {
       *ReadData = 0;
 8001c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001c7e:	2305      	movs	r3, #5
 8001c80:	e005      	b.n	8001c8e <AT_RequestReceiveData+0x11a>
     }

     *ReadData = 0;
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	2200      	movs	r2, #0
 8001c86:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001c88:	2305      	movs	r3, #5
 8001c8a:	e000      	b.n	8001c8e <AT_RequestReceiveData+0x11a>
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001c8c:	2304      	movs	r3, #4
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd90      	pop	{r4, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0800a4a4 	.word	0x0800a4a4
 8001c9c:	0800a4b8 	.word	0x0800a4b8

08001ca0 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f247 5230 	movw	r2, #30000	; 0x7530
 8001cb2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	4798      	blx	r3
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d113      	bne.n	8001cee <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ccc:	461a      	mov	r2, r3
 8001cce:	490a      	ldr	r1, [pc, #40]	; (8001cf8 <ES_WIFI_Init+0x58>)
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff fe73 	bl	80019bc <AT_ExecuteCommand>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fd2b 	bl	8001744 <AT_ParseInfo>
    }
  }
  return ret;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	0800a4c0 	.word	0x0800a4c0

08001cfc <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <ES_WIFI_RegisterBusIO+0x2c>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <ES_WIFI_RegisterBusIO+0x2c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <ES_WIFI_RegisterBusIO+0x2c>
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <ES_WIFI_RegisterBusIO+0x2c>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e014      	b.n	8001d56 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <ES_WIFI_Connect+0x1a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <ES_WIFI_Connect+0x20>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	75fb      	strb	r3, [r7, #23]
 8001d82:	e061      	b.n	8001e48 <ES_WIFI_Connect+0xe4>
  }
  else
  {
    LOCK_WIFI();

    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4931      	ldr	r1, [pc, #196]	; (8001e54 <ES_WIFI_Connect+0xf0>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f006 fdfc 	bl	800898c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001da0:	461a      	mov	r2, r3
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff fe0a 	bl	80019bc <AT_ExecuteCommand>
 8001da8:	4603      	mov	r3, r0
 8001daa:	75fb      	strb	r3, [r7, #23]
    if(ret == ES_WIFI_STATUS_OK)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d14a      	bne.n	8001e48 <ES_WIFI_Connect+0xe4>
    {
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4927      	ldr	r1, [pc, #156]	; (8001e58 <ES_WIFI_Connect+0xf4>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f006 fde5 	bl	800898c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7ff fdf3 	bl	80019bc <AT_ExecuteCommand>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d133      	bne.n	8001e48 <ES_WIFI_Connect+0xe4>
      {
        Obj->Security = SecType;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	491a      	ldr	r1, [pc, #104]	; (8001e5c <ES_WIFI_Connect+0xf8>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f006 fdca 	bl	800898c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e04:	461a      	mov	r2, r3
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f7ff fdd8 	bl	80019bc <AT_ExecuteCommand>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	75fb      	strb	r3, [r7, #23]

        if(ret == ES_WIFI_STATUS_OK)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <ES_WIFI_Connect+0xe4>
        {
          sprintf((char*)Obj->CmdData,"C0\r");
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e1c:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <ES_WIFI_Connect+0xfc>)
 8001e1e:	6810      	ldr	r0, [r2, #0]
 8001e20:	6018      	str	r0, [r3, #0]
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff fdc3 	bl	80019bc <AT_ExecuteCommand>
 8001e36:	4603      	mov	r3, r0
 8001e38:	75fb      	strb	r3, [r7, #23]
          if(ret == ES_WIFI_STATUS_OK)
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d103      	bne.n	8001e48 <ES_WIFI_Connect+0xe4>
          {
            Obj->NetSettings.IsConnected = 1;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
      }
    }

    UNLOCK_WIFI();
  }
  return ret;
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	0800a4d8 	.word	0x0800a4d8
 8001e58:	0800a4e0 	.word	0x0800a4e0
 8001e5c:	0800a4e8 	.word	0x0800a4e8
 8001e60:	0800a4f0 	.word	0x0800a4f0

08001e64 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e72:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <ES_WIFI_IsConnected+0x54>)
 8001e74:	6810      	ldr	r0, [r2, #0]
 8001e76:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e84:	461a      	mov	r2, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fd98 	bl	80019bc <AT_ExecuteCommand>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d108      	bne.n	8001ea8 <ES_WIFI_IsConnected+0x44>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	33d2      	adds	r3, #210	; 0xd2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f7ff fd74 	bl	8001990 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	0800a4f4 	.word	0x0800a4f4

08001ebc <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <ES_WIFI_GetNetworkSettings+0x50>)
 8001ecc:	6810      	ldr	r0, [r2, #0]
 8001ece:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001edc:	461a      	mov	r2, r3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fd6c 	bl	80019bc <AT_ExecuteCommand>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d108      	bne.n	8001f00 <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	338d      	adds	r3, #141	; 0x8d
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7ff fc98 	bl	8001830 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	0800a4fc 	.word	0x0800a4fc

08001f10 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <ES_WIFI_GetMACAddress+0x58>)
 8001f22:	6810      	ldr	r0, [r2, #0]
 8001f24:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f32:	461a      	mov	r2, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fd41 	bl	80019bc <AT_ExecuteCommand>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10c      	bne.n	8001f5e <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <ES_WIFI_GetMACAddress+0x5c>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f006 fd8c 	bl	8008a6c <strtok>
 8001f54:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8001f56:	6839      	ldr	r1, [r7, #0]
 8001f58:	68b8      	ldr	r0, [r7, #8]
 8001f5a:	f7ff fb9f 	bl	800169c <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	0800a558 	.word	0x0800a558
 8001f6c:	0800a55c 	.word	0x0800a55c

08001f70 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	789b      	ldrb	r3, [r3, #2]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	494d      	ldr	r1, [pc, #308]	; (80020c0 <ES_WIFI_StartServerSingleConn+0x150>)
 8001f8c:	f006 fcfe 	bl	800898c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fd0c 	bl	80019bc <AT_ExecuteCommand>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	e082      	b.n	80020b8 <ES_WIFI_StartServerSingleConn+0x148>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d01c      	beq.n	8001ff4 <ES_WIFI_StartServerSingleConn+0x84>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d018      	beq.n	8001ff4 <ES_WIFI_StartServerSingleConn+0x84>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fc8:	493e      	ldr	r1, [pc, #248]	; (80020c4 <ES_WIFI_StartServerSingleConn+0x154>)
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	cb03      	ldmia	r3!, {r0, r1}
 8001fd0:	6010      	str	r0, [r2, #0]
 8001fd2:	6051      	str	r1, [r2, #4]
 8001fd4:	8819      	ldrh	r1, [r3, #0]
 8001fd6:	789b      	ldrb	r3, [r3, #2]
 8001fd8:	8111      	strh	r1, [r2, #8]
 8001fda:	7293      	strb	r3, [r2, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fe8:	461a      	mov	r2, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fce6 	bl	80019bc <AT_ExecuteCommand>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d15d      	bne.n	80020b6 <ES_WIFI_StartServerSingleConn+0x146>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4930      	ldr	r1, [pc, #192]	; (80020c8 <ES_WIFI_StartServerSingleConn+0x158>)
 8002008:	f006 fcc0 	bl	800898c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002018:	461a      	mov	r2, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fcce 	bl	80019bc <AT_ExecuteCommand>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d145      	bne.n	80020b6 <ES_WIFI_StartServerSingleConn+0x146>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	7c1b      	ldrb	r3, [r3, #16]
 8002034:	461a      	mov	r2, r3
 8002036:	4925      	ldr	r1, [pc, #148]	; (80020cc <ES_WIFI_StartServerSingleConn+0x15c>)
 8002038:	f006 fca8 	bl	800898c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002048:	461a      	mov	r2, r3
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fcb6 	bl	80019bc <AT_ExecuteCommand>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d12d      	bne.n	80020b6 <ES_WIFI_StartServerSingleConn+0x146>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	88db      	ldrh	r3, [r3, #6]
 8002064:	461a      	mov	r2, r3
 8002066:	491a      	ldr	r1, [pc, #104]	; (80020d0 <ES_WIFI_StartServerSingleConn+0x160>)
 8002068:	f006 fc90 	bl	800898c <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002078:	461a      	mov	r2, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fc9e 	bl	80019bc <AT_ExecuteCommand>
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <ES_WIFI_StartServerSingleConn+0x146>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002090:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <ES_WIFI_StartServerSingleConn+0x164>)
 8002092:	6810      	ldr	r0, [r2, #0]
 8002094:	6018      	str	r0, [r3, #0]
 8002096:	8891      	ldrh	r1, [r2, #4]
 8002098:	7992      	ldrb	r2, [r2, #6]
 800209a:	8099      	strh	r1, [r3, #4]
 800209c:	719a      	strb	r2, [r3, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020aa:	461a      	mov	r2, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fc85 	bl	80019bc <AT_ExecuteCommand>
 80020b2:	4603      	mov	r3, r0
 80020b4:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	0800a5c0 	.word	0x0800a5c0
 80020c4:	0800a610 	.word	0x0800a610
 80020c8:	0800a5c8 	.word	0x0800a5c8
 80020cc:	0800a61c 	.word	0x0800a61c
 80020d0:	0800a5d0 	.word	0x0800a5d0
 80020d4:	0800a624 	.word	0x0800a624

080020d8 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	77fb      	strb	r3, [r7, #31]
  bool          accepted=false;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 80020ee:	f001 fb2b 	bl	8003748 <HAL_GetTick>
 80020f2:	6238      	str	r0, [r7, #32]
  tlast=tstart+timeout;
 80020f4:	6a3a      	ldr	r2, [r7, #32]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4413      	add	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
  if (tlast < tstart )
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	429a      	cmp	r2, r3
 8002102:	d201      	bcs.n	8002108 <ES_WIFI_WaitServerConnection+0x30>
  {
	   tstart=0;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800210e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f006 fabd 	bl	8008694 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002120:	4a60      	ldr	r2, [pc, #384]	; (80022a4 <ES_WIFI_WaitServerConnection+0x1cc>)
 8002122:	6810      	ldr	r0, [r2, #0]
 8002124:	6018      	str	r0, [r3, #0]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002132:	461a      	mov	r2, r3
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff fc41 	bl	80019bc <AT_ExecuteCommand>
 800213a:	4603      	mov	r3, r0
 800213c:	77fb      	strb	r3, [r7, #31]
    if(ret == ES_WIFI_STATUS_OK)
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d12d      	bne.n	80021a0 <ES_WIFI_WaitServerConnection+0xc8>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800214a:	4957      	ldr	r1, [pc, #348]	; (80022a8 <ES_WIFI_WaitServerConnection+0x1d0>)
 800214c:	4618      	mov	r0, r3
 800214e:	f006 fc73 	bl	8008a38 <strstr>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d025      	beq.n	80021a4 <ES_WIFI_WaitServerConnection+0xcc>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800215e:	4953      	ldr	r1, [pc, #332]	; (80022ac <ES_WIFI_WaitServerConnection+0x1d4>)
 8002160:	4618      	mov	r0, r3
 8002162:	f006 fc69 	bl	8008a38 <strstr>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <ES_WIFI_WaitServerConnection+0xcc>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002172:	494f      	ldr	r1, [pc, #316]	; (80022b0 <ES_WIFI_WaitServerConnection+0x1d8>)
 8002174:	4618      	mov	r0, r3
 8002176:	f006 fc5f 	bl	8008a38 <strstr>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <ES_WIFI_WaitServerConnection+0xb0>
        {
         //printf("SOMA Accepted\n");
         accepted=true;// flushing out the MR messages
 8002180:	2301      	movs	r3, #1
 8002182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002186:	e00d      	b.n	80021a4 <ES_WIFI_WaitServerConnection+0xcc>
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800218e:	4949      	ldr	r1, [pc, #292]	; (80022b4 <ES_WIFI_WaitServerConnection+0x1dc>)
 8002190:	4618      	mov	r0, r3
 8002192:	f006 fc51 	bl	8008a38 <strstr>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d103      	bne.n	80021a4 <ES_WIFI_WaitServerConnection+0xcc>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800219c:	2302      	movs	r3, #2
 800219e:	e07c      	b.n	800229a <ES_WIFI_WaitServerConnection+0x1c2>
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 80021a0:	2302      	movs	r3, #2
 80021a2:	e07a      	b.n	800229a <ES_WIFI_WaitServerConnection+0x1c2>
    }

    if (accepted)
 80021a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d05f      	beq.n	800226c <ES_WIFI_WaitServerConnection+0x194>
    {
#endif /* if (ES_WIFI_USE_UART == 0) */

      memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f006 fa6b 	bl	8008694 <memset>
      sprintf((char*)Obj->CmdData,"P?\r");
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021c4:	4a3c      	ldr	r2, [pc, #240]	; (80022b8 <ES_WIFI_WaitServerConnection+0x1e0>)
 80021c6:	6810      	ldr	r0, [r2, #0]
 80021c8:	6018      	str	r0, [r3, #0]
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021d6:	461a      	mov	r2, r3
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7ff fbef 	bl	80019bc <AT_ExecuteCommand>
 80021de:	4603      	mov	r3, r0
 80021e0:	77fb      	strb	r3, [r7, #31]
      if(ret == ES_WIFI_STATUS_OK)
 80021e2:	7ffb      	ldrb	r3, [r7, #31]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d13f      	bne.n	8002268 <ES_WIFI_WaitServerConnection+0x190>
      {
        if((strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021ee:	220c      	movs	r2, #12
 80021f0:	4932      	ldr	r1, [pc, #200]	; (80022bc <ES_WIFI_WaitServerConnection+0x1e4>)
 80021f2:	4618      	mov	r0, r3
 80021f4:	f006 fbf9 	bl	80089ea <strncmp>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d036      	beq.n	800226c <ES_WIFI_WaitServerConnection+0x194>
        {
          ptr = strtok((char *)Obj->CmdData + 2, ",");
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002204:	3302      	adds	r3, #2
 8002206:	492e      	ldr	r1, [pc, #184]	; (80022c0 <ES_WIFI_WaitServerConnection+0x1e8>)
 8002208:	4618      	mov	r0, r3
 800220a:	f006 fc2f 	bl	8008a6c <strtok>
 800220e:	6178      	str	r0, [r7, #20]
          ptr = strtok(0, ","); //port
 8002210:	492b      	ldr	r1, [pc, #172]	; (80022c0 <ES_WIFI_WaitServerConnection+0x1e8>)
 8002212:	2000      	movs	r0, #0
 8002214:	f006 fc2a 	bl	8008a6c <strtok>
 8002218:	6178      	str	r0, [r7, #20]
          ParseIP((char *)ptr, conn->RemoteIP);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3308      	adds	r3, #8
 800221e:	4619      	mov	r1, r3
 8002220:	6978      	ldr	r0, [r7, #20]
 8002222:	f7ff fa65 	bl	80016f0 <ParseIP>
          ptr = strtok(0, ","); //port
 8002226:	4926      	ldr	r1, [pc, #152]	; (80022c0 <ES_WIFI_WaitServerConnection+0x1e8>)
 8002228:	2000      	movs	r0, #0
 800222a:	f006 fc1f 	bl	8008a6c <strtok>
 800222e:	6178      	str	r0, [r7, #20]
          conn->LocalPort=ParseNumber(ptr,0);
 8002230:	2100      	movs	r1, #0
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7ff f9ee 	bl	8001614 <ParseNumber>
 8002238:	4603      	mov	r3, r0
 800223a:	b29a      	uxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	80da      	strh	r2, [r3, #6]
          ptr = strtok(0, ","); //ip
 8002240:	491f      	ldr	r1, [pc, #124]	; (80022c0 <ES_WIFI_WaitServerConnection+0x1e8>)
 8002242:	2000      	movs	r0, #0
 8002244:	f006 fc12 	bl	8008a6c <strtok>
 8002248:	6178      	str	r0, [r7, #20]
          ptr = strtok(0, ","); //remote port
 800224a:	491d      	ldr	r1, [pc, #116]	; (80022c0 <ES_WIFI_WaitServerConnection+0x1e8>)
 800224c:	2000      	movs	r0, #0
 800224e:	f006 fc0d 	bl	8008a6c <strtok>
 8002252:	6178      	str	r0, [r7, #20]
          conn->RemotePort=ParseNumber(ptr,0);
 8002254:	2100      	movs	r1, #0
 8002256:	6978      	ldr	r0, [r7, #20]
 8002258:	f7ff f9dc 	bl	8001614 <ParseNumber>
 800225c:	4603      	mov	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	809a      	strh	r2, [r3, #4]
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e018      	b.n	800229a <ES_WIFI_WaitServerConnection+0x1c2>
      }
      else
      {
        DEBUG("P? command failed %s\n", Obj->CmdData);
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_ERROR;
 8002268:	2302      	movs	r3, #2
 800226a:	e016      	b.n	800229a <ES_WIFI_WaitServerConnection+0x1c2>
#if (ES_WIFI_USE_UART == 0)
    }
#endif /* if (ES_WIFI_USE_UART == 0) */

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002272:	2064      	movs	r0, #100	; 0x64
 8002274:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 8002276:	f001 fa67 	bl	8003748 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f43f af42 	beq.w	8002108 <ES_WIFI_WaitServerConnection+0x30>
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	429a      	cmp	r2, r3
 800228a:	f4ff af3d 	bcc.w	8002108 <ES_WIFI_WaitServerConnection+0x30>
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	429a      	cmp	r2, r3
 8002294:	f4ff af38 	bcc.w	8002108 <ES_WIFI_WaitServerConnection+0x30>
  return ES_WIFI_STATUS_TIMEOUT;
 8002298:	2303      	movs	r3, #3
}
 800229a:	4618      	mov	r0, r3
 800229c:	3728      	adds	r7, #40	; 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	0800a4d0 	.word	0x0800a4d0
 80022a8:	0800a62c 	.word	0x0800a62c
 80022ac:	0800a634 	.word	0x0800a634
 80022b0:	0800a63c 	.word	0x0800a63c
 80022b4:	0800a648 	.word	0x0800a648
 80022b8:	0800a658 	.word	0x0800a658
 80022bc:	0800a65c 	.word	0x0800a65c
 80022c0:	0800a490 	.word	0x0800a490

080022c4 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4918      	ldr	r1, [pc, #96]	; (8002338 <ES_WIFI_CloseServerConnection+0x74>)
 80022d8:	4618      	mov	r0, r3
 80022da:	f006 fb57 	bl	800898c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022ea:	461a      	mov	r2, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fb65 	bl	80019bc <AT_ExecuteCommand>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <ES_WIFI_CloseServerConnection+0x3c>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	e016      	b.n	800232e <ES_WIFI_CloseServerConnection+0x6a>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002306:	4a0d      	ldr	r2, [pc, #52]	; (800233c <ES_WIFI_CloseServerConnection+0x78>)
 8002308:	6810      	ldr	r0, [r2, #0]
 800230a:	6018      	str	r0, [r3, #0]
 800230c:	8891      	ldrh	r1, [r2, #4]
 800230e:	7992      	ldrb	r2, [r2, #6]
 8002310:	8099      	strh	r1, [r3, #4]
 8002312:	719a      	strb	r2, [r3, #6]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002320:	461a      	mov	r2, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fb4a 	bl	80019bc <AT_ExecuteCommand>
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	0800a5c0 	.word	0x0800a5c0
 800233c:	0800a66c 	.word	0x0800a66c

08002340 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	4919      	ldr	r1, [pc, #100]	; (80023b8 <ES_WIFI_StopServerSingleConn+0x78>)
 8002354:	4618      	mov	r0, r3
 8002356:	f006 fb19 	bl	800898c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002366:	461a      	mov	r2, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fb27 	bl	80019bc <AT_ExecuteCommand>
 800236e:	4603      	mov	r3, r0
 8002370:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <ES_WIFI_StopServerSingleConn+0x3c>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	e019      	b.n	80023b0 <ES_WIFI_StopServerSingleConn+0x70>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002382:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <ES_WIFI_StopServerSingleConn+0x7c>)
 8002384:	6810      	ldr	r0, [r2, #0]
 8002386:	6018      	str	r0, [r3, #0]
 8002388:	8892      	ldrh	r2, [r2, #4]
 800238a:	809a      	strh	r2, [r3, #4]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002398:	461a      	mov	r2, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fb0e 	bl	80019bc <AT_ExecuteCommand>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <ES_WIFI_StopServerSingleConn+0x6e>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	e000      	b.n	80023b0 <ES_WIFI_StopServerSingleConn+0x70>
  }

  UNLOCK_WIFI();
  return ret;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	0800a5c0 	.word	0x0800a5c0
 80023bc:	0800a674 	.word	0x0800a674

080023c0 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	461a      	mov	r2, r3
 80023cc:	460b      	mov	r3, r1
 80023ce:	72fb      	strb	r3, [r7, #11]
 80023d0:	4613      	mov	r3, r2
 80023d2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80023d4:	2302      	movs	r3, #2
 80023d6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80023de:	2301      	movs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e001      	b.n	80023e8 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80023e8:	893b      	ldrh	r3, [r7, #8]
 80023ea:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80023ee:	d302      	bcc.n	80023f6 <ES_WIFI_SendData+0x36>
 80023f0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80023f4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	893a      	ldrh	r2, [r7, #8]
 80023fa:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002402:	7afa      	ldrb	r2, [r7, #11]
 8002404:	492d      	ldr	r1, [pc, #180]	; (80024bc <ES_WIFI_SendData+0xfc>)
 8002406:	4618      	mov	r0, r3
 8002408:	f006 fac0 	bl	800898c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002418:	461a      	mov	r2, r3
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7ff face 	bl	80019bc <AT_ExecuteCommand>
 8002420:	4603      	mov	r3, r0
 8002422:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d13c      	bne.n	80024a4 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4923      	ldr	r1, [pc, #140]	; (80024c0 <ES_WIFI_SendData+0x100>)
 8002434:	4618      	mov	r0, r3
 8002436:	f006 faa9 	bl	800898c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002446:	461a      	mov	r2, r3
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff fab7 	bl	80019bc <AT_ExecuteCommand>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d125      	bne.n	80024a4 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800245e:	893a      	ldrh	r2, [r7, #8]
 8002460:	4918      	ldr	r1, [pc, #96]	; (80024c4 <ES_WIFI_SendData+0x104>)
 8002462:	4618      	mov	r0, r3
 8002464:	f006 fa92 	bl	800898c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002474:	893a      	ldrh	r2, [r7, #8]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff fb03 	bl	8001a88 <AT_RequestSendData>
 8002482:	4603      	mov	r3, r0
 8002484:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <ES_WIFI_SendData+0xe4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002492:	490d      	ldr	r1, [pc, #52]	; (80024c8 <ES_WIFI_SendData+0x108>)
 8002494:	4618      	mov	r0, r3
 8002496:	f006 facf 	bl	8008a38 <strstr>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <ES_WIFI_SendData+0xe4>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 80024a0:	2302      	movs	r3, #2
 80024a2:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d102      	bne.n	80024b0 <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2200      	movs	r2, #0
 80024ae:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	0800a5c0 	.word	0x0800a5c0
 80024c0:	0800a6a4 	.word	0x0800a6a4
 80024c4:	0800a6ac 	.word	0x0800a6ac
 80024c8:	0800a6b8 	.word	0x0800a6b8

080024cc <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	461a      	mov	r2, r3
 80024d8:	460b      	mov	r3, r1
 80024da:	72fb      	strb	r3, [r7, #11]
 80024dc:	4613      	mov	r3, r2
 80024de:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80024e0:	2302      	movs	r3, #2
 80024e2:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80024ea:	2301      	movs	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e001      	b.n	80024f4 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80024f4:	893b      	ldrh	r3, [r7, #8]
 80024f6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80024fa:	d861      	bhi.n	80025c0 <ES_WIFI_ReceiveData+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002502:	7afa      	ldrb	r2, [r7, #11]
 8002504:	4931      	ldr	r1, [pc, #196]	; (80025cc <ES_WIFI_ReceiveData+0x100>)
 8002506:	4618      	mov	r0, r3
 8002508:	f006 fa40 	bl	800898c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002518:	461a      	mov	r2, r3
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fa4e 	bl	80019bc <AT_ExecuteCommand>
 8002520:	4603      	mov	r3, r0
 8002522:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d145      	bne.n	80025b6 <ES_WIFI_ReceiveData+0xea>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002530:	893a      	ldrh	r2, [r7, #8]
 8002532:	4927      	ldr	r1, [pc, #156]	; (80025d0 <ES_WIFI_ReceiveData+0x104>)
 8002534:	4618      	mov	r0, r3
 8002536:	f006 fa29 	bl	800898c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002546:	461a      	mov	r2, r3
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7ff fa37 	bl	80019bc <AT_ExecuteCommand>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d12a      	bne.n	80025ae <ES_WIFI_ReceiveData+0xe2>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	491c      	ldr	r1, [pc, #112]	; (80025d4 <ES_WIFI_ReceiveData+0x108>)
 8002562:	4618      	mov	r0, r3
 8002564:	f006 fa12 	bl	800898c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002574:	461a      	mov	r2, r3
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f7ff fa20 	bl	80019bc <AT_ExecuteCommand>
 800257c:	4603      	mov	r3, r0
 800257e:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11c      	bne.n	80025c0 <ES_WIFI_ReceiveData+0xf4>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800258c:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <ES_WIFI_ReceiveData+0x10c>)
 800258e:	6810      	ldr	r0, [r2, #0]
 8002590:	6018      	str	r0, [r3, #0]
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff fae6 	bl	8001b74 <AT_RequestReceiveData>
 80025a8:	4603      	mov	r3, r0
 80025aa:	74fb      	strb	r3, [r7, #19]
 80025ac:	e008      	b.n	80025c0 <ES_WIFI_ReceiveData+0xf4>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
        *Receivedlen = 0;
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	2200      	movs	r2, #0
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	e004      	b.n	80025c0 <ES_WIFI_ReceiveData+0xf4>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
      issue15++;
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <ES_WIFI_ReceiveData+0x110>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a07      	ldr	r2, [pc, #28]	; (80025dc <ES_WIFI_ReceiveData+0x110>)
 80025be:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	0800a5c0 	.word	0x0800a5c0
 80025d0:	0800a6c0 	.word	0x0800a6c0
 80025d4:	0800a6c8 	.word	0x0800a6c8
 80025d8:	0800a6d0 	.word	0x0800a6d0
 80025dc:	200009bc 	.word	0x200009bc

080025e0 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	; 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80025e8:	4b56      	ldr	r3, [pc, #344]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a55      	ldr	r2, [pc, #340]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 80025ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
 80025f4:	4b53      	ldr	r3, [pc, #332]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002600:	4b50      	ldr	r3, [pc, #320]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 8002602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002604:	4a4f      	ldr	r2, [pc, #316]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260c:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 800260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002618:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	4a49      	ldr	r2, [pc, #292]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002624:	4b47      	ldr	r3, [pc, #284]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 8002626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002630:	4b44      	ldr	r3, [pc, #272]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 8002632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002634:	4a43      	ldr	r2, [pc, #268]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263c:	4b41      	ldr	r3, [pc, #260]	; (8002744 <SPI_WIFI_MspInit+0x164>)
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002648:	2200      	movs	r2, #0
 800264a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800264e:	483e      	ldr	r0, [pc, #248]	; (8002748 <SPI_WIFI_MspInit+0x168>)
 8002650:	f001 fe7e 	bl	8004350 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002658:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800265a:	2301      	movs	r3, #1
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	4836      	ldr	r0, [pc, #216]	; (8002748 <SPI_WIFI_MspInit+0x168>)
 800266e:	f001 fcc5 	bl	8003ffc <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002672:	2302      	movs	r3, #2
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002676:	4b35      	ldr	r3, [pc, #212]	; (800274c <SPI_WIFI_MspInit+0x16c>)
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800267e:	2300      	movs	r3, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002682:	f107 031c 	add.w	r3, r7, #28
 8002686:	4619      	mov	r1, r3
 8002688:	4831      	ldr	r0, [pc, #196]	; (8002750 <SPI_WIFI_MspInit+0x170>)
 800268a:	f001 fcb7 	bl	8003ffc <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800268e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002692:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002694:	2301      	movs	r3, #1
 8002696:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	4619      	mov	r1, r3
 80026aa:	4829      	ldr	r0, [pc, #164]	; (8002750 <SPI_WIFI_MspInit+0x170>)
 80026ac:	f001 fca6 	bl	8003ffc <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80026b0:	2201      	movs	r2, #1
 80026b2:	2101      	movs	r1, #1
 80026b4:	4826      	ldr	r0, [pc, #152]	; (8002750 <SPI_WIFI_MspInit+0x170>)
 80026b6:	f001 fe4b 	bl	8004350 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80026c6:	2301      	movs	r3, #1
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	4619      	mov	r1, r3
 80026d0:	481f      	ldr	r0, [pc, #124]	; (8002750 <SPI_WIFI_MspInit+0x170>)
 80026d2:	f001 fc93 	bl	8003ffc <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80026d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026da:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80026e4:	2301      	movs	r3, #1
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80026e8:	2306      	movs	r3, #6
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	4619      	mov	r1, r3
 80026f2:	4818      	ldr	r0, [pc, #96]	; (8002754 <SPI_WIFI_MspInit+0x174>)
 80026f4:	f001 fc82 	bl	8003ffc <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80026f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002706:	2301      	movs	r3, #1
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800270a:	2306      	movs	r3, #6
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	480f      	ldr	r0, [pc, #60]	; (8002754 <SPI_WIFI_MspInit+0x174>)
 8002716:	f001 fc71 	bl	8003ffc <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800271a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800271e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002724:	2301      	movs	r3, #1
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002728:	2301      	movs	r3, #1
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800272c:	2306      	movs	r3, #6
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	4619      	mov	r1, r3
 8002736:	4807      	ldr	r0, [pc, #28]	; (8002754 <SPI_WIFI_MspInit+0x174>)
 8002738:	f001 fc60 	bl	8003ffc <HAL_GPIO_Init>
}
 800273c:	bf00      	nop
 800273e:	3730      	adds	r7, #48	; 0x30
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	48000400 	.word	0x48000400
 800274c:	10110000 	.word	0x10110000
 8002750:	48001000 	.word	0x48001000
 8002754:	48000800 	.word	0x48000800

08002758 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d145      	bne.n	80027f8 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <SPI_WIFI_Init+0xb4>)
 800276e:	4a28      	ldr	r2, [pc, #160]	; (8002810 <SPI_WIFI_Init+0xb8>)
 8002770:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8002772:	4826      	ldr	r0, [pc, #152]	; (800280c <SPI_WIFI_Init+0xb4>)
 8002774:	f7ff ff34 	bl	80025e0 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <SPI_WIFI_Init+0xb4>)
 800277a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800277e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <SPI_WIFI_Init+0xb4>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002786:	4b21      	ldr	r3, [pc, #132]	; (800280c <SPI_WIFI_Init+0xb4>)
 8002788:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800278c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <SPI_WIFI_Init+0xb4>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <SPI_WIFI_Init+0xb4>)
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <SPI_WIFI_Init+0xb4>)
 800279c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <SPI_WIFI_Init+0xb4>)
 80027a4:	2210      	movs	r2, #16
 80027a6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <SPI_WIFI_Init+0xb4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <SPI_WIFI_Init+0xb4>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <SPI_WIFI_Init+0xb4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <SPI_WIFI_Init+0xb4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80027c0:	4812      	ldr	r0, [pc, #72]	; (800280c <SPI_WIFI_Init+0xb4>)
 80027c2:	f003 fa53 	bl	8005c6c <HAL_SPI_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
 80027d0:	e018      	b.n	8002804 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2007      	movs	r0, #7
 80027d8:	f001 f8bf 	bl	800395a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80027dc:	2007      	movs	r0, #7
 80027de:	f001 f8d8 	bl	8003992 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	2033      	movs	r0, #51	; 0x33
 80027e8:	f001 f8b7 	bl	800395a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80027ec:	2033      	movs	r0, #51	; 0x33
 80027ee:	f001 f8d0 	bl	8003992 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80027f2:	200a      	movs	r0, #10
 80027f4:	f000 f9fe 	bl	8002bf4 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 80027f8:	f000 f80c 	bl	8002814 <SPI_WIFI_ResetModule>
 80027fc:	4603      	mov	r3, r0
 80027fe:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002800:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	200009dc 	.word	0x200009dc
 8002810:	40003c00 	.word	0x40003c00

08002814 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800281a:	f000 ff95 	bl	8003748 <HAL_GetTick>
 800281e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8002824:	2200      	movs	r2, #0
 8002826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800282a:	4830      	ldr	r0, [pc, #192]	; (80028ec <SPI_WIFI_ResetModule+0xd8>)
 800282c:	f001 fd90 	bl	8004350 <HAL_GPIO_WritePin>
 8002830:	200a      	movs	r0, #10
 8002832:	f000 ff95 	bl	8003760 <HAL_Delay>
 8002836:	2201      	movs	r2, #1
 8002838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800283c:	482b      	ldr	r0, [pc, #172]	; (80028ec <SPI_WIFI_ResetModule+0xd8>)
 800283e:	f001 fd87 	bl	8004350 <HAL_GPIO_WritePin>
 8002842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002846:	f000 ff8b 	bl	8003760 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800284a:	2200      	movs	r2, #0
 800284c:	2101      	movs	r1, #1
 800284e:	4827      	ldr	r0, [pc, #156]	; (80028ec <SPI_WIFI_ResetModule+0xd8>)
 8002850:	f001 fd7e 	bl	8004350 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002854:	200f      	movs	r0, #15
 8002856:	f000 f9cd 	bl	8002bf4 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800285a:	e020      	b.n	800289e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	463a      	mov	r2, r7
 8002860:	18d1      	adds	r1, r2, r3
 8002862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002866:	2201      	movs	r2, #1
 8002868:	4821      	ldr	r0, [pc, #132]	; (80028f0 <SPI_WIFI_ResetModule+0xdc>)
 800286a:	f003 fb07 	bl	8005e7c <HAL_SPI_Receive>
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	3302      	adds	r3, #2
 8002876:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002878:	f000 ff66 	bl	8003748 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d202      	bcs.n	800288e <SPI_WIFI_ResetModule+0x7a>
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800288e:	2201      	movs	r2, #1
 8002890:	2101      	movs	r1, #1
 8002892:	4816      	ldr	r0, [pc, #88]	; (80028ec <SPI_WIFI_ResetModule+0xd8>)
 8002894:	f001 fd5c 	bl	8004350 <HAL_GPIO_WritePin>
      return -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
 800289c:	e021      	b.n	80028e2 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800289e:	2102      	movs	r1, #2
 80028a0:	4812      	ldr	r0, [pc, #72]	; (80028ec <SPI_WIFI_ResetModule+0xd8>)
 80028a2:	f001 fd3d 	bl	8004320 <HAL_GPIO_ReadPin>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d0d7      	beq.n	800285c <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 80028ac:	2201      	movs	r2, #1
 80028ae:	2101      	movs	r1, #1
 80028b0:	480e      	ldr	r0, [pc, #56]	; (80028ec <SPI_WIFI_ResetModule+0xd8>)
 80028b2:	f001 fd4d 	bl	8004350 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80028b6:	783b      	ldrb	r3, [r7, #0]
 80028b8:	2b15      	cmp	r3, #21
 80028ba:	d10e      	bne.n	80028da <SPI_WIFI_ResetModule+0xc6>
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	2b15      	cmp	r3, #21
 80028c0:	d10b      	bne.n	80028da <SPI_WIFI_ResetModule+0xc6>
 80028c2:	78bb      	ldrb	r3, [r7, #2]
 80028c4:	2b0d      	cmp	r3, #13
 80028c6:	d108      	bne.n	80028da <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80028c8:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80028ca:	2b0a      	cmp	r3, #10
 80028cc:	d105      	bne.n	80028da <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80028ce:	793b      	ldrb	r3, [r7, #4]
 80028d0:	2b3e      	cmp	r3, #62	; 0x3e
 80028d2:	d102      	bne.n	80028da <SPI_WIFI_ResetModule+0xc6>
 80028d4:	797b      	ldrb	r3, [r7, #5]
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d002      	beq.n	80028e0 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	e000      	b.n	80028e2 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	48001000 	.word	0x48001000
 80028f0:	200009dc 	.word	0x200009dc

080028f4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <SPI_WIFI_DeInit+0x10>)
 80028fa:	f003 fa83 	bl	8005e04 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200009dc 	.word	0x200009dc

08002908 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002910:	f000 ff1a 	bl	8003748 <HAL_GetTick>
 8002914:	4603      	mov	r3, r0
 8002916:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8002918:	e00a      	b.n	8002930 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800291a:	f000 ff15 	bl	8003748 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	d902      	bls.n	8002930 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e007      	b.n	8002940 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8002930:	2102      	movs	r1, #2
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <wait_cmddata_rdy_high+0x40>)
 8002934:	f001 fcf4 	bl	8004320 <HAL_GPIO_ReadPin>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d1ed      	bne.n	800291a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	48001000 	.word	0x48001000

0800294c <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002954:	f000 fef8 	bl	8003748 <HAL_GetTick>
 8002958:	4603      	mov	r3, r0
 800295a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800295c:	e00a      	b.n	8002974 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800295e:	f000 fef3 	bl	8003748 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1ad2      	subs	r2, r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d902      	bls.n	8002974 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	e004      	b.n	800297e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <wait_cmddata_rdy_rising_event+0x3c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d0f0      	beq.n	800295e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800297c:	2300      	movs	r3, #0
#endif
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200009c8 	.word	0x200009c8

0800298c <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002994:	f000 fed8 	bl	8003748 <HAL_GetTick>
 8002998:	4603      	mov	r3, r0
 800299a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800299c:	e00a      	b.n	80029b4 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800299e:	f000 fed3 	bl	8003748 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d902      	bls.n	80029b4 <wait_spi_rx_event+0x28>
    {
      return -1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	e004      	b.n	80029be <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <wait_spi_rx_event+0x3c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d0f0      	beq.n	800299e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80029bc:	2300      	movs	r3, #0
#endif
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200009c0 	.word	0x200009c0

080029cc <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80029d4:	f000 feb8 	bl	8003748 <HAL_GetTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 80029dc:	e00a      	b.n	80029f4 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80029de:	f000 feb3 	bl	8003748 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d902      	bls.n	80029f4 <wait_spi_tx_event+0x28>
    {
      return -1;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	e004      	b.n	80029fe <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <wait_spi_tx_event+0x3c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d0f0      	beq.n	80029de <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80029fc:	2300      	movs	r3, #0
#endif
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200009c4 	.word	0x200009c4

08002a0c <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	460b      	mov	r3, r1
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8002a1e:	2201      	movs	r2, #1
 8002a20:	2101      	movs	r1, #1
 8002a22:	4834      	ldr	r0, [pc, #208]	; (8002af4 <SPI_WIFI_ReceiveData+0xe8>)
 8002a24:	f001 fc94 	bl	8004350 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002a28:	2003      	movs	r0, #3
 8002a2a:	f000 f8e3 	bl	8002bf4 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff8b 	bl	800294c <wait_cmddata_rdy_rising_event>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da02      	bge.n	8002a42 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002a3c:	f06f 0302 	mvn.w	r3, #2
 8002a40:	e054      	b.n	8002aec <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002a42:	2200      	movs	r2, #0
 8002a44:	2101      	movs	r1, #1
 8002a46:	482b      	ldr	r0, [pc, #172]	; (8002af4 <SPI_WIFI_ReceiveData+0xe8>)
 8002a48:	f001 fc82 	bl	8004350 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002a4c:	200f      	movs	r0, #15
 8002a4e:	f000 f8d1 	bl	8002bf4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002a52:	e03d      	b.n	8002ad0 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8002a54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	db02      	blt.n	8002a64 <SPI_WIFI_ReceiveData+0x58>
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13c      	bne.n	8002ade <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <SPI_WIFI_ReceiveData+0xec>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4619      	mov	r1, r3
 8002a72:	4822      	ldr	r0, [pc, #136]	; (8002afc <SPI_WIFI_ReceiveData+0xf0>)
 8002a74:	f003 ff50 	bl	8006918 <HAL_SPI_Receive_IT>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8002a7e:	2201      	movs	r2, #1
 8002a80:	2101      	movs	r1, #1
 8002a82:	481c      	ldr	r0, [pc, #112]	; (8002af4 <SPI_WIFI_ReceiveData+0xe8>)
 8002a84:	f001 fc64 	bl	8004350 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	e02e      	b.n	8002aec <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff7b 	bl	800298c <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002a96:	7d3a      	ldrb	r2, [r7, #20]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	7d7a      	ldrb	r2, [r7, #21]
 8002aa2:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002aa4:	8afb      	ldrh	r3, [r7, #22]
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3302      	adds	r3, #2
 8002ab0:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8002ab2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ab6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002aba:	db09      	blt.n	8002ad0 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002abc:	2201      	movs	r2, #1
 8002abe:	2101      	movs	r1, #1
 8002ac0:	480c      	ldr	r0, [pc, #48]	; (8002af4 <SPI_WIFI_ReceiveData+0xe8>)
 8002ac2:	f001 fc45 	bl	8004350 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8002ac6:	f7ff fea5 	bl	8002814 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002aca:	f06f 0303 	mvn.w	r3, #3
 8002ace:	e00d      	b.n	8002aec <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	4808      	ldr	r0, [pc, #32]	; (8002af4 <SPI_WIFI_ReceiveData+0xe8>)
 8002ad4:	f001 fc24 	bl	8004320 <HAL_GPIO_ReadPin>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d0ba      	beq.n	8002a54 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4804      	ldr	r0, [pc, #16]	; (8002af4 <SPI_WIFI_ReceiveData+0xe8>)
 8002ae4:	f001 fc34 	bl	8004350 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002ae8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	48001000 	.word	0x48001000
 8002af8:	200009c0 	.word	0x200009c0
 8002afc:	200009dc 	.word	0x200009dc

08002b00 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fef9 	bl	8002908 <wait_cmddata_rdy_high>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da02      	bge.n	8002b22 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	e04f      	b.n	8002bc2 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8002b22:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <SPI_WIFI_SendData+0xcc>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4828      	ldr	r0, [pc, #160]	; (8002bd0 <SPI_WIFI_SendData+0xd0>)
 8002b2e:	f001 fc0f 	bl	8004350 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002b32:	200f      	movs	r0, #15
 8002b34:	f000 f85e 	bl	8002bf4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8002b38:	897b      	ldrh	r3, [r7, #10]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d919      	bls.n	8002b72 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8002b3e:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <SPI_WIFI_SendData+0xd4>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8002b44:	897b      	ldrh	r3, [r7, #10]
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	4822      	ldr	r0, [pc, #136]	; (8002bd8 <SPI_WIFI_SendData+0xd8>)
 8002b50:	f003 fe40 	bl	80067d4 <HAL_SPI_Transmit_IT>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	481c      	ldr	r0, [pc, #112]	; (8002bd0 <SPI_WIFI_SendData+0xd0>)
 8002b60:	f001 fbf6 	bl	8004350 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	e02b      	b.n	8002bc2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff2d 	bl	80029cc <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8002b7c:	897b      	ldrh	r3, [r7, #10]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002b88:	230a      	movs	r3, #10
 8002b8a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <SPI_WIFI_SendData+0xd4>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	2201      	movs	r2, #1
 8002b98:	4619      	mov	r1, r3
 8002b9a:	480f      	ldr	r0, [pc, #60]	; (8002bd8 <SPI_WIFI_SendData+0xd8>)
 8002b9c:	f003 fe1a 	bl	80067d4 <HAL_SPI_Transmit_IT>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4809      	ldr	r0, [pc, #36]	; (8002bd0 <SPI_WIFI_SendData+0xd0>)
 8002bac:	f001 fbd0 	bl	8004350 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb4:	e005      	b.n	8002bc2 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff07 	bl	80029cc <wait_spi_tx_event>
    
  }
  return len;
 8002bbe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200009c8 	.word	0x200009c8
 8002bd0:	48001000 	.word	0x48001000
 8002bd4:	200009c4 	.word	0x200009c4
 8002bd8:	200009dc 	.word	0x200009dc

08002bdc <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fdbb 	bl	8003760 <HAL_Delay>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8002c04:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <SPI_WIFI_DelayUs+0x94>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d122      	bne.n	8002c52 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <SPI_WIFI_DelayUs+0x98>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <SPI_WIFI_DelayUs+0x9c>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002c22:	f000 fd91 	bl	8003748 <HAL_GetTick>
 8002c26:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002c28:	e002      	b.n	8002c30 <SPI_WIFI_DelayUs+0x3c>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f9      	bne.n	8002c2a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8002c36:	f000 fd87 	bl	8003748 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <SPI_WIFI_DelayUs+0x94>)
 8002c42:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <SPI_WIFI_DelayUs+0x94>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <SPI_WIFI_DelayUs+0x5e>
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <SPI_WIFI_DelayUs+0x94>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <SPI_WIFI_DelayUs+0x98>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <SPI_WIFI_DelayUs+0xa0>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	0c9a      	lsrs	r2, r3, #18
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <SPI_WIFI_DelayUs+0x94>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002c72:	e002      	b.n	8002c7a <SPI_WIFI_DelayUs+0x86>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f9      	bne.n	8002c74 <SPI_WIFI_DelayUs+0x80>
  return;
 8002c80:	bf00      	nop
}
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200009cc 	.word	0x200009cc
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	10624dd3 	.word	0x10624dd3
 8002c94:	431bde83 	.word	0x431bde83

08002c98 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_SPI_RxCpltCallback+0x24>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <HAL_SPI_RxCpltCallback+0x24>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200009c0 	.word	0x200009c0

08002cc0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_SPI_TxCpltCallback+0x24>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <HAL_SPI_TxCpltCallback+0x24>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	200009c4 	.word	0x200009c4

08002ce8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <SPI_WIFI_ISR+0x1c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d102      	bne.n	8002cfa <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <SPI_WIFI_ISR+0x1c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
   }
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	200009c8 	.word	0x200009c8

08002d08 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <WIFI_Init+0x40>)
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <WIFI_Init+0x44>)
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <WIFI_Init+0x48>)
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <WIFI_Init+0x4c>)
 8002d1e:	490e      	ldr	r1, [pc, #56]	; (8002d58 <WIFI_Init+0x50>)
 8002d20:	480e      	ldr	r0, [pc, #56]	; (8002d5c <WIFI_Init+0x54>)
 8002d22:	f7fe ffeb 	bl	8001cfc <ES_WIFI_RegisterBusIO>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002d2c:	480b      	ldr	r0, [pc, #44]	; (8002d5c <WIFI_Init+0x54>)
 8002d2e:	f7fe ffb7 	bl	8001ca0 <ES_WIFI_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	08002a0d 	.word	0x08002a0d
 8002d4c:	08002b01 	.word	0x08002b01
 8002d50:	08002bdd 	.word	0x08002bdd
 8002d54:	080028f5 	.word	0x080028f5
 8002d58:	08002759 	.word	0x08002759
 8002d5c:	20000a40 	.word	0x20000a40

08002d60 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	4809      	ldr	r0, [pc, #36]	; (8002da0 <WIFI_Connect+0x40>)
 8002d7a:	f7fe fff3 	bl	8001d64 <ES_WIFI_Connect>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002d84:	4806      	ldr	r0, [pc, #24]	; (8002da0 <WIFI_Connect+0x40>)
 8002d86:	f7ff f899 	bl	8001ebc <ES_WIFI_GetNetworkSettings>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000a40 	.word	0x20000a40

08002da4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4806      	ldr	r0, [pc, #24]	; (8002dcc <WIFI_GetMAC_Address+0x28>)
 8002db4:	f7ff f8ac 	bl	8001f10 <ES_WIFI_GetMACAddress>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000a40 	.word	0x20000a40

08002dd0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002ddc:	4809      	ldr	r0, [pc, #36]	; (8002e04 <WIFI_GetIP_Address+0x34>)
 8002dde:	f7ff f841 	bl	8001e64 <ES_WIFI_IsConnected>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <WIFI_GetIP_Address+0x34>)
 8002dea:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000a40 	.word	0x20000a40

08002e08 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	72fb      	strb	r3, [r7, #11]
 8002e16:	4613      	mov	r3, r2
 8002e18:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	74bb      	strb	r3, [r7, #18]
  conn.LocalPort = port;
 8002e26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002e28:	82fb      	strh	r3, [r7, #22]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8002e38:	893b      	ldrh	r3, [r7, #8]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	4619      	mov	r1, r3
 8002e46:	4807      	ldr	r0, [pc, #28]	; (8002e64 <WIFI_StartServer+0x5c>)
 8002e48:	f7ff f892 	bl	8001f70 <ES_WIFI_StartServerSingleConn>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000a40 	.word	0x20000a40

08002e68 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	74bb      	strb	r3, [r7, #18]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8002e7c:	f107 0310 	add.w	r3, r7, #16
 8002e80:	461a      	mov	r2, r3
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	4818      	ldr	r0, [pc, #96]	; (8002ee8 <WIFI_WaitServerConnection+0x80>)
 8002e86:	f7ff f927 	bl	80020d8 <ES_WIFI_WaitServerConnection>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8002e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10d      	bne.n	8002eb4 <WIFI_WaitServerConnection+0x4c>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <WIFI_WaitServerConnection+0x3c>
 8002e9e:	8aba      	ldrh	r2, [r7, #20]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <WIFI_WaitServerConnection+0x48>
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e014      	b.n	8002ede <WIFI_WaitServerConnection+0x76>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 8002eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d10f      	bne.n	8002edc <WIFI_WaitServerConnection+0x74>
  {
    if (RemotePort) *RemotePort=0;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <WIFI_WaitServerConnection+0x60>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d004      	beq.n	8002ed8 <WIFI_WaitServerConnection+0x70>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 8002ece:	2204      	movs	r2, #4
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f005 fbde 	bl	8008694 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8002ed8:	2305      	movs	r3, #5
 8002eda:	e000      	b.n	8002ede <WIFI_WaitServerConnection+0x76>
  }

  return WIFI_STATUS_ERROR;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000a40 	.word	0x20000a40

08002eec <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4806      	ldr	r0, [pc, #24]	; (8002f14 <WIFI_CloseServerConnection+0x28>)
 8002efc:	f7ff f9e2 	bl	80022c4 <ES_WIFI_CloseServerConnection>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000a40 	.word	0x20000a40

08002f18 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4619      	mov	r1, r3
 8002f28:	4806      	ldr	r0, [pc, #24]	; (8002f44 <WIFI_StopServer+0x2c>)
 8002f2a:	f7ff fa09 	bl	8002340 <ES_WIFI_StopServerSingleConn>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000a40 	.word	0x20000a40

08002f48 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	4603      	mov	r3, r0
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	4613      	mov	r3, r2
 8002f58:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002f5e:	89ba      	ldrh	r2, [r7, #12]
 8002f60:	7bf9      	ldrb	r1, [r7, #15]
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	4806      	ldr	r0, [pc, #24]	; (8002f88 <WIFI_SendData+0x40>)
 8002f70:	f7ff fa26 	bl	80023c0 <ES_WIFI_SendData>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000a40 	.word	0x20000a40

08002f8c <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	4603      	mov	r3, r0
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002fa2:	89ba      	ldrh	r2, [r7, #12]
 8002fa4:	7bf9      	ldrb	r1, [r7, #15]
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	4806      	ldr	r0, [pc, #24]	; (8002fcc <WIFI_ReceiveData+0x40>)
 8002fb4:	f7ff fa8a 	bl	80024cc <ES_WIFI_ReceiveData>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000a40 	.word	0x20000a40

08002fd0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2120      	movs	r1, #32
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fada 	bl	800359c <SENSOR_IO_Read>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	f023 0304 	bic.w	r3, r3, #4
 8002ff2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003012:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	2120      	movs	r1, #32
 800301c:	4618      	mov	r0, r3
 800301e:	f000 faa3 	bl	8003568 <SENSOR_IO_Write>
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b088      	sub	sp, #32
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	b2d8      	uxtb	r0, r3
 8003038:	f107 0208 	add.w	r2, r7, #8
 800303c:	2302      	movs	r3, #2
 800303e:	21b2      	movs	r1, #178	; 0xb2
 8003040:	f000 faca 	bl	80035d8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2135      	movs	r1, #53	; 0x35
 800304a:	4618      	mov	r0, r3
 800304c:	f000 faa6 	bl	800359c <SENSOR_IO_Read>
 8003050:	4603      	mov	r3, r0
 8003052:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003054:	7ffb      	ldrb	r3, [r7, #31]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	b21b      	sxth	r3, r3
 800305a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305e:	b21a      	sxth	r2, r3
 8003060:	7a3b      	ldrb	r3, [r7, #8]
 8003062:	b21b      	sxth	r3, r3
 8003064:	4313      	orrs	r3, r2
 8003066:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003068:	7ffb      	ldrb	r3, [r7, #31]
 800306a:	019b      	lsls	r3, r3, #6
 800306c:	b21b      	sxth	r3, r3
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	b21a      	sxth	r2, r3
 8003074:	7a7b      	ldrb	r3, [r7, #9]
 8003076:	b21b      	sxth	r3, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800307c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003080:	10db      	asrs	r3, r3, #3
 8003082:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003084:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003088:	10db      	asrs	r3, r3, #3
 800308a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	b2d8      	uxtb	r0, r3
 8003090:	f107 0208 	add.w	r2, r7, #8
 8003094:	2304      	movs	r3, #4
 8003096:	21bc      	movs	r1, #188	; 0xbc
 8003098:	f000 fa9e 	bl	80035d8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800309c:	7a7b      	ldrb	r3, [r7, #9]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	b21a      	sxth	r2, r3
 80030a2:	7a3b      	ldrb	r3, [r7, #8]
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b21a      	sxth	r2, r3
 80030b0:	7abb      	ldrb	r3, [r7, #10]
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	4313      	orrs	r3, r2
 80030b6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	b2d8      	uxtb	r0, r3
 80030bc:	f107 0208 	add.w	r2, r7, #8
 80030c0:	2302      	movs	r3, #2
 80030c2:	21aa      	movs	r1, #170	; 0xaa
 80030c4:	f000 fa88 	bl	80035d8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80030c8:	7a7b      	ldrb	r3, [r7, #9]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	b21a      	sxth	r2, r3
 80030ce:	7a3b      	ldrb	r3, [r7, #8]
 80030d0:	b21b      	sxth	r3, r3
 80030d2:	4313      	orrs	r3, r2
 80030d4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80030d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80030da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	ee07 3a90 	vmov	s15, r3
 80030e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80030fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003102:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003114:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003124:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	ee07 3a90 	vmov	s15, r3
}
 800312e:	eeb0 0a67 	vmov.f32	s0, s15
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <BSP_LED_Init+0x28>
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <BSP_LED_Init+0x58>)
 800314a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314c:	4a10      	ldr	r2, [pc, #64]	; (8003190 <BSP_LED_Init+0x58>)
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003154:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <BSP_LED_Init+0x58>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8003160:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003164:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003166:	2301      	movs	r3, #1
 8003168:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800316e:	2302      	movs	r3, #2
 8003170:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	4a07      	ldr	r2, [pc, #28]	; (8003194 <BSP_LED_Init+0x5c>)
 8003176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317a:	f107 020c 	add.w	r2, r7, #12
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f000 ff3b 	bl	8003ffc <HAL_GPIO_Init>
}
 8003186:	bf00      	nop
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	20000018 	.word	0x20000018

08003198 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	4a06      	ldr	r2, [pc, #24]	; (80031c0 <BSP_LED_On+0x28>)
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ae:	b291      	uxth	r1, r2
 80031b0:	2201      	movs	r2, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 f8cc 	bl	8004350 <HAL_GPIO_WritePin>
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000018 	.word	0x20000018

080031c4 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	4a06      	ldr	r2, [pc, #24]	; (80031ec <BSP_LED_Off+0x28>)
 80031d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031da:	b291      	uxth	r1, r2
 80031dc:	2200      	movs	r2, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 f8b6 	bl	8004350 <HAL_GPIO_WritePin>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000018 	.word	0x20000018

080031f0 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	460a      	mov	r2, r1
 80031fa:	71fb      	strb	r3, [r7, #7]
 80031fc:	4613      	mov	r3, r2
 80031fe:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <BSP_PB_Init+0xa0>)
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <BSP_PB_Init+0xa0>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800320c:	4b20      	ldr	r3, [pc, #128]	; (8003290 <BSP_PB_Init+0xa0>)
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003218:	79bb      	ldrb	r3, [r7, #6]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d112      	bne.n	8003244 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800321e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003222:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003228:	2301      	movs	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800322c:	2302      	movs	r3, #2
 800322e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <BSP_PB_Init+0xa4>)
 8003234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003238:	f107 020c 	add.w	r2, r7, #12
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fedc 	bl	8003ffc <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003244:	79bb      	ldrb	r3, [r7, #6]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d11e      	bne.n	8003288 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800324a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800324e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003250:	2301      	movs	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003254:	2303      	movs	r3, #3
 8003256:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <BSP_PB_Init+0xa8>)
 800325a:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <BSP_PB_Init+0xa4>)
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	f107 020c 	add.w	r2, r7, #12
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fec6 	bl	8003ffc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003270:	2328      	movs	r3, #40	; 0x28
 8003272:	b25b      	sxtb	r3, r3
 8003274:	2200      	movs	r2, #0
 8003276:	210f      	movs	r1, #15
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fb6e 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800327e:	2328      	movs	r3, #40	; 0x28
 8003280:	b25b      	sxtb	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fb85 	bl	8003992 <HAL_NVIC_EnableIRQ>
  }
}
 8003288:	bf00      	nop
 800328a:	3720      	adds	r7, #32
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	2000001c 	.word	0x2000001c
 8003298:	10110000 	.word	0x10110000

0800329c <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <BSP_COM_Init+0x2a>
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <BSP_COM_Init+0xc8>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	4a2c      	ldr	r2, [pc, #176]	; (8003364 <BSP_COM_Init+0xc8>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ba:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <BSP_COM_Init+0xc8>)
 80032bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10b      	bne.n	80032e4 <BSP_COM_Init+0x48>
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <BSP_COM_Init+0xc8>)
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d0:	4a24      	ldr	r2, [pc, #144]	; (8003364 <BSP_COM_Init+0xc8>)
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032d8:	4b22      	ldr	r3, [pc, #136]	; (8003364 <BSP_COM_Init+0xc8>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <BSP_COM_Init+0x66>
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <BSP_COM_Init+0xc8>)
 80032ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ee:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <BSP_COM_Init+0xc8>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6613      	str	r3, [r2, #96]	; 0x60
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <BSP_COM_Init+0xc8>)
 80032f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8003302:	2340      	movs	r3, #64	; 0x40
 8003304:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003306:	2302      	movs	r3, #2
 8003308:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800330a:	2302      	movs	r3, #2
 800330c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8003312:	2307      	movs	r3, #7
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	4a13      	ldr	r2, [pc, #76]	; (8003368 <BSP_COM_Init+0xcc>)
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331e:	f107 0214 	add.w	r2, r7, #20
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fe69 	bl	8003ffc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8003332:	2307      	movs	r3, #7
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	4a0c      	ldr	r2, [pc, #48]	; (800336c <BSP_COM_Init+0xd0>)
 800333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333e:	f107 0214 	add.w	r2, r7, #20
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fe59 	bl	8003ffc <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	4a08      	ldr	r2, [pc, #32]	; (8003370 <BSP_COM_Init+0xd4>)
 800334e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8003356:	6838      	ldr	r0, [r7, #0]
 8003358:	f004 faf5 	bl	8007946 <HAL_UART_Init>
}
 800335c:	bf00      	nop
 800335e:	3728      	adds	r7, #40	; 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	20000024 	.word	0x20000024
 800336c:	20000028 	.word	0x20000028
 8003370:	20000020 	.word	0x20000020

08003374 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <I2Cx_MspInit+0xa8>)
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <I2Cx_MspInit+0xa8>)
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <I2Cx_MspInit+0xa8>)
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003394:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003398:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800339a:	2312      	movs	r3, #18
 800339c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800339e:	2301      	movs	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a2:	2303      	movs	r3, #3
 80033a4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80033a6:	2304      	movs	r3, #4
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	4619      	mov	r1, r3
 80033b0:	481b      	ldr	r0, [pc, #108]	; (8003420 <I2Cx_MspInit+0xac>)
 80033b2:	f000 fe23 	bl	8003ffc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	4619      	mov	r1, r3
 80033bc:	4818      	ldr	r0, [pc, #96]	; (8003420 <I2Cx_MspInit+0xac>)
 80033be:	f000 fe1d 	bl	8003ffc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <I2Cx_MspInit+0xa8>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <I2Cx_MspInit+0xa8>)
 80033c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033cc:	6593      	str	r3, [r2, #88]	; 0x58
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <I2Cx_MspInit+0xa8>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <I2Cx_MspInit+0xa8>)
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	4a0f      	ldr	r2, [pc, #60]	; (800341c <I2Cx_MspInit+0xa8>)
 80033e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <I2Cx_MspInit+0xa8>)
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	4a0c      	ldr	r2, [pc, #48]	; (800341c <I2Cx_MspInit+0xa8>)
 80033ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80033f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80033f2:	2200      	movs	r2, #0
 80033f4:	210f      	movs	r1, #15
 80033f6:	2021      	movs	r0, #33	; 0x21
 80033f8:	f000 faaf 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80033fc:	2021      	movs	r0, #33	; 0x21
 80033fe:	f000 fac8 	bl	8003992 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	210f      	movs	r1, #15
 8003406:	2022      	movs	r0, #34	; 0x22
 8003408:	f000 faa7 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800340c:	2022      	movs	r0, #34	; 0x22
 800340e:	f000 fac0 	bl	8003992 <HAL_NVIC_EnableIRQ>
}
 8003412:	bf00      	nop
 8003414:	3728      	adds	r7, #40	; 0x28
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	48000400 	.word	0x48000400

08003424 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <I2Cx_Init+0x54>)
 8003430:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a11      	ldr	r2, [pc, #68]	; (800347c <I2Cx_Init+0x58>)
 8003436:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff89 	bl	8003374 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 ffa4 	bl	80043b0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003468:	2100      	movs	r1, #0
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f001 fcbc 	bl	8004de8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40005800 	.word	0x40005800
 800347c:	00702681 	.word	0x00702681

08003480 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af04      	add	r7, sp, #16
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4603      	mov	r3, r0
 8003490:	72fb      	strb	r3, [r7, #11]
 8003492:	460b      	mov	r3, r1
 8003494:	813b      	strh	r3, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	b299      	uxth	r1, r3
 80034a2:	88f8      	ldrh	r0, [r7, #6]
 80034a4:	893a      	ldrh	r2, [r7, #8]
 80034a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034aa:	9302      	str	r3, [sp, #8]
 80034ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	4603      	mov	r3, r0
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f001 f960 	bl	800477c <HAL_I2C_Mem_Read>
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	4619      	mov	r1, r3
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f832 	bl	8003534 <I2Cx_Error>
  }
  return status;
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b08a      	sub	sp, #40	; 0x28
 80034de:	af04      	add	r7, sp, #16
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	4608      	mov	r0, r1
 80034e4:	4611      	mov	r1, r2
 80034e6:	461a      	mov	r2, r3
 80034e8:	4603      	mov	r3, r0
 80034ea:	72fb      	strb	r3, [r7, #11]
 80034ec:	460b      	mov	r3, r1
 80034ee:	813b      	strh	r3, [r7, #8]
 80034f0:	4613      	mov	r3, r2
 80034f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80034f8:	7afb      	ldrb	r3, [r7, #11]
 80034fa:	b299      	uxth	r1, r3
 80034fc:	88f8      	ldrh	r0, [r7, #6]
 80034fe:	893a      	ldrh	r2, [r7, #8]
 8003500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003504:	9302      	str	r3, [sp, #8]
 8003506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4603      	mov	r3, r0
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f001 f81f 	bl	8004554 <HAL_I2C_Mem_Write>
 8003516:	4603      	mov	r3, r0
 8003518:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003520:	7afb      	ldrb	r3, [r7, #11]
 8003522:	4619      	mov	r1, r3
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f805 	bl	8003534 <I2Cx_Error>
  }
  return status;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 ffc4 	bl	80044ce <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ff6c 	bl	8003424 <I2Cx_Init>
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <SENSOR_IO_Init+0x10>)
 800355a:	f7ff ff63 	bl	8003424 <I2Cx_Init>
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200013cc 	.word	0x200013cc

08003568 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af02      	add	r7, sp, #8
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
 8003572:	460b      	mov	r3, r1
 8003574:	71bb      	strb	r3, [r7, #6]
 8003576:	4613      	mov	r3, r2
 8003578:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800357a:	79bb      	ldrb	r3, [r7, #6]
 800357c:	b29a      	uxth	r2, r3
 800357e:	79f9      	ldrb	r1, [r7, #7]
 8003580:	2301      	movs	r3, #1
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	1d7b      	adds	r3, r7, #5
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2301      	movs	r3, #1
 800358a:	4803      	ldr	r0, [pc, #12]	; (8003598 <SENSOR_IO_Write+0x30>)
 800358c:	f7ff ffa5 	bl	80034da <I2Cx_WriteMultiple>
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	200013cc 	.word	0x200013cc

0800359c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	4603      	mov	r3, r0
 80035a4:	460a      	mov	r2, r1
 80035a6:	71fb      	strb	r3, [r7, #7]
 80035a8:	4613      	mov	r3, r2
 80035aa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80035b0:	79bb      	ldrb	r3, [r7, #6]
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	79f9      	ldrb	r1, [r7, #7]
 80035b6:	2301      	movs	r3, #1
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	f107 030f 	add.w	r3, r7, #15
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2301      	movs	r3, #1
 80035c2:	4804      	ldr	r0, [pc, #16]	; (80035d4 <SENSOR_IO_Read+0x38>)
 80035c4:	f7ff ff5c 	bl	8003480 <I2Cx_ReadMultiple>

  return read_value;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200013cc 	.word	0x200013cc

080035d8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af02      	add	r7, sp, #8
 80035de:	603a      	str	r2, [r7, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
 80035e6:	460b      	mov	r3, r1
 80035e8:	71bb      	strb	r3, [r7, #6]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80035ee:	79bb      	ldrb	r3, [r7, #6]
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	79f9      	ldrb	r1, [r7, #7]
 80035f4:	88bb      	ldrh	r3, [r7, #4]
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2301      	movs	r3, #1
 80035fe:	4804      	ldr	r0, [pc, #16]	; (8003610 <SENSOR_IO_ReadMultiple+0x38>)
 8003600:	f7ff ff3e 	bl	8003480 <I2Cx_ReadMultiple>
 8003604:	4603      	mov	r3, r0
 8003606:	b29b      	uxth	r3, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200013cc 	.word	0x200013cc

08003614 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <BSP_TSENSOR_Init+0x30>)
 8003620:	4a09      	ldr	r2, [pc, #36]	; (8003648 <BSP_TSENSOR_Init+0x34>)
 8003622:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003624:	f7ff ff96 	bl	8003554 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <BSP_TSENSOR_Init+0x30>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2100      	movs	r1, #0
 8003630:	20be      	movs	r0, #190	; 0xbe
 8003632:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003638:	79fb      	ldrb	r3, [r7, #7]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200009d0 	.word	0x200009d0
 8003648:	20000008 	.word	0x20000008

0800364c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <BSP_TSENSOR_ReadTemp+0x18>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	20be      	movs	r0, #190	; 0xbe
 8003658:	4798      	blx	r3
 800365a:	eef0 7a40 	vmov.f32	s15, s0
}
 800365e:	eeb0 0a67 	vmov.f32	s0, s15
 8003662:	bd80      	pop	{r7, pc}
 8003664:	200009d0 	.word	0x200009d0

08003668 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003672:	2003      	movs	r0, #3
 8003674:	f000 f966 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003678:	200f      	movs	r0, #15
 800367a:	f000 f815 	bl	80036a8 <HAL_InitTick>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	71fb      	strb	r3, [r7, #7]
 8003688:	e001      	b.n	800368e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800368a:	f000 f805 	bl	8003698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800368e:	79fb      	ldrb	r3, [r7, #7]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_InitTick+0x6c>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d023      	beq.n	8003704 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036bc:	4b16      	ldr	r3, [pc, #88]	; (8003718 <HAL_InitTick+0x70>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_InitTick+0x6c>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f96b 	bl	80039ae <HAL_SYSTICK_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b0f      	cmp	r3, #15
 80036e2:	d809      	bhi.n	80036f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e4:	2200      	movs	r2, #0
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	f000 f935 	bl	800395a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036f0:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_InitTick+0x74>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e007      	b.n	8003708 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e004      	b.n	8003708 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	e001      	b.n	8003708 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000030 	.word	0x20000030
 8003718:	20000004 	.word	0x20000004
 800371c:	2000002c 	.word	0x2000002c

08003720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_IncTick+0x20>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_IncTick+0x24>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_IncTick+0x24>)
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000030 	.word	0x20000030
 8003744:	20001418 	.word	0x20001418

08003748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return uwTick;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_GetTick+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20001418 	.word	0x20001418

08003760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003768:	f7ff ffee 	bl	8003748 <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d005      	beq.n	8003786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_Delay+0x40>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003786:	bf00      	nop
 8003788:	f7ff ffde 	bl	8003748 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d8f7      	bhi.n	8003788 <HAL_Delay+0x28>
  {
  }
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000030 	.word	0x20000030

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800396c:	f7ff ff3e 	bl	80037ec <__NVIC_GetPriorityGrouping>
 8003970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f7ff ff8e 	bl	8003898 <NVIC_EncodePriority>
 800397c:	4602      	mov	r2, r0
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff5d 	bl	8003844 <__NVIC_SetPriority>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff31 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffa2 	bl	8003900 <SysTick_Config>
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d005      	beq.n	80039ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2204      	movs	r2, #4
 80039e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	e047      	b.n	8003a7a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 020e 	bic.w	r2, r2, #14
 80039f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f003 021c 	and.w	r2, r3, #28
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a36:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a58:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
    }
  }
  return status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a96:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <HAL_FLASH_Program+0xd0>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_FLASH_Program+0x1e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e053      	b.n	8003b4a <HAL_FLASH_Program+0xc6>
 8003aa2:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <HAL_FLASH_Program+0xd0>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003aa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003aac:	f000 f894 	bl	8003bd8 <FLASH_WaitForLastOperation>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d143      	bne.n	8003b42 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003aba:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <HAL_FLASH_Program+0xd0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_FLASH_Program+0xd4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003acc:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_FLASH_Program+0xd4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a21      	ldr	r2, [pc, #132]	; (8003b58 <HAL_FLASH_Program+0xd4>)
 8003ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_FLASH_Program+0xd0>)
 8003ada:	2202      	movs	r2, #2
 8003adc:	771a      	strb	r2, [r3, #28]
 8003ade:	e002      	b.n	8003ae6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003ae0:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <HAL_FLASH_Program+0xd0>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d107      	bne.n	8003afc <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f000 f8c9 	bl	8003c88 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003af6:	2301      	movs	r3, #1
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	e010      	b.n	8003b1e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d002      	beq.n	8003b08 <HAL_FLASH_Program+0x84>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d10a      	bne.n	8003b1e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	68b8      	ldr	r0, [r7, #8]
 8003b0e:	f000 f8df 	bl	8003cd0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d102      	bne.n	8003b1e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003b18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b1c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b22:	f000 f859 	bl	8003bd8 <FLASH_WaitForLastOperation>
 8003b26:	4603      	mov	r3, r0
 8003b28:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d006      	beq.n	8003b3e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_FLASH_Program+0xd4>)
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	4907      	ldr	r1, [pc, #28]	; (8003b58 <HAL_FLASH_Program+0xd4>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003b3e:	f000 fa19 	bl	8003f74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b42:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_FLASH_Program+0xd0>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]

  return status;
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000034 	.word	0x20000034
 8003b58:	40022000 	.word	0x40022000

08003b5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_FLASH_Unlock+0x38>)
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da0b      	bge.n	8003b86 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_FLASH_Unlock+0x38>)
 8003b70:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_FLASH_Unlock+0x3c>)
 8003b72:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b74:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <HAL_FLASH_Unlock+0x38>)
 8003b76:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <HAL_FLASH_Unlock+0x40>)
 8003b78:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_FLASH_Unlock+0x38>)
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da01      	bge.n	8003b86 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003b86:	79fb      	ldrb	r3, [r7, #7]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	40022000 	.word	0x40022000
 8003b98:	45670123 	.word	0x45670123
 8003b9c:	cdef89ab 	.word	0xcdef89ab

08003ba0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_FLASH_Lock+0x1c>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_FLASH_Lock+0x1c>)
 8003baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40022000 	.word	0x40022000

08003bc0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_FLASH_GetError+0x14>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000034 	.word	0x20000034

08003bd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003be0:	f7ff fdb2 	bl	8003748 <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003be6:	e00d      	b.n	8003c04 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d009      	beq.n	8003c04 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003bf0:	f7ff fdaa 	bl	8003748 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d801      	bhi.n	8003c04 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e036      	b.n	8003c72 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <FLASH_WaitForLastOperation+0xa4>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1eb      	bne.n	8003be8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <FLASH_WaitForLastOperation+0xa4>)
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <FLASH_WaitForLastOperation+0xa8>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01e      	beq.n	8003c5e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003c20:	4b18      	ldr	r3, [pc, #96]	; (8003c84 <FLASH_WaitForLastOperation+0xac>)
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <FLASH_WaitForLastOperation+0xac>)
 8003c2a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <FLASH_WaitForLastOperation+0x6e>
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <FLASH_WaitForLastOperation+0xa4>)
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c40:	490e      	ldr	r1, [pc, #56]	; (8003c7c <FLASH_WaitForLastOperation+0xa4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	618b      	str	r3, [r1, #24]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <FLASH_WaitForLastOperation+0x82>
 8003c50:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <FLASH_WaitForLastOperation+0xa4>)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c58:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e009      	b.n	8003c72 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <FLASH_WaitForLastOperation+0xa4>)
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <FLASH_WaitForLastOperation+0xa4>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40022000 	.word	0x40022000
 8003c80:	0002c3fa 	.word	0x0002c3fa
 8003c84:	20000034 	.word	0x20000034

08003c88 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003c88:	b490      	push	{r4, r7}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <FLASH_Program_DoubleWord+0x44>)
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <FLASH_Program_DoubleWord+0x44>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003ca6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003caa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f04f 0400 	mov.w	r4, #0
 8003cb6:	0013      	movs	r3, r2
 8003cb8:	2400      	movs	r4, #0
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	3204      	adds	r2, #4
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc90      	pop	{r4, r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40022000 	.word	0x40022000

08003cd0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003ce6:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <FLASH_Program_Fast+0x64>)
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <FLASH_Program_Fast+0x64>)
 8003cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cf0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cf8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cfc:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	617b      	str	r3, [r7, #20]
    row_index--;
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003d18:	7ffb      	ldrb	r3, [r7, #31]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ef      	bne.n	8003cfe <FLASH_Program_Fast+0x2e>
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003d28:	bf00      	nop
 8003d2a:	3724      	adds	r7, #36	; 0x24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40022000 	.word	0x40022000

08003d38 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d42:	4b4c      	ldr	r3, [pc, #304]	; (8003e74 <HAL_FLASHEx_Erase+0x13c>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_FLASHEx_Erase+0x16>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e08d      	b.n	8003e6a <HAL_FLASHEx_Erase+0x132>
 8003d4e:	4b49      	ldr	r3, [pc, #292]	; (8003e74 <HAL_FLASHEx_Erase+0x13c>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d58:	f7ff ff3e 	bl	8003bd8 <FLASH_WaitForLastOperation>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d17d      	bne.n	8003e62 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d66:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <HAL_FLASHEx_Erase+0x13c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003d6c:	4b42      	ldr	r3, [pc, #264]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d019      	beq.n	8003dac <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003d78:	4b3f      	ldr	r3, [pc, #252]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3e      	ldr	r2, [pc, #248]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003d7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d82:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003d84:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003d90:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a38      	ldr	r2, [pc, #224]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003d9c:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <HAL_FLASHEx_Erase+0x13c>)
 8003d9e:	2203      	movs	r2, #3
 8003da0:	771a      	strb	r2, [r3, #28]
 8003da2:	e016      	b.n	8003dd2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003da4:	4b33      	ldr	r3, [pc, #204]	; (8003e74 <HAL_FLASHEx_Erase+0x13c>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	771a      	strb	r2, [r3, #28]
 8003daa:	e012      	b.n	8003dd2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003dac:	4b32      	ldr	r3, [pc, #200]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d009      	beq.n	8003dcc <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003db8:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2e      	ldr	r2, [pc, #184]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003dbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_FLASHEx_Erase+0x13c>)
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	771a      	strb	r2, [r3, #28]
 8003dca:	e002      	b.n	8003dd2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003dcc:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <HAL_FLASHEx_Erase+0x13c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d113      	bne.n	8003e02 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f84c 	bl	8003e7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003de8:	f7ff fef6 	bl	8003bd8 <FLASH_WaitForLastOperation>
 8003dec:	4603      	mov	r3, r0
 8003dee:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003df0:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	4a20      	ldr	r2, [pc, #128]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dfa:	f023 0304 	bic.w	r3, r3, #4
 8003dfe:	6153      	str	r3, [r2, #20]
 8003e00:	e02d      	b.n	8003e5e <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295
 8003e08:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	e01d      	b.n	8003e4e <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4619      	mov	r1, r3
 8003e18:	68b8      	ldr	r0, [r7, #8]
 8003e1a:	f000 f867 	bl	8003eec <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e22:	f7ff fed9 	bl	8003bd8 <FLASH_WaitForLastOperation>
 8003e26:	4603      	mov	r3, r0
 8003e28:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003e2a:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <HAL_FLASHEx_Erase+0x140>)
 8003e30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e34:	f023 0302 	bic.w	r3, r3, #2
 8003e38:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	601a      	str	r2, [r3, #0]
          break;
 8003e46:	e00a      	b.n	8003e5e <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3d9      	bcc.n	8003e12 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003e5e:	f000 f889 	bl	8003f74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <HAL_FLASHEx_Erase+0x13c>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]

  return status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000034 	.word	0x20000034
 8003e78:	40022000 	.word	0x40022000

08003e7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8003e84:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <FLASH_MassErase+0x6c>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d016      	beq.n	8003ebe <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <FLASH_MassErase+0x6c>)
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <FLASH_MassErase+0x6c>)
 8003ea0:	f043 0304 	orr.w	r3, r3, #4
 8003ea4:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003eb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <FLASH_MassErase+0x6c>)
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <FLASH_MassErase+0x6c>)
 8003eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eba:	6153      	str	r3, [r2, #20]
 8003ebc:	e007      	b.n	8003ece <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <FLASH_MassErase+0x6c>)
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <FLASH_MassErase+0x6c>)
 8003ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec8:	f043 0304 	orr.w	r3, r3, #4
 8003ecc:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <FLASH_MassErase+0x6c>)
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <FLASH_MassErase+0x6c>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6153      	str	r3, [r2, #20]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40022000 	.word	0x40022000

08003eec <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <FLASH_PageErase+0x84>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003f02:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	4a1a      	ldr	r2, [pc, #104]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0c:	6153      	str	r3, [r2, #20]
 8003f0e:	e011      	b.n	8003f34 <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d006      	beq.n	8003f28 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f24:	6153      	str	r3, [r2, #20]
 8003f26:	e005      	b.n	8003f34 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f32:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003f44:	490a      	ldr	r1, [pc, #40]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <FLASH_PageErase+0x84>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6153      	str	r3, [r2, #20]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40022000 	.word	0x40022000

08003f74 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <FLASH_FlushCaches+0x80>)
 8003f7c:	7f1b      	ldrb	r3, [r3, #28]
 8003f7e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d002      	beq.n	8003f8c <FLASH_FlushCaches+0x18>
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d111      	bne.n	8003fb0 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003f8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003f92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fa4:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d002      	beq.n	8003fbc <FLASH_FlushCaches+0x48>
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d111      	bne.n	8003fe0 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003fc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <FLASH_FlushCaches+0x84>)
 8003fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fde:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <FLASH_FlushCaches+0x80>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	771a      	strb	r2, [r3, #28]
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000034 	.word	0x20000034
 8003ff8:	40022000 	.word	0x40022000

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	e166      	b.n	80042da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2101      	movs	r1, #1
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	4013      	ands	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8158 	beq.w	80042d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d00b      	beq.n	8004044 <HAL_GPIO_Init+0x48>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d007      	beq.n	8004044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004038:	2b11      	cmp	r3, #17
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b12      	cmp	r3, #18
 8004042:	d130      	bne.n	80040a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800407a:	2201      	movs	r2, #1
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0201 	and.w	r2, r3, #1
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	2203      	movs	r2, #3
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4013      	ands	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0xea>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b12      	cmp	r3, #18
 80040e4:	d123      	bne.n	800412e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	08da      	lsrs	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3208      	adds	r2, #8
 80040ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	220f      	movs	r2, #15
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	08da      	lsrs	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3208      	adds	r2, #8
 8004128:	6939      	ldr	r1, [r7, #16]
 800412a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	2203      	movs	r2, #3
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0203 	and.w	r2, r3, #3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80b2 	beq.w	80042d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004170:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <HAL_GPIO_Init+0x2fc>)
 8004172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004174:	4a60      	ldr	r2, [pc, #384]	; (80042f8 <HAL_GPIO_Init+0x2fc>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6613      	str	r3, [r2, #96]	; 0x60
 800417c:	4b5e      	ldr	r3, [pc, #376]	; (80042f8 <HAL_GPIO_Init+0x2fc>)
 800417e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004188:	4a5c      	ldr	r2, [pc, #368]	; (80042fc <HAL_GPIO_Init+0x300>)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	3302      	adds	r3, #2
 8004190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	220f      	movs	r2, #15
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041b2:	d02b      	beq.n	800420c <HAL_GPIO_Init+0x210>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a52      	ldr	r2, [pc, #328]	; (8004300 <HAL_GPIO_Init+0x304>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d025      	beq.n	8004208 <HAL_GPIO_Init+0x20c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a51      	ldr	r2, [pc, #324]	; (8004304 <HAL_GPIO_Init+0x308>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d01f      	beq.n	8004204 <HAL_GPIO_Init+0x208>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a50      	ldr	r2, [pc, #320]	; (8004308 <HAL_GPIO_Init+0x30c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d019      	beq.n	8004200 <HAL_GPIO_Init+0x204>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a4f      	ldr	r2, [pc, #316]	; (800430c <HAL_GPIO_Init+0x310>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_GPIO_Init+0x200>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a4e      	ldr	r2, [pc, #312]	; (8004310 <HAL_GPIO_Init+0x314>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00d      	beq.n	80041f8 <HAL_GPIO_Init+0x1fc>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a4d      	ldr	r2, [pc, #308]	; (8004314 <HAL_GPIO_Init+0x318>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <HAL_GPIO_Init+0x1f8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a4c      	ldr	r2, [pc, #304]	; (8004318 <HAL_GPIO_Init+0x31c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_GPIO_Init+0x1f4>
 80041ec:	2307      	movs	r3, #7
 80041ee:	e00e      	b.n	800420e <HAL_GPIO_Init+0x212>
 80041f0:	2308      	movs	r3, #8
 80041f2:	e00c      	b.n	800420e <HAL_GPIO_Init+0x212>
 80041f4:	2306      	movs	r3, #6
 80041f6:	e00a      	b.n	800420e <HAL_GPIO_Init+0x212>
 80041f8:	2305      	movs	r3, #5
 80041fa:	e008      	b.n	800420e <HAL_GPIO_Init+0x212>
 80041fc:	2304      	movs	r3, #4
 80041fe:	e006      	b.n	800420e <HAL_GPIO_Init+0x212>
 8004200:	2303      	movs	r3, #3
 8004202:	e004      	b.n	800420e <HAL_GPIO_Init+0x212>
 8004204:	2302      	movs	r3, #2
 8004206:	e002      	b.n	800420e <HAL_GPIO_Init+0x212>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_GPIO_Init+0x212>
 800420c:	2300      	movs	r3, #0
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	f002 0203 	and.w	r2, r2, #3
 8004214:	0092      	lsls	r2, r2, #2
 8004216:	4093      	lsls	r3, r2
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800421e:	4937      	ldr	r1, [pc, #220]	; (80042fc <HAL_GPIO_Init+0x300>)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800422c:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_GPIO_Init+0x320>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	43db      	mvns	r3, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004250:	4a32      	ldr	r2, [pc, #200]	; (800431c <HAL_GPIO_Init+0x320>)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004256:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_GPIO_Init+0x320>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	43db      	mvns	r3, r3
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4013      	ands	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800427a:	4a28      	ldr	r2, [pc, #160]	; (800431c <HAL_GPIO_Init+0x320>)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004280:	4b26      	ldr	r3, [pc, #152]	; (800431c <HAL_GPIO_Init+0x320>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_GPIO_Init+0x320>)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042aa:	4b1c      	ldr	r3, [pc, #112]	; (800431c <HAL_GPIO_Init+0x320>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <HAL_GPIO_Init+0x320>)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3301      	adds	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f47f ae91 	bne.w	800400c <HAL_GPIO_Init+0x10>
  }
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40010000 	.word	0x40010000
 8004300:	48000400 	.word	0x48000400
 8004304:	48000800 	.word	0x48000800
 8004308:	48000c00 	.word	0x48000c00
 800430c:	48001000 	.word	0x48001000
 8004310:	48001400 	.word	0x48001400
 8004314:	48001800 	.word	0x48001800
 8004318:	48001c00 	.word	0x48001c00
 800431c:	40010400 	.word	0x40010400

08004320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	887b      	ldrh	r3, [r7, #2]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	e001      	b.n	8004342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004342:	7bfb      	ldrb	r3, [r7, #15]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	807b      	strh	r3, [r7, #2]
 800435c:	4613      	mov	r3, r2
 800435e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004360:	787b      	ldrb	r3, [r7, #1]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004366:	887a      	ldrh	r2, [r7, #2]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800436c:	e002      	b.n	8004374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004396:	4a05      	ldr	r2, [pc, #20]	; (80043ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc ff9e 	bl	80012e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40010400 	.word	0x40010400

080043b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e081      	b.n	80044c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8a8 	bl	800452c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	; 0x24
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004400:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d107      	bne.n	800442a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	e006      	b.n	8004438 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004436:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d104      	bne.n	800444a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004448:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800446c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	ea42 0103 	orr.w	r1, r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e021      	b.n	8004524 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0201 	bic.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f821 	bl	8004540 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	4608      	mov	r0, r1
 800455e:	4611      	mov	r1, r2
 8004560:	461a      	mov	r2, r3
 8004562:	4603      	mov	r3, r0
 8004564:	817b      	strh	r3, [r7, #10]
 8004566:	460b      	mov	r3, r1
 8004568:	813b      	strh	r3, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b20      	cmp	r3, #32
 8004578:	f040 80f9 	bne.w	800476e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_I2C_Mem_Write+0x34>
 8004582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0ed      	b.n	8004770 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_I2C_Mem_Write+0x4e>
 800459e:	2302      	movs	r3, #2
 80045a0:	e0e6      	b.n	8004770 <HAL_I2C_Mem_Write+0x21c>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045aa:	f7ff f8cd 	bl	8003748 <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	2319      	movs	r3, #25
 80045b6:	2201      	movs	r2, #1
 80045b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fac3 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0d1      	b.n	8004770 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2221      	movs	r2, #33	; 0x21
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a3a      	ldr	r2, [r7, #32]
 80045e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045f4:	88f8      	ldrh	r0, [r7, #6]
 80045f6:	893a      	ldrh	r2, [r7, #8]
 80045f8:	8979      	ldrh	r1, [r7, #10]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4603      	mov	r3, r0
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f9d3 	bl	80049b0 <I2C_RequestMemoryWrite>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0a9      	b.n	8004770 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2bff      	cmp	r3, #255	; 0xff
 8004624:	d90e      	bls.n	8004644 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	22ff      	movs	r2, #255	; 0xff
 800462a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004630:	b2da      	uxtb	r2, r3
 8004632:	8979      	ldrh	r1, [r7, #10]
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fba5 	bl	8004d8c <I2C_TransferConfig>
 8004642:	e00f      	b.n	8004664 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	b2da      	uxtb	r2, r3
 8004654:	8979      	ldrh	r1, [r7, #10]
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fb94 	bl	8004d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 faad 	bl	8004bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e07b      	b.n	8004770 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d034      	beq.n	800471c <HAL_I2C_Mem_Write+0x1c8>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d130      	bne.n	800471c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	2200      	movs	r2, #0
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fa3f 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e04d      	b.n	8004770 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2bff      	cmp	r3, #255	; 0xff
 80046dc:	d90e      	bls.n	80046fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	22ff      	movs	r2, #255	; 0xff
 80046e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	8979      	ldrh	r1, [r7, #10]
 80046ec:	2300      	movs	r3, #0
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fb49 	bl	8004d8c <I2C_TransferConfig>
 80046fa:	e00f      	b.n	800471c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470a:	b2da      	uxtb	r2, r3
 800470c:	8979      	ldrh	r1, [r7, #10]
 800470e:	2300      	movs	r3, #0
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fb38 	bl	8004d8c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d19e      	bne.n	8004664 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fa8c 	bl	8004c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e01a      	b.n	8004770 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2220      	movs	r2, #32
 8004740:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_I2C_Mem_Write+0x224>)
 800474e:	400b      	ands	r3, r1
 8004750:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800476e:	2302      	movs	r3, #2
  }
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	fe00e800 	.word	0xfe00e800

0800477c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	461a      	mov	r2, r3
 800478a:	4603      	mov	r3, r0
 800478c:	817b      	strh	r3, [r7, #10]
 800478e:	460b      	mov	r3, r1
 8004790:	813b      	strh	r3, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	f040 80fd 	bne.w	800499e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_I2C_Mem_Read+0x34>
 80047aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0f1      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_I2C_Mem_Read+0x4e>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0ea      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047d2:	f7fe ffb9 	bl	8003748 <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2319      	movs	r3, #25
 80047de:	2201      	movs	r2, #1
 80047e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f9af 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0d5      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2222      	movs	r2, #34	; 0x22
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800481c:	88f8      	ldrh	r0, [r7, #6]
 800481e:	893a      	ldrh	r2, [r7, #8]
 8004820:	8979      	ldrh	r1, [r7, #10]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	4603      	mov	r3, r0
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f913 	bl	8004a58 <I2C_RequestMemoryRead>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0ad      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2bff      	cmp	r3, #255	; 0xff
 800484c:	d90e      	bls.n	800486c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	22ff      	movs	r2, #255	; 0xff
 8004852:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	b2da      	uxtb	r2, r3
 800485a:	8979      	ldrh	r1, [r7, #10]
 800485c:	4b52      	ldr	r3, [pc, #328]	; (80049a8 <HAL_I2C_Mem_Read+0x22c>)
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fa91 	bl	8004d8c <I2C_TransferConfig>
 800486a:	e00f      	b.n	800488c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	b2da      	uxtb	r2, r3
 800487c:	8979      	ldrh	r1, [r7, #10]
 800487e:	4b4a      	ldr	r3, [pc, #296]	; (80049a8 <HAL_I2C_Mem_Read+0x22c>)
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa80 	bl	8004d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	2200      	movs	r2, #0
 8004894:	2104      	movs	r1, #4
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f956 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e07c      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d034      	beq.n	800494c <HAL_I2C_Mem_Read+0x1d0>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d130      	bne.n	800494c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	2200      	movs	r2, #0
 80048f2:	2180      	movs	r1, #128	; 0x80
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f927 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e04d      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	2bff      	cmp	r3, #255	; 0xff
 800490c:	d90e      	bls.n	800492c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	22ff      	movs	r2, #255	; 0xff
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	b2da      	uxtb	r2, r3
 800491a:	8979      	ldrh	r1, [r7, #10]
 800491c:	2300      	movs	r3, #0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fa31 	bl	8004d8c <I2C_TransferConfig>
 800492a:	e00f      	b.n	800494c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	b2da      	uxtb	r2, r3
 800493c:	8979      	ldrh	r1, [r7, #10]
 800493e:	2300      	movs	r3, #0
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fa20 	bl	8004d8c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d19a      	bne.n	800488c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f974 	bl	8004c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e01a      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2220      	movs	r2, #32
 8004970:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_I2C_Mem_Read+0x230>)
 800497e:	400b      	ands	r3, r1
 8004980:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e000      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	80002400 	.word	0x80002400
 80049ac:	fe00e800 	.word	0xfe00e800

080049b0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	817b      	strh	r3, [r7, #10]
 80049c2:	460b      	mov	r3, r1
 80049c4:	813b      	strh	r3, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	8979      	ldrh	r1, [r7, #10]
 80049d0:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <I2C_RequestMemoryWrite+0xa4>)
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f9d7 	bl	8004d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	69b9      	ldr	r1, [r7, #24]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f8f0 	bl	8004bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e02c      	b.n	8004a4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049f8:	893b      	ldrh	r3, [r7, #8]
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28
 8004a02:	e015      	b.n	8004a30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a04:	893b      	ldrh	r3, [r7, #8]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f8d6 	bl	8004bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e012      	b.n	8004a4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a26:	893b      	ldrh	r3, [r7, #8]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2200      	movs	r2, #0
 8004a38:	2180      	movs	r1, #128	; 0x80
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f884 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	80002000 	.word	0x80002000

08004a58 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	8979      	ldrh	r1, [r7, #10]
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <I2C_RequestMemoryRead+0xa4>)
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f984 	bl	8004d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	69b9      	ldr	r1, [r7, #24]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f89d 	bl	8004bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e02c      	b.n	8004af2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a9e:	893b      	ldrh	r3, [r7, #8]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8004aa8:	e015      	b.n	8004ad6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004aaa:	893b      	ldrh	r3, [r7, #8]
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	69b9      	ldr	r1, [r7, #24]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f883 	bl	8004bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e012      	b.n	8004af2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004acc:	893b      	ldrh	r3, [r7, #8]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2140      	movs	r1, #64	; 0x40
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f831 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	80002000 	.word	0x80002000

08004b00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d103      	bne.n	8004b1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d007      	beq.n	8004b3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	619a      	str	r2, [r3, #24]
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b58:	e022      	b.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d01e      	beq.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b62:	f7fe fdf1 	bl	8003748 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d113      	bne.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e00f      	b.n	8004bc0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d0cd      	beq.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bd4:	e02c      	b.n	8004c30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f870 	bl	8004cc0 <I2C_IsAcknowledgeFailed>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e02a      	b.n	8004c40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d01e      	beq.n	8004c30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	f7fe fda9 	bl	8003748 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d113      	bne.n	8004c30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e007      	b.n	8004c40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d1cb      	bne.n	8004bd6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c54:	e028      	b.n	8004ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f830 	bl	8004cc0 <I2C_IsAcknowledgeFailed>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e026      	b.n	8004cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fe fd6d 	bl	8003748 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d113      	bne.n	8004ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e007      	b.n	8004cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d1cf      	bne.n	8004c56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b10      	cmp	r3, #16
 8004cd8:	d151      	bne.n	8004d7e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cda:	e022      	b.n	8004d22 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d01e      	beq.n	8004d22 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce4:	f7fe fd30 	bl	8003748 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d302      	bcc.n	8004cfa <I2C_IsAcknowledgeFailed+0x3a>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d113      	bne.n	8004d22 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e02e      	b.n	8004d80 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d1d5      	bne.n	8004cdc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2210      	movs	r2, #16
 8004d36:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fedd 	bl	8004b00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <I2C_IsAcknowledgeFailed+0xc8>)
 8004d52:	400b      	ands	r3, r1
 8004d54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f043 0204 	orr.w	r2, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	fe00e800 	.word	0xfe00e800

08004d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	607b      	str	r3, [r7, #4]
 8004d96:	460b      	mov	r3, r1
 8004d98:	817b      	strh	r3, [r7, #10]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	0d5b      	lsrs	r3, r3, #21
 8004da8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <I2C_TransferConfig+0x58>)
 8004dae:	430b      	orrs	r3, r1
 8004db0:	43db      	mvns	r3, r3
 8004db2:	ea02 0103 	and.w	r1, r2, r3
 8004db6:	897b      	ldrh	r3, [r7, #10]
 8004db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dbc:	7a7b      	ldrb	r3, [r7, #9]
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	03ff63ff 	.word	0x03ff63ff

08004de8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d138      	bne.n	8004e70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e032      	b.n	8004e72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	; 0x24
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e000      	b.n	8004e72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
  }
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e84:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e90:	d102      	bne.n	8004e98 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e96:	e00b      	b.n	8004eb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004e98:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea6:	d102      	bne.n	8004eae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eac:	e000      	b.n	8004eb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004eae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40007000 	.word	0x40007000

08004ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f000 bc16 	b.w	8005700 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed4:	4ba0      	ldr	r3, [pc, #640]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ede:	4b9e      	ldr	r3, [pc, #632]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80e4 	beq.w	80050be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <HAL_RCC_OscConfig+0x4c>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	f040 808b 	bne.w	800501a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	f040 8087 	bne.w	800501a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f0c:	4b92      	ldr	r3, [pc, #584]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_OscConfig+0x64>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e3ed      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	4b8b      	ldr	r3, [pc, #556]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <HAL_RCC_OscConfig+0x7e>
 8004f34:	4b88      	ldr	r3, [pc, #544]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f3c:	e005      	b.n	8004f4a <HAL_RCC_OscConfig+0x8a>
 8004f3e:	4b86      	ldr	r3, [pc, #536]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d223      	bcs.n	8004f96 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fdc8 	bl	8005ae8 <RCC_SetFlashLatencyFromMSIRange>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e3ce      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f62:	4b7d      	ldr	r3, [pc, #500]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7c      	ldr	r2, [pc, #496]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f68:	f043 0308 	orr.w	r3, r3, #8
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b7a      	ldr	r3, [pc, #488]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	4977      	ldr	r1, [pc, #476]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f80:	4b75      	ldr	r3, [pc, #468]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	4972      	ldr	r1, [pc, #456]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]
 8004f94:	e025      	b.n	8004fe2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f96:	4b70      	ldr	r3, [pc, #448]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a6f      	ldr	r2, [pc, #444]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004f9c:	f043 0308 	orr.w	r3, r3, #8
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	4b6d      	ldr	r3, [pc, #436]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	496a      	ldr	r1, [pc, #424]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fb4:	4b68      	ldr	r3, [pc, #416]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	4965      	ldr	r1, [pc, #404]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fd88 	bl	8005ae8 <RCC_SetFlashLatencyFromMSIRange>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e38e      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fe2:	f000 fcbf 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 8004fe6:	4601      	mov	r1, r0
 8004fe8:	4b5b      	ldr	r3, [pc, #364]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	4a5a      	ldr	r2, [pc, #360]	; (800515c <HAL_RCC_OscConfig+0x29c>)
 8004ff4:	5cd3      	ldrb	r3, [r2, r3]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	fa21 f303 	lsr.w	r3, r1, r3
 8004ffe:	4a58      	ldr	r2, [pc, #352]	; (8005160 <HAL_RCC_OscConfig+0x2a0>)
 8005000:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005002:	4b58      	ldr	r3, [pc, #352]	; (8005164 <HAL_RCC_OscConfig+0x2a4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fb4e 	bl	80036a8 <HAL_InitTick>
 800500c:	4603      	mov	r3, r0
 800500e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d052      	beq.n	80050bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	e372      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d032      	beq.n	8005088 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005022:	4b4d      	ldr	r3, [pc, #308]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a4c      	ldr	r2, [pc, #304]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800502e:	f7fe fb8b 	bl	8003748 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005036:	f7fe fb87 	bl	8003748 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e35b      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005048:	4b43      	ldr	r3, [pc, #268]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005054:	4b40      	ldr	r3, [pc, #256]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a3f      	ldr	r2, [pc, #252]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 800505a:	f043 0308 	orr.w	r3, r3, #8
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b3d      	ldr	r3, [pc, #244]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	493a      	ldr	r1, [pc, #232]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 800506e:	4313      	orrs	r3, r2
 8005070:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005072:	4b39      	ldr	r3, [pc, #228]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	4935      	ldr	r1, [pc, #212]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005082:	4313      	orrs	r3, r2
 8005084:	604b      	str	r3, [r1, #4]
 8005086:	e01a      	b.n	80050be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005088:	4b33      	ldr	r3, [pc, #204]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a32      	ldr	r2, [pc, #200]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005094:	f7fe fb58 	bl	8003748 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800509c:	f7fe fb54 	bl	8003748 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e328      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ae:	4b2a      	ldr	r3, [pc, #168]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x1dc>
 80050ba:	e000      	b.n	80050be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d073      	beq.n	80051b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_OscConfig+0x21c>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d10e      	bne.n	80050f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d10b      	bne.n	80050f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050dc:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d063      	beq.n	80051b0 <HAL_RCC_OscConfig+0x2f0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d15f      	bne.n	80051b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e305      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fc:	d106      	bne.n	800510c <HAL_RCC_OscConfig+0x24c>
 80050fe:	4b16      	ldr	r3, [pc, #88]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a15      	ldr	r2, [pc, #84]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e01d      	b.n	8005148 <HAL_RCC_OscConfig+0x288>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005114:	d10c      	bne.n	8005130 <HAL_RCC_OscConfig+0x270>
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a0f      	ldr	r2, [pc, #60]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 800511c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e00b      	b.n	8005148 <HAL_RCC_OscConfig+0x288>
 8005130:	4b09      	ldr	r3, [pc, #36]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a08      	ldr	r2, [pc, #32]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a05      	ldr	r2, [pc, #20]	; (8005158 <HAL_RCC_OscConfig+0x298>)
 8005142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01b      	beq.n	8005188 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fe fafa 	bl	8003748 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005156:	e010      	b.n	800517a <HAL_RCC_OscConfig+0x2ba>
 8005158:	40021000 	.word	0x40021000
 800515c:	0800a710 	.word	0x0800a710
 8005160:	20000004 	.word	0x20000004
 8005164:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005168:	f7fe faee 	bl	8003748 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	; 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e2c2      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800517a:	4baf      	ldr	r3, [pc, #700]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x2a8>
 8005186:	e014      	b.n	80051b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fe fade 	bl	8003748 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005190:	f7fe fada 	bl	8003748 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	; 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e2ae      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051a2:	4ba5      	ldr	r3, [pc, #660]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x2d0>
 80051ae:	e000      	b.n	80051b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d060      	beq.n	8005280 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_OscConfig+0x310>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d119      	bne.n	80051fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d116      	bne.n	80051fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d0:	4b99      	ldr	r3, [pc, #612]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_OscConfig+0x328>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e28b      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e8:	4b93      	ldr	r3, [pc, #588]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	061b      	lsls	r3, r3, #24
 80051f6:	4990      	ldr	r1, [pc, #576]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051fc:	e040      	b.n	8005280 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d023      	beq.n	800524e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005206:	4b8c      	ldr	r3, [pc, #560]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a8b      	ldr	r2, [pc, #556]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 800520c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fe fa99 	bl	8003748 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800521a:	f7fe fa95 	bl	8003748 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e269      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800522c:	4b82      	ldr	r3, [pc, #520]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005238:	4b7f      	ldr	r3, [pc, #508]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	061b      	lsls	r3, r3, #24
 8005246:	497c      	ldr	r1, [pc, #496]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]
 800524c:	e018      	b.n	8005280 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524e:	4b7a      	ldr	r3, [pc, #488]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a79      	ldr	r2, [pc, #484]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 8005254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525a:	f7fe fa75 	bl	8003748 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005262:	f7fe fa71 	bl	8003748 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e245      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005274:	4b70      	ldr	r3, [pc, #448]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d03c      	beq.n	8005306 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01c      	beq.n	80052ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005294:	4b68      	ldr	r3, [pc, #416]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529a:	4a67      	ldr	r2, [pc, #412]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a4:	f7fe fa50 	bl	8003748 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ac:	f7fe fa4c 	bl	8003748 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e220      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052be:	4b5e      	ldr	r3, [pc, #376]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80052c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0ef      	beq.n	80052ac <HAL_RCC_OscConfig+0x3ec>
 80052cc:	e01b      	b.n	8005306 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ce:	4b5a      	ldr	r3, [pc, #360]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80052d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d4:	4a58      	ldr	r2, [pc, #352]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7fe fa33 	bl	8003748 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e6:	f7fe fa2f 	bl	8003748 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e203      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052f8:	4b4f      	ldr	r3, [pc, #316]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80052fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1ef      	bne.n	80052e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 80a6 	beq.w	8005460 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005314:	2300      	movs	r3, #0
 8005316:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005318:	4b47      	ldr	r3, [pc, #284]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10d      	bne.n	8005340 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005324:	4b44      	ldr	r3, [pc, #272]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	4a43      	ldr	r2, [pc, #268]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 800532a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532e:	6593      	str	r3, [r2, #88]	; 0x58
 8005330:	4b41      	ldr	r3, [pc, #260]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800533c:	2301      	movs	r3, #1
 800533e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005340:	4b3e      	ldr	r3, [pc, #248]	; (800543c <HAL_RCC_OscConfig+0x57c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d118      	bne.n	800537e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800534c:	4b3b      	ldr	r3, [pc, #236]	; (800543c <HAL_RCC_OscConfig+0x57c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a3a      	ldr	r2, [pc, #232]	; (800543c <HAL_RCC_OscConfig+0x57c>)
 8005352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005358:	f7fe f9f6 	bl	8003748 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005360:	f7fe f9f2 	bl	8003748 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e1c6      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005372:	4b32      	ldr	r3, [pc, #200]	; (800543c <HAL_RCC_OscConfig+0x57c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d108      	bne.n	8005398 <HAL_RCC_OscConfig+0x4d8>
 8005386:	4b2c      	ldr	r3, [pc, #176]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538c:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005396:	e024      	b.n	80053e2 <HAL_RCC_OscConfig+0x522>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b05      	cmp	r3, #5
 800539e:	d110      	bne.n	80053c2 <HAL_RCC_OscConfig+0x502>
 80053a0:	4b25      	ldr	r3, [pc, #148]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	4a24      	ldr	r2, [pc, #144]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80053a8:	f043 0304 	orr.w	r3, r3, #4
 80053ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053b0:	4b21      	ldr	r3, [pc, #132]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b6:	4a20      	ldr	r2, [pc, #128]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053c0:	e00f      	b.n	80053e2 <HAL_RCC_OscConfig+0x522>
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	4a1b      	ldr	r2, [pc, #108]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053d2:	4b19      	ldr	r3, [pc, #100]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d8:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 80053da:	f023 0304 	bic.w	r3, r3, #4
 80053de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d016      	beq.n	8005418 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ea:	f7fe f9ad 	bl	8003748 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f0:	e00a      	b.n	8005408 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f2:	f7fe f9a9 	bl	8003748 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005400:	4293      	cmp	r3, r2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e17b      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_RCC_OscConfig+0x578>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0ed      	beq.n	80053f2 <HAL_RCC_OscConfig+0x532>
 8005416:	e01a      	b.n	800544e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005418:	f7fe f996 	bl	8003748 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800541e:	e00f      	b.n	8005440 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005420:	f7fe f992 	bl	8003748 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	; 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d906      	bls.n	8005440 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e164      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
 8005436:	bf00      	nop
 8005438:	40021000 	.word	0x40021000
 800543c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005440:	4ba8      	ldr	r3, [pc, #672]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e8      	bne.n	8005420 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800544e:	7ffb      	ldrb	r3, [r7, #31]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d105      	bne.n	8005460 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005454:	4ba3      	ldr	r3, [pc, #652]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005458:	4aa2      	ldr	r2, [pc, #648]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 800545a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d03c      	beq.n	80054e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01c      	beq.n	80054ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005474:	4b9b      	ldr	r3, [pc, #620]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800547a:	4a9a      	ldr	r2, [pc, #616]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005484:	f7fe f960 	bl	8003748 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800548c:	f7fe f95c 	bl	8003748 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e130      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800549e:	4b91      	ldr	r3, [pc, #580]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80054a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0ef      	beq.n	800548c <HAL_RCC_OscConfig+0x5cc>
 80054ac:	e01b      	b.n	80054e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054ae:	4b8d      	ldr	r3, [pc, #564]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80054b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b4:	4a8b      	ldr	r2, [pc, #556]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80054b6:	f023 0301 	bic.w	r3, r3, #1
 80054ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054be:	f7fe f943 	bl	8003748 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054c6:	f7fe f93f 	bl	8003748 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e113      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054d8:	4b82      	ldr	r3, [pc, #520]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80054da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1ef      	bne.n	80054c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 8107 	beq.w	80056fe <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	f040 80cb 	bne.w	8005690 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054fa:	4b7a      	ldr	r3, [pc, #488]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f003 0203 	and.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	429a      	cmp	r2, r3
 800550c:	d12c      	bne.n	8005568 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	3b01      	subs	r3, #1
 800551a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d123      	bne.n	8005568 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d11b      	bne.n	8005568 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d113      	bne.n	8005568 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	3b01      	subs	r3, #1
 800554e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d109      	bne.n	8005568 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	3b01      	subs	r3, #1
 8005562:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d06d      	beq.n	8005644 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b0c      	cmp	r3, #12
 800556c:	d068      	beq.n	8005640 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800556e:	4b5d      	ldr	r3, [pc, #372]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d105      	bne.n	8005586 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800557a:	4b5a      	ldr	r3, [pc, #360]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0ba      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800558a:	4b56      	ldr	r3, [pc, #344]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a55      	ldr	r2, [pc, #340]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005594:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005596:	f7fe f8d7 	bl	8003748 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559e:	f7fe f8d3 	bl	8003748 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e0a7      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b0:	4b4c      	ldr	r3, [pc, #304]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055bc:	4b49      	ldr	r3, [pc, #292]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <HAL_RCC_OscConfig+0x828>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055cc:	3a01      	subs	r2, #1
 80055ce:	0112      	lsls	r2, r2, #4
 80055d0:	4311      	orrs	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055d6:	0212      	lsls	r2, r2, #8
 80055d8:	4311      	orrs	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055de:	0852      	lsrs	r2, r2, #1
 80055e0:	3a01      	subs	r2, #1
 80055e2:	0552      	lsls	r2, r2, #21
 80055e4:	4311      	orrs	r1, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055ea:	0852      	lsrs	r2, r2, #1
 80055ec:	3a01      	subs	r2, #1
 80055ee:	0652      	lsls	r2, r2, #25
 80055f0:	4311      	orrs	r1, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055f6:	06d2      	lsls	r2, r2, #27
 80055f8:	430a      	orrs	r2, r1
 80055fa:	493a      	ldr	r1, [pc, #232]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005600:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800560a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800560c:	4b35      	ldr	r3, [pc, #212]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a34      	ldr	r2, [pc, #208]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005616:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005618:	f7fe f896 	bl	8003748 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005620:	f7fe f892 	bl	8003748 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e066      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005632:	4b2c      	ldr	r3, [pc, #176]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800563e:	e05e      	b.n	80056fe <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e05d      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005644:	4b27      	ldr	r3, [pc, #156]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d156      	bne.n	80056fe <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005650:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800565a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800565c:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a20      	ldr	r2, [pc, #128]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005666:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005668:	f7fe f86e 	bl	8003748 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005670:	f7fe f86a 	bl	8003748 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e03e      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005682:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x7b0>
 800568e:	e036      	b.n	80056fe <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d031      	beq.n	80056fa <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 800569c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d105      	bne.n	80056ba <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80056b4:	f023 0303 	bic.w	r3, r3, #3
 80056b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <HAL_RCC_OscConfig+0x824>)
 80056c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80056c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ca:	f7fe f83d 	bl	8003748 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d0:	e00c      	b.n	80056ec <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d2:	f7fe f839 	bl	8003748 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d905      	bls.n	80056ec <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e00d      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
 80056e4:	40021000 	.word	0x40021000
 80056e8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <HAL_RCC_OscConfig+0x848>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1ec      	bne.n	80056d2 <HAL_RCC_OscConfig+0x812>
 80056f8:	e001      	b.n	80056fe <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40021000 	.word	0x40021000

0800570c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e10f      	b.n	8005944 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005724:	4b89      	ldr	r3, [pc, #548]	; (800594c <HAL_RCC_ClockConfig+0x240>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d910      	bls.n	8005754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005732:	4b86      	ldr	r3, [pc, #536]	; (800594c <HAL_RCC_ClockConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 020f 	bic.w	r2, r3, #15
 800573a:	4984      	ldr	r1, [pc, #528]	; (800594c <HAL_RCC_ClockConfig+0x240>)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	4313      	orrs	r3, r2
 8005740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005742:	4b82      	ldr	r3, [pc, #520]	; (800594c <HAL_RCC_ClockConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0f7      	b.n	8005944 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8089 	beq.w	8005874 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b03      	cmp	r3, #3
 8005768:	d133      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576a:	4b79      	ldr	r3, [pc, #484]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e0e4      	b.n	8005944 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800577a:	f000 fa0f 	bl	8005b9c <RCC_GetSysClockFreqFromPLLSource>
 800577e:	4602      	mov	r2, r0
 8005780:	4b74      	ldr	r3, [pc, #464]	; (8005954 <HAL_RCC_ClockConfig+0x248>)
 8005782:	429a      	cmp	r2, r3
 8005784:	d955      	bls.n	8005832 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005786:	4b72      	ldr	r3, [pc, #456]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005792:	4b6f      	ldr	r3, [pc, #444]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579a:	4a6d      	ldr	r2, [pc, #436]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 800579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e044      	b.n	8005832 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d03e      	beq.n	8005832 <HAL_RCC_ClockConfig+0x126>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d13a      	bne.n	8005832 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057bc:	4b64      	ldr	r3, [pc, #400]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c4:	4a62      	ldr	r2, [pc, #392]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 80057c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e02f      	b.n	8005832 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d107      	bne.n	80057ea <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057da:	4b5d      	ldr	r3, [pc, #372]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d115      	bne.n	8005812 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e0ac      	b.n	8005944 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d107      	bne.n	8005802 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057f2:	4b57      	ldr	r3, [pc, #348]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0a0      	b.n	8005944 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005802:	4b53      	ldr	r3, [pc, #332]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e098      	b.n	8005944 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005812:	f000 f8a7 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 8005816:	4602      	mov	r2, r0
 8005818:	4b4e      	ldr	r3, [pc, #312]	; (8005954 <HAL_RCC_ClockConfig+0x248>)
 800581a:	429a      	cmp	r2, r3
 800581c:	d909      	bls.n	8005832 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800581e:	4b4c      	ldr	r3, [pc, #304]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005826:	4a4a      	ldr	r2, [pc, #296]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005832:	4b47      	ldr	r3, [pc, #284]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 0203 	bic.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	4944      	ldr	r1, [pc, #272]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005840:	4313      	orrs	r3, r2
 8005842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005844:	f7fd ff80 	bl	8003748 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584a:	e00a      	b.n	8005862 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fd ff7c 	bl	8003748 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e070      	b.n	8005944 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005862:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 020c 	and.w	r2, r3, #12
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	429a      	cmp	r2, r3
 8005872:	d1eb      	bne.n	800584c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005880:	4b33      	ldr	r3, [pc, #204]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	4930      	ldr	r1, [pc, #192]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 800588e:	4313      	orrs	r3, r2
 8005890:	608b      	str	r3, [r1, #8]
 8005892:	e008      	b.n	80058a6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	d105      	bne.n	80058a6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800589a:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4a2c      	ldr	r2, [pc, #176]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 80058a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058a4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058a6:	4b29      	ldr	r3, [pc, #164]	; (800594c <HAL_RCC_ClockConfig+0x240>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d210      	bcs.n	80058d6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b4:	4b25      	ldr	r3, [pc, #148]	; (800594c <HAL_RCC_ClockConfig+0x240>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f023 020f 	bic.w	r2, r3, #15
 80058bc:	4923      	ldr	r1, [pc, #140]	; (800594c <HAL_RCC_ClockConfig+0x240>)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <HAL_RCC_ClockConfig+0x240>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d001      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e036      	b.n	8005944 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	4918      	ldr	r1, [pc, #96]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005900:	4b13      	ldr	r3, [pc, #76]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4910      	ldr	r1, [pc, #64]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 8005910:	4313      	orrs	r3, r2
 8005912:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005914:	f000 f826 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 8005918:	4601      	mov	r1, r0
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <HAL_RCC_ClockConfig+0x244>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	091b      	lsrs	r3, r3, #4
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	4a0c      	ldr	r2, [pc, #48]	; (8005958 <HAL_RCC_ClockConfig+0x24c>)
 8005926:	5cd3      	ldrb	r3, [r2, r3]
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	fa21 f303 	lsr.w	r3, r1, r3
 8005930:	4a0a      	ldr	r2, [pc, #40]	; (800595c <HAL_RCC_ClockConfig+0x250>)
 8005932:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <HAL_RCC_ClockConfig+0x254>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f7fd feb5 	bl	80036a8 <HAL_InitTick>
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]

  return status;
 8005942:	7bfb      	ldrb	r3, [r7, #15]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40022000 	.word	0x40022000
 8005950:	40021000 	.word	0x40021000
 8005954:	04c4b400 	.word	0x04c4b400
 8005958:	0800a710 	.word	0x0800a710
 800595c:	20000004 	.word	0x20000004
 8005960:	2000002c 	.word	0x2000002c

08005964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005964:	b480      	push	{r7}
 8005966:	b089      	sub	sp, #36	; 0x24
 8005968:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	2300      	movs	r3, #0
 8005970:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005972:	4b3d      	ldr	r3, [pc, #244]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x104>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800597c:	4b3a      	ldr	r3, [pc, #232]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x104>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_RCC_GetSysClockFreq+0x34>
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d121      	bne.n	80059d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d11e      	bne.n	80059d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005998:	4b33      	ldr	r3, [pc, #204]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x104>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d107      	bne.n	80059b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059a4:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x104>)
 80059a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059aa:	0a1b      	lsrs	r3, r3, #8
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	e005      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059b4:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x104>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059c0:	4a2a      	ldr	r2, [pc, #168]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10d      	bne.n	80059ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d102      	bne.n	80059e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059dc:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e004      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059e8:	4b22      	ldr	r3, [pc, #136]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x110>)
 80059ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2b0c      	cmp	r3, #12
 80059f0:	d133      	bne.n	8005a5a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059f2:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x104>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d002      	beq.n	8005a08 <HAL_RCC_GetSysClockFreq+0xa4>
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d003      	beq.n	8005a0e <HAL_RCC_GetSysClockFreq+0xaa>
 8005a06:	e005      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a08:	4b19      	ldr	r3, [pc, #100]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a0a:	617b      	str	r3, [r7, #20]
      break;
 8005a0c:	e005      	b.n	8005a1a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a0e:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a10:	617b      	str	r3, [r7, #20]
      break;
 8005a12:	e002      	b.n	8005a1a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	617b      	str	r3, [r7, #20]
      break;
 8005a18:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	3301      	adds	r3, #1
 8005a26:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	0a1b      	lsrs	r3, r3, #8
 8005a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	fb02 f203 	mul.w	r2, r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x104>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	0e5b      	lsrs	r3, r3, #25
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3724      	adds	r7, #36	; 0x24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	0800a728 	.word	0x0800a728
 8005a70:	00f42400 	.word	0x00f42400
 8005a74:	007a1200 	.word	0x007a1200

08005a78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000004 	.word	0x20000004

08005a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a94:	f7ff fff0 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005a98:	4601      	mov	r1, r0
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	0a1b      	lsrs	r3, r3, #8
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aa6:	5cd3      	ldrb	r3, [r2, r3]
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	0800a720 	.word	0x0800a720

08005abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ac0:	f7ff ffda 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005ac4:	4601      	mov	r1, r0
 8005ac6:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	0adb      	lsrs	r3, r3, #11
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ad2:	5cd3      	ldrb	r3, [r2, r3]
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	0800a720 	.word	0x0800a720

08005ae8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b00:	f7ff f9be 	bl	8004e80 <HAL_PWREx_GetVoltageRange>
 8005b04:	6178      	str	r0, [r7, #20]
 8005b06:	e014      	b.n	8005b32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b08:	4b22      	ldr	r3, [pc, #136]	; (8005b94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0c:	4a21      	ldr	r2, [pc, #132]	; (8005b94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b12:	6593      	str	r3, [r2, #88]	; 0x58
 8005b14:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b20:	f7ff f9ae 	bl	8004e80 <HAL_PWREx_GetVoltageRange>
 8005b24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b26:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	4a1a      	ldr	r2, [pc, #104]	; (8005b94 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b38:	d10b      	bne.n	8005b52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d913      	bls.n	8005b68 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2ba0      	cmp	r3, #160	; 0xa0
 8005b44:	d902      	bls.n	8005b4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b46:	2302      	movs	r3, #2
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	e00d      	b.n	8005b68 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	e00a      	b.n	8005b68 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b7f      	cmp	r3, #127	; 0x7f
 8005b56:	d902      	bls.n	8005b5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005b58:	2302      	movs	r3, #2
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	e004      	b.n	8005b68 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b70      	cmp	r3, #112	; 0x70
 8005b62:	d101      	bne.n	8005b68 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b64:	2301      	movs	r3, #1
 8005b66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 020f 	bic.w	r2, r3, #15
 8005b70:	4909      	ldr	r1, [pc, #36]	; (8005b98 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b78:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d001      	beq.n	8005b8a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000
 8005b98:	40022000 	.word	0x40022000

08005b9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005ba6:	4b2d      	ldr	r3, [pc, #180]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d118      	bne.n	8005be4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bb2:	4b2a      	ldr	r3, [pc, #168]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d107      	bne.n	8005bce <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bbe:	4b27      	ldr	r3, [pc, #156]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e005      	b.n	8005bda <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005bce:	4b23      	ldr	r3, [pc, #140]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005bda:	4a21      	ldr	r2, [pc, #132]	; (8005c60 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005be4:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d002      	beq.n	8005bfa <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d003      	beq.n	8005c00 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005bf8:	e005      	b.n	8005c06 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005bfc:	613b      	str	r3, [r7, #16]
    break;
 8005bfe:	e005      	b.n	8005c0c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c02:	613b      	str	r3, [r7, #16]
    break;
 8005c04:	e002      	b.n	8005c0c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	613b      	str	r3, [r7, #16]
    break;
 8005c0a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c0c:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	091b      	lsrs	r3, r3, #4
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	3301      	adds	r3, #1
 8005c18:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	fb02 f203 	mul.w	r2, r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c32:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	0e5b      	lsrs	r3, r3, #25
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005c4c:	683b      	ldr	r3, [r7, #0]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	0800a728 	.word	0x0800a728
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	007a1200 	.word	0x007a1200

08005c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0be      	b.n	8005dfc <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8e:	d009      	beq.n	8005ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	61da      	str	r2, [r3, #28]
 8005c96:	e005      	b.n	8005ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f8cb 	bl	8005e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cde:	d902      	bls.n	8005ce6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e002      	b.n	8005cec <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cf4:	d007      	beq.n	8005d06 <HAL_SPI_Init+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cfe:	d002      	beq.n	8005d06 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	ea42 0103 	orr.w	r1, r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d64:	d11b      	bne.n	8005d9e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d76:	d903      	bls.n	8005d80 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d7e:	e002      	b.n	8005d86 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d107      	bne.n	8005d9e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	0c1b      	lsrs	r3, r3, #16
 8005da4:	f003 0204 	and.w	r2, r3, #4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005dc4:	ea42 0103 	orr.w	r1, r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dde:	d105      	bne.n	8005dec <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	b292      	uxth	r2, r2
 8005dea:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e01a      	b.n	8005e4c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f81a 	bl	8005e68 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e98:	d112      	bne.n	8005ec0 <HAL_SPI_Receive+0x44>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10e      	bne.n	8005ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005eaa:	88fa      	ldrh	r2, [r7, #6]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f9b3 	bl	8006222 <HAL_SPI_TransmitReceive>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	e1ac      	b.n	800621a <HAL_SPI_Receive+0x39e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_SPI_Receive+0x52>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e1a5      	b.n	800621a <HAL_SPI_Receive+0x39e>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ed6:	f7fd fc37 	bl	8003748 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d002      	beq.n	8005eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eec:	e18c      	b.n	8006208 <HAL_SPI_Receive+0x38c>
  }

  if ((pData == NULL) || (Size == 0U))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_SPI_Receive+0x7e>
 8005ef4:	88fb      	ldrh	r3, [r7, #6]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005efe:	e183      	b.n	8006208 <HAL_SPI_Receive+0x38c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2204      	movs	r2, #4
 8005f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	88fa      	ldrh	r2, [r7, #6]
 8005f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4a:	d118      	bne.n	8005f7e <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f86:	d908      	bls.n	8005f9a <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f96:	605a      	str	r2, [r3, #4]
 8005f98:	e007      	b.n	8005faa <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fa8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb2:	d10f      	bne.n	8005fd4 <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fd2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d007      	beq.n	8005ff2 <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ff0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ffa:	d867      	bhi.n	80060cc <HAL_SPI_Receive+0x250>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ffc:	e030      	b.n	8006060 <HAL_SPI_Receive+0x1e4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d117      	bne.n	800603c <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f103 020c 	add.w	r2, r3, #12
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	7812      	ldrb	r2, [r2, #0]
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800603a:	e011      	b.n	8006060 <HAL_SPI_Receive+0x1e4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800603c:	f7fd fb84 	bl	8003748 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d803      	bhi.n	8006054 <HAL_SPI_Receive+0x1d8>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006052:	d102      	bne.n	800605a <HAL_SPI_Receive+0x1de>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <HAL_SPI_Receive+0x1e4>
        {
          errorcode = HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800605e:	e0d3      	b.n	8006208 <HAL_SPI_Receive+0x38c>
    while (hspi->RxXferCount > 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1c8      	bne.n	8005ffe <HAL_SPI_Receive+0x182>
 800606c:	e034      	b.n	80060d8 <HAL_SPI_Receive+0x25c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d115      	bne.n	80060a8 <HAL_SPI_Receive+0x22c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	b292      	uxth	r2, r2
 8006088:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80060a6:	e011      	b.n	80060cc <HAL_SPI_Receive+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a8:	f7fd fb4e 	bl	8003748 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d803      	bhi.n	80060c0 <HAL_SPI_Receive+0x244>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d102      	bne.n	80060c6 <HAL_SPI_Receive+0x24a>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <HAL_SPI_Receive+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060ca:	e09d      	b.n	8006208 <HAL_SPI_Receive+0x38c>
    while (hspi->RxXferCount > 0U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1ca      	bne.n	800606e <HAL_SPI_Receive+0x1f2>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e0:	d16d      	bne.n	80061be <HAL_SPI_Receive+0x342>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060f0:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2201      	movs	r2, #1
 80060fa:	2101      	movs	r1, #1
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f001 f98d 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_SPI_Receive+0x292>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	75fb      	strb	r3, [r7, #23]
      goto error;
 800610c:	e07c      	b.n	8006208 <HAL_SPI_Receive+0x38c>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006116:	d907      	bls.n	8006128 <HAL_SPI_Receive+0x2ac>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	b292      	uxth	r2, r2
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e008      	b.n	800613a <HAL_SPI_Receive+0x2be>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f103 020c 	add.w	r2, r3, #12
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	7812      	ldrb	r2, [r2, #0]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2201      	movs	r2, #1
 8006142:	2101      	movs	r1, #1
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f001 f969 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_SPI_Receive+0x2e6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006154:	f043 0202 	orr.w	r2, r3, #2
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	75fb      	strb	r3, [r7, #23]
      goto error;
 8006160:	e052      	b.n	8006208 <HAL_SPI_Receive+0x38c>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800616a:	d103      	bne.n	8006174 <HAL_SPI_Receive+0x2f8>
    {
      /* Read 16bit CRC */
      READ_REG(hspi->Instance->DR);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	e024      	b.n	80061be <HAL_SPI_Receive+0x342>
    }
    else
    {
      /* Read 8bit CRC */
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	330c      	adds	r3, #12
 800617a:	781b      	ldrb	r3, [r3, #0]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006184:	d11b      	bne.n	80061be <HAL_SPI_Receive+0x342>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	2b02      	cmp	r3, #2
 800618c:	d117      	bne.n	80061be <HAL_SPI_Receive+0x342>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2201      	movs	r2, #1
 8006196:	2101      	movs	r1, #1
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f001 f93f 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_SPI_Receive+0x33a>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a8:	f043 0202 	orr.w	r2, r3, #2
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061b4:	e028      	b.n	8006208 <HAL_SPI_Receive+0x38c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	781b      	ldrb	r3, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f001 fa40 	bl	8007648 <SPI_EndRxTransaction>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_SPI_Receive+0x358>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d10a      	bne.n	80061f8 <HAL_SPI_Receive+0x37c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e6:	f043 0202 	orr.w	r2, r3, #2
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80061f6:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_SPI_Receive+0x38a>
  {
    errorcode = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	75fb      	strb	r3, [r7, #23]
 8006204:	e000      	b.n	8006208 <HAL_SPI_Receive+0x38c>
  }

error :
 8006206:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08e      	sub	sp, #56	; 0x38
 8006226:	af02      	add	r7, sp, #8
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006230:	2301      	movs	r3, #1
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x26>
 8006244:	2302      	movs	r3, #2
 8006246:	e2c0      	b.n	80067ca <HAL_SPI_TransmitReceive+0x5a8>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006250:	f7fd fa7a 	bl	8003748 <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800625c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006266:	887b      	ldrh	r3, [r7, #2]
 8006268:	837b      	strh	r3, [r7, #26]
  initial_RxXferCount = Size;
 800626a:	887b      	ldrh	r3, [r7, #2]
 800626c:	833b      	strh	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	617b      	str	r3, [r7, #20]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	613b      	str	r3, [r7, #16]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800627e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006282:	2b01      	cmp	r3, #1
 8006284:	d00f      	beq.n	80062a6 <HAL_SPI_TransmitReceive+0x84>
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800628c:	d107      	bne.n	800629e <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d103      	bne.n	800629e <HAL_SPI_TransmitReceive+0x7c>
 8006296:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800629a:	2b04      	cmp	r3, #4
 800629c:	d003      	beq.n	80062a6 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800629e:	2302      	movs	r3, #2
 80062a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062a4:	e287      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x594>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_SPI_TransmitReceive+0x96>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_SPI_TransmitReceive+0x96>
 80062b2:	887b      	ldrh	r3, [r7, #2]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062be:	e27a      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x594>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d003      	beq.n	80062d4 <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2205      	movs	r2, #5
 80062d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	887a      	ldrh	r2, [r7, #2]
 80062e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	887a      	ldrh	r2, [r7, #2]
 80062ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	887a      	ldrh	r2, [r7, #2]
 80062fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	887a      	ldrh	r2, [r7, #2]
 8006300:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006316:	d10f      	bne.n	8006338 <HAL_SPI_TransmitReceive+0x116>
  {
    SPI_RESET_CRC(hspi);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006336:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006340:	d802      	bhi.n	8006348 <HAL_SPI_TransmitReceive+0x126>
 8006342:	8b3b      	ldrh	r3, [r7, #24]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d908      	bls.n	800635a <HAL_SPI_TransmitReceive+0x138>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006356:	605a      	str	r2, [r3, #4]
 8006358:	e007      	b.n	800636a <HAL_SPI_TransmitReceive+0x148>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006368:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d007      	beq.n	8006388 <HAL_SPI_TransmitReceive+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006390:	f240 80a4 	bls.w	80064dc <HAL_SPI_TransmitReceive+0x2ba>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <HAL_SPI_TransmitReceive+0x182>
 800639c:	8b7b      	ldrh	r3, [r7, #26]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	f040 808e 	bne.w	80064c0 <HAL_SPI_TransmitReceive+0x29e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	881a      	ldrh	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	1c9a      	adds	r2, r3, #2
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c8:	e07a      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x29e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d13f      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x236>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d03a      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x236>
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d137      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x236>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	881a      	ldrh	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	1c9a      	adds	r2, r3, #2
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d11e      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x236>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006422:	d119      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x236>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10c      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x226>
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x226>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006446:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006456:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b01      	cmp	r3, #1
 8006464:	d11c      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x27e>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <HAL_SPI_TransmitReceive+0x27e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	b292      	uxth	r2, r2
 800647e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	1c9a      	adds	r2, r3, #2
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800649c:	2301      	movs	r3, #1
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064a0:	f7fd f952 	bl	8003748 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d807      	bhi.n	80064c0 <HAL_SPI_TransmitReceive+0x29e>
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b6:	d003      	beq.n	80064c0 <HAL_SPI_TransmitReceive+0x29e>
      {
        errorcode = HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064be:	e17a      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x594>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f47f af7f 	bne.w	80063ca <HAL_SPI_TransmitReceive+0x1a8>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f47f af78 	bne.w	80063ca <HAL_SPI_TransmitReceive+0x1a8>
 80064da:	e103      	b.n	80066e4 <HAL_SPI_TransmitReceive+0x4c2>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_SPI_TransmitReceive+0x2ca>
 80064e4:	8b7b      	ldrh	r3, [r7, #26]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	f040 80ef 	bne.w	80066ca <HAL_SPI_TransmitReceive+0x4a8>
    {
      if (hspi->TxXferCount > 1U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d912      	bls.n	800651c <HAL_SPI_TransmitReceive+0x2fa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	881a      	ldrh	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	1c9a      	adds	r2, r3, #2
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b02      	subs	r3, #2
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	87da      	strh	r2, [r3, #62]	; 0x3e
 800651a:	e0d6      	b.n	80066ca <HAL_SPI_TransmitReceive+0x4a8>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	7812      	ldrb	r2, [r2, #0]
 8006528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006542:	e0c2      	b.n	80066ca <HAL_SPI_TransmitReceive+0x4a8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b02      	cmp	r3, #2
 8006550:	d158      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x3e2>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d053      	beq.n	8006604 <HAL_SPI_TransmitReceive+0x3e2>
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d150      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x3e2>
      {
        if (hspi->TxXferCount > 1U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d912      	bls.n	8006592 <HAL_SPI_TransmitReceive+0x370>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	881a      	ldrh	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	1c9a      	adds	r2, r3, #2
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b02      	subs	r3, #2
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006590:	e012      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x396>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	7812      	ldrb	r2, [r2, #0]
 800659e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d11e      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x3e2>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ce:	d119      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x3e2>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10c      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x3d2>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x3d2>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f2:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006602:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d148      	bne.n	80066a4 <HAL_SPI_TransmitReceive+0x482>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d042      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0x482>
      {
        if (hspi->RxXferCount > 1U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b01      	cmp	r3, #1
 8006628:	d923      	bls.n	8006672 <HAL_SPI_TransmitReceive+0x450>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	b292      	uxth	r2, r2
 8006636:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	1c9a      	adds	r2, r3, #2
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b02      	subs	r3, #2
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d81f      	bhi.n	80066a0 <HAL_SPI_TransmitReceive+0x47e>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	e016      	b.n	80066a0 <HAL_SPI_TransmitReceive+0x47e>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f103 020c 	add.w	r2, r3, #12
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006694:	b29b      	uxth	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066a0:	2301      	movs	r3, #1
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066a4:	f7fd f850 	bl	8003748 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d803      	bhi.n	80066bc <HAL_SPI_TransmitReceive+0x49a>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ba:	d102      	bne.n	80066c2 <HAL_SPI_TransmitReceive+0x4a0>
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x4a8>
      {
        errorcode = HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066c8:	e075      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x594>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f47f af37 	bne.w	8006544 <HAL_SPI_TransmitReceive+0x322>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f47f af30 	bne.w	8006544 <HAL_SPI_TransmitReceive+0x322>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ec:	d13e      	bne.n	800676c <HAL_SPI_TransmitReceive+0x54a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	2201      	movs	r2, #1
 80066f6:	2101      	movs	r1, #1
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 fe8f 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x4f6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006708:	f043 0202 	orr.w	r2, r3, #2
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8006716:	e04e      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x594>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006720:	d103      	bne.n	800672a <HAL_SPI_TransmitReceive+0x508>
    {
      /* Read 16bit CRC */
      READ_REG(hspi->Instance->DR);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	e020      	b.n	800676c <HAL_SPI_TransmitReceive+0x54a>
    }
    else
    {
      /* Read 8bit CRC */
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	781b      	ldrb	r3, [r3, #0]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	2b02      	cmp	r3, #2
 8006738:	d118      	bne.n	800676c <HAL_SPI_TransmitReceive+0x54a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	2201      	movs	r2, #1
 8006742:	2101      	movs	r1, #1
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fe69 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d009      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x542>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006754:	f043 0202 	orr.w	r2, r3, #2
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          goto error;
 8006762:	e028      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x594>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	781b      	ldrb	r3, [r3, #0]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	2b10      	cmp	r3, #16
 8006778:	d10d      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x574>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800677e:	f043 0202 	orr.w	r2, r3, #2
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800678e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006798:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 ffac 	bl	80076f8 <SPI_EndRxTxTransaction>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d006      	beq.n	80067b4 <HAL_SPI_TransmitReceive+0x592>
  {
    errorcode = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	661a      	str	r2, [r3, #96]	; 0x60
 80067b2:	e000      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x594>
  }

error :
 80067b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3730      	adds	r7, #48	; 0x30
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_SPI_Transmit_IT+0x20>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e087      	b.n	8006904 <HAL_SPI_Transmit_IT+0x130>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <HAL_SPI_Transmit_IT+0x34>
 8006802:	88fb      	ldrh	r3, [r7, #6]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d102      	bne.n	800680e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800680c:	e075      	b.n	80068fa <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	d002      	beq.n	8006820 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800681a:	2302      	movs	r3, #2
 800681c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800681e:	e06c      	b.n	80068fa <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2203      	movs	r2, #3
 8006824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	88fa      	ldrh	r2, [r7, #6]
 8006838:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	88fa      	ldrh	r2, [r7, #6]
 800683e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006864:	d903      	bls.n	800686e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4a29      	ldr	r2, [pc, #164]	; (8006910 <HAL_SPI_Transmit_IT+0x13c>)
 800686a:	651a      	str	r2, [r3, #80]	; 0x50
 800686c:	e002      	b.n	8006874 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a28      	ldr	r2, [pc, #160]	; (8006914 <HAL_SPI_Transmit_IT+0x140>)
 8006872:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687c:	d10f      	bne.n	800689e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800688c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800689c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a6:	d10f      	bne.n	80068c8 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068c6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80068d6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b40      	cmp	r3, #64	; 0x40
 80068e4:	d008      	beq.n	80068f8 <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	e000      	b.n	80068fa <HAL_SPI_Transmit_IT+0x126>
  }

error :
 80068f8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006902:	7dfb      	ldrb	r3, [r7, #23]
}
 8006904:	4618      	mov	r0, r3
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	080073bd 	.word	0x080073bd
 8006914:	0800735d 	.word	0x0800735d

08006918 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d110      	bne.n	8006954 <HAL_SPI_Receive_IT+0x3c>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800693a:	d10b      	bne.n	8006954 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2204      	movs	r2, #4
 8006940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f8bc 	bl	8006ac8 <HAL_SPI_TransmitReceive_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	e0b1      	b.n	8006ab8 <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_SPI_Receive_IT+0x4a>
 800695e:	2302      	movs	r3, #2
 8006960:	e0aa      	b.n	8006ab8 <HAL_SPI_Receive_IT+0x1a0>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	d002      	beq.n	800697c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006976:	2302      	movs	r3, #2
 8006978:	75fb      	strb	r3, [r7, #23]
    goto error;
 800697a:	e098      	b.n	8006aae <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_SPI_Receive_IT+0x70>
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d102      	bne.n	800698e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800698c:	e08f      	b.n	8006aae <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2204      	movs	r2, #4
 8006992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	88fa      	ldrh	r2, [r7, #6]
 80069a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069d2:	d90b      	bls.n	80069ec <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069e2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4a36      	ldr	r2, [pc, #216]	; (8006ac0 <HAL_SPI_Receive_IT+0x1a8>)
 80069e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80069ea:	e00a      	b.n	8006a02 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069fa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a31      	ldr	r2, [pc, #196]	; (8006ac4 <HAL_SPI_Receive_IT+0x1ac>)
 8006a00:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0a:	d10f      	bne.n	8006a2c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a2a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a34:	d11f      	bne.n	8006a76 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a44:	d806      	bhi.n	8006a54 <HAL_SPI_Receive_IT+0x13c>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d102      	bne.n	8006a54 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2202      	movs	r2, #2
 8006a52:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e002      	b.n	8006a7c <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006a8a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	d008      	beq.n	8006aac <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e000      	b.n	8006aae <HAL_SPI_Receive_IT+0x196>
  }

error :
 8006aac:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	080072d5 	.word	0x080072d5
 8006ac4:	0800721d 	.word	0x0800721d

08006ac8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_SPI_TransmitReceive_IT+0x20>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e0b9      	b.n	8006c5c <HAL_SPI_TransmitReceive_IT+0x194>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006af6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006afe:	7dbb      	ldrb	r3, [r7, #22]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d00d      	beq.n	8006b20 <HAL_SPI_TransmitReceive_IT+0x58>
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b0a:	d106      	bne.n	8006b1a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d102      	bne.n	8006b1a <HAL_SPI_TransmitReceive_IT+0x52>
 8006b14:	7dbb      	ldrb	r3, [r7, #22]
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d002      	beq.n	8006b20 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b1e:	e098      	b.n	8006c52 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d005      	beq.n	8006b32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006b2c:	887b      	ldrh	r3, [r7, #2]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b36:	e08c      	b.n	8006c52 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d003      	beq.n	8006b4c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2205      	movs	r2, #5
 8006b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	887a      	ldrh	r2, [r7, #2]
 8006b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	887a      	ldrh	r2, [r7, #2]
 8006b62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	887a      	ldrh	r2, [r7, #2]
 8006b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	887a      	ldrh	r2, [r7, #2]
 8006b76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b82:	d906      	bls.n	8006b92 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4a38      	ldr	r2, [pc, #224]	; (8006c68 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8006b88:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4a37      	ldr	r2, [pc, #220]	; (8006c6c <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8006b8e:	651a      	str	r2, [r3, #80]	; 0x50
 8006b90:	e005      	b.n	8006b9e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4a36      	ldr	r2, [pc, #216]	; (8006c70 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 8006b96:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4a36      	ldr	r2, [pc, #216]	; (8006c74 <HAL_SPI_TransmitReceive_IT+0x1ac>)
 8006b9c:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba6:	d11f      	bne.n	8006be8 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bb6:	d806      	bhi.n	8006bc6 <HAL_SPI_TransmitReceive_IT+0xfe>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d102      	bne.n	8006bc6 <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e002      	b.n	8006bee <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bf6:	d802      	bhi.n	8006bfe <HAL_SPI_TransmitReceive_IT+0x136>
 8006bf8:	887b      	ldrh	r3, [r7, #2]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d908      	bls.n	8006c10 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c0c:	605a      	str	r2, [r3, #4]
 8006c0e:	e007      	b.n	8006c20 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006c2e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	d008      	beq.n	8006c50 <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e000      	b.n	8006c52 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 8006c50:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	080070b9 	.word	0x080070b9
 8006c6c:	08007161 	.word	0x08007161
 8006c70:	08006ecd 	.word	0x08006ecd
 8006c74:	08006ffb 	.word	0x08006ffb

08006c78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	099b      	lsrs	r3, r3, #6
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10f      	bne.n	8006cbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	099b      	lsrs	r3, r3, #6
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d004      	beq.n	8006cbc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
    return;
 8006cba:	e0d8      	b.n	8006e6e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <HAL_SPI_IRQHandler+0x66>
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	09db      	lsrs	r3, r3, #7
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
    return;
 8006cdc:	e0c7      	b.n	8006e6e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	095b      	lsrs	r3, r3, #5
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10c      	bne.n	8006d04 <HAL_SPI_IRQHandler+0x8c>
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	099b      	lsrs	r3, r3, #6
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	0a1b      	lsrs	r3, r3, #8
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 80b5 	beq.w	8006e6e <HAL_SPI_IRQHandler+0x1f6>
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80ae 	beq.w	8006e6e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	099b      	lsrs	r3, r3, #6
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d023      	beq.n	8006d66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d011      	beq.n	8006d4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2e:	f043 0204 	orr.w	r2, r3, #4
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	e00b      	b.n	8006d66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	693b      	ldr	r3, [r7, #16]
        return;
 8006d64:	e083      	b.n	8006e6e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d014      	beq.n	8006d9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d76:	f043 0201 	orr.w	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00c      	beq.n	8006dc2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dac:	f043 0208 	orr.w	r2, r3, #8
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006db4:	2300      	movs	r3, #0
 8006db6:	60bb      	str	r3, [r7, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d050      	beq.n	8006e6c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dd8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d104      	bne.n	8006df6 <HAL_SPI_IRQHandler+0x17e>
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d034      	beq.n	8006e60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0203 	bic.w	r2, r2, #3
 8006e04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d011      	beq.n	8006e32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e12:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <HAL_SPI_IRQHandler+0x1fc>)
 8006e14:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fc fdd3 	bl	80039c6 <HAL_DMA_Abort_IT>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d016      	beq.n	8006e68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	4a0d      	ldr	r2, [pc, #52]	; (8006e74 <HAL_SPI_IRQHandler+0x1fc>)
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fc fdbd 	bl	80039c6 <HAL_DMA_Abort_IT>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006e5e:	e003      	b.n	8006e68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f813 	bl	8006e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e66:	e000      	b.n	8006e6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006e68:	bf00      	nop
    return;
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
  }
}
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	08006ea1 	.word	0x08006ea1

08006e78 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff ffe5 	bl	8006e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d923      	bls.n	8006f28 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	b292      	uxth	r2, r2
 8006eec:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	1c9a      	adds	r2, r3, #2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b02      	subs	r3, #2
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d11f      	bne.n	8006f56 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	e016      	b.n	8006f56 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f103 020c 	add.w	r2, r3, #12
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	7812      	ldrb	r2, [r2, #0]
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d120      	bne.n	8006fa4 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f6a:	d10b      	bne.n	8006f84 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f7a:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <SPI_2linesRxISR_8BIT+0xe0>)
 8006f80:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006f82:	e00f      	b.n	8006fa4 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f92:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d102      	bne.n	8006fa4 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fbf0 	bl	8007784 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	08006fb1 	.word	0x08006fb1

08006fb0 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Read 8bit CRC to flush Data Register */
  READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	781b      	ldrb	r3, [r3, #0]

  hspi->CRCSize--;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc4:	1e5a      	subs	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10f      	bne.n	8006ff2 <SPI_2linesRxISR_8BITCRC+0x42>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fe0:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <SPI_2linesRxISR_8BITCRC+0x42>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fbc9 	bl	8007784 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	d912      	bls.n	8007032 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	881a      	ldrh	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b02      	subs	r3, #2
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007030:	e012      	b.n	8007058 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d126      	bne.n	80070b0 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800706a:	d110      	bne.n	800708e <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800707a:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800708a:	605a      	str	r2, [r3, #4]
      return;
 800708c:	e010      	b.n	80070b0 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800709c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fb6a 	bl	8007784 <SPI_CloseRxTx_ISR>
    }
  }
}
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	b292      	uxth	r2, r2
 80070cc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d118      	bne.n	8007128 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fe:	d103      	bne.n	8007108 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a0b      	ldr	r2, [pc, #44]	; (8007130 <SPI_2linesRxISR_16BIT+0x78>)
 8007104:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007106:	e00f      	b.n	8007128 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007116:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711c:	b29b      	uxth	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fb2e 	bl	8007784 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	08007135 	.word	0x08007135

08007134 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Read 16bit CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007150:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fb16 	bl	8007784 <SPI_CloseRxTx_ISR>
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	881a      	ldrh	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	1c9a      	adds	r2, r3, #2
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007182:	b29b      	uxth	r3, r3
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d126      	bne.n	80071e4 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800719e:	d110      	bne.n	80071c2 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071ae:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071be:	605a      	str	r2, [r3, #4]
      return;
 80071c0:	e010      	b.n	80071e4 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071d0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fad0 	bl	8007784 <SPI_CloseRxTx_ISR>
    }
  }
}
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Read 8bit CRC to flush Data Register */
  READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	330c      	adds	r3, #12
 80071f8:	781b      	ldrb	r3, [r3, #0]

  hspi->CRCSize--;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fe:	1e5a      	subs	r2, r3, #1
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <SPI_RxISR_8BITCRC+0x28>
  {
    SPI_CloseRx_ISR(hspi);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fb15 	bl	800783c <SPI_CloseRx_ISR>
  }
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f103 020c 	add.w	r2, r3, #12
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10c      	bne.n	8007278 <SPI_RxISR_8BIT+0x5c>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007266:	d107      	bne.n	8007278 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007276:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728c:	d103      	bne.n	8007296 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a04      	ldr	r2, [pc, #16]	; (80072a4 <SPI_RxISR_8BIT+0x88>)
 8007292:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007294:	e002      	b.n	800729c <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fad0 	bl	800783c <SPI_CloseRx_ISR>
  }
}
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	080071eb 	.word	0x080071eb

080072a8 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Read 16bit CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072c4:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fab8 	bl	800783c <SPI_CloseRx_ISR>
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	b292      	uxth	r2, r2
 80072e8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	1c9a      	adds	r2, r3, #2
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b01      	cmp	r3, #1
 8007310:	d10c      	bne.n	800732c <SPI_RxISR_16BIT+0x58>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800731a:	d107      	bne.n	800732c <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800732a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10b      	bne.n	8007350 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007340:	d103      	bne.n	800734a <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a04      	ldr	r2, [pc, #16]	; (8007358 <SPI_RxISR_16BIT+0x84>)
 8007346:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007348:	e002      	b.n	8007350 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fa76 	bl	800783c <SPI_CloseRx_ISR>
  }
}
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	080072a9 	.word	0x080072a9

0800735c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	330c      	adds	r3, #12
 800736e:	7812      	ldrb	r2, [r2, #0]
 8007370:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10f      	bne.n	80073b4 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739c:	d107      	bne.n	80073ae <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073ac:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa8a 	bl	80078c8 <SPI_CloseTx_ISR>
  }
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	881a      	ldrh	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	1c9a      	adds	r2, r3, #2
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10f      	bne.n	8007412 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073fa:	d107      	bne.n	800740c <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800740a:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa5b 	bl	80078c8 <SPI_CloseTx_ISR>
  }
}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800742c:	f7fc f98c 	bl	8003748 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	4413      	add	r3, r2
 800743a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800743c:	f7fc f984 	bl	8003748 <HAL_GetTick>
 8007440:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007442:	4b39      	ldr	r3, [pc, #228]	; (8007528 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	015b      	lsls	r3, r3, #5
 8007448:	0d1b      	lsrs	r3, r3, #20
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	fb02 f303 	mul.w	r3, r2, r3
 8007450:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007452:	e054      	b.n	80074fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745a:	d050      	beq.n	80074fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800745c:	f7fc f974 	bl	8003748 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	429a      	cmp	r2, r3
 800746a:	d902      	bls.n	8007472 <SPI_WaitFlagStateUntilTimeout+0x56>
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d13d      	bne.n	80074ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800748a:	d111      	bne.n	80074b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007494:	d004      	beq.n	80074a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749e:	d107      	bne.n	80074b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b8:	d10f      	bne.n	80074da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e017      	b.n	800751e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4013      	ands	r3, r2
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	429a      	cmp	r2, r3
 800750c:	bf0c      	ite	eq
 800750e:	2301      	moveq	r3, #1
 8007510:	2300      	movne	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	429a      	cmp	r2, r3
 800751a:	d19b      	bne.n	8007454 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000004 	.word	0x20000004

0800752c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800753a:	f7fc f905 	bl	8003748 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	1a9b      	subs	r3, r3, r2
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	4413      	add	r3, r2
 8007548:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800754a:	f7fc f8fd 	bl	8003748 <HAL_GetTick>
 800754e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007550:	4b3c      	ldr	r3, [pc, #240]	; (8007644 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	00da      	lsls	r2, r3, #3
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	0d1b      	lsrs	r3, r3, #20
 8007560:	69fa      	ldr	r2, [r7, #28]
 8007562:	fb02 f303 	mul.w	r3, r2, r3
 8007566:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007568:	e05f      	b.n	800762a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007570:	d106      	bne.n	8007580 <SPI_WaitFifoStateUntilTimeout+0x54>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007586:	d050      	beq.n	800762a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007588:	f7fc f8de 	bl	8003748 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	429a      	cmp	r2, r3
 8007596:	d902      	bls.n	800759e <SPI_WaitFifoStateUntilTimeout+0x72>
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d13d      	bne.n	800761a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075b6:	d111      	bne.n	80075dc <SPI_WaitFifoStateUntilTimeout+0xb0>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c0:	d004      	beq.n	80075cc <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ca:	d107      	bne.n	80075dc <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e4:	d10f      	bne.n	8007606 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e010      	b.n	800763c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	3b01      	subs	r3, #1
 8007628:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	4013      	ands	r3, r2
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	429a      	cmp	r2, r3
 8007638:	d197      	bne.n	800756a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	20000004 	.word	0x20000004

08007648 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800765c:	d111      	bne.n	8007682 <SPI_EndRxTransaction+0x3a>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007666:	d004      	beq.n	8007672 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007670:	d107      	bne.n	8007682 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007680:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2200      	movs	r2, #0
 800768a:	2180      	movs	r1, #128	; 0x80
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fec5 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d007      	beq.n	80076a8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769c:	f043 0220 	orr.w	r2, r3, #32
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e023      	b.n	80076f0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076b0:	d11d      	bne.n	80076ee <SPI_EndRxTransaction+0xa6>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ba:	d004      	beq.n	80076c6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c4:	d113      	bne.n	80076ee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff ff2a 	bl	800752c <SPI_WaitFifoStateUntilTimeout>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d007      	beq.n	80076ee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e2:	f043 0220 	orr.w	r2, r3, #32
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e000      	b.n	80076f0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af02      	add	r7, sp, #8
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2200      	movs	r2, #0
 800770c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7ff ff0b 	bl	800752c <SPI_WaitFifoStateUntilTimeout>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007720:	f043 0220 	orr.w	r2, r3, #32
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e027      	b.n	800777c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	2180      	movs	r1, #128	; 0x80
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff fe70 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007746:	f043 0220 	orr.w	r2, r3, #32
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e014      	b.n	800777c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2200      	movs	r2, #0
 800775a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f7ff fee4 	bl	800752c <SPI_WaitFifoStateUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800776e:	f043 0220 	orr.w	r2, r3, #32
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e000      	b.n	800777c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800778c:	f7fb ffdc 	bl	8003748 <HAL_GetTick>
 8007790:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0220 	bic.w	r2, r2, #32
 80077a0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	2164      	movs	r1, #100	; 0x64
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff ffa6 	bl	80076f8 <SPI_EndRxTxTransaction>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b6:	f043 0220 	orr.w	r2, r3, #32
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d112      	bne.n	80077f2 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d8:	f043 0202 	orr.w	r2, r3, #2
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80077e8:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fb4e 	bl	8006e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80077f0:	e020      	b.n	8007834 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d115      	bne.n	8007826 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b04      	cmp	r3, #4
 8007804:	d107      	bne.n	8007816 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fb fa42 	bl	8002c98 <HAL_SPI_RxCpltCallback>
}
 8007814:	e00e      	b.n	8007834 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff fb2a 	bl	8006e78 <HAL_SPI_TxRxCpltCallback>
}
 8007824:	e006      	b.n	8007834 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff fb2c 	bl	8006e8c <HAL_SPI_ErrorCallback>
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007852:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007854:	f7fb ff78 	bl	8003748 <HAL_GetTick>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	2164      	movs	r1, #100	; 0x64
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fef2 	bl	8007648 <SPI_EndRxTransaction>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800786e:	f043 0220 	orr.w	r2, r3, #32
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b10      	cmp	r3, #16
 800788a:	d10e      	bne.n	80078aa <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007890:	f043 0202 	orr.w	r2, r3, #2
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80078a0:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff faf2 	bl	8006e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80078a8:	e00a      	b.n	80078c0 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fb f9f0 	bl	8002c98 <HAL_SPI_RxCpltCallback>
}
 80078b8:	e002      	b.n	80078c0 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff fae6 	bl	8006e8c <HAL_SPI_ErrorCallback>
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078d0:	f7fb ff3a 	bl	8003748 <HAL_GetTick>
 80078d4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078e4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	2164      	movs	r1, #100	; 0x64
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff ff04 	bl	80076f8 <SPI_EndRxTxTransaction>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078fa:	f043 0220 	orr.w	r2, r3, #32
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800790a:	2300      	movs	r3, #0
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	60bb      	str	r3, [r7, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	60bb      	str	r3, [r7, #8]
 800791e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff faab 	bl	8006e8c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007936:	e002      	b.n	800793e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fb f9c1 	bl	8002cc0 <HAL_SPI_TxCpltCallback>
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e042      	b.n	80079de <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f83b 	bl	80079e6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2224      	movs	r2, #36	; 0x24
 8007974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0201 	bic.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f99f 	bl	8007ccc <UART_SetConfig>
 800798e:	4603      	mov	r3, r0
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e022      	b.n	80079de <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fc65 	bl	8008270 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0201 	orr.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fcec 	bl	80083b4 <UART_CheckIdleState>
 80079dc:	4603      	mov	r3, r0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b08a      	sub	sp, #40	; 0x28
 80079fe:	af02      	add	r7, sp, #8
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	603b      	str	r3, [r7, #0]
 8007a06:	4613      	mov	r3, r2
 8007a08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	f040 8084 	bne.w	8007b1e <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <HAL_UART_Transmit+0x28>
 8007a1c:	88fb      	ldrh	r3, [r7, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e07c      	b.n	8007b20 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_UART_Transmit+0x3a>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e075      	b.n	8007b20 <HAL_UART_Transmit+0x126>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2221      	movs	r2, #33	; 0x21
 8007a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007a4c:	f7fb fe7c 	bl	8003748 <HAL_GetTick>
 8007a50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	88fa      	ldrh	r2, [r7, #6]
 8007a56:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	88fa      	ldrh	r2, [r7, #6]
 8007a5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6a:	d108      	bne.n	8007a7e <HAL_UART_Transmit+0x84>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d104      	bne.n	8007a7e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	61bb      	str	r3, [r7, #24]
 8007a7c:	e003      	b.n	8007a86 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007a8e:	e02d      	b.n	8007aec <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2200      	movs	r2, #0
 8007a98:	2180      	movs	r1, #128	; 0x80
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fcd2 	bl	8008444 <UART_WaitOnFlagUntilTimeout>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e03a      	b.n	8007b20 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10b      	bne.n	8007ac8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	881a      	ldrh	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007abc:	b292      	uxth	r2, r2
 8007abe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	3302      	adds	r3, #2
 8007ac4:	61bb      	str	r3, [r7, #24]
 8007ac6:	e008      	b.n	8007ada <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	781a      	ldrb	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	b292      	uxth	r2, r2
 8007ad2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1cb      	bne.n	8007a90 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2200      	movs	r2, #0
 8007b00:	2140      	movs	r1, #64	; 0x40
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fc9e 	bl	8008444 <UART_WaitOnFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e006      	b.n	8007b20 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e000      	b.n	8007b20 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007b1e:	2302      	movs	r3, #2
  }
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	4613      	mov	r3, r2
 8007b36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	f040 80be 	bne.w	8007cc0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_UART_Receive+0x28>
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0b6      	b.n	8007cc2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_UART_Receive+0x3a>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e0af      	b.n	8007cc2 <HAL_UART_Receive+0x19a>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2222      	movs	r2, #34	; 0x22
 8007b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007b7a:	f7fb fde5 	bl	8003748 <HAL_GetTick>
 8007b7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	88fa      	ldrh	r2, [r7, #6]
 8007b84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b98:	d10e      	bne.n	8007bb8 <HAL_UART_Receive+0x90>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <HAL_UART_Receive+0x86>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bac:	e02d      	b.n	8007c0a <HAL_UART_Receive+0xe2>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	22ff      	movs	r2, #255	; 0xff
 8007bb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bb6:	e028      	b.n	8007c0a <HAL_UART_Receive+0xe2>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10d      	bne.n	8007bdc <HAL_UART_Receive+0xb4>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <HAL_UART_Receive+0xaa>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	22ff      	movs	r2, #255	; 0xff
 8007bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bd0:	e01b      	b.n	8007c0a <HAL_UART_Receive+0xe2>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	227f      	movs	r2, #127	; 0x7f
 8007bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bda:	e016      	b.n	8007c0a <HAL_UART_Receive+0xe2>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007be4:	d10d      	bne.n	8007c02 <HAL_UART_Receive+0xda>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <HAL_UART_Receive+0xd0>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	227f      	movs	r2, #127	; 0x7f
 8007bf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bf6:	e008      	b.n	8007c0a <HAL_UART_Receive+0xe2>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	223f      	movs	r2, #63	; 0x3f
 8007bfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c00:	e003      	b.n	8007c0a <HAL_UART_Receive+0xe2>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c10:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c1a:	d108      	bne.n	8007c2e <HAL_UART_Receive+0x106>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d104      	bne.n	8007c2e <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	e003      	b.n	8007c36 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007c3e:	e033      	b.n	8007ca8 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2200      	movs	r2, #0
 8007c48:	2120      	movs	r1, #32
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fbfa 	bl	8008444 <UART_WaitOnFlagUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e033      	b.n	8007cc2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10c      	bne.n	8007c7a <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	8a7b      	ldrh	r3, [r7, #18]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	3302      	adds	r3, #2
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	e00d      	b.n	8007c96 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	8a7b      	ldrh	r3, [r7, #18]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	4013      	ands	r3, r2
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	3301      	adds	r3, #1
 8007c94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1c5      	bne.n	8007c40 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e000      	b.n	8007cc2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007cc0:	2302      	movs	r3, #2
  }
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3720      	adds	r7, #32
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007cd0:	b088      	sub	sp, #32
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	4bb1      	ldr	r3, [pc, #708]	; (8007fc8 <UART_SetConfig+0x2fc>)
 8007d04:	4013      	ands	r3, r2
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	69f9      	ldr	r1, [r7, #28]
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68da      	ldr	r2, [r3, #12]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4aa6      	ldr	r2, [pc, #664]	; (8007fcc <UART_SetConfig+0x300>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d004      	beq.n	8007d40 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6812      	ldr	r2, [r2, #0]
 8007d52:	69f9      	ldr	r1, [r7, #28]
 8007d54:	430b      	orrs	r3, r1
 8007d56:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	f023 010f 	bic.w	r1, r3, #15
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a97      	ldr	r2, [pc, #604]	; (8007fd0 <UART_SetConfig+0x304>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d121      	bne.n	8007dbc <UART_SetConfig+0xf0>
 8007d78:	4b96      	ldr	r3, [pc, #600]	; (8007fd4 <UART_SetConfig+0x308>)
 8007d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d816      	bhi.n	8007db4 <UART_SetConfig+0xe8>
 8007d86:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <UART_SetConfig+0xc0>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007d9d 	.word	0x08007d9d
 8007d90:	08007da9 	.word	0x08007da9
 8007d94:	08007da3 	.word	0x08007da3
 8007d98:	08007daf 	.word	0x08007daf
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	76fb      	strb	r3, [r7, #27]
 8007da0:	e0e8      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007da2:	2302      	movs	r3, #2
 8007da4:	76fb      	strb	r3, [r7, #27]
 8007da6:	e0e5      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007da8:	2304      	movs	r3, #4
 8007daa:	76fb      	strb	r3, [r7, #27]
 8007dac:	e0e2      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007dae:	2308      	movs	r3, #8
 8007db0:	76fb      	strb	r3, [r7, #27]
 8007db2:	e0df      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007db4:	2310      	movs	r3, #16
 8007db6:	76fb      	strb	r3, [r7, #27]
 8007db8:	bf00      	nop
 8007dba:	e0db      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a85      	ldr	r2, [pc, #532]	; (8007fd8 <UART_SetConfig+0x30c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d134      	bne.n	8007e30 <UART_SetConfig+0x164>
 8007dc6:	4b83      	ldr	r3, [pc, #524]	; (8007fd4 <UART_SetConfig+0x308>)
 8007dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dcc:	f003 030c 	and.w	r3, r3, #12
 8007dd0:	2b0c      	cmp	r3, #12
 8007dd2:	d829      	bhi.n	8007e28 <UART_SetConfig+0x15c>
 8007dd4:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <UART_SetConfig+0x110>)
 8007dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dda:	bf00      	nop
 8007ddc:	08007e11 	.word	0x08007e11
 8007de0:	08007e29 	.word	0x08007e29
 8007de4:	08007e29 	.word	0x08007e29
 8007de8:	08007e29 	.word	0x08007e29
 8007dec:	08007e1d 	.word	0x08007e1d
 8007df0:	08007e29 	.word	0x08007e29
 8007df4:	08007e29 	.word	0x08007e29
 8007df8:	08007e29 	.word	0x08007e29
 8007dfc:	08007e17 	.word	0x08007e17
 8007e00:	08007e29 	.word	0x08007e29
 8007e04:	08007e29 	.word	0x08007e29
 8007e08:	08007e29 	.word	0x08007e29
 8007e0c:	08007e23 	.word	0x08007e23
 8007e10:	2300      	movs	r3, #0
 8007e12:	76fb      	strb	r3, [r7, #27]
 8007e14:	e0ae      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e16:	2302      	movs	r3, #2
 8007e18:	76fb      	strb	r3, [r7, #27]
 8007e1a:	e0ab      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	76fb      	strb	r3, [r7, #27]
 8007e20:	e0a8      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e22:	2308      	movs	r3, #8
 8007e24:	76fb      	strb	r3, [r7, #27]
 8007e26:	e0a5      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e28:	2310      	movs	r3, #16
 8007e2a:	76fb      	strb	r3, [r7, #27]
 8007e2c:	bf00      	nop
 8007e2e:	e0a1      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a69      	ldr	r2, [pc, #420]	; (8007fdc <UART_SetConfig+0x310>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d120      	bne.n	8007e7c <UART_SetConfig+0x1b0>
 8007e3a:	4b66      	ldr	r3, [pc, #408]	; (8007fd4 <UART_SetConfig+0x308>)
 8007e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e44:	2b10      	cmp	r3, #16
 8007e46:	d00f      	beq.n	8007e68 <UART_SetConfig+0x19c>
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d802      	bhi.n	8007e52 <UART_SetConfig+0x186>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <UART_SetConfig+0x190>
 8007e50:	e010      	b.n	8007e74 <UART_SetConfig+0x1a8>
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d005      	beq.n	8007e62 <UART_SetConfig+0x196>
 8007e56:	2b30      	cmp	r3, #48	; 0x30
 8007e58:	d009      	beq.n	8007e6e <UART_SetConfig+0x1a2>
 8007e5a:	e00b      	b.n	8007e74 <UART_SetConfig+0x1a8>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	76fb      	strb	r3, [r7, #27]
 8007e60:	e088      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e62:	2302      	movs	r3, #2
 8007e64:	76fb      	strb	r3, [r7, #27]
 8007e66:	e085      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	76fb      	strb	r3, [r7, #27]
 8007e6c:	e082      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e6e:	2308      	movs	r3, #8
 8007e70:	76fb      	strb	r3, [r7, #27]
 8007e72:	e07f      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e74:	2310      	movs	r3, #16
 8007e76:	76fb      	strb	r3, [r7, #27]
 8007e78:	bf00      	nop
 8007e7a:	e07b      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a57      	ldr	r2, [pc, #348]	; (8007fe0 <UART_SetConfig+0x314>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d120      	bne.n	8007ec8 <UART_SetConfig+0x1fc>
 8007e86:	4b53      	ldr	r3, [pc, #332]	; (8007fd4 <UART_SetConfig+0x308>)
 8007e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	d00f      	beq.n	8007eb4 <UART_SetConfig+0x1e8>
 8007e94:	2b40      	cmp	r3, #64	; 0x40
 8007e96:	d802      	bhi.n	8007e9e <UART_SetConfig+0x1d2>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <UART_SetConfig+0x1dc>
 8007e9c:	e010      	b.n	8007ec0 <UART_SetConfig+0x1f4>
 8007e9e:	2b80      	cmp	r3, #128	; 0x80
 8007ea0:	d005      	beq.n	8007eae <UART_SetConfig+0x1e2>
 8007ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ea4:	d009      	beq.n	8007eba <UART_SetConfig+0x1ee>
 8007ea6:	e00b      	b.n	8007ec0 <UART_SetConfig+0x1f4>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	76fb      	strb	r3, [r7, #27]
 8007eac:	e062      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	76fb      	strb	r3, [r7, #27]
 8007eb2:	e05f      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	76fb      	strb	r3, [r7, #27]
 8007eb8:	e05c      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007eba:	2308      	movs	r3, #8
 8007ebc:	76fb      	strb	r3, [r7, #27]
 8007ebe:	e059      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	76fb      	strb	r3, [r7, #27]
 8007ec4:	bf00      	nop
 8007ec6:	e055      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a45      	ldr	r2, [pc, #276]	; (8007fe4 <UART_SetConfig+0x318>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d124      	bne.n	8007f1c <UART_SetConfig+0x250>
 8007ed2:	4b40      	ldr	r3, [pc, #256]	; (8007fd4 <UART_SetConfig+0x308>)
 8007ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee0:	d012      	beq.n	8007f08 <UART_SetConfig+0x23c>
 8007ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee6:	d802      	bhi.n	8007eee <UART_SetConfig+0x222>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d007      	beq.n	8007efc <UART_SetConfig+0x230>
 8007eec:	e012      	b.n	8007f14 <UART_SetConfig+0x248>
 8007eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef2:	d006      	beq.n	8007f02 <UART_SetConfig+0x236>
 8007ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ef8:	d009      	beq.n	8007f0e <UART_SetConfig+0x242>
 8007efa:	e00b      	b.n	8007f14 <UART_SetConfig+0x248>
 8007efc:	2300      	movs	r3, #0
 8007efe:	76fb      	strb	r3, [r7, #27]
 8007f00:	e038      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f02:	2302      	movs	r3, #2
 8007f04:	76fb      	strb	r3, [r7, #27]
 8007f06:	e035      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f08:	2304      	movs	r3, #4
 8007f0a:	76fb      	strb	r3, [r7, #27]
 8007f0c:	e032      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f0e:	2308      	movs	r3, #8
 8007f10:	76fb      	strb	r3, [r7, #27]
 8007f12:	e02f      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f14:	2310      	movs	r3, #16
 8007f16:	76fb      	strb	r3, [r7, #27]
 8007f18:	bf00      	nop
 8007f1a:	e02b      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a2a      	ldr	r2, [pc, #168]	; (8007fcc <UART_SetConfig+0x300>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d124      	bne.n	8007f70 <UART_SetConfig+0x2a4>
 8007f26:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <UART_SetConfig+0x308>)
 8007f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f34:	d012      	beq.n	8007f5c <UART_SetConfig+0x290>
 8007f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f3a:	d802      	bhi.n	8007f42 <UART_SetConfig+0x276>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <UART_SetConfig+0x284>
 8007f40:	e012      	b.n	8007f68 <UART_SetConfig+0x29c>
 8007f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f46:	d006      	beq.n	8007f56 <UART_SetConfig+0x28a>
 8007f48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f4c:	d009      	beq.n	8007f62 <UART_SetConfig+0x296>
 8007f4e:	e00b      	b.n	8007f68 <UART_SetConfig+0x29c>
 8007f50:	2300      	movs	r3, #0
 8007f52:	76fb      	strb	r3, [r7, #27]
 8007f54:	e00e      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f56:	2302      	movs	r3, #2
 8007f58:	76fb      	strb	r3, [r7, #27]
 8007f5a:	e00b      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	76fb      	strb	r3, [r7, #27]
 8007f60:	e008      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f62:	2308      	movs	r3, #8
 8007f64:	76fb      	strb	r3, [r7, #27]
 8007f66:	e005      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f68:	2310      	movs	r3, #16
 8007f6a:	76fb      	strb	r3, [r7, #27]
 8007f6c:	bf00      	nop
 8007f6e:	e001      	b.n	8007f74 <UART_SetConfig+0x2a8>
 8007f70:	2310      	movs	r3, #16
 8007f72:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a14      	ldr	r2, [pc, #80]	; (8007fcc <UART_SetConfig+0x300>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	f040 80a1 	bne.w	80080c2 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f80:	7efb      	ldrb	r3, [r7, #27]
 8007f82:	2b08      	cmp	r3, #8
 8007f84:	d836      	bhi.n	8007ff4 <UART_SetConfig+0x328>
 8007f86:	a201      	add	r2, pc, #4	; (adr r2, 8007f8c <UART_SetConfig+0x2c0>)
 8007f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08007ff5 	.word	0x08007ff5
 8007f94:	08007fb9 	.word	0x08007fb9
 8007f98:	08007ff5 	.word	0x08007ff5
 8007f9c:	08007fbf 	.word	0x08007fbf
 8007fa0:	08007ff5 	.word	0x08007ff5
 8007fa4:	08007ff5 	.word	0x08007ff5
 8007fa8:	08007ff5 	.word	0x08007ff5
 8007fac:	08007fed 	.word	0x08007fed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fb0:	f7fd fd6e 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 8007fb4:	6178      	str	r0, [r7, #20]
        break;
 8007fb6:	e022      	b.n	8007ffe <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <UART_SetConfig+0x31c>)
 8007fba:	617b      	str	r3, [r7, #20]
        break;
 8007fbc:	e01f      	b.n	8007ffe <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fbe:	f7fd fcd1 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 8007fc2:	6178      	str	r0, [r7, #20]
        break;
 8007fc4:	e01b      	b.n	8007ffe <UART_SetConfig+0x332>
 8007fc6:	bf00      	nop
 8007fc8:	cfff69f3 	.word	0xcfff69f3
 8007fcc:	40008000 	.word	0x40008000
 8007fd0:	40013800 	.word	0x40013800
 8007fd4:	40021000 	.word	0x40021000
 8007fd8:	40004400 	.word	0x40004400
 8007fdc:	40004800 	.word	0x40004800
 8007fe0:	40004c00 	.word	0x40004c00
 8007fe4:	40005000 	.word	0x40005000
 8007fe8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ff0:	617b      	str	r3, [r7, #20]
        break;
 8007ff2:	e004      	b.n	8007ffe <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	76bb      	strb	r3, [r7, #26]
        break;
 8007ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 811d 	beq.w	8008240 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	4a97      	ldr	r2, [pc, #604]	; (8008268 <UART_SetConfig+0x59c>)
 800800c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008010:	461a      	mov	r2, r3
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	fbb3 f3f2 	udiv	r3, r3, r2
 8008018:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	4413      	add	r3, r2
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	429a      	cmp	r2, r3
 8008028:	d305      	bcc.n	8008036 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	429a      	cmp	r2, r3
 8008034:	d902      	bls.n	800803c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	76bb      	strb	r3, [r7, #26]
 800803a:	e101      	b.n	8008240 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	4618      	mov	r0, r3
 8008040:	f04f 0100 	mov.w	r1, #0
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	4a87      	ldr	r2, [pc, #540]	; (8008268 <UART_SetConfig+0x59c>)
 800804a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f04f 0400 	mov.w	r4, #0
 8008054:	461a      	mov	r2, r3
 8008056:	4623      	mov	r3, r4
 8008058:	f7f8 f92a 	bl	80002b0 <__aeabi_uldivmod>
 800805c:	4603      	mov	r3, r0
 800805e:	460c      	mov	r4, r1
 8008060:	4619      	mov	r1, r3
 8008062:	4622      	mov	r2, r4
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	f04f 0400 	mov.w	r4, #0
 800806c:	0214      	lsls	r4, r2, #8
 800806e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008072:	020b      	lsls	r3, r1, #8
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6852      	ldr	r2, [r2, #4]
 8008078:	0852      	lsrs	r2, r2, #1
 800807a:	4611      	mov	r1, r2
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	eb13 0b01 	adds.w	fp, r3, r1
 8008084:	eb44 0c02 	adc.w	ip, r4, r2
 8008088:	4658      	mov	r0, fp
 800808a:	4661      	mov	r1, ip
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f04f 0400 	mov.w	r4, #0
 8008094:	461a      	mov	r2, r3
 8008096:	4623      	mov	r3, r4
 8008098:	f7f8 f90a 	bl	80002b0 <__aeabi_uldivmod>
 800809c:	4603      	mov	r3, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a8:	d308      	bcc.n	80080bc <UART_SetConfig+0x3f0>
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b0:	d204      	bcs.n	80080bc <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	60da      	str	r2, [r3, #12]
 80080ba:	e0c1      	b.n	8008240 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	76bb      	strb	r3, [r7, #26]
 80080c0:	e0be      	b.n	8008240 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ca:	d164      	bne.n	8008196 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80080cc:	7efb      	ldrb	r3, [r7, #27]
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	d827      	bhi.n	8008122 <UART_SetConfig+0x456>
 80080d2:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <UART_SetConfig+0x40c>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	080080fd 	.word	0x080080fd
 80080dc:	08008105 	.word	0x08008105
 80080e0:	0800810d 	.word	0x0800810d
 80080e4:	08008123 	.word	0x08008123
 80080e8:	08008113 	.word	0x08008113
 80080ec:	08008123 	.word	0x08008123
 80080f0:	08008123 	.word	0x08008123
 80080f4:	08008123 	.word	0x08008123
 80080f8:	0800811b 	.word	0x0800811b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080fc:	f7fd fcc8 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 8008100:	6178      	str	r0, [r7, #20]
        break;
 8008102:	e013      	b.n	800812c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008104:	f7fd fcda 	bl	8005abc <HAL_RCC_GetPCLK2Freq>
 8008108:	6178      	str	r0, [r7, #20]
        break;
 800810a:	e00f      	b.n	800812c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800810c:	4b57      	ldr	r3, [pc, #348]	; (800826c <UART_SetConfig+0x5a0>)
 800810e:	617b      	str	r3, [r7, #20]
        break;
 8008110:	e00c      	b.n	800812c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008112:	f7fd fc27 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 8008116:	6178      	str	r0, [r7, #20]
        break;
 8008118:	e008      	b.n	800812c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800811a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800811e:	617b      	str	r3, [r7, #20]
        break;
 8008120:	e004      	b.n	800812c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	76bb      	strb	r3, [r7, #26]
        break;
 800812a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8086 	beq.w	8008240 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	4a4b      	ldr	r2, [pc, #300]	; (8008268 <UART_SetConfig+0x59c>)
 800813a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800813e:	461a      	mov	r2, r3
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	fbb3 f3f2 	udiv	r3, r3, r2
 8008146:	005a      	lsls	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	085b      	lsrs	r3, r3, #1
 800814e:	441a      	add	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	fbb2 f3f3 	udiv	r3, r2, r3
 8008158:	b29b      	uxth	r3, r3
 800815a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2b0f      	cmp	r3, #15
 8008160:	d916      	bls.n	8008190 <UART_SetConfig+0x4c4>
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008168:	d212      	bcs.n	8008190 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	b29b      	uxth	r3, r3
 800816e:	f023 030f 	bic.w	r3, r3, #15
 8008172:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	085b      	lsrs	r3, r3, #1
 8008178:	b29b      	uxth	r3, r3
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	b29a      	uxth	r2, r3
 8008180:	89fb      	ldrh	r3, [r7, #14]
 8008182:	4313      	orrs	r3, r2
 8008184:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	89fa      	ldrh	r2, [r7, #14]
 800818c:	60da      	str	r2, [r3, #12]
 800818e:	e057      	b.n	8008240 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	76bb      	strb	r3, [r7, #26]
 8008194:	e054      	b.n	8008240 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008196:	7efb      	ldrb	r3, [r7, #27]
 8008198:	2b08      	cmp	r3, #8
 800819a:	d828      	bhi.n	80081ee <UART_SetConfig+0x522>
 800819c:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <UART_SetConfig+0x4d8>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	080081c9 	.word	0x080081c9
 80081a8:	080081d1 	.word	0x080081d1
 80081ac:	080081d9 	.word	0x080081d9
 80081b0:	080081ef 	.word	0x080081ef
 80081b4:	080081df 	.word	0x080081df
 80081b8:	080081ef 	.word	0x080081ef
 80081bc:	080081ef 	.word	0x080081ef
 80081c0:	080081ef 	.word	0x080081ef
 80081c4:	080081e7 	.word	0x080081e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c8:	f7fd fc62 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 80081cc:	6178      	str	r0, [r7, #20]
        break;
 80081ce:	e013      	b.n	80081f8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081d0:	f7fd fc74 	bl	8005abc <HAL_RCC_GetPCLK2Freq>
 80081d4:	6178      	str	r0, [r7, #20]
        break;
 80081d6:	e00f      	b.n	80081f8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d8:	4b24      	ldr	r3, [pc, #144]	; (800826c <UART_SetConfig+0x5a0>)
 80081da:	617b      	str	r3, [r7, #20]
        break;
 80081dc:	e00c      	b.n	80081f8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081de:	f7fd fbc1 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 80081e2:	6178      	str	r0, [r7, #20]
        break;
 80081e4:	e008      	b.n	80081f8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ea:	617b      	str	r3, [r7, #20]
        break;
 80081ec:	e004      	b.n	80081f8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	76bb      	strb	r3, [r7, #26]
        break;
 80081f6:	bf00      	nop
    }

    if (pclk != 0U)
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d020      	beq.n	8008240 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	4a19      	ldr	r2, [pc, #100]	; (8008268 <UART_SetConfig+0x59c>)
 8008204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008208:	461a      	mov	r2, r3
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	085b      	lsrs	r3, r3, #1
 8008216:	441a      	add	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008220:	b29b      	uxth	r3, r3
 8008222:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2b0f      	cmp	r3, #15
 8008228:	d908      	bls.n	800823c <UART_SetConfig+0x570>
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008230:	d204      	bcs.n	800823c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	e001      	b.n	8008240 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800825c:	7ebb      	ldrb	r3, [r7, #26]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008268:	0800a758 	.word	0x0800a758
 800826c:	00f42400 	.word	0x00f42400

08008270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	f003 0310 	and.w	r3, r3, #16
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01a      	beq.n	8008386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800836e:	d10a      	bne.n	8008386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	605a      	str	r2, [r3, #4]
  }
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80083c4:	f7fb f9c0 	bl	8003748 <HAL_GetTick>
 80083c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d10e      	bne.n	80083f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f82c 	bl	8008444 <UART_WaitOnFlagUntilTimeout>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e022      	b.n	800843c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b04      	cmp	r3, #4
 8008402:	d10e      	bne.n	8008422 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f816 	bl	8008444 <UART_WaitOnFlagUntilTimeout>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e00c      	b.n	800843c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2220      	movs	r2, #32
 8008426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	4613      	mov	r3, r2
 8008452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008454:	e062      	b.n	800851c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845c:	d05e      	beq.n	800851c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800845e:	f7fb f973 	bl	8003748 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	429a      	cmp	r2, r3
 800846c:	d302      	bcc.n	8008474 <UART_WaitOnFlagUntilTimeout+0x30>
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d11d      	bne.n	80084b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008482:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0201 	bic.w	r2, r2, #1
 8008492:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2220      	movs	r2, #32
 8008498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e045      	b.n	800853c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d02e      	beq.n	800851c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084cc:	d126      	bne.n	800851c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084e6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0201 	bic.w	r2, r2, #1
 80084f6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2220      	movs	r2, #32
 800850c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e00f      	b.n	800853c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	69da      	ldr	r2, [r3, #28]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4013      	ands	r3, r2
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	429a      	cmp	r2, r3
 800852a:	bf0c      	ite	eq
 800852c:	2301      	moveq	r3, #1
 800852e:	2300      	movne	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	461a      	mov	r2, r3
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	429a      	cmp	r2, r3
 8008538:	d08d      	beq.n	8008456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <__errno>:
 8008544:	4b01      	ldr	r3, [pc, #4]	; (800854c <__errno+0x8>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000054 	.word	0x20000054

08008550 <getchar>:
 8008550:	4b07      	ldr	r3, [pc, #28]	; (8008570 <getchar+0x20>)
 8008552:	b510      	push	{r4, lr}
 8008554:	681c      	ldr	r4, [r3, #0]
 8008556:	b124      	cbz	r4, 8008562 <getchar+0x12>
 8008558:	69a3      	ldr	r3, [r4, #24]
 800855a:	b913      	cbnz	r3, 8008562 <getchar+0x12>
 800855c:	4620      	mov	r0, r4
 800855e:	f000 fc9b 	bl	8008e98 <__sinit>
 8008562:	6861      	ldr	r1, [r4, #4]
 8008564:	4620      	mov	r0, r4
 8008566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800856a:	f000 bd3b 	b.w	8008fe4 <_getc_r>
 800856e:	bf00      	nop
 8008570:	20000054 	.word	0x20000054

08008574 <_gets_r>:
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008576:	460e      	mov	r6, r1
 8008578:	4605      	mov	r5, r0
 800857a:	b118      	cbz	r0, 8008584 <_gets_r+0x10>
 800857c:	6983      	ldr	r3, [r0, #24]
 800857e:	b90b      	cbnz	r3, 8008584 <_gets_r+0x10>
 8008580:	f000 fc8a 	bl	8008e98 <__sinit>
 8008584:	69ab      	ldr	r3, [r5, #24]
 8008586:	686c      	ldr	r4, [r5, #4]
 8008588:	b913      	cbnz	r3, 8008590 <_gets_r+0x1c>
 800858a:	4628      	mov	r0, r5
 800858c:	f000 fc84 	bl	8008e98 <__sinit>
 8008590:	4b16      	ldr	r3, [pc, #88]	; (80085ec <_gets_r+0x78>)
 8008592:	429c      	cmp	r4, r3
 8008594:	d114      	bne.n	80085c0 <_gets_r+0x4c>
 8008596:	686c      	ldr	r4, [r5, #4]
 8008598:	4637      	mov	r7, r6
 800859a:	6863      	ldr	r3, [r4, #4]
 800859c:	3b01      	subs	r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	6063      	str	r3, [r4, #4]
 80085a2:	da17      	bge.n	80085d4 <_gets_r+0x60>
 80085a4:	4621      	mov	r1, r4
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 f9b4 	bl	8008914 <__srget_r>
 80085ac:	280a      	cmp	r0, #10
 80085ae:	d003      	beq.n	80085b8 <_gets_r+0x44>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	d115      	bne.n	80085e0 <_gets_r+0x6c>
 80085b4:	42b7      	cmp	r7, r6
 80085b6:	d016      	beq.n	80085e6 <_gets_r+0x72>
 80085b8:	2300      	movs	r3, #0
 80085ba:	703b      	strb	r3, [r7, #0]
 80085bc:	4630      	mov	r0, r6
 80085be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <_gets_r+0x7c>)
 80085c2:	429c      	cmp	r4, r3
 80085c4:	d101      	bne.n	80085ca <_gets_r+0x56>
 80085c6:	68ac      	ldr	r4, [r5, #8]
 80085c8:	e7e6      	b.n	8008598 <_gets_r+0x24>
 80085ca:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <_gets_r+0x80>)
 80085cc:	429c      	cmp	r4, r3
 80085ce:	bf08      	it	eq
 80085d0:	68ec      	ldreq	r4, [r5, #12]
 80085d2:	e7e1      	b.n	8008598 <_gets_r+0x24>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	6022      	str	r2, [r4, #0]
 80085da:	7818      	ldrb	r0, [r3, #0]
 80085dc:	280a      	cmp	r0, #10
 80085de:	d0eb      	beq.n	80085b8 <_gets_r+0x44>
 80085e0:	f807 0b01 	strb.w	r0, [r7], #1
 80085e4:	e7d9      	b.n	800859a <_gets_r+0x26>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e7e9      	b.n	80085be <_gets_r+0x4a>
 80085ea:	bf00      	nop
 80085ec:	0800a794 	.word	0x0800a794
 80085f0:	0800a7b4 	.word	0x0800a7b4
 80085f4:	0800a774 	.word	0x0800a774

080085f8 <gets>:
 80085f8:	4b02      	ldr	r3, [pc, #8]	; (8008604 <gets+0xc>)
 80085fa:	4601      	mov	r1, r0
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	f7ff bfb9 	b.w	8008574 <_gets_r>
 8008602:	bf00      	nop
 8008604:	20000054 	.word	0x20000054

08008608 <__libc_init_array>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	4e0d      	ldr	r6, [pc, #52]	; (8008640 <__libc_init_array+0x38>)
 800860c:	4c0d      	ldr	r4, [pc, #52]	; (8008644 <__libc_init_array+0x3c>)
 800860e:	1ba4      	subs	r4, r4, r6
 8008610:	10a4      	asrs	r4, r4, #2
 8008612:	2500      	movs	r5, #0
 8008614:	42a5      	cmp	r5, r4
 8008616:	d109      	bne.n	800862c <__libc_init_array+0x24>
 8008618:	4e0b      	ldr	r6, [pc, #44]	; (8008648 <__libc_init_array+0x40>)
 800861a:	4c0c      	ldr	r4, [pc, #48]	; (800864c <__libc_init_array+0x44>)
 800861c:	f001 fb4e 	bl	8009cbc <_init>
 8008620:	1ba4      	subs	r4, r4, r6
 8008622:	10a4      	asrs	r4, r4, #2
 8008624:	2500      	movs	r5, #0
 8008626:	42a5      	cmp	r5, r4
 8008628:	d105      	bne.n	8008636 <__libc_init_array+0x2e>
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008630:	4798      	blx	r3
 8008632:	3501      	adds	r5, #1
 8008634:	e7ee      	b.n	8008614 <__libc_init_array+0xc>
 8008636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800863a:	4798      	blx	r3
 800863c:	3501      	adds	r5, #1
 800863e:	e7f2      	b.n	8008626 <__libc_init_array+0x1e>
 8008640:	0800a810 	.word	0x0800a810
 8008644:	0800a810 	.word	0x0800a810
 8008648:	0800a810 	.word	0x0800a810
 800864c:	0800a814 	.word	0x0800a814

08008650 <malloc>:
 8008650:	4b02      	ldr	r3, [pc, #8]	; (800865c <malloc+0xc>)
 8008652:	4601      	mov	r1, r0
 8008654:	6818      	ldr	r0, [r3, #0]
 8008656:	f000 b873 	b.w	8008740 <_malloc_r>
 800865a:	bf00      	nop
 800865c:	20000054 	.word	0x20000054

08008660 <memcmp>:
 8008660:	b530      	push	{r4, r5, lr}
 8008662:	2400      	movs	r4, #0
 8008664:	42a2      	cmp	r2, r4
 8008666:	d101      	bne.n	800866c <memcmp+0xc>
 8008668:	2000      	movs	r0, #0
 800866a:	e007      	b.n	800867c <memcmp+0x1c>
 800866c:	5d03      	ldrb	r3, [r0, r4]
 800866e:	3401      	adds	r4, #1
 8008670:	190d      	adds	r5, r1, r4
 8008672:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8008676:	42ab      	cmp	r3, r5
 8008678:	d0f4      	beq.n	8008664 <memcmp+0x4>
 800867a:	1b58      	subs	r0, r3, r5
 800867c:	bd30      	pop	{r4, r5, pc}

0800867e <memcpy>:
 800867e:	b510      	push	{r4, lr}
 8008680:	1e43      	subs	r3, r0, #1
 8008682:	440a      	add	r2, r1
 8008684:	4291      	cmp	r1, r2
 8008686:	d100      	bne.n	800868a <memcpy+0xc>
 8008688:	bd10      	pop	{r4, pc}
 800868a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800868e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008692:	e7f7      	b.n	8008684 <memcpy+0x6>

08008694 <memset>:
 8008694:	4402      	add	r2, r0
 8008696:	4603      	mov	r3, r0
 8008698:	4293      	cmp	r3, r2
 800869a:	d100      	bne.n	800869e <memset+0xa>
 800869c:	4770      	bx	lr
 800869e:	f803 1b01 	strb.w	r1, [r3], #1
 80086a2:	e7f9      	b.n	8008698 <memset+0x4>

080086a4 <_free_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4605      	mov	r5, r0
 80086a8:	2900      	cmp	r1, #0
 80086aa:	d045      	beq.n	8008738 <_free_r+0x94>
 80086ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b0:	1f0c      	subs	r4, r1, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bfb8      	it	lt
 80086b6:	18e4      	addlt	r4, r4, r3
 80086b8:	f000 fd24 	bl	8009104 <__malloc_lock>
 80086bc:	4a1f      	ldr	r2, [pc, #124]	; (800873c <_free_r+0x98>)
 80086be:	6813      	ldr	r3, [r2, #0]
 80086c0:	4610      	mov	r0, r2
 80086c2:	b933      	cbnz	r3, 80086d2 <_free_r+0x2e>
 80086c4:	6063      	str	r3, [r4, #4]
 80086c6:	6014      	str	r4, [r2, #0]
 80086c8:	4628      	mov	r0, r5
 80086ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ce:	f000 bd1a 	b.w	8009106 <__malloc_unlock>
 80086d2:	42a3      	cmp	r3, r4
 80086d4:	d90c      	bls.n	80086f0 <_free_r+0x4c>
 80086d6:	6821      	ldr	r1, [r4, #0]
 80086d8:	1862      	adds	r2, r4, r1
 80086da:	4293      	cmp	r3, r2
 80086dc:	bf04      	itt	eq
 80086de:	681a      	ldreq	r2, [r3, #0]
 80086e0:	685b      	ldreq	r3, [r3, #4]
 80086e2:	6063      	str	r3, [r4, #4]
 80086e4:	bf04      	itt	eq
 80086e6:	1852      	addeq	r2, r2, r1
 80086e8:	6022      	streq	r2, [r4, #0]
 80086ea:	6004      	str	r4, [r0, #0]
 80086ec:	e7ec      	b.n	80086c8 <_free_r+0x24>
 80086ee:	4613      	mov	r3, r2
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	b10a      	cbz	r2, 80086f8 <_free_r+0x54>
 80086f4:	42a2      	cmp	r2, r4
 80086f6:	d9fa      	bls.n	80086ee <_free_r+0x4a>
 80086f8:	6819      	ldr	r1, [r3, #0]
 80086fa:	1858      	adds	r0, r3, r1
 80086fc:	42a0      	cmp	r0, r4
 80086fe:	d10b      	bne.n	8008718 <_free_r+0x74>
 8008700:	6820      	ldr	r0, [r4, #0]
 8008702:	4401      	add	r1, r0
 8008704:	1858      	adds	r0, r3, r1
 8008706:	4282      	cmp	r2, r0
 8008708:	6019      	str	r1, [r3, #0]
 800870a:	d1dd      	bne.n	80086c8 <_free_r+0x24>
 800870c:	6810      	ldr	r0, [r2, #0]
 800870e:	6852      	ldr	r2, [r2, #4]
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	4401      	add	r1, r0
 8008714:	6019      	str	r1, [r3, #0]
 8008716:	e7d7      	b.n	80086c8 <_free_r+0x24>
 8008718:	d902      	bls.n	8008720 <_free_r+0x7c>
 800871a:	230c      	movs	r3, #12
 800871c:	602b      	str	r3, [r5, #0]
 800871e:	e7d3      	b.n	80086c8 <_free_r+0x24>
 8008720:	6820      	ldr	r0, [r4, #0]
 8008722:	1821      	adds	r1, r4, r0
 8008724:	428a      	cmp	r2, r1
 8008726:	bf04      	itt	eq
 8008728:	6811      	ldreq	r1, [r2, #0]
 800872a:	6852      	ldreq	r2, [r2, #4]
 800872c:	6062      	str	r2, [r4, #4]
 800872e:	bf04      	itt	eq
 8008730:	1809      	addeq	r1, r1, r0
 8008732:	6021      	streq	r1, [r4, #0]
 8008734:	605c      	str	r4, [r3, #4]
 8008736:	e7c7      	b.n	80086c8 <_free_r+0x24>
 8008738:	bd38      	pop	{r3, r4, r5, pc}
 800873a:	bf00      	nop
 800873c:	200009d4 	.word	0x200009d4

08008740 <_malloc_r>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	1ccd      	adds	r5, r1, #3
 8008744:	f025 0503 	bic.w	r5, r5, #3
 8008748:	3508      	adds	r5, #8
 800874a:	2d0c      	cmp	r5, #12
 800874c:	bf38      	it	cc
 800874e:	250c      	movcc	r5, #12
 8008750:	2d00      	cmp	r5, #0
 8008752:	4606      	mov	r6, r0
 8008754:	db01      	blt.n	800875a <_malloc_r+0x1a>
 8008756:	42a9      	cmp	r1, r5
 8008758:	d903      	bls.n	8008762 <_malloc_r+0x22>
 800875a:	230c      	movs	r3, #12
 800875c:	6033      	str	r3, [r6, #0]
 800875e:	2000      	movs	r0, #0
 8008760:	bd70      	pop	{r4, r5, r6, pc}
 8008762:	f000 fccf 	bl	8009104 <__malloc_lock>
 8008766:	4a21      	ldr	r2, [pc, #132]	; (80087ec <_malloc_r+0xac>)
 8008768:	6814      	ldr	r4, [r2, #0]
 800876a:	4621      	mov	r1, r4
 800876c:	b991      	cbnz	r1, 8008794 <_malloc_r+0x54>
 800876e:	4c20      	ldr	r4, [pc, #128]	; (80087f0 <_malloc_r+0xb0>)
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	b91b      	cbnz	r3, 800877c <_malloc_r+0x3c>
 8008774:	4630      	mov	r0, r6
 8008776:	f000 f8f9 	bl	800896c <_sbrk_r>
 800877a:	6020      	str	r0, [r4, #0]
 800877c:	4629      	mov	r1, r5
 800877e:	4630      	mov	r0, r6
 8008780:	f000 f8f4 	bl	800896c <_sbrk_r>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d124      	bne.n	80087d2 <_malloc_r+0x92>
 8008788:	230c      	movs	r3, #12
 800878a:	6033      	str	r3, [r6, #0]
 800878c:	4630      	mov	r0, r6
 800878e:	f000 fcba 	bl	8009106 <__malloc_unlock>
 8008792:	e7e4      	b.n	800875e <_malloc_r+0x1e>
 8008794:	680b      	ldr	r3, [r1, #0]
 8008796:	1b5b      	subs	r3, r3, r5
 8008798:	d418      	bmi.n	80087cc <_malloc_r+0x8c>
 800879a:	2b0b      	cmp	r3, #11
 800879c:	d90f      	bls.n	80087be <_malloc_r+0x7e>
 800879e:	600b      	str	r3, [r1, #0]
 80087a0:	50cd      	str	r5, [r1, r3]
 80087a2:	18cc      	adds	r4, r1, r3
 80087a4:	4630      	mov	r0, r6
 80087a6:	f000 fcae 	bl	8009106 <__malloc_unlock>
 80087aa:	f104 000b 	add.w	r0, r4, #11
 80087ae:	1d23      	adds	r3, r4, #4
 80087b0:	f020 0007 	bic.w	r0, r0, #7
 80087b4:	1ac3      	subs	r3, r0, r3
 80087b6:	d0d3      	beq.n	8008760 <_malloc_r+0x20>
 80087b8:	425a      	negs	r2, r3
 80087ba:	50e2      	str	r2, [r4, r3]
 80087bc:	e7d0      	b.n	8008760 <_malloc_r+0x20>
 80087be:	428c      	cmp	r4, r1
 80087c0:	684b      	ldr	r3, [r1, #4]
 80087c2:	bf16      	itet	ne
 80087c4:	6063      	strne	r3, [r4, #4]
 80087c6:	6013      	streq	r3, [r2, #0]
 80087c8:	460c      	movne	r4, r1
 80087ca:	e7eb      	b.n	80087a4 <_malloc_r+0x64>
 80087cc:	460c      	mov	r4, r1
 80087ce:	6849      	ldr	r1, [r1, #4]
 80087d0:	e7cc      	b.n	800876c <_malloc_r+0x2c>
 80087d2:	1cc4      	adds	r4, r0, #3
 80087d4:	f024 0403 	bic.w	r4, r4, #3
 80087d8:	42a0      	cmp	r0, r4
 80087da:	d005      	beq.n	80087e8 <_malloc_r+0xa8>
 80087dc:	1a21      	subs	r1, r4, r0
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f8c4 	bl	800896c <_sbrk_r>
 80087e4:	3001      	adds	r0, #1
 80087e6:	d0cf      	beq.n	8008788 <_malloc_r+0x48>
 80087e8:	6025      	str	r5, [r4, #0]
 80087ea:	e7db      	b.n	80087a4 <_malloc_r+0x64>
 80087ec:	200009d4 	.word	0x200009d4
 80087f0:	200009d8 	.word	0x200009d8

080087f4 <iprintf>:
 80087f4:	b40f      	push	{r0, r1, r2, r3}
 80087f6:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <iprintf+0x2c>)
 80087f8:	b513      	push	{r0, r1, r4, lr}
 80087fa:	681c      	ldr	r4, [r3, #0]
 80087fc:	b124      	cbz	r4, 8008808 <iprintf+0x14>
 80087fe:	69a3      	ldr	r3, [r4, #24]
 8008800:	b913      	cbnz	r3, 8008808 <iprintf+0x14>
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fb48 	bl	8008e98 <__sinit>
 8008808:	ab05      	add	r3, sp, #20
 800880a:	9a04      	ldr	r2, [sp, #16]
 800880c:	68a1      	ldr	r1, [r4, #8]
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fdf5 	bl	8009400 <_vfiprintf_r>
 8008816:	b002      	add	sp, #8
 8008818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800881c:	b004      	add	sp, #16
 800881e:	4770      	bx	lr
 8008820:	20000054 	.word	0x20000054

08008824 <putchar>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4b08      	ldr	r3, [pc, #32]	; (8008848 <putchar+0x24>)
 8008828:	681c      	ldr	r4, [r3, #0]
 800882a:	4605      	mov	r5, r0
 800882c:	b124      	cbz	r4, 8008838 <putchar+0x14>
 800882e:	69a3      	ldr	r3, [r4, #24]
 8008830:	b913      	cbnz	r3, 8008838 <putchar+0x14>
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fb30 	bl	8008e98 <__sinit>
 8008838:	68a2      	ldr	r2, [r4, #8]
 800883a:	4629      	mov	r1, r5
 800883c:	4620      	mov	r0, r4
 800883e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008842:	f001 b87b 	b.w	800993c <_putc_r>
 8008846:	bf00      	nop
 8008848:	20000054 	.word	0x20000054

0800884c <_puts_r>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	460e      	mov	r6, r1
 8008850:	4605      	mov	r5, r0
 8008852:	b118      	cbz	r0, 800885c <_puts_r+0x10>
 8008854:	6983      	ldr	r3, [r0, #24]
 8008856:	b90b      	cbnz	r3, 800885c <_puts_r+0x10>
 8008858:	f000 fb1e 	bl	8008e98 <__sinit>
 800885c:	69ab      	ldr	r3, [r5, #24]
 800885e:	68ac      	ldr	r4, [r5, #8]
 8008860:	b913      	cbnz	r3, 8008868 <_puts_r+0x1c>
 8008862:	4628      	mov	r0, r5
 8008864:	f000 fb18 	bl	8008e98 <__sinit>
 8008868:	4b23      	ldr	r3, [pc, #140]	; (80088f8 <_puts_r+0xac>)
 800886a:	429c      	cmp	r4, r3
 800886c:	d117      	bne.n	800889e <_puts_r+0x52>
 800886e:	686c      	ldr	r4, [r5, #4]
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	071b      	lsls	r3, r3, #28
 8008874:	d51d      	bpl.n	80088b2 <_puts_r+0x66>
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	b1db      	cbz	r3, 80088b2 <_puts_r+0x66>
 800887a:	3e01      	subs	r6, #1
 800887c:	68a3      	ldr	r3, [r4, #8]
 800887e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008882:	3b01      	subs	r3, #1
 8008884:	60a3      	str	r3, [r4, #8]
 8008886:	b9e9      	cbnz	r1, 80088c4 <_puts_r+0x78>
 8008888:	2b00      	cmp	r3, #0
 800888a:	da2e      	bge.n	80088ea <_puts_r+0x9e>
 800888c:	4622      	mov	r2, r4
 800888e:	210a      	movs	r1, #10
 8008890:	4628      	mov	r0, r5
 8008892:	f000 f93f 	bl	8008b14 <__swbuf_r>
 8008896:	3001      	adds	r0, #1
 8008898:	d011      	beq.n	80088be <_puts_r+0x72>
 800889a:	200a      	movs	r0, #10
 800889c:	e011      	b.n	80088c2 <_puts_r+0x76>
 800889e:	4b17      	ldr	r3, [pc, #92]	; (80088fc <_puts_r+0xb0>)
 80088a0:	429c      	cmp	r4, r3
 80088a2:	d101      	bne.n	80088a8 <_puts_r+0x5c>
 80088a4:	68ac      	ldr	r4, [r5, #8]
 80088a6:	e7e3      	b.n	8008870 <_puts_r+0x24>
 80088a8:	4b15      	ldr	r3, [pc, #84]	; (8008900 <_puts_r+0xb4>)
 80088aa:	429c      	cmp	r4, r3
 80088ac:	bf08      	it	eq
 80088ae:	68ec      	ldreq	r4, [r5, #12]
 80088b0:	e7de      	b.n	8008870 <_puts_r+0x24>
 80088b2:	4621      	mov	r1, r4
 80088b4:	4628      	mov	r0, r5
 80088b6:	f000 f97f 	bl	8008bb8 <__swsetup_r>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d0dd      	beq.n	800887a <_puts_r+0x2e>
 80088be:	f04f 30ff 	mov.w	r0, #4294967295
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da04      	bge.n	80088d2 <_puts_r+0x86>
 80088c8:	69a2      	ldr	r2, [r4, #24]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	dc06      	bgt.n	80088dc <_puts_r+0x90>
 80088ce:	290a      	cmp	r1, #10
 80088d0:	d004      	beq.n	80088dc <_puts_r+0x90>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	6022      	str	r2, [r4, #0]
 80088d8:	7019      	strb	r1, [r3, #0]
 80088da:	e7cf      	b.n	800887c <_puts_r+0x30>
 80088dc:	4622      	mov	r2, r4
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 f918 	bl	8008b14 <__swbuf_r>
 80088e4:	3001      	adds	r0, #1
 80088e6:	d1c9      	bne.n	800887c <_puts_r+0x30>
 80088e8:	e7e9      	b.n	80088be <_puts_r+0x72>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	200a      	movs	r0, #10
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	6022      	str	r2, [r4, #0]
 80088f2:	7018      	strb	r0, [r3, #0]
 80088f4:	e7e5      	b.n	80088c2 <_puts_r+0x76>
 80088f6:	bf00      	nop
 80088f8:	0800a794 	.word	0x0800a794
 80088fc:	0800a7b4 	.word	0x0800a7b4
 8008900:	0800a774 	.word	0x0800a774

08008904 <puts>:
 8008904:	4b02      	ldr	r3, [pc, #8]	; (8008910 <puts+0xc>)
 8008906:	4601      	mov	r1, r0
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	f7ff bf9f 	b.w	800884c <_puts_r>
 800890e:	bf00      	nop
 8008910:	20000054 	.word	0x20000054

08008914 <__srget_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	460c      	mov	r4, r1
 8008918:	4605      	mov	r5, r0
 800891a:	b118      	cbz	r0, 8008924 <__srget_r+0x10>
 800891c:	6983      	ldr	r3, [r0, #24]
 800891e:	b90b      	cbnz	r3, 8008924 <__srget_r+0x10>
 8008920:	f000 faba 	bl	8008e98 <__sinit>
 8008924:	4b0e      	ldr	r3, [pc, #56]	; (8008960 <__srget_r+0x4c>)
 8008926:	429c      	cmp	r4, r3
 8008928:	d10d      	bne.n	8008946 <__srget_r+0x32>
 800892a:	686c      	ldr	r4, [r5, #4]
 800892c:	4621      	mov	r1, r4
 800892e:	4628      	mov	r0, r5
 8008930:	f001 f844 	bl	80099bc <__srefill_r>
 8008934:	b988      	cbnz	r0, 800895a <__srget_r+0x46>
 8008936:	6863      	ldr	r3, [r4, #4]
 8008938:	3b01      	subs	r3, #1
 800893a:	6063      	str	r3, [r4, #4]
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	6022      	str	r2, [r4, #0]
 8008942:	7818      	ldrb	r0, [r3, #0]
 8008944:	bd38      	pop	{r3, r4, r5, pc}
 8008946:	4b07      	ldr	r3, [pc, #28]	; (8008964 <__srget_r+0x50>)
 8008948:	429c      	cmp	r4, r3
 800894a:	d101      	bne.n	8008950 <__srget_r+0x3c>
 800894c:	68ac      	ldr	r4, [r5, #8]
 800894e:	e7ed      	b.n	800892c <__srget_r+0x18>
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <__srget_r+0x54>)
 8008952:	429c      	cmp	r4, r3
 8008954:	bf08      	it	eq
 8008956:	68ec      	ldreq	r4, [r5, #12]
 8008958:	e7e8      	b.n	800892c <__srget_r+0x18>
 800895a:	f04f 30ff 	mov.w	r0, #4294967295
 800895e:	e7f1      	b.n	8008944 <__srget_r+0x30>
 8008960:	0800a794 	.word	0x0800a794
 8008964:	0800a7b4 	.word	0x0800a7b4
 8008968:	0800a774 	.word	0x0800a774

0800896c <_sbrk_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4c06      	ldr	r4, [pc, #24]	; (8008988 <_sbrk_r+0x1c>)
 8008970:	2300      	movs	r3, #0
 8008972:	4605      	mov	r5, r0
 8008974:	4608      	mov	r0, r1
 8008976:	6023      	str	r3, [r4, #0]
 8008978:	f7f8 fd80 	bl	800147c <_sbrk>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_sbrk_r+0x1a>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	b103      	cbz	r3, 8008986 <_sbrk_r+0x1a>
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	2000141c 	.word	0x2000141c

0800898c <siprintf>:
 800898c:	b40e      	push	{r1, r2, r3}
 800898e:	b500      	push	{lr}
 8008990:	b09c      	sub	sp, #112	; 0x70
 8008992:	ab1d      	add	r3, sp, #116	; 0x74
 8008994:	9002      	str	r0, [sp, #8]
 8008996:	9006      	str	r0, [sp, #24]
 8008998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800899c:	4809      	ldr	r0, [pc, #36]	; (80089c4 <siprintf+0x38>)
 800899e:	9107      	str	r1, [sp, #28]
 80089a0:	9104      	str	r1, [sp, #16]
 80089a2:	4909      	ldr	r1, [pc, #36]	; (80089c8 <siprintf+0x3c>)
 80089a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a8:	9105      	str	r1, [sp, #20]
 80089aa:	6800      	ldr	r0, [r0, #0]
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	a902      	add	r1, sp, #8
 80089b0:	f000 fc04 	bl	80091bc <_svfiprintf_r>
 80089b4:	9b02      	ldr	r3, [sp, #8]
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	b01c      	add	sp, #112	; 0x70
 80089bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089c0:	b003      	add	sp, #12
 80089c2:	4770      	bx	lr
 80089c4:	20000054 	.word	0x20000054
 80089c8:	ffff0208 	.word	0xffff0208

080089cc <strcat>:
 80089cc:	b510      	push	{r4, lr}
 80089ce:	4603      	mov	r3, r0
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	1c5c      	adds	r4, r3, #1
 80089d4:	b93a      	cbnz	r2, 80089e6 <strcat+0x1a>
 80089d6:	3b01      	subs	r3, #1
 80089d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089e0:	2a00      	cmp	r2, #0
 80089e2:	d1f9      	bne.n	80089d8 <strcat+0xc>
 80089e4:	bd10      	pop	{r4, pc}
 80089e6:	4623      	mov	r3, r4
 80089e8:	e7f2      	b.n	80089d0 <strcat+0x4>

080089ea <strncmp>:
 80089ea:	b510      	push	{r4, lr}
 80089ec:	b16a      	cbz	r2, 8008a0a <strncmp+0x20>
 80089ee:	3901      	subs	r1, #1
 80089f0:	1884      	adds	r4, r0, r2
 80089f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80089f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d103      	bne.n	8008a06 <strncmp+0x1c>
 80089fe:	42a0      	cmp	r0, r4
 8008a00:	d001      	beq.n	8008a06 <strncmp+0x1c>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f5      	bne.n	80089f2 <strncmp+0x8>
 8008a06:	1a98      	subs	r0, r3, r2
 8008a08:	bd10      	pop	{r4, pc}
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	e7fc      	b.n	8008a08 <strncmp+0x1e>

08008a0e <strncpy>:
 8008a0e:	b570      	push	{r4, r5, r6, lr}
 8008a10:	3901      	subs	r1, #1
 8008a12:	4604      	mov	r4, r0
 8008a14:	b902      	cbnz	r2, 8008a18 <strncpy+0xa>
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	4623      	mov	r3, r4
 8008a1a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008a1e:	f803 5b01 	strb.w	r5, [r3], #1
 8008a22:	1e56      	subs	r6, r2, #1
 8008a24:	b92d      	cbnz	r5, 8008a32 <strncpy+0x24>
 8008a26:	4414      	add	r4, r2
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	d0f4      	beq.n	8008a16 <strncpy+0x8>
 8008a2c:	f803 5b01 	strb.w	r5, [r3], #1
 8008a30:	e7fa      	b.n	8008a28 <strncpy+0x1a>
 8008a32:	461c      	mov	r4, r3
 8008a34:	4632      	mov	r2, r6
 8008a36:	e7ed      	b.n	8008a14 <strncpy+0x6>

08008a38 <strstr>:
 8008a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a3a:	7803      	ldrb	r3, [r0, #0]
 8008a3c:	b17b      	cbz	r3, 8008a5e <strstr+0x26>
 8008a3e:	4604      	mov	r4, r0
 8008a40:	7823      	ldrb	r3, [r4, #0]
 8008a42:	4620      	mov	r0, r4
 8008a44:	1c66      	adds	r6, r4, #1
 8008a46:	b17b      	cbz	r3, 8008a68 <strstr+0x30>
 8008a48:	1e4a      	subs	r2, r1, #1
 8008a4a:	1e63      	subs	r3, r4, #1
 8008a4c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008a50:	b14d      	cbz	r5, 8008a66 <strstr+0x2e>
 8008a52:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008a56:	42af      	cmp	r7, r5
 8008a58:	4634      	mov	r4, r6
 8008a5a:	d0f7      	beq.n	8008a4c <strstr+0x14>
 8008a5c:	e7f0      	b.n	8008a40 <strstr+0x8>
 8008a5e:	780b      	ldrb	r3, [r1, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bf18      	it	ne
 8008a64:	2000      	movne	r0, #0
 8008a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	e7fc      	b.n	8008a66 <strstr+0x2e>

08008a6c <strtok>:
 8008a6c:	4b13      	ldr	r3, [pc, #76]	; (8008abc <strtok+0x50>)
 8008a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a72:	681d      	ldr	r5, [r3, #0]
 8008a74:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008a76:	4606      	mov	r6, r0
 8008a78:	460f      	mov	r7, r1
 8008a7a:	b9b4      	cbnz	r4, 8008aaa <strtok+0x3e>
 8008a7c:	2050      	movs	r0, #80	; 0x50
 8008a7e:	f7ff fde7 	bl	8008650 <malloc>
 8008a82:	65a8      	str	r0, [r5, #88]	; 0x58
 8008a84:	e9c0 4400 	strd	r4, r4, [r0]
 8008a88:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008a8c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008a90:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008a94:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008a98:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008a9c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008aa0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008aa4:	6184      	str	r4, [r0, #24]
 8008aa6:	7704      	strb	r4, [r0, #28]
 8008aa8:	6244      	str	r4, [r0, #36]	; 0x24
 8008aaa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008aac:	4639      	mov	r1, r7
 8008aae:	4630      	mov	r0, r6
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab6:	f000 b803 	b.w	8008ac0 <__strtok_r>
 8008aba:	bf00      	nop
 8008abc:	20000054 	.word	0x20000054

08008ac0 <__strtok_r>:
 8008ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac2:	b918      	cbnz	r0, 8008acc <__strtok_r+0xc>
 8008ac4:	6810      	ldr	r0, [r2, #0]
 8008ac6:	b908      	cbnz	r0, 8008acc <__strtok_r+0xc>
 8008ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aca:	4620      	mov	r0, r4
 8008acc:	4604      	mov	r4, r0
 8008ace:	460f      	mov	r7, r1
 8008ad0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008ad4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008ad8:	b91e      	cbnz	r6, 8008ae2 <__strtok_r+0x22>
 8008ada:	b96d      	cbnz	r5, 8008af8 <__strtok_r+0x38>
 8008adc:	6015      	str	r5, [r2, #0]
 8008ade:	4628      	mov	r0, r5
 8008ae0:	e7f2      	b.n	8008ac8 <__strtok_r+0x8>
 8008ae2:	42b5      	cmp	r5, r6
 8008ae4:	d1f6      	bne.n	8008ad4 <__strtok_r+0x14>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1ef      	bne.n	8008aca <__strtok_r+0xa>
 8008aea:	6014      	str	r4, [r2, #0]
 8008aec:	7003      	strb	r3, [r0, #0]
 8008aee:	e7eb      	b.n	8008ac8 <__strtok_r+0x8>
 8008af0:	462b      	mov	r3, r5
 8008af2:	e00d      	b.n	8008b10 <__strtok_r+0x50>
 8008af4:	b926      	cbnz	r6, 8008b00 <__strtok_r+0x40>
 8008af6:	461c      	mov	r4, r3
 8008af8:	4623      	mov	r3, r4
 8008afa:	460f      	mov	r7, r1
 8008afc:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008b00:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008b04:	42b5      	cmp	r5, r6
 8008b06:	d1f5      	bne.n	8008af4 <__strtok_r+0x34>
 8008b08:	2d00      	cmp	r5, #0
 8008b0a:	d0f1      	beq.n	8008af0 <__strtok_r+0x30>
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	7021      	strb	r1, [r4, #0]
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	e7d9      	b.n	8008ac8 <__strtok_r+0x8>

08008b14 <__swbuf_r>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	460e      	mov	r6, r1
 8008b18:	4614      	mov	r4, r2
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	b118      	cbz	r0, 8008b26 <__swbuf_r+0x12>
 8008b1e:	6983      	ldr	r3, [r0, #24]
 8008b20:	b90b      	cbnz	r3, 8008b26 <__swbuf_r+0x12>
 8008b22:	f000 f9b9 	bl	8008e98 <__sinit>
 8008b26:	4b21      	ldr	r3, [pc, #132]	; (8008bac <__swbuf_r+0x98>)
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	d12a      	bne.n	8008b82 <__swbuf_r+0x6e>
 8008b2c:	686c      	ldr	r4, [r5, #4]
 8008b2e:	69a3      	ldr	r3, [r4, #24]
 8008b30:	60a3      	str	r3, [r4, #8]
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	071a      	lsls	r2, r3, #28
 8008b36:	d52e      	bpl.n	8008b96 <__swbuf_r+0x82>
 8008b38:	6923      	ldr	r3, [r4, #16]
 8008b3a:	b363      	cbz	r3, 8008b96 <__swbuf_r+0x82>
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	1ac0      	subs	r0, r0, r3
 8008b42:	6963      	ldr	r3, [r4, #20]
 8008b44:	b2f6      	uxtb	r6, r6
 8008b46:	4283      	cmp	r3, r0
 8008b48:	4637      	mov	r7, r6
 8008b4a:	dc04      	bgt.n	8008b56 <__swbuf_r+0x42>
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	4628      	mov	r0, r5
 8008b50:	f000 f926 	bl	8008da0 <_fflush_r>
 8008b54:	bb28      	cbnz	r0, 8008ba2 <__swbuf_r+0x8e>
 8008b56:	68a3      	ldr	r3, [r4, #8]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	60a3      	str	r3, [r4, #8]
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	6022      	str	r2, [r4, #0]
 8008b62:	701e      	strb	r6, [r3, #0]
 8008b64:	6963      	ldr	r3, [r4, #20]
 8008b66:	3001      	adds	r0, #1
 8008b68:	4283      	cmp	r3, r0
 8008b6a:	d004      	beq.n	8008b76 <__swbuf_r+0x62>
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	07db      	lsls	r3, r3, #31
 8008b70:	d519      	bpl.n	8008ba6 <__swbuf_r+0x92>
 8008b72:	2e0a      	cmp	r6, #10
 8008b74:	d117      	bne.n	8008ba6 <__swbuf_r+0x92>
 8008b76:	4621      	mov	r1, r4
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f000 f911 	bl	8008da0 <_fflush_r>
 8008b7e:	b190      	cbz	r0, 8008ba6 <__swbuf_r+0x92>
 8008b80:	e00f      	b.n	8008ba2 <__swbuf_r+0x8e>
 8008b82:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <__swbuf_r+0x9c>)
 8008b84:	429c      	cmp	r4, r3
 8008b86:	d101      	bne.n	8008b8c <__swbuf_r+0x78>
 8008b88:	68ac      	ldr	r4, [r5, #8]
 8008b8a:	e7d0      	b.n	8008b2e <__swbuf_r+0x1a>
 8008b8c:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <__swbuf_r+0xa0>)
 8008b8e:	429c      	cmp	r4, r3
 8008b90:	bf08      	it	eq
 8008b92:	68ec      	ldreq	r4, [r5, #12]
 8008b94:	e7cb      	b.n	8008b2e <__swbuf_r+0x1a>
 8008b96:	4621      	mov	r1, r4
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f000 f80d 	bl	8008bb8 <__swsetup_r>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d0cc      	beq.n	8008b3c <__swbuf_r+0x28>
 8008ba2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008baa:	bf00      	nop
 8008bac:	0800a794 	.word	0x0800a794
 8008bb0:	0800a7b4 	.word	0x0800a7b4
 8008bb4:	0800a774 	.word	0x0800a774

08008bb8 <__swsetup_r>:
 8008bb8:	4b32      	ldr	r3, [pc, #200]	; (8008c84 <__swsetup_r+0xcc>)
 8008bba:	b570      	push	{r4, r5, r6, lr}
 8008bbc:	681d      	ldr	r5, [r3, #0]
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	b125      	cbz	r5, 8008bce <__swsetup_r+0x16>
 8008bc4:	69ab      	ldr	r3, [r5, #24]
 8008bc6:	b913      	cbnz	r3, 8008bce <__swsetup_r+0x16>
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f000 f965 	bl	8008e98 <__sinit>
 8008bce:	4b2e      	ldr	r3, [pc, #184]	; (8008c88 <__swsetup_r+0xd0>)
 8008bd0:	429c      	cmp	r4, r3
 8008bd2:	d10f      	bne.n	8008bf4 <__swsetup_r+0x3c>
 8008bd4:	686c      	ldr	r4, [r5, #4]
 8008bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	0715      	lsls	r5, r2, #28
 8008bde:	d42c      	bmi.n	8008c3a <__swsetup_r+0x82>
 8008be0:	06d0      	lsls	r0, r2, #27
 8008be2:	d411      	bmi.n	8008c08 <__swsetup_r+0x50>
 8008be4:	2209      	movs	r2, #9
 8008be6:	6032      	str	r2, [r6, #0]
 8008be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	e03e      	b.n	8008c72 <__swsetup_r+0xba>
 8008bf4:	4b25      	ldr	r3, [pc, #148]	; (8008c8c <__swsetup_r+0xd4>)
 8008bf6:	429c      	cmp	r4, r3
 8008bf8:	d101      	bne.n	8008bfe <__swsetup_r+0x46>
 8008bfa:	68ac      	ldr	r4, [r5, #8]
 8008bfc:	e7eb      	b.n	8008bd6 <__swsetup_r+0x1e>
 8008bfe:	4b24      	ldr	r3, [pc, #144]	; (8008c90 <__swsetup_r+0xd8>)
 8008c00:	429c      	cmp	r4, r3
 8008c02:	bf08      	it	eq
 8008c04:	68ec      	ldreq	r4, [r5, #12]
 8008c06:	e7e6      	b.n	8008bd6 <__swsetup_r+0x1e>
 8008c08:	0751      	lsls	r1, r2, #29
 8008c0a:	d512      	bpl.n	8008c32 <__swsetup_r+0x7a>
 8008c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c0e:	b141      	cbz	r1, 8008c22 <__swsetup_r+0x6a>
 8008c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c14:	4299      	cmp	r1, r3
 8008c16:	d002      	beq.n	8008c1e <__swsetup_r+0x66>
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7ff fd43 	bl	80086a4 <_free_r>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	6363      	str	r3, [r4, #52]	; 0x34
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c28:	81a3      	strh	r3, [r4, #12]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6063      	str	r3, [r4, #4]
 8008c2e:	6923      	ldr	r3, [r4, #16]
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	f043 0308 	orr.w	r3, r3, #8
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	6923      	ldr	r3, [r4, #16]
 8008c3c:	b94b      	cbnz	r3, 8008c52 <__swsetup_r+0x9a>
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c48:	d003      	beq.n	8008c52 <__swsetup_r+0x9a>
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f000 fa19 	bl	8009084 <__smakebuf_r>
 8008c52:	89a2      	ldrh	r2, [r4, #12]
 8008c54:	f012 0301 	ands.w	r3, r2, #1
 8008c58:	d00c      	beq.n	8008c74 <__swsetup_r+0xbc>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60a3      	str	r3, [r4, #8]
 8008c5e:	6963      	ldr	r3, [r4, #20]
 8008c60:	425b      	negs	r3, r3
 8008c62:	61a3      	str	r3, [r4, #24]
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	b953      	cbnz	r3, 8008c7e <__swsetup_r+0xc6>
 8008c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008c70:	d1ba      	bne.n	8008be8 <__swsetup_r+0x30>
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	0792      	lsls	r2, r2, #30
 8008c76:	bf58      	it	pl
 8008c78:	6963      	ldrpl	r3, [r4, #20]
 8008c7a:	60a3      	str	r3, [r4, #8]
 8008c7c:	e7f2      	b.n	8008c64 <__swsetup_r+0xac>
 8008c7e:	2000      	movs	r0, #0
 8008c80:	e7f7      	b.n	8008c72 <__swsetup_r+0xba>
 8008c82:	bf00      	nop
 8008c84:	20000054 	.word	0x20000054
 8008c88:	0800a794 	.word	0x0800a794
 8008c8c:	0800a7b4 	.word	0x0800a7b4
 8008c90:	0800a774 	.word	0x0800a774

08008c94 <__sflush_r>:
 8008c94:	898a      	ldrh	r2, [r1, #12]
 8008c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	0710      	lsls	r0, r2, #28
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	d458      	bmi.n	8008d54 <__sflush_r+0xc0>
 8008ca2:	684b      	ldr	r3, [r1, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dc05      	bgt.n	8008cb4 <__sflush_r+0x20>
 8008ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dc02      	bgt.n	8008cb4 <__sflush_r+0x20>
 8008cae:	2000      	movs	r0, #0
 8008cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cb6:	2e00      	cmp	r6, #0
 8008cb8:	d0f9      	beq.n	8008cae <__sflush_r+0x1a>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cc0:	682f      	ldr	r7, [r5, #0]
 8008cc2:	6a21      	ldr	r1, [r4, #32]
 8008cc4:	602b      	str	r3, [r5, #0]
 8008cc6:	d032      	beq.n	8008d2e <__sflush_r+0x9a>
 8008cc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	075a      	lsls	r2, r3, #29
 8008cce:	d505      	bpl.n	8008cdc <__sflush_r+0x48>
 8008cd0:	6863      	ldr	r3, [r4, #4]
 8008cd2:	1ac0      	subs	r0, r0, r3
 8008cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cd6:	b10b      	cbz	r3, 8008cdc <__sflush_r+0x48>
 8008cd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cda:	1ac0      	subs	r0, r0, r3
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4602      	mov	r2, r0
 8008ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ce2:	6a21      	ldr	r1, [r4, #32]
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b0      	blx	r6
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	d106      	bne.n	8008cfc <__sflush_r+0x68>
 8008cee:	6829      	ldr	r1, [r5, #0]
 8008cf0:	291d      	cmp	r1, #29
 8008cf2:	d848      	bhi.n	8008d86 <__sflush_r+0xf2>
 8008cf4:	4a29      	ldr	r2, [pc, #164]	; (8008d9c <__sflush_r+0x108>)
 8008cf6:	40ca      	lsrs	r2, r1
 8008cf8:	07d6      	lsls	r6, r2, #31
 8008cfa:	d544      	bpl.n	8008d86 <__sflush_r+0xf2>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	6062      	str	r2, [r4, #4]
 8008d00:	04d9      	lsls	r1, r3, #19
 8008d02:	6922      	ldr	r2, [r4, #16]
 8008d04:	6022      	str	r2, [r4, #0]
 8008d06:	d504      	bpl.n	8008d12 <__sflush_r+0x7e>
 8008d08:	1c42      	adds	r2, r0, #1
 8008d0a:	d101      	bne.n	8008d10 <__sflush_r+0x7c>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b903      	cbnz	r3, 8008d12 <__sflush_r+0x7e>
 8008d10:	6560      	str	r0, [r4, #84]	; 0x54
 8008d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d14:	602f      	str	r7, [r5, #0]
 8008d16:	2900      	cmp	r1, #0
 8008d18:	d0c9      	beq.n	8008cae <__sflush_r+0x1a>
 8008d1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d1e:	4299      	cmp	r1, r3
 8008d20:	d002      	beq.n	8008d28 <__sflush_r+0x94>
 8008d22:	4628      	mov	r0, r5
 8008d24:	f7ff fcbe 	bl	80086a4 <_free_r>
 8008d28:	2000      	movs	r0, #0
 8008d2a:	6360      	str	r0, [r4, #52]	; 0x34
 8008d2c:	e7c0      	b.n	8008cb0 <__sflush_r+0x1c>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	4628      	mov	r0, r5
 8008d32:	47b0      	blx	r6
 8008d34:	1c41      	adds	r1, r0, #1
 8008d36:	d1c8      	bne.n	8008cca <__sflush_r+0x36>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0c5      	beq.n	8008cca <__sflush_r+0x36>
 8008d3e:	2b1d      	cmp	r3, #29
 8008d40:	d001      	beq.n	8008d46 <__sflush_r+0xb2>
 8008d42:	2b16      	cmp	r3, #22
 8008d44:	d101      	bne.n	8008d4a <__sflush_r+0xb6>
 8008d46:	602f      	str	r7, [r5, #0]
 8008d48:	e7b1      	b.n	8008cae <__sflush_r+0x1a>
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d50:	81a3      	strh	r3, [r4, #12]
 8008d52:	e7ad      	b.n	8008cb0 <__sflush_r+0x1c>
 8008d54:	690f      	ldr	r7, [r1, #16]
 8008d56:	2f00      	cmp	r7, #0
 8008d58:	d0a9      	beq.n	8008cae <__sflush_r+0x1a>
 8008d5a:	0793      	lsls	r3, r2, #30
 8008d5c:	680e      	ldr	r6, [r1, #0]
 8008d5e:	bf08      	it	eq
 8008d60:	694b      	ldreq	r3, [r1, #20]
 8008d62:	600f      	str	r7, [r1, #0]
 8008d64:	bf18      	it	ne
 8008d66:	2300      	movne	r3, #0
 8008d68:	eba6 0807 	sub.w	r8, r6, r7
 8008d6c:	608b      	str	r3, [r1, #8]
 8008d6e:	f1b8 0f00 	cmp.w	r8, #0
 8008d72:	dd9c      	ble.n	8008cae <__sflush_r+0x1a>
 8008d74:	4643      	mov	r3, r8
 8008d76:	463a      	mov	r2, r7
 8008d78:	6a21      	ldr	r1, [r4, #32]
 8008d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	47b0      	blx	r6
 8008d80:	2800      	cmp	r0, #0
 8008d82:	dc06      	bgt.n	8008d92 <__sflush_r+0xfe>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	e78e      	b.n	8008cb0 <__sflush_r+0x1c>
 8008d92:	4407      	add	r7, r0
 8008d94:	eba8 0800 	sub.w	r8, r8, r0
 8008d98:	e7e9      	b.n	8008d6e <__sflush_r+0xda>
 8008d9a:	bf00      	nop
 8008d9c:	20400001 	.word	0x20400001

08008da0 <_fflush_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	690b      	ldr	r3, [r1, #16]
 8008da4:	4605      	mov	r5, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	b1db      	cbz	r3, 8008de2 <_fflush_r+0x42>
 8008daa:	b118      	cbz	r0, 8008db4 <_fflush_r+0x14>
 8008dac:	6983      	ldr	r3, [r0, #24]
 8008dae:	b90b      	cbnz	r3, 8008db4 <_fflush_r+0x14>
 8008db0:	f000 f872 	bl	8008e98 <__sinit>
 8008db4:	4b0c      	ldr	r3, [pc, #48]	; (8008de8 <_fflush_r+0x48>)
 8008db6:	429c      	cmp	r4, r3
 8008db8:	d109      	bne.n	8008dce <_fflush_r+0x2e>
 8008dba:	686c      	ldr	r4, [r5, #4]
 8008dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc0:	b17b      	cbz	r3, 8008de2 <_fflush_r+0x42>
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dca:	f7ff bf63 	b.w	8008c94 <__sflush_r>
 8008dce:	4b07      	ldr	r3, [pc, #28]	; (8008dec <_fflush_r+0x4c>)
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	d101      	bne.n	8008dd8 <_fflush_r+0x38>
 8008dd4:	68ac      	ldr	r4, [r5, #8]
 8008dd6:	e7f1      	b.n	8008dbc <_fflush_r+0x1c>
 8008dd8:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <_fflush_r+0x50>)
 8008dda:	429c      	cmp	r4, r3
 8008ddc:	bf08      	it	eq
 8008dde:	68ec      	ldreq	r4, [r5, #12]
 8008de0:	e7ec      	b.n	8008dbc <_fflush_r+0x1c>
 8008de2:	2000      	movs	r0, #0
 8008de4:	bd38      	pop	{r3, r4, r5, pc}
 8008de6:	bf00      	nop
 8008de8:	0800a794 	.word	0x0800a794
 8008dec:	0800a7b4 	.word	0x0800a7b4
 8008df0:	0800a774 	.word	0x0800a774

08008df4 <fflush>:
 8008df4:	4601      	mov	r1, r0
 8008df6:	b920      	cbnz	r0, 8008e02 <fflush+0xe>
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <fflush+0x18>)
 8008dfa:	4905      	ldr	r1, [pc, #20]	; (8008e10 <fflush+0x1c>)
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	f000 b8d3 	b.w	8008fa8 <_fwalk_reent>
 8008e02:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <fflush+0x20>)
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	f7ff bfcb 	b.w	8008da0 <_fflush_r>
 8008e0a:	bf00      	nop
 8008e0c:	0800a770 	.word	0x0800a770
 8008e10:	08008da1 	.word	0x08008da1
 8008e14:	20000054 	.word	0x20000054

08008e18 <std>:
 8008e18:	2300      	movs	r3, #0
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e22:	6083      	str	r3, [r0, #8]
 8008e24:	8181      	strh	r1, [r0, #12]
 8008e26:	6643      	str	r3, [r0, #100]	; 0x64
 8008e28:	81c2      	strh	r2, [r0, #14]
 8008e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e2e:	6183      	str	r3, [r0, #24]
 8008e30:	4619      	mov	r1, r3
 8008e32:	2208      	movs	r2, #8
 8008e34:	305c      	adds	r0, #92	; 0x5c
 8008e36:	f7ff fc2d 	bl	8008694 <memset>
 8008e3a:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <std+0x38>)
 8008e3c:	6263      	str	r3, [r4, #36]	; 0x24
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <std+0x3c>)
 8008e40:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e42:	4b05      	ldr	r3, [pc, #20]	; (8008e58 <std+0x40>)
 8008e44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e46:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <std+0x44>)
 8008e48:	6224      	str	r4, [r4, #32]
 8008e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e4c:	bd10      	pop	{r4, pc}
 8008e4e:	bf00      	nop
 8008e50:	08009ad5 	.word	0x08009ad5
 8008e54:	08009af7 	.word	0x08009af7
 8008e58:	08009b2f 	.word	0x08009b2f
 8008e5c:	08009b53 	.word	0x08009b53

08008e60 <_cleanup_r>:
 8008e60:	4901      	ldr	r1, [pc, #4]	; (8008e68 <_cleanup_r+0x8>)
 8008e62:	f000 b8a1 	b.w	8008fa8 <_fwalk_reent>
 8008e66:	bf00      	nop
 8008e68:	08008da1 	.word	0x08008da1

08008e6c <__sfmoreglue>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	1e4a      	subs	r2, r1, #1
 8008e70:	2568      	movs	r5, #104	; 0x68
 8008e72:	4355      	muls	r5, r2
 8008e74:	460e      	mov	r6, r1
 8008e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e7a:	f7ff fc61 	bl	8008740 <_malloc_r>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	b140      	cbz	r0, 8008e94 <__sfmoreglue+0x28>
 8008e82:	2100      	movs	r1, #0
 8008e84:	e9c0 1600 	strd	r1, r6, [r0]
 8008e88:	300c      	adds	r0, #12
 8008e8a:	60a0      	str	r0, [r4, #8]
 8008e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e90:	f7ff fc00 	bl	8008694 <memset>
 8008e94:	4620      	mov	r0, r4
 8008e96:	bd70      	pop	{r4, r5, r6, pc}

08008e98 <__sinit>:
 8008e98:	6983      	ldr	r3, [r0, #24]
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	bb33      	cbnz	r3, 8008eee <__sinit+0x56>
 8008ea0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008ea4:	6503      	str	r3, [r0, #80]	; 0x50
 8008ea6:	4b12      	ldr	r3, [pc, #72]	; (8008ef0 <__sinit+0x58>)
 8008ea8:	4a12      	ldr	r2, [pc, #72]	; (8008ef4 <__sinit+0x5c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6282      	str	r2, [r0, #40]	; 0x28
 8008eae:	4298      	cmp	r0, r3
 8008eb0:	bf04      	itt	eq
 8008eb2:	2301      	moveq	r3, #1
 8008eb4:	6183      	streq	r3, [r0, #24]
 8008eb6:	f000 f81f 	bl	8008ef8 <__sfp>
 8008eba:	6060      	str	r0, [r4, #4]
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 f81b 	bl	8008ef8 <__sfp>
 8008ec2:	60a0      	str	r0, [r4, #8]
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 f817 	bl	8008ef8 <__sfp>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	60e0      	str	r0, [r4, #12]
 8008ece:	2104      	movs	r1, #4
 8008ed0:	6860      	ldr	r0, [r4, #4]
 8008ed2:	f7ff ffa1 	bl	8008e18 <std>
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	2109      	movs	r1, #9
 8008eda:	68a0      	ldr	r0, [r4, #8]
 8008edc:	f7ff ff9c 	bl	8008e18 <std>
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	2112      	movs	r1, #18
 8008ee4:	68e0      	ldr	r0, [r4, #12]
 8008ee6:	f7ff ff97 	bl	8008e18 <std>
 8008eea:	2301      	movs	r3, #1
 8008eec:	61a3      	str	r3, [r4, #24]
 8008eee:	bd10      	pop	{r4, pc}
 8008ef0:	0800a770 	.word	0x0800a770
 8008ef4:	08008e61 	.word	0x08008e61

08008ef8 <__sfp>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	4b1b      	ldr	r3, [pc, #108]	; (8008f68 <__sfp+0x70>)
 8008efc:	681e      	ldr	r6, [r3, #0]
 8008efe:	69b3      	ldr	r3, [r6, #24]
 8008f00:	4607      	mov	r7, r0
 8008f02:	b913      	cbnz	r3, 8008f0a <__sfp+0x12>
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7ff ffc7 	bl	8008e98 <__sinit>
 8008f0a:	3648      	adds	r6, #72	; 0x48
 8008f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	d503      	bpl.n	8008f1c <__sfp+0x24>
 8008f14:	6833      	ldr	r3, [r6, #0]
 8008f16:	b133      	cbz	r3, 8008f26 <__sfp+0x2e>
 8008f18:	6836      	ldr	r6, [r6, #0]
 8008f1a:	e7f7      	b.n	8008f0c <__sfp+0x14>
 8008f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f20:	b16d      	cbz	r5, 8008f3e <__sfp+0x46>
 8008f22:	3468      	adds	r4, #104	; 0x68
 8008f24:	e7f4      	b.n	8008f10 <__sfp+0x18>
 8008f26:	2104      	movs	r1, #4
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ff9f 	bl	8008e6c <__sfmoreglue>
 8008f2e:	6030      	str	r0, [r6, #0]
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d1f1      	bne.n	8008f18 <__sfp+0x20>
 8008f34:	230c      	movs	r3, #12
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	4604      	mov	r4, r0
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3e:	4b0b      	ldr	r3, [pc, #44]	; (8008f6c <__sfp+0x74>)
 8008f40:	6665      	str	r5, [r4, #100]	; 0x64
 8008f42:	e9c4 5500 	strd	r5, r5, [r4]
 8008f46:	60a5      	str	r5, [r4, #8]
 8008f48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008f4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008f50:	2208      	movs	r2, #8
 8008f52:	4629      	mov	r1, r5
 8008f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f58:	f7ff fb9c 	bl	8008694 <memset>
 8008f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f64:	e7e9      	b.n	8008f3a <__sfp+0x42>
 8008f66:	bf00      	nop
 8008f68:	0800a770 	.word	0x0800a770
 8008f6c:	ffff0001 	.word	0xffff0001

08008f70 <_fwalk>:
 8008f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f74:	4688      	mov	r8, r1
 8008f76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f7a:	2600      	movs	r6, #0
 8008f7c:	b914      	cbnz	r4, 8008f84 <_fwalk+0x14>
 8008f7e:	4630      	mov	r0, r6
 8008f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f84:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008f88:	3f01      	subs	r7, #1
 8008f8a:	d501      	bpl.n	8008f90 <_fwalk+0x20>
 8008f8c:	6824      	ldr	r4, [r4, #0]
 8008f8e:	e7f5      	b.n	8008f7c <_fwalk+0xc>
 8008f90:	89ab      	ldrh	r3, [r5, #12]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d906      	bls.n	8008fa4 <_fwalk+0x34>
 8008f96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	d002      	beq.n	8008fa4 <_fwalk+0x34>
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	47c0      	blx	r8
 8008fa2:	4306      	orrs	r6, r0
 8008fa4:	3568      	adds	r5, #104	; 0x68
 8008fa6:	e7ef      	b.n	8008f88 <_fwalk+0x18>

08008fa8 <_fwalk_reent>:
 8008fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fac:	4680      	mov	r8, r0
 8008fae:	4689      	mov	r9, r1
 8008fb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fb4:	2600      	movs	r6, #0
 8008fb6:	b914      	cbnz	r4, 8008fbe <_fwalk_reent+0x16>
 8008fb8:	4630      	mov	r0, r6
 8008fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008fc2:	3f01      	subs	r7, #1
 8008fc4:	d501      	bpl.n	8008fca <_fwalk_reent+0x22>
 8008fc6:	6824      	ldr	r4, [r4, #0]
 8008fc8:	e7f5      	b.n	8008fb6 <_fwalk_reent+0xe>
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d907      	bls.n	8008fe0 <_fwalk_reent+0x38>
 8008fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	d003      	beq.n	8008fe0 <_fwalk_reent+0x38>
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4640      	mov	r0, r8
 8008fdc:	47c8      	blx	r9
 8008fde:	4306      	orrs	r6, r0
 8008fe0:	3568      	adds	r5, #104	; 0x68
 8008fe2:	e7ee      	b.n	8008fc2 <_fwalk_reent+0x1a>

08008fe4 <_getc_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	4605      	mov	r5, r0
 8008fea:	b118      	cbz	r0, 8008ff4 <_getc_r+0x10>
 8008fec:	6983      	ldr	r3, [r0, #24]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <_getc_r+0x10>
 8008ff0:	f7ff ff52 	bl	8008e98 <__sinit>
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	; (8009030 <_getc_r+0x4c>)
 8008ff6:	429c      	cmp	r4, r3
 8008ff8:	d10b      	bne.n	8009012 <_getc_r+0x2e>
 8008ffa:	686c      	ldr	r4, [r5, #4]
 8008ffc:	6863      	ldr	r3, [r4, #4]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	6063      	str	r3, [r4, #4]
 8009004:	da0f      	bge.n	8009026 <_getc_r+0x42>
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800900e:	f7ff bc81 	b.w	8008914 <__srget_r>
 8009012:	4b08      	ldr	r3, [pc, #32]	; (8009034 <_getc_r+0x50>)
 8009014:	429c      	cmp	r4, r3
 8009016:	d101      	bne.n	800901c <_getc_r+0x38>
 8009018:	68ac      	ldr	r4, [r5, #8]
 800901a:	e7ef      	b.n	8008ffc <_getc_r+0x18>
 800901c:	4b06      	ldr	r3, [pc, #24]	; (8009038 <_getc_r+0x54>)
 800901e:	429c      	cmp	r4, r3
 8009020:	bf08      	it	eq
 8009022:	68ec      	ldreq	r4, [r5, #12]
 8009024:	e7ea      	b.n	8008ffc <_getc_r+0x18>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	6022      	str	r2, [r4, #0]
 800902c:	7818      	ldrb	r0, [r3, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	0800a794 	.word	0x0800a794
 8009034:	0800a7b4 	.word	0x0800a7b4
 8009038:	0800a774 	.word	0x0800a774

0800903c <__swhatbuf_r>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	460e      	mov	r6, r1
 8009040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009044:	2900      	cmp	r1, #0
 8009046:	b096      	sub	sp, #88	; 0x58
 8009048:	4614      	mov	r4, r2
 800904a:	461d      	mov	r5, r3
 800904c:	da07      	bge.n	800905e <__swhatbuf_r+0x22>
 800904e:	2300      	movs	r3, #0
 8009050:	602b      	str	r3, [r5, #0]
 8009052:	89b3      	ldrh	r3, [r6, #12]
 8009054:	061a      	lsls	r2, r3, #24
 8009056:	d410      	bmi.n	800907a <__swhatbuf_r+0x3e>
 8009058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800905c:	e00e      	b.n	800907c <__swhatbuf_r+0x40>
 800905e:	466a      	mov	r2, sp
 8009060:	f000 fd9e 	bl	8009ba0 <_fstat_r>
 8009064:	2800      	cmp	r0, #0
 8009066:	dbf2      	blt.n	800904e <__swhatbuf_r+0x12>
 8009068:	9a01      	ldr	r2, [sp, #4]
 800906a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800906e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009072:	425a      	negs	r2, r3
 8009074:	415a      	adcs	r2, r3
 8009076:	602a      	str	r2, [r5, #0]
 8009078:	e7ee      	b.n	8009058 <__swhatbuf_r+0x1c>
 800907a:	2340      	movs	r3, #64	; 0x40
 800907c:	2000      	movs	r0, #0
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	b016      	add	sp, #88	; 0x58
 8009082:	bd70      	pop	{r4, r5, r6, pc}

08009084 <__smakebuf_r>:
 8009084:	898b      	ldrh	r3, [r1, #12]
 8009086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009088:	079d      	lsls	r5, r3, #30
 800908a:	4606      	mov	r6, r0
 800908c:	460c      	mov	r4, r1
 800908e:	d507      	bpl.n	80090a0 <__smakebuf_r+0x1c>
 8009090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	6123      	str	r3, [r4, #16]
 8009098:	2301      	movs	r3, #1
 800909a:	6163      	str	r3, [r4, #20]
 800909c:	b002      	add	sp, #8
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	ab01      	add	r3, sp, #4
 80090a2:	466a      	mov	r2, sp
 80090a4:	f7ff ffca 	bl	800903c <__swhatbuf_r>
 80090a8:	9900      	ldr	r1, [sp, #0]
 80090aa:	4605      	mov	r5, r0
 80090ac:	4630      	mov	r0, r6
 80090ae:	f7ff fb47 	bl	8008740 <_malloc_r>
 80090b2:	b948      	cbnz	r0, 80090c8 <__smakebuf_r+0x44>
 80090b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b8:	059a      	lsls	r2, r3, #22
 80090ba:	d4ef      	bmi.n	800909c <__smakebuf_r+0x18>
 80090bc:	f023 0303 	bic.w	r3, r3, #3
 80090c0:	f043 0302 	orr.w	r3, r3, #2
 80090c4:	81a3      	strh	r3, [r4, #12]
 80090c6:	e7e3      	b.n	8009090 <__smakebuf_r+0xc>
 80090c8:	4b0d      	ldr	r3, [pc, #52]	; (8009100 <__smakebuf_r+0x7c>)
 80090ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	6020      	str	r0, [r4, #0]
 80090d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d4:	81a3      	strh	r3, [r4, #12]
 80090d6:	9b00      	ldr	r3, [sp, #0]
 80090d8:	6163      	str	r3, [r4, #20]
 80090da:	9b01      	ldr	r3, [sp, #4]
 80090dc:	6120      	str	r0, [r4, #16]
 80090de:	b15b      	cbz	r3, 80090f8 <__smakebuf_r+0x74>
 80090e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e4:	4630      	mov	r0, r6
 80090e6:	f000 fd6d 	bl	8009bc4 <_isatty_r>
 80090ea:	b128      	cbz	r0, 80090f8 <__smakebuf_r+0x74>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	f043 0301 	orr.w	r3, r3, #1
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	431d      	orrs	r5, r3
 80090fc:	81a5      	strh	r5, [r4, #12]
 80090fe:	e7cd      	b.n	800909c <__smakebuf_r+0x18>
 8009100:	08008e61 	.word	0x08008e61

08009104 <__malloc_lock>:
 8009104:	4770      	bx	lr

08009106 <__malloc_unlock>:
 8009106:	4770      	bx	lr

08009108 <__ssputs_r>:
 8009108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800910c:	688e      	ldr	r6, [r1, #8]
 800910e:	429e      	cmp	r6, r3
 8009110:	4682      	mov	sl, r0
 8009112:	460c      	mov	r4, r1
 8009114:	4690      	mov	r8, r2
 8009116:	4699      	mov	r9, r3
 8009118:	d837      	bhi.n	800918a <__ssputs_r+0x82>
 800911a:	898a      	ldrh	r2, [r1, #12]
 800911c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009120:	d031      	beq.n	8009186 <__ssputs_r+0x7e>
 8009122:	6825      	ldr	r5, [r4, #0]
 8009124:	6909      	ldr	r1, [r1, #16]
 8009126:	1a6f      	subs	r7, r5, r1
 8009128:	6965      	ldr	r5, [r4, #20]
 800912a:	2302      	movs	r3, #2
 800912c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009130:	fb95 f5f3 	sdiv	r5, r5, r3
 8009134:	f109 0301 	add.w	r3, r9, #1
 8009138:	443b      	add	r3, r7
 800913a:	429d      	cmp	r5, r3
 800913c:	bf38      	it	cc
 800913e:	461d      	movcc	r5, r3
 8009140:	0553      	lsls	r3, r2, #21
 8009142:	d530      	bpl.n	80091a6 <__ssputs_r+0x9e>
 8009144:	4629      	mov	r1, r5
 8009146:	f7ff fafb 	bl	8008740 <_malloc_r>
 800914a:	4606      	mov	r6, r0
 800914c:	b950      	cbnz	r0, 8009164 <__ssputs_r+0x5c>
 800914e:	230c      	movs	r3, #12
 8009150:	f8ca 3000 	str.w	r3, [sl]
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800915a:	81a3      	strh	r3, [r4, #12]
 800915c:	f04f 30ff 	mov.w	r0, #4294967295
 8009160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009164:	463a      	mov	r2, r7
 8009166:	6921      	ldr	r1, [r4, #16]
 8009168:	f7ff fa89 	bl	800867e <memcpy>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	6126      	str	r6, [r4, #16]
 800917a:	6165      	str	r5, [r4, #20]
 800917c:	443e      	add	r6, r7
 800917e:	1bed      	subs	r5, r5, r7
 8009180:	6026      	str	r6, [r4, #0]
 8009182:	60a5      	str	r5, [r4, #8]
 8009184:	464e      	mov	r6, r9
 8009186:	454e      	cmp	r6, r9
 8009188:	d900      	bls.n	800918c <__ssputs_r+0x84>
 800918a:	464e      	mov	r6, r9
 800918c:	4632      	mov	r2, r6
 800918e:	4641      	mov	r1, r8
 8009190:	6820      	ldr	r0, [r4, #0]
 8009192:	f000 fd39 	bl	8009c08 <memmove>
 8009196:	68a3      	ldr	r3, [r4, #8]
 8009198:	1b9b      	subs	r3, r3, r6
 800919a:	60a3      	str	r3, [r4, #8]
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	441e      	add	r6, r3
 80091a0:	6026      	str	r6, [r4, #0]
 80091a2:	2000      	movs	r0, #0
 80091a4:	e7dc      	b.n	8009160 <__ssputs_r+0x58>
 80091a6:	462a      	mov	r2, r5
 80091a8:	f000 fd47 	bl	8009c3a <_realloc_r>
 80091ac:	4606      	mov	r6, r0
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d1e2      	bne.n	8009178 <__ssputs_r+0x70>
 80091b2:	6921      	ldr	r1, [r4, #16]
 80091b4:	4650      	mov	r0, sl
 80091b6:	f7ff fa75 	bl	80086a4 <_free_r>
 80091ba:	e7c8      	b.n	800914e <__ssputs_r+0x46>

080091bc <_svfiprintf_r>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	461d      	mov	r5, r3
 80091c2:	898b      	ldrh	r3, [r1, #12]
 80091c4:	061f      	lsls	r7, r3, #24
 80091c6:	b09d      	sub	sp, #116	; 0x74
 80091c8:	4680      	mov	r8, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	4616      	mov	r6, r2
 80091ce:	d50f      	bpl.n	80091f0 <_svfiprintf_r+0x34>
 80091d0:	690b      	ldr	r3, [r1, #16]
 80091d2:	b96b      	cbnz	r3, 80091f0 <_svfiprintf_r+0x34>
 80091d4:	2140      	movs	r1, #64	; 0x40
 80091d6:	f7ff fab3 	bl	8008740 <_malloc_r>
 80091da:	6020      	str	r0, [r4, #0]
 80091dc:	6120      	str	r0, [r4, #16]
 80091de:	b928      	cbnz	r0, 80091ec <_svfiprintf_r+0x30>
 80091e0:	230c      	movs	r3, #12
 80091e2:	f8c8 3000 	str.w	r3, [r8]
 80091e6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ea:	e0c8      	b.n	800937e <_svfiprintf_r+0x1c2>
 80091ec:	2340      	movs	r3, #64	; 0x40
 80091ee:	6163      	str	r3, [r4, #20]
 80091f0:	2300      	movs	r3, #0
 80091f2:	9309      	str	r3, [sp, #36]	; 0x24
 80091f4:	2320      	movs	r3, #32
 80091f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091fa:	2330      	movs	r3, #48	; 0x30
 80091fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009200:	9503      	str	r5, [sp, #12]
 8009202:	f04f 0b01 	mov.w	fp, #1
 8009206:	4637      	mov	r7, r6
 8009208:	463d      	mov	r5, r7
 800920a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800920e:	b10b      	cbz	r3, 8009214 <_svfiprintf_r+0x58>
 8009210:	2b25      	cmp	r3, #37	; 0x25
 8009212:	d13e      	bne.n	8009292 <_svfiprintf_r+0xd6>
 8009214:	ebb7 0a06 	subs.w	sl, r7, r6
 8009218:	d00b      	beq.n	8009232 <_svfiprintf_r+0x76>
 800921a:	4653      	mov	r3, sl
 800921c:	4632      	mov	r2, r6
 800921e:	4621      	mov	r1, r4
 8009220:	4640      	mov	r0, r8
 8009222:	f7ff ff71 	bl	8009108 <__ssputs_r>
 8009226:	3001      	adds	r0, #1
 8009228:	f000 80a4 	beq.w	8009374 <_svfiprintf_r+0x1b8>
 800922c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922e:	4453      	add	r3, sl
 8009230:	9309      	str	r3, [sp, #36]	; 0x24
 8009232:	783b      	ldrb	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 809d 	beq.w	8009374 <_svfiprintf_r+0x1b8>
 800923a:	2300      	movs	r3, #0
 800923c:	f04f 32ff 	mov.w	r2, #4294967295
 8009240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	9307      	str	r3, [sp, #28]
 8009248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800924c:	931a      	str	r3, [sp, #104]	; 0x68
 800924e:	462f      	mov	r7, r5
 8009250:	2205      	movs	r2, #5
 8009252:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009256:	4850      	ldr	r0, [pc, #320]	; (8009398 <_svfiprintf_r+0x1dc>)
 8009258:	f7f6 ffda 	bl	8000210 <memchr>
 800925c:	9b04      	ldr	r3, [sp, #16]
 800925e:	b9d0      	cbnz	r0, 8009296 <_svfiprintf_r+0xda>
 8009260:	06d9      	lsls	r1, r3, #27
 8009262:	bf44      	itt	mi
 8009264:	2220      	movmi	r2, #32
 8009266:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800926a:	071a      	lsls	r2, r3, #28
 800926c:	bf44      	itt	mi
 800926e:	222b      	movmi	r2, #43	; 0x2b
 8009270:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009274:	782a      	ldrb	r2, [r5, #0]
 8009276:	2a2a      	cmp	r2, #42	; 0x2a
 8009278:	d015      	beq.n	80092a6 <_svfiprintf_r+0xea>
 800927a:	9a07      	ldr	r2, [sp, #28]
 800927c:	462f      	mov	r7, r5
 800927e:	2000      	movs	r0, #0
 8009280:	250a      	movs	r5, #10
 8009282:	4639      	mov	r1, r7
 8009284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009288:	3b30      	subs	r3, #48	; 0x30
 800928a:	2b09      	cmp	r3, #9
 800928c:	d94d      	bls.n	800932a <_svfiprintf_r+0x16e>
 800928e:	b1b8      	cbz	r0, 80092c0 <_svfiprintf_r+0x104>
 8009290:	e00f      	b.n	80092b2 <_svfiprintf_r+0xf6>
 8009292:	462f      	mov	r7, r5
 8009294:	e7b8      	b.n	8009208 <_svfiprintf_r+0x4c>
 8009296:	4a40      	ldr	r2, [pc, #256]	; (8009398 <_svfiprintf_r+0x1dc>)
 8009298:	1a80      	subs	r0, r0, r2
 800929a:	fa0b f000 	lsl.w	r0, fp, r0
 800929e:	4318      	orrs	r0, r3
 80092a0:	9004      	str	r0, [sp, #16]
 80092a2:	463d      	mov	r5, r7
 80092a4:	e7d3      	b.n	800924e <_svfiprintf_r+0x92>
 80092a6:	9a03      	ldr	r2, [sp, #12]
 80092a8:	1d11      	adds	r1, r2, #4
 80092aa:	6812      	ldr	r2, [r2, #0]
 80092ac:	9103      	str	r1, [sp, #12]
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	db01      	blt.n	80092b6 <_svfiprintf_r+0xfa>
 80092b2:	9207      	str	r2, [sp, #28]
 80092b4:	e004      	b.n	80092c0 <_svfiprintf_r+0x104>
 80092b6:	4252      	negs	r2, r2
 80092b8:	f043 0302 	orr.w	r3, r3, #2
 80092bc:	9207      	str	r2, [sp, #28]
 80092be:	9304      	str	r3, [sp, #16]
 80092c0:	783b      	ldrb	r3, [r7, #0]
 80092c2:	2b2e      	cmp	r3, #46	; 0x2e
 80092c4:	d10c      	bne.n	80092e0 <_svfiprintf_r+0x124>
 80092c6:	787b      	ldrb	r3, [r7, #1]
 80092c8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ca:	d133      	bne.n	8009334 <_svfiprintf_r+0x178>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	1d1a      	adds	r2, r3, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	9203      	str	r2, [sp, #12]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	bfb8      	it	lt
 80092d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80092dc:	3702      	adds	r7, #2
 80092de:	9305      	str	r3, [sp, #20]
 80092e0:	4d2e      	ldr	r5, [pc, #184]	; (800939c <_svfiprintf_r+0x1e0>)
 80092e2:	7839      	ldrb	r1, [r7, #0]
 80092e4:	2203      	movs	r2, #3
 80092e6:	4628      	mov	r0, r5
 80092e8:	f7f6 ff92 	bl	8000210 <memchr>
 80092ec:	b138      	cbz	r0, 80092fe <_svfiprintf_r+0x142>
 80092ee:	2340      	movs	r3, #64	; 0x40
 80092f0:	1b40      	subs	r0, r0, r5
 80092f2:	fa03 f000 	lsl.w	r0, r3, r0
 80092f6:	9b04      	ldr	r3, [sp, #16]
 80092f8:	4303      	orrs	r3, r0
 80092fa:	3701      	adds	r7, #1
 80092fc:	9304      	str	r3, [sp, #16]
 80092fe:	7839      	ldrb	r1, [r7, #0]
 8009300:	4827      	ldr	r0, [pc, #156]	; (80093a0 <_svfiprintf_r+0x1e4>)
 8009302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009306:	2206      	movs	r2, #6
 8009308:	1c7e      	adds	r6, r7, #1
 800930a:	f7f6 ff81 	bl	8000210 <memchr>
 800930e:	2800      	cmp	r0, #0
 8009310:	d038      	beq.n	8009384 <_svfiprintf_r+0x1c8>
 8009312:	4b24      	ldr	r3, [pc, #144]	; (80093a4 <_svfiprintf_r+0x1e8>)
 8009314:	bb13      	cbnz	r3, 800935c <_svfiprintf_r+0x1a0>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	3307      	adds	r3, #7
 800931a:	f023 0307 	bic.w	r3, r3, #7
 800931e:	3308      	adds	r3, #8
 8009320:	9303      	str	r3, [sp, #12]
 8009322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009324:	444b      	add	r3, r9
 8009326:	9309      	str	r3, [sp, #36]	; 0x24
 8009328:	e76d      	b.n	8009206 <_svfiprintf_r+0x4a>
 800932a:	fb05 3202 	mla	r2, r5, r2, r3
 800932e:	2001      	movs	r0, #1
 8009330:	460f      	mov	r7, r1
 8009332:	e7a6      	b.n	8009282 <_svfiprintf_r+0xc6>
 8009334:	2300      	movs	r3, #0
 8009336:	3701      	adds	r7, #1
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	4619      	mov	r1, r3
 800933c:	250a      	movs	r5, #10
 800933e:	4638      	mov	r0, r7
 8009340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009344:	3a30      	subs	r2, #48	; 0x30
 8009346:	2a09      	cmp	r2, #9
 8009348:	d903      	bls.n	8009352 <_svfiprintf_r+0x196>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0c8      	beq.n	80092e0 <_svfiprintf_r+0x124>
 800934e:	9105      	str	r1, [sp, #20]
 8009350:	e7c6      	b.n	80092e0 <_svfiprintf_r+0x124>
 8009352:	fb05 2101 	mla	r1, r5, r1, r2
 8009356:	2301      	movs	r3, #1
 8009358:	4607      	mov	r7, r0
 800935a:	e7f0      	b.n	800933e <_svfiprintf_r+0x182>
 800935c:	ab03      	add	r3, sp, #12
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	4622      	mov	r2, r4
 8009362:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <_svfiprintf_r+0x1ec>)
 8009364:	a904      	add	r1, sp, #16
 8009366:	4640      	mov	r0, r8
 8009368:	f3af 8000 	nop.w
 800936c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009370:	4681      	mov	r9, r0
 8009372:	d1d6      	bne.n	8009322 <_svfiprintf_r+0x166>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	065b      	lsls	r3, r3, #25
 8009378:	f53f af35 	bmi.w	80091e6 <_svfiprintf_r+0x2a>
 800937c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800937e:	b01d      	add	sp, #116	; 0x74
 8009380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009384:	ab03      	add	r3, sp, #12
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	4622      	mov	r2, r4
 800938a:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <_svfiprintf_r+0x1ec>)
 800938c:	a904      	add	r1, sp, #16
 800938e:	4640      	mov	r0, r8
 8009390:	f000 f9c2 	bl	8009718 <_printf_i>
 8009394:	e7ea      	b.n	800936c <_svfiprintf_r+0x1b0>
 8009396:	bf00      	nop
 8009398:	0800a7d4 	.word	0x0800a7d4
 800939c:	0800a7da 	.word	0x0800a7da
 80093a0:	0800a7de 	.word	0x0800a7de
 80093a4:	00000000 	.word	0x00000000
 80093a8:	08009109 	.word	0x08009109

080093ac <__sfputc_r>:
 80093ac:	6893      	ldr	r3, [r2, #8]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	b410      	push	{r4}
 80093b4:	6093      	str	r3, [r2, #8]
 80093b6:	da08      	bge.n	80093ca <__sfputc_r+0x1e>
 80093b8:	6994      	ldr	r4, [r2, #24]
 80093ba:	42a3      	cmp	r3, r4
 80093bc:	db01      	blt.n	80093c2 <__sfputc_r+0x16>
 80093be:	290a      	cmp	r1, #10
 80093c0:	d103      	bne.n	80093ca <__sfputc_r+0x1e>
 80093c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093c6:	f7ff bba5 	b.w	8008b14 <__swbuf_r>
 80093ca:	6813      	ldr	r3, [r2, #0]
 80093cc:	1c58      	adds	r0, r3, #1
 80093ce:	6010      	str	r0, [r2, #0]
 80093d0:	7019      	strb	r1, [r3, #0]
 80093d2:	4608      	mov	r0, r1
 80093d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093d8:	4770      	bx	lr

080093da <__sfputs_r>:
 80093da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	4614      	mov	r4, r2
 80093e2:	18d5      	adds	r5, r2, r3
 80093e4:	42ac      	cmp	r4, r5
 80093e6:	d101      	bne.n	80093ec <__sfputs_r+0x12>
 80093e8:	2000      	movs	r0, #0
 80093ea:	e007      	b.n	80093fc <__sfputs_r+0x22>
 80093ec:	463a      	mov	r2, r7
 80093ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f2:	4630      	mov	r0, r6
 80093f4:	f7ff ffda 	bl	80093ac <__sfputc_r>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d1f3      	bne.n	80093e4 <__sfputs_r+0xa>
 80093fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009400 <_vfiprintf_r>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	460c      	mov	r4, r1
 8009406:	b09d      	sub	sp, #116	; 0x74
 8009408:	4617      	mov	r7, r2
 800940a:	461d      	mov	r5, r3
 800940c:	4606      	mov	r6, r0
 800940e:	b118      	cbz	r0, 8009418 <_vfiprintf_r+0x18>
 8009410:	6983      	ldr	r3, [r0, #24]
 8009412:	b90b      	cbnz	r3, 8009418 <_vfiprintf_r+0x18>
 8009414:	f7ff fd40 	bl	8008e98 <__sinit>
 8009418:	4b7c      	ldr	r3, [pc, #496]	; (800960c <_vfiprintf_r+0x20c>)
 800941a:	429c      	cmp	r4, r3
 800941c:	d158      	bne.n	80094d0 <_vfiprintf_r+0xd0>
 800941e:	6874      	ldr	r4, [r6, #4]
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	0718      	lsls	r0, r3, #28
 8009424:	d55e      	bpl.n	80094e4 <_vfiprintf_r+0xe4>
 8009426:	6923      	ldr	r3, [r4, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d05b      	beq.n	80094e4 <_vfiprintf_r+0xe4>
 800942c:	2300      	movs	r3, #0
 800942e:	9309      	str	r3, [sp, #36]	; 0x24
 8009430:	2320      	movs	r3, #32
 8009432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009436:	2330      	movs	r3, #48	; 0x30
 8009438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800943c:	9503      	str	r5, [sp, #12]
 800943e:	f04f 0b01 	mov.w	fp, #1
 8009442:	46b8      	mov	r8, r7
 8009444:	4645      	mov	r5, r8
 8009446:	f815 3b01 	ldrb.w	r3, [r5], #1
 800944a:	b10b      	cbz	r3, 8009450 <_vfiprintf_r+0x50>
 800944c:	2b25      	cmp	r3, #37	; 0x25
 800944e:	d154      	bne.n	80094fa <_vfiprintf_r+0xfa>
 8009450:	ebb8 0a07 	subs.w	sl, r8, r7
 8009454:	d00b      	beq.n	800946e <_vfiprintf_r+0x6e>
 8009456:	4653      	mov	r3, sl
 8009458:	463a      	mov	r2, r7
 800945a:	4621      	mov	r1, r4
 800945c:	4630      	mov	r0, r6
 800945e:	f7ff ffbc 	bl	80093da <__sfputs_r>
 8009462:	3001      	adds	r0, #1
 8009464:	f000 80c2 	beq.w	80095ec <_vfiprintf_r+0x1ec>
 8009468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946a:	4453      	add	r3, sl
 800946c:	9309      	str	r3, [sp, #36]	; 0x24
 800946e:	f898 3000 	ldrb.w	r3, [r8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 80ba 	beq.w	80095ec <_vfiprintf_r+0x1ec>
 8009478:	2300      	movs	r3, #0
 800947a:	f04f 32ff 	mov.w	r2, #4294967295
 800947e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009482:	9304      	str	r3, [sp, #16]
 8009484:	9307      	str	r3, [sp, #28]
 8009486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800948a:	931a      	str	r3, [sp, #104]	; 0x68
 800948c:	46a8      	mov	r8, r5
 800948e:	2205      	movs	r2, #5
 8009490:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009494:	485e      	ldr	r0, [pc, #376]	; (8009610 <_vfiprintf_r+0x210>)
 8009496:	f7f6 febb 	bl	8000210 <memchr>
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	bb78      	cbnz	r0, 80094fe <_vfiprintf_r+0xfe>
 800949e:	06d9      	lsls	r1, r3, #27
 80094a0:	bf44      	itt	mi
 80094a2:	2220      	movmi	r2, #32
 80094a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094a8:	071a      	lsls	r2, r3, #28
 80094aa:	bf44      	itt	mi
 80094ac:	222b      	movmi	r2, #43	; 0x2b
 80094ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094b2:	782a      	ldrb	r2, [r5, #0]
 80094b4:	2a2a      	cmp	r2, #42	; 0x2a
 80094b6:	d02a      	beq.n	800950e <_vfiprintf_r+0x10e>
 80094b8:	9a07      	ldr	r2, [sp, #28]
 80094ba:	46a8      	mov	r8, r5
 80094bc:	2000      	movs	r0, #0
 80094be:	250a      	movs	r5, #10
 80094c0:	4641      	mov	r1, r8
 80094c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094c6:	3b30      	subs	r3, #48	; 0x30
 80094c8:	2b09      	cmp	r3, #9
 80094ca:	d969      	bls.n	80095a0 <_vfiprintf_r+0x1a0>
 80094cc:	b360      	cbz	r0, 8009528 <_vfiprintf_r+0x128>
 80094ce:	e024      	b.n	800951a <_vfiprintf_r+0x11a>
 80094d0:	4b50      	ldr	r3, [pc, #320]	; (8009614 <_vfiprintf_r+0x214>)
 80094d2:	429c      	cmp	r4, r3
 80094d4:	d101      	bne.n	80094da <_vfiprintf_r+0xda>
 80094d6:	68b4      	ldr	r4, [r6, #8]
 80094d8:	e7a2      	b.n	8009420 <_vfiprintf_r+0x20>
 80094da:	4b4f      	ldr	r3, [pc, #316]	; (8009618 <_vfiprintf_r+0x218>)
 80094dc:	429c      	cmp	r4, r3
 80094de:	bf08      	it	eq
 80094e0:	68f4      	ldreq	r4, [r6, #12]
 80094e2:	e79d      	b.n	8009420 <_vfiprintf_r+0x20>
 80094e4:	4621      	mov	r1, r4
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7ff fb66 	bl	8008bb8 <__swsetup_r>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d09d      	beq.n	800942c <_vfiprintf_r+0x2c>
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295
 80094f4:	b01d      	add	sp, #116	; 0x74
 80094f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fa:	46a8      	mov	r8, r5
 80094fc:	e7a2      	b.n	8009444 <_vfiprintf_r+0x44>
 80094fe:	4a44      	ldr	r2, [pc, #272]	; (8009610 <_vfiprintf_r+0x210>)
 8009500:	1a80      	subs	r0, r0, r2
 8009502:	fa0b f000 	lsl.w	r0, fp, r0
 8009506:	4318      	orrs	r0, r3
 8009508:	9004      	str	r0, [sp, #16]
 800950a:	4645      	mov	r5, r8
 800950c:	e7be      	b.n	800948c <_vfiprintf_r+0x8c>
 800950e:	9a03      	ldr	r2, [sp, #12]
 8009510:	1d11      	adds	r1, r2, #4
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	9103      	str	r1, [sp, #12]
 8009516:	2a00      	cmp	r2, #0
 8009518:	db01      	blt.n	800951e <_vfiprintf_r+0x11e>
 800951a:	9207      	str	r2, [sp, #28]
 800951c:	e004      	b.n	8009528 <_vfiprintf_r+0x128>
 800951e:	4252      	negs	r2, r2
 8009520:	f043 0302 	orr.w	r3, r3, #2
 8009524:	9207      	str	r2, [sp, #28]
 8009526:	9304      	str	r3, [sp, #16]
 8009528:	f898 3000 	ldrb.w	r3, [r8]
 800952c:	2b2e      	cmp	r3, #46	; 0x2e
 800952e:	d10e      	bne.n	800954e <_vfiprintf_r+0x14e>
 8009530:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009534:	2b2a      	cmp	r3, #42	; 0x2a
 8009536:	d138      	bne.n	80095aa <_vfiprintf_r+0x1aa>
 8009538:	9b03      	ldr	r3, [sp, #12]
 800953a:	1d1a      	adds	r2, r3, #4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	9203      	str	r2, [sp, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	bfb8      	it	lt
 8009544:	f04f 33ff 	movlt.w	r3, #4294967295
 8009548:	f108 0802 	add.w	r8, r8, #2
 800954c:	9305      	str	r3, [sp, #20]
 800954e:	4d33      	ldr	r5, [pc, #204]	; (800961c <_vfiprintf_r+0x21c>)
 8009550:	f898 1000 	ldrb.w	r1, [r8]
 8009554:	2203      	movs	r2, #3
 8009556:	4628      	mov	r0, r5
 8009558:	f7f6 fe5a 	bl	8000210 <memchr>
 800955c:	b140      	cbz	r0, 8009570 <_vfiprintf_r+0x170>
 800955e:	2340      	movs	r3, #64	; 0x40
 8009560:	1b40      	subs	r0, r0, r5
 8009562:	fa03 f000 	lsl.w	r0, r3, r0
 8009566:	9b04      	ldr	r3, [sp, #16]
 8009568:	4303      	orrs	r3, r0
 800956a:	f108 0801 	add.w	r8, r8, #1
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	f898 1000 	ldrb.w	r1, [r8]
 8009574:	482a      	ldr	r0, [pc, #168]	; (8009620 <_vfiprintf_r+0x220>)
 8009576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800957a:	2206      	movs	r2, #6
 800957c:	f108 0701 	add.w	r7, r8, #1
 8009580:	f7f6 fe46 	bl	8000210 <memchr>
 8009584:	2800      	cmp	r0, #0
 8009586:	d037      	beq.n	80095f8 <_vfiprintf_r+0x1f8>
 8009588:	4b26      	ldr	r3, [pc, #152]	; (8009624 <_vfiprintf_r+0x224>)
 800958a:	bb1b      	cbnz	r3, 80095d4 <_vfiprintf_r+0x1d4>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	3307      	adds	r3, #7
 8009590:	f023 0307 	bic.w	r3, r3, #7
 8009594:	3308      	adds	r3, #8
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959a:	444b      	add	r3, r9
 800959c:	9309      	str	r3, [sp, #36]	; 0x24
 800959e:	e750      	b.n	8009442 <_vfiprintf_r+0x42>
 80095a0:	fb05 3202 	mla	r2, r5, r2, r3
 80095a4:	2001      	movs	r0, #1
 80095a6:	4688      	mov	r8, r1
 80095a8:	e78a      	b.n	80094c0 <_vfiprintf_r+0xc0>
 80095aa:	2300      	movs	r3, #0
 80095ac:	f108 0801 	add.w	r8, r8, #1
 80095b0:	9305      	str	r3, [sp, #20]
 80095b2:	4619      	mov	r1, r3
 80095b4:	250a      	movs	r5, #10
 80095b6:	4640      	mov	r0, r8
 80095b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095bc:	3a30      	subs	r2, #48	; 0x30
 80095be:	2a09      	cmp	r2, #9
 80095c0:	d903      	bls.n	80095ca <_vfiprintf_r+0x1ca>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0c3      	beq.n	800954e <_vfiprintf_r+0x14e>
 80095c6:	9105      	str	r1, [sp, #20]
 80095c8:	e7c1      	b.n	800954e <_vfiprintf_r+0x14e>
 80095ca:	fb05 2101 	mla	r1, r5, r1, r2
 80095ce:	2301      	movs	r3, #1
 80095d0:	4680      	mov	r8, r0
 80095d2:	e7f0      	b.n	80095b6 <_vfiprintf_r+0x1b6>
 80095d4:	ab03      	add	r3, sp, #12
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4622      	mov	r2, r4
 80095da:	4b13      	ldr	r3, [pc, #76]	; (8009628 <_vfiprintf_r+0x228>)
 80095dc:	a904      	add	r1, sp, #16
 80095de:	4630      	mov	r0, r6
 80095e0:	f3af 8000 	nop.w
 80095e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80095e8:	4681      	mov	r9, r0
 80095ea:	d1d5      	bne.n	8009598 <_vfiprintf_r+0x198>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	065b      	lsls	r3, r3, #25
 80095f0:	f53f af7e 	bmi.w	80094f0 <_vfiprintf_r+0xf0>
 80095f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095f6:	e77d      	b.n	80094f4 <_vfiprintf_r+0xf4>
 80095f8:	ab03      	add	r3, sp, #12
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	4622      	mov	r2, r4
 80095fe:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <_vfiprintf_r+0x228>)
 8009600:	a904      	add	r1, sp, #16
 8009602:	4630      	mov	r0, r6
 8009604:	f000 f888 	bl	8009718 <_printf_i>
 8009608:	e7ec      	b.n	80095e4 <_vfiprintf_r+0x1e4>
 800960a:	bf00      	nop
 800960c:	0800a794 	.word	0x0800a794
 8009610:	0800a7d4 	.word	0x0800a7d4
 8009614:	0800a7b4 	.word	0x0800a7b4
 8009618:	0800a774 	.word	0x0800a774
 800961c:	0800a7da 	.word	0x0800a7da
 8009620:	0800a7de 	.word	0x0800a7de
 8009624:	00000000 	.word	0x00000000
 8009628:	080093db 	.word	0x080093db

0800962c <_printf_common>:
 800962c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	4691      	mov	r9, r2
 8009632:	461f      	mov	r7, r3
 8009634:	688a      	ldr	r2, [r1, #8]
 8009636:	690b      	ldr	r3, [r1, #16]
 8009638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800963c:	4293      	cmp	r3, r2
 800963e:	bfb8      	it	lt
 8009640:	4613      	movlt	r3, r2
 8009642:	f8c9 3000 	str.w	r3, [r9]
 8009646:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800964a:	4606      	mov	r6, r0
 800964c:	460c      	mov	r4, r1
 800964e:	b112      	cbz	r2, 8009656 <_printf_common+0x2a>
 8009650:	3301      	adds	r3, #1
 8009652:	f8c9 3000 	str.w	r3, [r9]
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	0699      	lsls	r1, r3, #26
 800965a:	bf42      	ittt	mi
 800965c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009660:	3302      	addmi	r3, #2
 8009662:	f8c9 3000 	strmi.w	r3, [r9]
 8009666:	6825      	ldr	r5, [r4, #0]
 8009668:	f015 0506 	ands.w	r5, r5, #6
 800966c:	d107      	bne.n	800967e <_printf_common+0x52>
 800966e:	f104 0a19 	add.w	sl, r4, #25
 8009672:	68e3      	ldr	r3, [r4, #12]
 8009674:	f8d9 2000 	ldr.w	r2, [r9]
 8009678:	1a9b      	subs	r3, r3, r2
 800967a:	42ab      	cmp	r3, r5
 800967c:	dc28      	bgt.n	80096d0 <_printf_common+0xa4>
 800967e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009682:	6822      	ldr	r2, [r4, #0]
 8009684:	3300      	adds	r3, #0
 8009686:	bf18      	it	ne
 8009688:	2301      	movne	r3, #1
 800968a:	0692      	lsls	r2, r2, #26
 800968c:	d42d      	bmi.n	80096ea <_printf_common+0xbe>
 800968e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009692:	4639      	mov	r1, r7
 8009694:	4630      	mov	r0, r6
 8009696:	47c0      	blx	r8
 8009698:	3001      	adds	r0, #1
 800969a:	d020      	beq.n	80096de <_printf_common+0xb2>
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	68e5      	ldr	r5, [r4, #12]
 80096a0:	f8d9 2000 	ldr.w	r2, [r9]
 80096a4:	f003 0306 	and.w	r3, r3, #6
 80096a8:	2b04      	cmp	r3, #4
 80096aa:	bf08      	it	eq
 80096ac:	1aad      	subeq	r5, r5, r2
 80096ae:	68a3      	ldr	r3, [r4, #8]
 80096b0:	6922      	ldr	r2, [r4, #16]
 80096b2:	bf0c      	ite	eq
 80096b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b8:	2500      	movne	r5, #0
 80096ba:	4293      	cmp	r3, r2
 80096bc:	bfc4      	itt	gt
 80096be:	1a9b      	subgt	r3, r3, r2
 80096c0:	18ed      	addgt	r5, r5, r3
 80096c2:	f04f 0900 	mov.w	r9, #0
 80096c6:	341a      	adds	r4, #26
 80096c8:	454d      	cmp	r5, r9
 80096ca:	d11a      	bne.n	8009702 <_printf_common+0xd6>
 80096cc:	2000      	movs	r0, #0
 80096ce:	e008      	b.n	80096e2 <_printf_common+0xb6>
 80096d0:	2301      	movs	r3, #1
 80096d2:	4652      	mov	r2, sl
 80096d4:	4639      	mov	r1, r7
 80096d6:	4630      	mov	r0, r6
 80096d8:	47c0      	blx	r8
 80096da:	3001      	adds	r0, #1
 80096dc:	d103      	bne.n	80096e6 <_printf_common+0xba>
 80096de:	f04f 30ff 	mov.w	r0, #4294967295
 80096e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e6:	3501      	adds	r5, #1
 80096e8:	e7c3      	b.n	8009672 <_printf_common+0x46>
 80096ea:	18e1      	adds	r1, r4, r3
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	2030      	movs	r0, #48	; 0x30
 80096f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096f4:	4422      	add	r2, r4
 80096f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096fe:	3302      	adds	r3, #2
 8009700:	e7c5      	b.n	800968e <_printf_common+0x62>
 8009702:	2301      	movs	r3, #1
 8009704:	4622      	mov	r2, r4
 8009706:	4639      	mov	r1, r7
 8009708:	4630      	mov	r0, r6
 800970a:	47c0      	blx	r8
 800970c:	3001      	adds	r0, #1
 800970e:	d0e6      	beq.n	80096de <_printf_common+0xb2>
 8009710:	f109 0901 	add.w	r9, r9, #1
 8009714:	e7d8      	b.n	80096c8 <_printf_common+0x9c>
	...

08009718 <_printf_i>:
 8009718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800971c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009720:	460c      	mov	r4, r1
 8009722:	7e09      	ldrb	r1, [r1, #24]
 8009724:	b085      	sub	sp, #20
 8009726:	296e      	cmp	r1, #110	; 0x6e
 8009728:	4617      	mov	r7, r2
 800972a:	4606      	mov	r6, r0
 800972c:	4698      	mov	r8, r3
 800972e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009730:	f000 80b3 	beq.w	800989a <_printf_i+0x182>
 8009734:	d822      	bhi.n	800977c <_printf_i+0x64>
 8009736:	2963      	cmp	r1, #99	; 0x63
 8009738:	d036      	beq.n	80097a8 <_printf_i+0x90>
 800973a:	d80a      	bhi.n	8009752 <_printf_i+0x3a>
 800973c:	2900      	cmp	r1, #0
 800973e:	f000 80b9 	beq.w	80098b4 <_printf_i+0x19c>
 8009742:	2958      	cmp	r1, #88	; 0x58
 8009744:	f000 8083 	beq.w	800984e <_printf_i+0x136>
 8009748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800974c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009750:	e032      	b.n	80097b8 <_printf_i+0xa0>
 8009752:	2964      	cmp	r1, #100	; 0x64
 8009754:	d001      	beq.n	800975a <_printf_i+0x42>
 8009756:	2969      	cmp	r1, #105	; 0x69
 8009758:	d1f6      	bne.n	8009748 <_printf_i+0x30>
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	6813      	ldr	r3, [r2, #0]
 800975e:	0605      	lsls	r5, r0, #24
 8009760:	f103 0104 	add.w	r1, r3, #4
 8009764:	d52a      	bpl.n	80097bc <_printf_i+0xa4>
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6011      	str	r1, [r2, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	da03      	bge.n	8009776 <_printf_i+0x5e>
 800976e:	222d      	movs	r2, #45	; 0x2d
 8009770:	425b      	negs	r3, r3
 8009772:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009776:	486f      	ldr	r0, [pc, #444]	; (8009934 <_printf_i+0x21c>)
 8009778:	220a      	movs	r2, #10
 800977a:	e039      	b.n	80097f0 <_printf_i+0xd8>
 800977c:	2973      	cmp	r1, #115	; 0x73
 800977e:	f000 809d 	beq.w	80098bc <_printf_i+0x1a4>
 8009782:	d808      	bhi.n	8009796 <_printf_i+0x7e>
 8009784:	296f      	cmp	r1, #111	; 0x6f
 8009786:	d020      	beq.n	80097ca <_printf_i+0xb2>
 8009788:	2970      	cmp	r1, #112	; 0x70
 800978a:	d1dd      	bne.n	8009748 <_printf_i+0x30>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	f043 0320 	orr.w	r3, r3, #32
 8009792:	6023      	str	r3, [r4, #0]
 8009794:	e003      	b.n	800979e <_printf_i+0x86>
 8009796:	2975      	cmp	r1, #117	; 0x75
 8009798:	d017      	beq.n	80097ca <_printf_i+0xb2>
 800979a:	2978      	cmp	r1, #120	; 0x78
 800979c:	d1d4      	bne.n	8009748 <_printf_i+0x30>
 800979e:	2378      	movs	r3, #120	; 0x78
 80097a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097a4:	4864      	ldr	r0, [pc, #400]	; (8009938 <_printf_i+0x220>)
 80097a6:	e055      	b.n	8009854 <_printf_i+0x13c>
 80097a8:	6813      	ldr	r3, [r2, #0]
 80097aa:	1d19      	adds	r1, r3, #4
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6011      	str	r1, [r2, #0]
 80097b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097b8:	2301      	movs	r3, #1
 80097ba:	e08c      	b.n	80098d6 <_printf_i+0x1be>
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6011      	str	r1, [r2, #0]
 80097c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097c4:	bf18      	it	ne
 80097c6:	b21b      	sxthne	r3, r3
 80097c8:	e7cf      	b.n	800976a <_printf_i+0x52>
 80097ca:	6813      	ldr	r3, [r2, #0]
 80097cc:	6825      	ldr	r5, [r4, #0]
 80097ce:	1d18      	adds	r0, r3, #4
 80097d0:	6010      	str	r0, [r2, #0]
 80097d2:	0628      	lsls	r0, r5, #24
 80097d4:	d501      	bpl.n	80097da <_printf_i+0xc2>
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	e002      	b.n	80097e0 <_printf_i+0xc8>
 80097da:	0668      	lsls	r0, r5, #25
 80097dc:	d5fb      	bpl.n	80097d6 <_printf_i+0xbe>
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	4854      	ldr	r0, [pc, #336]	; (8009934 <_printf_i+0x21c>)
 80097e2:	296f      	cmp	r1, #111	; 0x6f
 80097e4:	bf14      	ite	ne
 80097e6:	220a      	movne	r2, #10
 80097e8:	2208      	moveq	r2, #8
 80097ea:	2100      	movs	r1, #0
 80097ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097f0:	6865      	ldr	r5, [r4, #4]
 80097f2:	60a5      	str	r5, [r4, #8]
 80097f4:	2d00      	cmp	r5, #0
 80097f6:	f2c0 8095 	blt.w	8009924 <_printf_i+0x20c>
 80097fa:	6821      	ldr	r1, [r4, #0]
 80097fc:	f021 0104 	bic.w	r1, r1, #4
 8009800:	6021      	str	r1, [r4, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d13d      	bne.n	8009882 <_printf_i+0x16a>
 8009806:	2d00      	cmp	r5, #0
 8009808:	f040 808e 	bne.w	8009928 <_printf_i+0x210>
 800980c:	4665      	mov	r5, ip
 800980e:	2a08      	cmp	r2, #8
 8009810:	d10b      	bne.n	800982a <_printf_i+0x112>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	07db      	lsls	r3, r3, #31
 8009816:	d508      	bpl.n	800982a <_printf_i+0x112>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	6862      	ldr	r2, [r4, #4]
 800981c:	429a      	cmp	r2, r3
 800981e:	bfde      	ittt	le
 8009820:	2330      	movle	r3, #48	; 0x30
 8009822:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009826:	f105 35ff 	addle.w	r5, r5, #4294967295
 800982a:	ebac 0305 	sub.w	r3, ip, r5
 800982e:	6123      	str	r3, [r4, #16]
 8009830:	f8cd 8000 	str.w	r8, [sp]
 8009834:	463b      	mov	r3, r7
 8009836:	aa03      	add	r2, sp, #12
 8009838:	4621      	mov	r1, r4
 800983a:	4630      	mov	r0, r6
 800983c:	f7ff fef6 	bl	800962c <_printf_common>
 8009840:	3001      	adds	r0, #1
 8009842:	d14d      	bne.n	80098e0 <_printf_i+0x1c8>
 8009844:	f04f 30ff 	mov.w	r0, #4294967295
 8009848:	b005      	add	sp, #20
 800984a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800984e:	4839      	ldr	r0, [pc, #228]	; (8009934 <_printf_i+0x21c>)
 8009850:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009854:	6813      	ldr	r3, [r2, #0]
 8009856:	6821      	ldr	r1, [r4, #0]
 8009858:	1d1d      	adds	r5, r3, #4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6015      	str	r5, [r2, #0]
 800985e:	060a      	lsls	r2, r1, #24
 8009860:	d50b      	bpl.n	800987a <_printf_i+0x162>
 8009862:	07ca      	lsls	r2, r1, #31
 8009864:	bf44      	itt	mi
 8009866:	f041 0120 	orrmi.w	r1, r1, #32
 800986a:	6021      	strmi	r1, [r4, #0]
 800986c:	b91b      	cbnz	r3, 8009876 <_printf_i+0x15e>
 800986e:	6822      	ldr	r2, [r4, #0]
 8009870:	f022 0220 	bic.w	r2, r2, #32
 8009874:	6022      	str	r2, [r4, #0]
 8009876:	2210      	movs	r2, #16
 8009878:	e7b7      	b.n	80097ea <_printf_i+0xd2>
 800987a:	064d      	lsls	r5, r1, #25
 800987c:	bf48      	it	mi
 800987e:	b29b      	uxthmi	r3, r3
 8009880:	e7ef      	b.n	8009862 <_printf_i+0x14a>
 8009882:	4665      	mov	r5, ip
 8009884:	fbb3 f1f2 	udiv	r1, r3, r2
 8009888:	fb02 3311 	mls	r3, r2, r1, r3
 800988c:	5cc3      	ldrb	r3, [r0, r3]
 800988e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009892:	460b      	mov	r3, r1
 8009894:	2900      	cmp	r1, #0
 8009896:	d1f5      	bne.n	8009884 <_printf_i+0x16c>
 8009898:	e7b9      	b.n	800980e <_printf_i+0xf6>
 800989a:	6813      	ldr	r3, [r2, #0]
 800989c:	6825      	ldr	r5, [r4, #0]
 800989e:	6961      	ldr	r1, [r4, #20]
 80098a0:	1d18      	adds	r0, r3, #4
 80098a2:	6010      	str	r0, [r2, #0]
 80098a4:	0628      	lsls	r0, r5, #24
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	d501      	bpl.n	80098ae <_printf_i+0x196>
 80098aa:	6019      	str	r1, [r3, #0]
 80098ac:	e002      	b.n	80098b4 <_printf_i+0x19c>
 80098ae:	066a      	lsls	r2, r5, #25
 80098b0:	d5fb      	bpl.n	80098aa <_printf_i+0x192>
 80098b2:	8019      	strh	r1, [r3, #0]
 80098b4:	2300      	movs	r3, #0
 80098b6:	6123      	str	r3, [r4, #16]
 80098b8:	4665      	mov	r5, ip
 80098ba:	e7b9      	b.n	8009830 <_printf_i+0x118>
 80098bc:	6813      	ldr	r3, [r2, #0]
 80098be:	1d19      	adds	r1, r3, #4
 80098c0:	6011      	str	r1, [r2, #0]
 80098c2:	681d      	ldr	r5, [r3, #0]
 80098c4:	6862      	ldr	r2, [r4, #4]
 80098c6:	2100      	movs	r1, #0
 80098c8:	4628      	mov	r0, r5
 80098ca:	f7f6 fca1 	bl	8000210 <memchr>
 80098ce:	b108      	cbz	r0, 80098d4 <_printf_i+0x1bc>
 80098d0:	1b40      	subs	r0, r0, r5
 80098d2:	6060      	str	r0, [r4, #4]
 80098d4:	6863      	ldr	r3, [r4, #4]
 80098d6:	6123      	str	r3, [r4, #16]
 80098d8:	2300      	movs	r3, #0
 80098da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098de:	e7a7      	b.n	8009830 <_printf_i+0x118>
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	462a      	mov	r2, r5
 80098e4:	4639      	mov	r1, r7
 80098e6:	4630      	mov	r0, r6
 80098e8:	47c0      	blx	r8
 80098ea:	3001      	adds	r0, #1
 80098ec:	d0aa      	beq.n	8009844 <_printf_i+0x12c>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	079b      	lsls	r3, r3, #30
 80098f2:	d413      	bmi.n	800991c <_printf_i+0x204>
 80098f4:	68e0      	ldr	r0, [r4, #12]
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	4298      	cmp	r0, r3
 80098fa:	bfb8      	it	lt
 80098fc:	4618      	movlt	r0, r3
 80098fe:	e7a3      	b.n	8009848 <_printf_i+0x130>
 8009900:	2301      	movs	r3, #1
 8009902:	464a      	mov	r2, r9
 8009904:	4639      	mov	r1, r7
 8009906:	4630      	mov	r0, r6
 8009908:	47c0      	blx	r8
 800990a:	3001      	adds	r0, #1
 800990c:	d09a      	beq.n	8009844 <_printf_i+0x12c>
 800990e:	3501      	adds	r5, #1
 8009910:	68e3      	ldr	r3, [r4, #12]
 8009912:	9a03      	ldr	r2, [sp, #12]
 8009914:	1a9b      	subs	r3, r3, r2
 8009916:	42ab      	cmp	r3, r5
 8009918:	dcf2      	bgt.n	8009900 <_printf_i+0x1e8>
 800991a:	e7eb      	b.n	80098f4 <_printf_i+0x1dc>
 800991c:	2500      	movs	r5, #0
 800991e:	f104 0919 	add.w	r9, r4, #25
 8009922:	e7f5      	b.n	8009910 <_printf_i+0x1f8>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1ac      	bne.n	8009882 <_printf_i+0x16a>
 8009928:	7803      	ldrb	r3, [r0, #0]
 800992a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800992e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009932:	e76c      	b.n	800980e <_printf_i+0xf6>
 8009934:	0800a7e5 	.word	0x0800a7e5
 8009938:	0800a7f6 	.word	0x0800a7f6

0800993c <_putc_r>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	460d      	mov	r5, r1
 8009940:	4614      	mov	r4, r2
 8009942:	4606      	mov	r6, r0
 8009944:	b118      	cbz	r0, 800994e <_putc_r+0x12>
 8009946:	6983      	ldr	r3, [r0, #24]
 8009948:	b90b      	cbnz	r3, 800994e <_putc_r+0x12>
 800994a:	f7ff faa5 	bl	8008e98 <__sinit>
 800994e:	4b13      	ldr	r3, [pc, #76]	; (800999c <_putc_r+0x60>)
 8009950:	429c      	cmp	r4, r3
 8009952:	d112      	bne.n	800997a <_putc_r+0x3e>
 8009954:	6874      	ldr	r4, [r6, #4]
 8009956:	68a3      	ldr	r3, [r4, #8]
 8009958:	3b01      	subs	r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	60a3      	str	r3, [r4, #8]
 800995e:	da16      	bge.n	800998e <_putc_r+0x52>
 8009960:	69a2      	ldr	r2, [r4, #24]
 8009962:	4293      	cmp	r3, r2
 8009964:	db02      	blt.n	800996c <_putc_r+0x30>
 8009966:	b2eb      	uxtb	r3, r5
 8009968:	2b0a      	cmp	r3, #10
 800996a:	d110      	bne.n	800998e <_putc_r+0x52>
 800996c:	4622      	mov	r2, r4
 800996e:	4629      	mov	r1, r5
 8009970:	4630      	mov	r0, r6
 8009972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009976:	f7ff b8cd 	b.w	8008b14 <__swbuf_r>
 800997a:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <_putc_r+0x64>)
 800997c:	429c      	cmp	r4, r3
 800997e:	d101      	bne.n	8009984 <_putc_r+0x48>
 8009980:	68b4      	ldr	r4, [r6, #8]
 8009982:	e7e8      	b.n	8009956 <_putc_r+0x1a>
 8009984:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <_putc_r+0x68>)
 8009986:	429c      	cmp	r4, r3
 8009988:	bf08      	it	eq
 800998a:	68f4      	ldreq	r4, [r6, #12]
 800998c:	e7e3      	b.n	8009956 <_putc_r+0x1a>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	6022      	str	r2, [r4, #0]
 8009994:	701d      	strb	r5, [r3, #0]
 8009996:	b2e8      	uxtb	r0, r5
 8009998:	bd70      	pop	{r4, r5, r6, pc}
 800999a:	bf00      	nop
 800999c:	0800a794 	.word	0x0800a794
 80099a0:	0800a7b4 	.word	0x0800a7b4
 80099a4:	0800a774 	.word	0x0800a774

080099a8 <lflush>:
 80099a8:	8983      	ldrh	r3, [r0, #12]
 80099aa:	f003 0309 	and.w	r3, r3, #9
 80099ae:	2b09      	cmp	r3, #9
 80099b0:	d101      	bne.n	80099b6 <lflush+0xe>
 80099b2:	f7ff ba1f 	b.w	8008df4 <fflush>
 80099b6:	2000      	movs	r0, #0
 80099b8:	4770      	bx	lr
	...

080099bc <__srefill_r>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	460c      	mov	r4, r1
 80099c0:	4605      	mov	r5, r0
 80099c2:	b118      	cbz	r0, 80099cc <__srefill_r+0x10>
 80099c4:	6983      	ldr	r3, [r0, #24]
 80099c6:	b90b      	cbnz	r3, 80099cc <__srefill_r+0x10>
 80099c8:	f7ff fa66 	bl	8008e98 <__sinit>
 80099cc:	4b3c      	ldr	r3, [pc, #240]	; (8009ac0 <__srefill_r+0x104>)
 80099ce:	429c      	cmp	r4, r3
 80099d0:	d10a      	bne.n	80099e8 <__srefill_r+0x2c>
 80099d2:	686c      	ldr	r4, [r5, #4]
 80099d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099d8:	2300      	movs	r3, #0
 80099da:	6063      	str	r3, [r4, #4]
 80099dc:	b293      	uxth	r3, r2
 80099de:	069e      	lsls	r6, r3, #26
 80099e0:	d50c      	bpl.n	80099fc <__srefill_r+0x40>
 80099e2:	f04f 30ff 	mov.w	r0, #4294967295
 80099e6:	e067      	b.n	8009ab8 <__srefill_r+0xfc>
 80099e8:	4b36      	ldr	r3, [pc, #216]	; (8009ac4 <__srefill_r+0x108>)
 80099ea:	429c      	cmp	r4, r3
 80099ec:	d101      	bne.n	80099f2 <__srefill_r+0x36>
 80099ee:	68ac      	ldr	r4, [r5, #8]
 80099f0:	e7f0      	b.n	80099d4 <__srefill_r+0x18>
 80099f2:	4b35      	ldr	r3, [pc, #212]	; (8009ac8 <__srefill_r+0x10c>)
 80099f4:	429c      	cmp	r4, r3
 80099f6:	bf08      	it	eq
 80099f8:	68ec      	ldreq	r4, [r5, #12]
 80099fa:	e7eb      	b.n	80099d4 <__srefill_r+0x18>
 80099fc:	0758      	lsls	r0, r3, #29
 80099fe:	d449      	bmi.n	8009a94 <__srefill_r+0xd8>
 8009a00:	06d9      	lsls	r1, r3, #27
 8009a02:	d405      	bmi.n	8009a10 <__srefill_r+0x54>
 8009a04:	2309      	movs	r3, #9
 8009a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a0a:	602b      	str	r3, [r5, #0]
 8009a0c:	81a2      	strh	r2, [r4, #12]
 8009a0e:	e7e8      	b.n	80099e2 <__srefill_r+0x26>
 8009a10:	071a      	lsls	r2, r3, #28
 8009a12:	d50b      	bpl.n	8009a2c <__srefill_r+0x70>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4628      	mov	r0, r5
 8009a18:	f7ff f9c2 	bl	8008da0 <_fflush_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d1e0      	bne.n	80099e2 <__srefill_r+0x26>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	60a0      	str	r0, [r4, #8]
 8009a24:	f023 0308 	bic.w	r3, r3, #8
 8009a28:	81a3      	strh	r3, [r4, #12]
 8009a2a:	61a0      	str	r0, [r4, #24]
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	f043 0304 	orr.w	r3, r3, #4
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	6923      	ldr	r3, [r4, #16]
 8009a36:	b91b      	cbnz	r3, 8009a40 <__srefill_r+0x84>
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f7ff fb22 	bl	8009084 <__smakebuf_r>
 8009a40:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009a44:	b2be      	uxth	r6, r7
 8009a46:	07b3      	lsls	r3, r6, #30
 8009a48:	d00f      	beq.n	8009a6a <__srefill_r+0xae>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	81a3      	strh	r3, [r4, #12]
 8009a4e:	4b1f      	ldr	r3, [pc, #124]	; (8009acc <__srefill_r+0x110>)
 8009a50:	491f      	ldr	r1, [pc, #124]	; (8009ad0 <__srefill_r+0x114>)
 8009a52:	6818      	ldr	r0, [r3, #0]
 8009a54:	f006 0609 	and.w	r6, r6, #9
 8009a58:	f7ff fa8a 	bl	8008f70 <_fwalk>
 8009a5c:	2e09      	cmp	r6, #9
 8009a5e:	81a7      	strh	r7, [r4, #12]
 8009a60:	d103      	bne.n	8009a6a <__srefill_r+0xae>
 8009a62:	4621      	mov	r1, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	f7ff f915 	bl	8008c94 <__sflush_r>
 8009a6a:	6922      	ldr	r2, [r4, #16]
 8009a6c:	6022      	str	r2, [r4, #0]
 8009a6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a70:	6963      	ldr	r3, [r4, #20]
 8009a72:	6a21      	ldr	r1, [r4, #32]
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b0      	blx	r6
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	6060      	str	r0, [r4, #4]
 8009a7c:	dc1d      	bgt.n	8009aba <__srefill_r+0xfe>
 8009a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a82:	bf17      	itett	ne
 8009a84:	2200      	movne	r2, #0
 8009a86:	f043 0320 	orreq.w	r3, r3, #32
 8009a8a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009a8e:	6062      	strne	r2, [r4, #4]
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	e7a6      	b.n	80099e2 <__srefill_r+0x26>
 8009a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a96:	2900      	cmp	r1, #0
 8009a98:	d0cc      	beq.n	8009a34 <__srefill_r+0x78>
 8009a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a9e:	4299      	cmp	r1, r3
 8009aa0:	d002      	beq.n	8009aa8 <__srefill_r+0xec>
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	f7fe fdfe 	bl	80086a4 <_free_r>
 8009aa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009aaa:	6063      	str	r3, [r4, #4]
 8009aac:	2000      	movs	r0, #0
 8009aae:	6360      	str	r0, [r4, #52]	; 0x34
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d0bf      	beq.n	8009a34 <__srefill_r+0x78>
 8009ab4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009ab6:	6023      	str	r3, [r4, #0]
 8009ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aba:	2000      	movs	r0, #0
 8009abc:	e7fc      	b.n	8009ab8 <__srefill_r+0xfc>
 8009abe:	bf00      	nop
 8009ac0:	0800a794 	.word	0x0800a794
 8009ac4:	0800a7b4 	.word	0x0800a7b4
 8009ac8:	0800a774 	.word	0x0800a774
 8009acc:	0800a770 	.word	0x0800a770
 8009ad0:	080099a9 	.word	0x080099a9

08009ad4 <__sread>:
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009adc:	f000 f8d4 	bl	8009c88 <_read_r>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	bfab      	itete	ge
 8009ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ae8:	181b      	addge	r3, r3, r0
 8009aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009aee:	bfac      	ite	ge
 8009af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009af2:	81a3      	strhlt	r3, [r4, #12]
 8009af4:	bd10      	pop	{r4, pc}

08009af6 <__swrite>:
 8009af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afa:	461f      	mov	r7, r3
 8009afc:	898b      	ldrh	r3, [r1, #12]
 8009afe:	05db      	lsls	r3, r3, #23
 8009b00:	4605      	mov	r5, r0
 8009b02:	460c      	mov	r4, r1
 8009b04:	4616      	mov	r6, r2
 8009b06:	d505      	bpl.n	8009b14 <__swrite+0x1e>
 8009b08:	2302      	movs	r3, #2
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b10:	f000 f868 	bl	8009be4 <_lseek_r>
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b1e:	81a3      	strh	r3, [r4, #12]
 8009b20:	4632      	mov	r2, r6
 8009b22:	463b      	mov	r3, r7
 8009b24:	4628      	mov	r0, r5
 8009b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2a:	f000 b817 	b.w	8009b5c <_write_r>

08009b2e <__sseek>:
 8009b2e:	b510      	push	{r4, lr}
 8009b30:	460c      	mov	r4, r1
 8009b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b36:	f000 f855 	bl	8009be4 <_lseek_r>
 8009b3a:	1c43      	adds	r3, r0, #1
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	bf15      	itete	ne
 8009b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b4a:	81a3      	strheq	r3, [r4, #12]
 8009b4c:	bf18      	it	ne
 8009b4e:	81a3      	strhne	r3, [r4, #12]
 8009b50:	bd10      	pop	{r4, pc}

08009b52 <__sclose>:
 8009b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b56:	f000 b813 	b.w	8009b80 <_close_r>
	...

08009b5c <_write_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	4c07      	ldr	r4, [pc, #28]	; (8009b7c <_write_r+0x20>)
 8009b60:	4605      	mov	r5, r0
 8009b62:	4608      	mov	r0, r1
 8009b64:	4611      	mov	r1, r2
 8009b66:	2200      	movs	r2, #0
 8009b68:	6022      	str	r2, [r4, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f7f7 fc36 	bl	80013dc <_write>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_write_r+0x1e>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_write_r+0x1e>
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	2000141c 	.word	0x2000141c

08009b80 <_close_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4c06      	ldr	r4, [pc, #24]	; (8009b9c <_close_r+0x1c>)
 8009b84:	2300      	movs	r3, #0
 8009b86:	4605      	mov	r5, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	f7f7 fc42 	bl	8001414 <_close>
 8009b90:	1c43      	adds	r3, r0, #1
 8009b92:	d102      	bne.n	8009b9a <_close_r+0x1a>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	b103      	cbz	r3, 8009b9a <_close_r+0x1a>
 8009b98:	602b      	str	r3, [r5, #0]
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	2000141c 	.word	0x2000141c

08009ba0 <_fstat_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4c07      	ldr	r4, [pc, #28]	; (8009bc0 <_fstat_r+0x20>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	4611      	mov	r1, r2
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	f7f7 fc3d 	bl	800142c <_fstat>
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	d102      	bne.n	8009bbc <_fstat_r+0x1c>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	b103      	cbz	r3, 8009bbc <_fstat_r+0x1c>
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	bf00      	nop
 8009bc0:	2000141c 	.word	0x2000141c

08009bc4 <_isatty_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4c06      	ldr	r4, [pc, #24]	; (8009be0 <_isatty_r+0x1c>)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4605      	mov	r5, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	f7f7 fc3c 	bl	800144c <_isatty>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_isatty_r+0x1a>
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_isatty_r+0x1a>
 8009bdc:	602b      	str	r3, [r5, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	2000141c 	.word	0x2000141c

08009be4 <_lseek_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4c07      	ldr	r4, [pc, #28]	; (8009c04 <_lseek_r+0x20>)
 8009be8:	4605      	mov	r5, r0
 8009bea:	4608      	mov	r0, r1
 8009bec:	4611      	mov	r1, r2
 8009bee:	2200      	movs	r2, #0
 8009bf0:	6022      	str	r2, [r4, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f7f7 fc35 	bl	8001462 <_lseek>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_lseek_r+0x1e>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_lseek_r+0x1e>
 8009c00:	602b      	str	r3, [r5, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	2000141c 	.word	0x2000141c

08009c08 <memmove>:
 8009c08:	4288      	cmp	r0, r1
 8009c0a:	b510      	push	{r4, lr}
 8009c0c:	eb01 0302 	add.w	r3, r1, r2
 8009c10:	d807      	bhi.n	8009c22 <memmove+0x1a>
 8009c12:	1e42      	subs	r2, r0, #1
 8009c14:	4299      	cmp	r1, r3
 8009c16:	d00a      	beq.n	8009c2e <memmove+0x26>
 8009c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009c20:	e7f8      	b.n	8009c14 <memmove+0xc>
 8009c22:	4283      	cmp	r3, r0
 8009c24:	d9f5      	bls.n	8009c12 <memmove+0xa>
 8009c26:	1881      	adds	r1, r0, r2
 8009c28:	1ad2      	subs	r2, r2, r3
 8009c2a:	42d3      	cmn	r3, r2
 8009c2c:	d100      	bne.n	8009c30 <memmove+0x28>
 8009c2e:	bd10      	pop	{r4, pc}
 8009c30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009c38:	e7f7      	b.n	8009c2a <memmove+0x22>

08009c3a <_realloc_r>:
 8009c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3c:	4607      	mov	r7, r0
 8009c3e:	4614      	mov	r4, r2
 8009c40:	460e      	mov	r6, r1
 8009c42:	b921      	cbnz	r1, 8009c4e <_realloc_r+0x14>
 8009c44:	4611      	mov	r1, r2
 8009c46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c4a:	f7fe bd79 	b.w	8008740 <_malloc_r>
 8009c4e:	b922      	cbnz	r2, 8009c5a <_realloc_r+0x20>
 8009c50:	f7fe fd28 	bl	80086a4 <_free_r>
 8009c54:	4625      	mov	r5, r4
 8009c56:	4628      	mov	r0, r5
 8009c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c5a:	f000 f827 	bl	8009cac <_malloc_usable_size_r>
 8009c5e:	42a0      	cmp	r0, r4
 8009c60:	d20f      	bcs.n	8009c82 <_realloc_r+0x48>
 8009c62:	4621      	mov	r1, r4
 8009c64:	4638      	mov	r0, r7
 8009c66:	f7fe fd6b 	bl	8008740 <_malloc_r>
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d0f2      	beq.n	8009c56 <_realloc_r+0x1c>
 8009c70:	4631      	mov	r1, r6
 8009c72:	4622      	mov	r2, r4
 8009c74:	f7fe fd03 	bl	800867e <memcpy>
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	f7fe fd12 	bl	80086a4 <_free_r>
 8009c80:	e7e9      	b.n	8009c56 <_realloc_r+0x1c>
 8009c82:	4635      	mov	r5, r6
 8009c84:	e7e7      	b.n	8009c56 <_realloc_r+0x1c>
	...

08009c88 <_read_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4c07      	ldr	r4, [pc, #28]	; (8009ca8 <_read_r+0x20>)
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	4608      	mov	r0, r1
 8009c90:	4611      	mov	r1, r2
 8009c92:	2200      	movs	r2, #0
 8009c94:	6022      	str	r2, [r4, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f7f7 fb8f 	bl	80013ba <_read>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_read_r+0x1e>
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_read_r+0x1e>
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	2000141c 	.word	0x2000141c

08009cac <_malloc_usable_size_r>:
 8009cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cb0:	1f18      	subs	r0, r3, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	bfbc      	itt	lt
 8009cb6:	580b      	ldrlt	r3, [r1, r0]
 8009cb8:	18c0      	addlt	r0, r0, r3
 8009cba:	4770      	bx	lr

08009cbc <_init>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	bf00      	nop
 8009cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc2:	bc08      	pop	{r3}
 8009cc4:	469e      	mov	lr, r3
 8009cc6:	4770      	bx	lr

08009cc8 <_fini>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr
