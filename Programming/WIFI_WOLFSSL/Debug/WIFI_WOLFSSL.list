
WIFI_WOLFSSL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 UNINIT_FIXED_LOC 000000d8  080ff000  080ff000  0003f000  2**3
                  ALLOC
  2 .text         0001d020  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001cec  0801d1e0  0801d1e0  0002d1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801eecc  0801eecc  00030230  2**0
                  CONTENTS
  5 .ARM          00000008  0801eecc  0801eecc  0002eecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801eed4  0801eed4  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801eed4  0801eed4  0002eed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801eed8  0801eed8  0002eed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000230  20000000  0801eedc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001388  20000230  0801f10c  00030230  2**3
                  ALLOC
 11 ._user_heap   00010000  200015b8  0801f10c  000315b8  2**0
                  ALLOC
 12 ._user_stack  00007f00  10000000  10000000  00040000  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .debug_line   0002c990  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_info   0005b103  00000000  00000000  0005cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000064bd  00000000  00000000  000b7cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003790  00000000  00000000  000be1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013285e  00000000  00000000  000c1940  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003870  00000000  00000000  001f41a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00035c9c  00000000  00000000  001f7a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0022d6ac  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0001065c  00000000  00000000  0022d728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000230 	.word	0x20000230
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801d1c8 	.word	0x0801d1c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000234 	.word	0x20000234
 80001fc:	0801d1c8 	.word	0x0801d1c8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f001 f824 	bl	8001600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005ba:	e003      	b.n	80005c4 <LoopCopyDataInit>

080005bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005c2:	3104      	adds	r1, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005cc:	d3f6      	bcc.n	80005bc <CopyDataInit>
	ldr	r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005d0:	e002      	b.n	80005d8 <LoopFillZerobss>

080005d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005d4:	f842 3b04 	str.w	r3, [r2], #4

080005d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <LoopForever+0x16>)
	cmp	r2, r3
 80005da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005dc:	d3f9      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f01b f9b5 	bl	801b94c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e2:	f000 f97f 	bl	80008e4 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005e8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005ec:	0801eedc 	.word	0x0801eedc
	ldr	r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005f4:	20000230 	.word	0x20000230
	ldr	r2, =_sbss
 80005f8:	20000230 	.word	0x20000230
	ldr	r3, = _ebss
 80005fc:	200015b8 	.word	0x200015b8

08000600 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_IRQHandler>
	...

08000604 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  uAddr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static uint32_t GetPage(uint32_t uAddr)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t page = 0U;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]

  if (uAddr < (FLASH_BASE + FLASH_BANK_SIZE))
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <GetPage+0x7c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	b29b      	uxth	r3, r3
 8000616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800061a:	4293      	cmp	r3, r2
 800061c:	d008      	beq.n	8000630 <GetPage+0x2c>
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <GetPage+0x7c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	029b      	lsls	r3, r3, #10
 8000624:	085a      	lsrs	r2, r3, #1
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <GetPage+0x80>)
 8000628:	4013      	ands	r3, r2
 800062a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800062e:	e001      	b.n	8000634 <GetPage+0x30>
 8000630:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4293      	cmp	r3, r2
 8000638:	d905      	bls.n	8000646 <GetPage+0x42>
  {
    /* Bank 1 */
    page = (uAddr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000640:	0b1b      	lsrs	r3, r3, #12
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e015      	b.n	8000672 <GetPage+0x6e>
  }
  else
  {
    /* Bank 2 */
    page = (uAddr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <GetPage+0x7c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	b29b      	uxth	r3, r3
 800064c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000650:	4293      	cmp	r3, r2
 8000652:	d008      	beq.n	8000666 <GetPage+0x62>
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <GetPage+0x7c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	029b      	lsls	r3, r3, #10
 800065a:	085a      	lsrs	r2, r3, #1
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <GetPage+0x80>)
 800065e:	4013      	ands	r3, r2
 8000660:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000664:	e001      	b.n	800066a <GetPage+0x66>
 8000666:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	0b1b      	lsrs	r3, r3, #12
 8000670:	60fb      	str	r3, [r7, #12]
  }

  return page;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	1fff75e0 	.word	0x1fff75e0
 8000684:	01fffe00 	.word	0x01fffe00

08000688 <GetBank>:
  * @brief  Gets the bank of a given address
  * @param  uAddr: Address of the FLASH Memory
  * @retval The bank of a given address
  */
static uint32_t GetBank(uint32_t uAddr)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t bank = 0U;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <GetBank+0x90>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800069c:	2b00      	cmp	r3, #0
 800069e:	d11a      	bne.n	80006d6 <GetBank+0x4e>
  {
    /* No Bank swap */
    if (uAddr < (FLASH_BASE + FLASH_BANK_SIZE))
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <GetBank+0x94>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d008      	beq.n	80006c0 <GetBank+0x38>
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <GetBank+0x94>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	029b      	lsls	r3, r3, #10
 80006b4:	085a      	lsrs	r2, r3, #1
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <GetBank+0x98>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80006be:	e001      	b.n	80006c4 <GetBank+0x3c>
 80006c0:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d902      	bls.n	80006d0 <GetBank+0x48>
    {
      bank = FLASH_BANK_1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e01c      	b.n	800070a <GetBank+0x82>
    }
    else
    {
      bank = FLASH_BANK_2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e019      	b.n	800070a <GetBank+0x82>
    }
  }
  else
  {
    /* Bank swap */
    if (uAddr < (FLASH_BASE + FLASH_BANK_SIZE))
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <GetBank+0x94>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d008      	beq.n	80006f6 <GetBank+0x6e>
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <GetBank+0x94>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	029b      	lsls	r3, r3, #10
 80006ea:	085a      	lsrs	r2, r3, #1
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <GetBank+0x98>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80006f4:	e001      	b.n	80006fa <GetBank+0x72>
 80006f6:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d902      	bls.n	8000706 <GetBank+0x7e>
    {
      bank = FLASH_BANK_2;
 8000700:	2302      	movs	r3, #2
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	e001      	b.n	800070a <GetBank+0x82>
    }
    else
    {
      bank = FLASH_BANK_1;
 8000706:	2301      	movs	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
    }
  }

  return bank;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40010000 	.word	0x40010000
 800071c:	1fff75e0 	.word	0x1fff75e0
 8000720:	01fffe00 	.word	0x01fffe00

08000724 <FLASH_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval HAL Status.
  */
uint32_t FLASH_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  uint32_t ret = HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	607b      	str	r3, [r7, #4]

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800072e:	f003 fbb7 	bl	8003ea0 <HAL_FLASH_Unlock>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d119      	bne.n	800076c <FLASH_Init+0x48>
  {

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <FLASH_Init+0x58>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a0f      	ldr	r2, [pc, #60]	; (800077c <FLASH_Init+0x58>)
 800073e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <FLASH_Init+0x58>)
 8000746:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800074a:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <FLASH_Init+0x58>)
 800074e:	f248 0291 	movw	r2, #32913	; 0x8091
 8000752:	611a      	str	r2, [r3, #16]

    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8000754:	f003 fbc6 	bl	8003ee4 <HAL_FLASH_Lock>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d102      	bne.n	8000764 <FLASH_Init+0x40>
    {
      ret = HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	e006      	b.n	8000772 <FLASH_Init+0x4e>
    }
    else
    {
      printf("FLASH_If_Init : failed to lock\n");
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <FLASH_Init+0x5c>)
 8000766:	f01b fab1 	bl	801bccc <puts>
 800076a:	e002      	b.n	8000772 <FLASH_Init+0x4e>
    }
  }
  else
  {
    printf("FLASH_If_Init : failed to unlock\n");
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <FLASH_Init+0x60>)
 800076e:	f01b faad 	bl	801bccc <puts>
  }
  return ret;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40022000 	.word	0x40022000
 8000780:	0801d1e0 	.word	0x0801d1e0
 8000784:	0801d200 	.word	0x0801d200

08000788 <FLASH_Erase_Size>:
  * @param  Start: Start of user flash area
  * @param  uLength: number of bytes.
  * @retval HAL status.
  */
int FLASH_Erase_Size(uint32_t uStart, uint32_t uLength)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t page_error = 0U;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef x_erase_init;
  uint32_t e_ret_status = HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t first_page = 0U, nb_of_pages = 0U, bank_number = 0U;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]

  /* Initialize Flash */
  e_ret_status = FLASH_Init();
 80007a6:	f7ff ffbd 	bl	8000724 <FLASH_Init>
 80007aa:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (e_ret_status == HAL_OK)
 80007ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d139      	bne.n	8000826 <FLASH_Erase_Size+0x9e>
  {
    /* Unlock the Flash to enable the flash control register access *************/
    if (HAL_FLASH_Unlock() == HAL_OK)
 80007b2:	f003 fb75 	bl	8003ea0 <HAL_FLASH_Unlock>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d130      	bne.n	800081e <FLASH_Erase_Size+0x96>
    {
      /* Get the 1st page to erase */
      first_page = GetPage(uStart);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff21 	bl	8000604 <GetPage>
 80007c2:	62b8      	str	r0, [r7, #40]	; 0x28
      /* Get the number of pages to erase from 1st page */
      nb_of_pages = GetPage(uStart + uLength - 1U) - first_page + 1U;
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	3b01      	subs	r3, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff19 	bl	8000604 <GetPage>
 80007d2:	4602      	mov	r2, r0
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
      /* Get the bank */
      bank_number = GetBank(uStart);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff53 	bl	8000688 <GetBank>
 80007e2:	6238      	str	r0, [r7, #32]

      /* Fill EraseInit structure*/
      x_erase_init.TypeErase   = FLASH_TYPEERASE_PAGES;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
      x_erase_init.Banks       = bank_number;
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	613b      	str	r3, [r7, #16]
      x_erase_init.Page        = first_page;
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	617b      	str	r3, [r7, #20]
      x_erase_init.NbPages     = nb_of_pages;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	61bb      	str	r3, [r7, #24]

      if (HAL_FLASHEx_Erase(&x_erase_init, &page_error) != HAL_OK)
 80007f4:	f107 021c 	add.w	r2, r7, #28
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fc3c 	bl	800407c <HAL_FLASHEx_Erase>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <FLASH_Erase_Size+0x90>
      {
        /* Error occurred while page erase */
        HAL_FLASH_GetError();
 800080a:	f003 fb7b 	bl	8003f04 <HAL_FLASH_GetError>
        printf("ERROR flash erase\n");
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <FLASH_Erase_Size+0xb0>)
 8000810:	f01b fa5c 	bl	801bccc <puts>
        e_ret_status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      /* Lock the Flash to disable the flash control register access (recommended
      to protect the FLASH memory against possible unwanted operation) *********/
      HAL_FLASH_Lock();
 8000818:	f003 fb64 	bl	8003ee4 <HAL_FLASH_Lock>
 800081c:	e006      	b.n	800082c <FLASH_Erase_Size+0xa4>
    }
    else
    {
      printf("ERROR cannot unlock\n");
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <FLASH_Erase_Size+0xb4>)
 8000820:	f01b fa54 	bl	801bccc <puts>
 8000824:	e002      	b.n	800082c <FLASH_Erase_Size+0xa4>
    }
  }
  else
  {
    printf("cannot init\n");
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <FLASH_Erase_Size+0xb8>)
 8000828:	f01b fa50 	bl	801bccc <puts>
  }
  return e_ret_status;
 800082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800082e:	4618      	mov	r0, r3
 8000830:	3730      	adds	r7, #48	; 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	0801d224 	.word	0x0801d224
 800083c:	0801d238 	.word	0x0801d238
 8000840:	0801d24c 	.word	0x0801d24c

08000844 <FLASH_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
int FLASH_Write(uint32_t uDestination, uint32_t *pSource, uint32_t uLength)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t e_ret_status = HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
  uint32_t i = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]

  /* Initialize Flash */
  e_ret_status = FLASH_Init();
 8000858:	f7ff ff64 	bl	8000724 <FLASH_Init>
 800085c:	6178      	str	r0, [r7, #20]

  if (e_ret_status == HAL_OK)
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d139      	bne.n	80008d8 <FLASH_Write+0x94>
  {
    /* Unlock the Flash to enable the flash control register access *************/
    if (HAL_FLASH_Unlock() != HAL_OK)
 8000864:	f003 fb1c 	bl	8003ea0 <HAL_FLASH_Unlock>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <FLASH_Write+0x2e>
    {
      return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e033      	b.n	80008da <FLASH_Write+0x96>
    }
    else
    {
      /* DataLength must be a multiple of 64 bit */
      for (i = 0U; i < uLength / 8U; i++)
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	e028      	b.n	80008ca <FLASH_Write+0x86>
      {
        /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
        be done by word */
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, uDestination, *((uint64_t *)(pSource + 2U * i))) == HAL_OK)
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	4413      	add	r3, r2
 8000880:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000884:	461a      	mov	r2, r3
 8000886:	4623      	mov	r3, r4
 8000888:	68f9      	ldr	r1, [r7, #12]
 800088a:	2000      	movs	r0, #0
 800088c:	f003 fa9c 	bl	8003dc8 <HAL_FLASH_Program>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d113      	bne.n	80008be <FLASH_Write+0x7a>
        {
          /* Check the written value */
          if (*(uint64_t *)uDestination != *(uint64_t *)(pSource + 2U * i))
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	e9d3 1200 	ldrd	r1, r2, [r3]
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	68b8      	ldr	r0, [r7, #8]
 80008a2:	4403      	add	r3, r0
 80008a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008a8:	42a2      	cmp	r2, r4
 80008aa:	bf08      	it	eq
 80008ac:	4299      	cmpeq	r1, r3
 80008ae:	d002      	beq.n	80008b6 <FLASH_Write+0x72>
          {
            /* Flash content doesn't match SRAM content */
            e_ret_status = HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
            break;
 80008b4:	e00e      	b.n	80008d4 <FLASH_Write+0x90>
          }
          /* Increment FLASH Destination address */
          uDestination += 8U;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3308      	adds	r3, #8
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	e002      	b.n	80008c4 <FLASH_Write+0x80>
        }
        else
        {
          /* Error occurred while writing data in Flash memory */
          e_ret_status = HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
          break;
 80008c2:	e007      	b.n	80008d4 <FLASH_Write+0x90>
      for (i = 0U; i < uLength / 8U; i++)
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	3301      	adds	r3, #1
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d3d1      	bcc.n	8000878 <FLASH_Write+0x34>
        }
      }
      /* Lock the Flash to disable the flash control register access (recommended
      to protect the FLASH memory against possible unwanted operation) *********/
      HAL_FLASH_Lock();
 80008d4:	f003 fb06 	bl	8003ee4 <HAL_FLASH_Lock>
    }
  }
  return e_ret_status;
 80008d8:	697b      	ldr	r3, [r7, #20]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	371c      	adds	r7, #28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}
	...

080008e4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f003 f85f 	bl	80039ac <HAL_Init>

  setvbuf(stdin, NULL, _IONBF, 0);
 80008ee:	4b3b      	ldr	r3, [pc, #236]	; (80009dc <main+0xf8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6858      	ldr	r0, [r3, #4]
 80008f4:	2300      	movs	r3, #0
 80008f6:	2202      	movs	r2, #2
 80008f8:	2100      	movs	r1, #0
 80008fa:	f01b fa2b 	bl	801bd54 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80008fe:	4b37      	ldr	r3, [pc, #220]	; (80009dc <main+0xf8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6898      	ldr	r0, [r3, #8]
 8000904:	2300      	movs	r3, #0
 8000906:	2202      	movs	r2, #2
 8000908:	2100      	movs	r1, #0
 800090a:	f01b fa23 	bl	801bd54 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 800090e:	4b33      	ldr	r3, [pc, #204]	; (80009dc <main+0xf8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68d8      	ldr	r0, [r3, #12]
 8000914:	2300      	movs	r3, #0
 8000916:	2202      	movs	r2, #2
 8000918:	2100      	movs	r1, #0
 800091a:	f01b fa1b 	bl	801bd54 <setvbuf>

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 fce1 	bl	80012e4 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8000922:	2000      	movs	r0, #0
 8000924:	f002 fdaa 	bl	800347c <BSP_LED_Init>

  /* USER push button is used to ask if reconfiguration is needed */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000928:	2101      	movs	r1, #1
 800092a:	2000      	movs	r0, #0
 800092c:	f002 fe02 	bl	8003534 <BSP_PB_Init>

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <main+0xfc>)
 8000932:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <main+0x100>)
 8000934:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0xfc>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0xfc>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0xfc>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <main+0xfc>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <main+0xfc>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0xfc>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0xfc>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <main+0xfc>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <main+0xfc>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28


  BSP_COM_Init(COM1, &hDiscoUart);
 800096e:	491c      	ldr	r1, [pc, #112]	; (80009e0 <main+0xfc>)
 8000970:	2000      	movs	r0, #0
 8000972:	f002 fe35 	bl	80035e0 <BSP_COM_Init>
  BSP_TSENSOR_Init();
 8000976:	f002 ffef 	bl	8003958 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();
 800097a:	f002 fbbf 	bl	80030fc <BSP_HSENSOR_Init>

  printf("\n****** WIFI Web Server demonstration ******\n\n");
 800097e:	481a      	ldr	r0, [pc, #104]	; (80009e8 <main+0x104>)
 8000980:	f01b f9a4 	bl	801bccc <puts>

  int ret = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]

    WOLFSSL_CTX* ctx;

    wolfSSL_Init();/* Initialize wolfSSL */
 8000988:	f009 f826 	bl	80099d8 <wolfSSL_Init>

    ctx = wolfSSL_CTX_new(wolfTLSv1_2_client_method());
 800098c:	f00a f946 	bl	800ac1c <wolfTLSv1_2_client_method>
 8000990:	4603      	mov	r3, r0
 8000992:	4618      	mov	r0, r3
 8000994:	f008 fcc4 	bl	8009320 <wolfSSL_CTX_new>
 8000998:	6038      	str	r0, [r7, #0]

    ret = wolfSSL_CTX_load_verify_buffer(ctx,  server_cert_der_2048, sizeof_server_cert_der_2048, SSL_FILETYPE_ASN1);
 800099a:	f240 3257 	movw	r2, #855	; 0x357
 800099e:	2302      	movs	r3, #2
 80009a0:	4912      	ldr	r1, [pc, #72]	; (80009ec <main+0x108>)
 80009a2:	6838      	ldr	r0, [r7, #0]
 80009a4:	f00a f81f 	bl	800a9e6 <wolfSSL_CTX_load_verify_buffer>
 80009a8:	6078      	str	r0, [r7, #4]

    printf("return value = %d\n", ret);
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	4810      	ldr	r0, [pc, #64]	; (80009f0 <main+0x10c>)
 80009ae:	f01b f905 	bl	801bbbc <iprintf>

    printf("SSL_SUCCESS = %d\n", SSL_SUCCESS);
 80009b2:	2101      	movs	r1, #1
 80009b4:	480f      	ldr	r0, [pc, #60]	; (80009f4 <main+0x110>)
 80009b6:	f01b f901 	bl	801bbbc <iprintf>

    printf("SSL_BAD_FILETYPE = %d\n", SSL_BAD_FILETYPE);
 80009ba:	f06f 0104 	mvn.w	r1, #4
 80009be:	480e      	ldr	r0, [pc, #56]	; (80009f8 <main+0x114>)
 80009c0:	f01b f8fc 	bl	801bbbc <iprintf>

    printf("SSL_BAD_FILE = %d\n", SSL_BAD_FILE);
 80009c4:	f06f 0103 	mvn.w	r1, #3
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <main+0x118>)
 80009ca:	f01b f8f7 	bl	801bbbc <iprintf>

#endif /* TERMINAL_USE */

  wifi_server();
 80009ce:	f000 f93f 	bl	8000c50 <wifi_server>
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000060 	.word	0x20000060
 80009e0:	200014d8 	.word	0x200014d8
 80009e4:	40013800 	.word	0x40013800
 80009e8:	0801d258 	.word	0x0801d258
 80009ec:	0801e0e0 	.word	0x0801e0e0
 80009f0:	0801d288 	.word	0x0801d288
 80009f4:	0801d29c 	.word	0x0801d29c
 80009f8:	0801d2b0 	.word	0x0801d2b0
 80009fc:	0801d2c8 	.word	0x0801d2c8

08000a00 <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8000a06:	f002 fa15 	bl	8002e34 <WIFI_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d123      	bne.n	8000a58 <wifi_start+0x58>
  {
    printf("eS-WiFi Initialized.\n");
 8000a10:	4814      	ldr	r0, [pc, #80]	; (8000a64 <wifi_start+0x64>)
 8000a12:	f01b f95b 	bl	801bccc <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fa59 	bl	8002ed0 <WIFI_GetMAC_Address>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d113      	bne.n	8000a4c <wifi_start+0x4c>
    {
      LOG(("eS-WiFi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8000a24:	783b      	ldrb	r3, [r7, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	787b      	ldrb	r3, [r7, #1]
 8000a2a:	461c      	mov	r4, r3
 8000a2c:	78bb      	ldrb	r3, [r7, #2]
 8000a2e:	461d      	mov	r5, r3
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	793a      	ldrb	r2, [r7, #4]
 8000a34:	7979      	ldrb	r1, [r7, #5]
 8000a36:	9102      	str	r1, [sp, #8]
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	462b      	mov	r3, r5
 8000a3e:	4622      	mov	r2, r4
 8000a40:	4601      	mov	r1, r0
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <wifi_start+0x68>)
 8000a44:	f01b f8ba 	bl	801bbbc <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e007      	b.n	8000a5c <wifi_start+0x5c>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <wifi_start+0x6c>)
 8000a4e:	f01b f93d 	bl	801bccc <puts>
      return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	e001      	b.n	8000a5c <wifi_start+0x5c>
    return -1;
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bdb0      	pop	{r4, r5, r7, pc}
 8000a64:	0801d2dc 	.word	0x0801d2dc
 8000a68:	0801d2f4 	.word	0x0801d2f4
 8000a6c:	0801d324 	.word	0x0801d324

08000a70 <wifi_connect>:



int wifi_connect(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af02      	add	r7, sp, #8
  wifi_start();
 8000a76:	f7ff ffc3 	bl	8000a00 <wifi_start>
  
  memset(&user_config, 0, sizeof(user_config));
 8000a7a:	22d8      	movs	r2, #216	; 0xd8
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4864      	ldr	r0, [pc, #400]	; (8000c10 <wifi_connect+0x1a0>)
 8000a80:	f01a ffeb 	bl	801ba5a <memset>
  memcpy(&user_config, lUserConfigPtr, sizeof(user_config));
 8000a84:	4b63      	ldr	r3, [pc, #396]	; (8000c14 <wifi_connect+0x1a4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	22d8      	movs	r2, #216	; 0xd8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4860      	ldr	r0, [pc, #384]	; (8000c10 <wifi_connect+0x1a0>)
 8000a8e:	f01a ffc0 	bl	801ba12 <memcpy>
  if (user_config.wifi_config_magic == USER_CONF_MAGIC)
 8000a92:	4b5f      	ldr	r3, [pc, #380]	; (8000c10 <wifi_connect+0x1a0>)
 8000a94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a98:	a25b      	add	r2, pc, #364	; (adr r2, 8000c08 <wifi_connect+0x198>)
 8000a9a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000a9e:	4294      	cmp	r4, r2
 8000aa0:	bf08      	it	eq
 8000aa2:	428b      	cmpeq	r3, r1
 8000aa4:	d118      	bne.n	8000ad8 <wifi_connect+0x68>
  {
    /* WiFi configuration is already in Flash. Ask if we want to change it */
    printf("Already configured SSID: %s security: %d\n",
           user_config.wifi_config.ssid, user_config.wifi_config.security);
 8000aa6:	4b5a      	ldr	r3, [pc, #360]	; (8000c10 <wifi_connect+0x1a0>)
 8000aa8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    printf("Already configured SSID: %s security: %d\n",
 8000aac:	461a      	mov	r2, r3
 8000aae:	495a      	ldr	r1, [pc, #360]	; (8000c18 <wifi_connect+0x1a8>)
 8000ab0:	485a      	ldr	r0, [pc, #360]	; (8000c1c <wifi_connect+0x1ac>)
 8000ab2:	f01b f883 	bl	801bbbc <iprintf>
    printf("Press board User button (blue) within 5 seconds if you want to change the configuration.\n");
 8000ab6:	485a      	ldr	r0, [pc, #360]	; (8000c20 <wifi_connect+0x1b0>)
 8000ab8:	f01b f908 	bl	801bccc <puts>
    Button_Reset();
 8000abc:	f000 fc4c 	bl	8001358 <Button_Reset>
    if (Button_WaitForPush(5000))
 8000ac0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ac4:	f000 fc54 	bl	8001370 <Button_WaitForPush>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <wifi_connect+0x68>
    {
      /* we want to change the configuration already stored in Flash memory */
      memset(&user_config, 0, sizeof(user_config));
 8000ace:	22d8      	movs	r2, #216	; 0xd8
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	484f      	ldr	r0, [pc, #316]	; (8000c10 <wifi_connect+0x1a0>)
 8000ad4:	f01a ffc1 	bl	801ba5a <memset>
    }
  }

  if (user_config.wifi_config_magic != USER_CONF_MAGIC)
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	; (8000c10 <wifi_connect+0x1a0>)
 8000ada:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ade:	a24a      	add	r2, pc, #296	; (adr r2, 8000c08 <wifi_connect+0x198>)
 8000ae0:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000ae4:	4294      	cmp	r4, r2
 8000ae6:	bf08      	it	eq
 8000ae8:	428b      	cmpeq	r3, r1
 8000aea:	d041      	beq.n	8000b70 <wifi_connect+0x100>
  {
    printf("\nEnter WiFi SSID : ");
 8000aec:	484d      	ldr	r0, [pc, #308]	; (8000c24 <wifi_connect+0x1b4>)
 8000aee:	f01b f865 	bl	801bbbc <iprintf>
    gets(user_config.wifi_config.ssid);
 8000af2:	4849      	ldr	r0, [pc, #292]	; (8000c18 <wifi_connect+0x1a8>)
 8000af4:	f01a ff22 	bl	801b93c <gets>
    LOG(("\nYou have entered %s as SSID.\n", user_config.wifi_config.ssid));
 8000af8:	4947      	ldr	r1, [pc, #284]	; (8000c18 <wifi_connect+0x1a8>)
 8000afa:	484b      	ldr	r0, [pc, #300]	; (8000c28 <wifi_connect+0x1b8>)
 8000afc:	f01b f85e 	bl	801bbbc <iprintf>

    char c;
    do
    {
        printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): ");
 8000b00:	484a      	ldr	r0, [pc, #296]	; (8000c2c <wifi_connect+0x1bc>)
 8000b02:	f01b f85b 	bl	801bbbc <iprintf>
        c = getchar();
 8000b06:	f01a fec5 	bl	801b894 <getchar>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71bb      	strb	r3, [r7, #6]
    }
    while ( (c < '0')  || (c > '3'));
 8000b0e:	79bb      	ldrb	r3, [r7, #6]
 8000b10:	2b2f      	cmp	r3, #47	; 0x2f
 8000b12:	d9f5      	bls.n	8000b00 <wifi_connect+0x90>
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	2b33      	cmp	r3, #51	; 0x33
 8000b18:	d8f2      	bhi.n	8000b00 <wifi_connect+0x90>
    user_config.wifi_config.security = c - '0';
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	3b30      	subs	r3, #48	; 0x30
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <wifi_connect+0x1a0>)
 8000b22:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    LOG(("\nYou have entered %d as the security mode.\n", user_config.wifi_config.security));
 8000b26:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <wifi_connect+0x1a0>)
 8000b28:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4840      	ldr	r0, [pc, #256]	; (8000c30 <wifi_connect+0x1c0>)
 8000b30:	f01b f844 	bl	801bbbc <iprintf>

    if (user_config.wifi_config.security != 0)
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <wifi_connect+0x1a0>)
 8000b36:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <wifi_connect+0xda>
    {
      printf("\nEnter WiFi password : ");
 8000b3e:	483d      	ldr	r0, [pc, #244]	; (8000c34 <wifi_connect+0x1c4>)
 8000b40:	f01b f83c 	bl	801bbbc <iprintf>
      gets(user_config.wifi_config.password);
 8000b44:	483c      	ldr	r0, [pc, #240]	; (8000c38 <wifi_connect+0x1c8>)
 8000b46:	f01a fef9 	bl	801b93c <gets>
    }
    user_config.wifi_config_magic = USER_CONF_MAGIC;
 8000b4a:	4a31      	ldr	r2, [pc, #196]	; (8000c10 <wifi_connect+0x1a0>)
 8000b4c:	a42e      	add	r4, pc, #184	; (adr r4, 8000c08 <wifi_connect+0x198>)
 8000b4e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000b52:	e9c2 3400 	strd	r3, r4, [r2]
    FLASH_Erase_Size((uint32_t)lUserConfigPtr, sizeof(user_config));
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <wifi_connect+0x1a4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	21d8      	movs	r1, #216	; 0xd8
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fe13 	bl	8000788 <FLASH_Erase_Size>
    FLASH_Write((uint32_t)lUserConfigPtr, (uint32_t*)&user_config, sizeof(user_config));
 8000b62:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <wifi_connect+0x1a4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	22d8      	movs	r2, #216	; 0xd8
 8000b68:	4929      	ldr	r1, [pc, #164]	; (8000c10 <wifi_connect+0x1a0>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fe6a 	bl	8000844 <FLASH_Write>
  }

  printf("\nConnecting to %s\n", user_config.wifi_config.ssid);
 8000b70:	4929      	ldr	r1, [pc, #164]	; (8000c18 <wifi_connect+0x1a8>)
 8000b72:	4832      	ldr	r0, [pc, #200]	; (8000c3c <wifi_connect+0x1cc>)
 8000b74:	f01b f822 	bl	801bbbc <iprintf>
  WIFI_Ecn_t security;
  switch (user_config.wifi_config.security)
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <wifi_connect+0x1a0>)
 8000b7a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d006      	beq.n	8000b90 <wifi_connect+0x120>
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d007      	beq.n	8000b96 <wifi_connect+0x126>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d108      	bne.n	8000b9c <wifi_connect+0x12c>
  {
    case 0:
      security = WIFI_ECN_OPEN;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]
      break;
 8000b8e:	e008      	b.n	8000ba2 <wifi_connect+0x132>
    case 1:
      security = WIFI_ECN_WEP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	71fb      	strb	r3, [r7, #7]
      break;
 8000b94:	e005      	b.n	8000ba2 <wifi_connect+0x132>
    case 2:
      security =  WIFI_ECN_WPA_PSK;
 8000b96:	2302      	movs	r3, #2
 8000b98:	71fb      	strb	r3, [r7, #7]
      break;
 8000b9a:	e002      	b.n	8000ba2 <wifi_connect+0x132>
    case 3:
    default:
      security =  WIFI_ECN_WPA2_PSK;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	71fb      	strb	r3, [r7, #7]
      break;
 8000ba0:	bf00      	nop
  }
  if (WIFI_Connect(user_config.wifi_config.ssid, user_config.wifi_config.password, security) == WIFI_STATUS_OK)
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4924      	ldr	r1, [pc, #144]	; (8000c38 <wifi_connect+0x1c8>)
 8000ba8:	481b      	ldr	r0, [pc, #108]	; (8000c18 <wifi_connect+0x1a8>)
 8000baa:	f002 f96f 	bl	8002e8c <WIFI_Connect>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d11d      	bne.n	8000bf0 <wifi_connect+0x180>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8000bb4:	4822      	ldr	r0, [pc, #136]	; (8000c40 <wifi_connect+0x1d0>)
 8000bb6:	f002 f9a1 	bl	8002efc <WIFI_GetIP_Address>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d111      	bne.n	8000be4 <wifi_connect+0x174>
    {
      LOG(("eS-WiFi module connected: got IP Address : %d.%d.%d.%d\n",
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <wifi_connect+0x1d0>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <wifi_connect+0x1d0>)
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <wifi_connect+0x1d0>)
 8000bce:	789b      	ldrb	r3, [r3, #2]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <wifi_connect+0x1d0>)
 8000bd4:	78db      	ldrb	r3, [r3, #3]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	4603      	mov	r3, r0
 8000bda:	481a      	ldr	r0, [pc, #104]	; (8000c44 <wifi_connect+0x1d4>)
 8000bdc:	f01a ffee 	bl	801bbbc <iprintf>
  else
  {
     LOG(("ERROR : es-wifi module NOT connected\n"));
     return -1;
  }
  return 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	e00a      	b.n	8000bfa <wifi_connect+0x18a>
      LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 8000be4:	4818      	ldr	r0, [pc, #96]	; (8000c48 <wifi_connect+0x1d8>)
 8000be6:	f01b f871 	bl	801bccc <puts>
      return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e004      	b.n	8000bfa <wifi_connect+0x18a>
     LOG(("ERROR : es-wifi module NOT connected\n"));
 8000bf0:	4816      	ldr	r0, [pc, #88]	; (8000c4c <wifi_connect+0x1dc>)
 8000bf2:	f01b f86b 	bl	801bccc <puts>
     return -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	f3af 8000 	nop.w
 8000c08:	89abcdef 	.word	0x89abcdef
 8000c0c:	01234567 	.word	0x01234567
 8000c10:	20000250 	.word	0x20000250
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000258 	.word	0x20000258
 8000c1c:	0801d348 	.word	0x0801d348
 8000c20:	0801d374 	.word	0x0801d374
 8000c24:	0801d3d0 	.word	0x0801d3d0
 8000c28:	0801d3e4 	.word	0x0801d3e4
 8000c2c:	0801d404 	.word	0x0801d404
 8000c30:	0801d444 	.word	0x0801d444
 8000c34:	0801d470 	.word	0x0801d470
 8000c38:	200002bc 	.word	0x200002bc
 8000c3c:	0801d488 	.word	0x0801d488
 8000c40:	20000728 	.word	0x20000728
 8000c44:	0801d49c 	.word	0x0801d49c
 8000c48:	0801d4d4 	.word	0x0801d4d4
 8000c4c:	0801d504 	.word	0x0801d504

08000c50 <wifi_server>:

int wifi_server(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af02      	add	r7, sp, #8
  bool StopServer = false;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 8000c5a:	483f      	ldr	r0, [pc, #252]	; (8000d58 <wifi_server+0x108>)
 8000c5c:	f01b f836 	bl	801bccc <puts>
  if (wifi_connect()!=0) return -1;
 8000c60:	f7ff ff06 	bl	8000a70 <wifi_connect>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <wifi_server+0x20>
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e06e      	b.n	8000d4e <wifi_server+0xfe>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8000c70:	2350      	movs	r3, #80	; 0x50
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <wifi_server+0x10c>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f002 f95a 	bl	8002f34 <WIFI_StartServer>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 8000c86:	4836      	ldr	r0, [pc, #216]	; (8000d60 <wifi_server+0x110>)
 8000c88:	f01b f820 	bl	801bccc <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000c8c:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <wifi_server+0x114>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <wifi_server+0x114>)
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <wifi_server+0x114>)
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <wifi_server+0x114>)
 8000ca0:	78db      	ldrb	r3, [r3, #3]
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4830      	ldr	r0, [pc, #192]	; (8000d68 <wifi_server+0x118>)
 8000ca8:	f01a ff88 	bl	801bbbc <iprintf>
  do
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;

    LOG(("Waiting connection to http://%d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <wifi_server+0x114>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <wifi_server+0x114>)
 8000cb4:	785b      	ldrb	r3, [r3, #1]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <wifi_server+0x114>)
 8000cba:	789b      	ldrb	r3, [r3, #2]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <wifi_server+0x114>)
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4829      	ldr	r0, [pc, #164]	; (8000d6c <wifi_server+0x11c>)
 8000cc8:	f01a ff78 	bl	801bbbc <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8000ccc:	e002      	b.n	8000cd4 <wifi_server+0x84>
    {
        LOG(("."));
 8000cce:	202e      	movs	r0, #46	; 0x2e
 8000cd0:	f01a ff8c 	bl	801bbec <putchar>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8000cd4:	1dbb      	adds	r3, r7, #6
 8000cd6:	f107 0208 	add.w	r2, r7, #8
 8000cda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f002 f958 	bl	8002f94 <WIFI_WaitServerConnection>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f1      	bne.n	8000cce <wifi_server+0x7e>
    }

    LOG(("\nClient connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 8000cea:	7a3b      	ldrb	r3, [r7, #8]
 8000cec:	4619      	mov	r1, r3
 8000cee:	7a7b      	ldrb	r3, [r7, #9]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	7abb      	ldrb	r3, [r7, #10]
 8000cf4:	461c      	mov	r4, r3
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	88fa      	ldrh	r2, [r7, #6]
 8000cfa:	9201      	str	r2, [sp, #4]
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	4623      	mov	r3, r4
 8000d00:	4602      	mov	r2, r0
 8000d02:	481b      	ldr	r0, [pc, #108]	; (8000d70 <wifi_server+0x120>)
 8000d04:	f01a ff5a 	bl	801bbbc <iprintf>

    StopServer = WebServerProcess();
 8000d08:	f000 f83a 	bl	8000d80 <WebServerProcess>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	73fb      	strb	r3, [r7, #15]

    if (WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8000d10:	2000      	movs	r0, #0
 8000d12:	f002 f981 	bl	8003018 <WIFI_CloseServerConnection>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <wifi_server+0xd8>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 8000d1c:	4815      	ldr	r0, [pc, #84]	; (8000d74 <wifi_server+0x124>)
 8000d1e:	f01a ffd5 	bl	801bccc <puts>
      return -1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e012      	b.n	8000d4e <wifi_server+0xfe>
    }
  }
  while(StopServer == false);
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	f083 0301 	eor.w	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1bb      	bne.n	8000cac <wifi_server+0x5c>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8000d34:	2000      	movs	r0, #0
 8000d36:	f002 f985 	bl	8003044 <WIFI_StopServer>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <wifi_server+0xf6>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <wifi_server+0x128>)
 8000d42:	f01a ffc3 	bl	801bccc <puts>
  }

  LOG(("Server is stop\n"));
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <wifi_server+0x12c>)
 8000d48:	f01a ffc0 	bl	801bccc <puts>
  return 0;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	0801d52c 	.word	0x0801d52c
 8000d5c:	0801d548 	.word	0x0801d548
 8000d60:	0801d54c 	.word	0x0801d54c
 8000d64:	20000728 	.word	0x20000728
 8000d68:	0801d568 	.word	0x0801d568
 8000d6c:	0801d5b8 	.word	0x0801d5b8
 8000d70:	0801d5e4 	.word	0x0801d5e4
 8000d74:	0801d608 	.word	0x0801d608
 8000d78:	0801d63c 	.word	0x0801d63c
 8000d7c:	0801d658 	.word	0x0801d658

08000d80 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint8_t humidity;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8000d8a:	f107 020a 	add.w	r2, r7, #10
 8000d8e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9a:	4964      	ldr	r1, [pc, #400]	; (8000f2c <WebServerProcess+0x1ac>)
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f002 f98b 	bl	80030b8 <WIFI_ReceiveData>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f040 80b8 	bne.w	8000f1a <WebServerProcess+0x19a>
  {
   LOG(("get %d byte from server\n",respLen));
 8000daa:	897b      	ldrh	r3, [r7, #10]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4860      	ldr	r0, [pc, #384]	; (8000f30 <WebServerProcess+0x1b0>)
 8000db0:	f01a ff04 	bl	801bbbc <iprintf>

   if( respLen > 0)
 8000db4:	897b      	ldrh	r3, [r7, #10]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 80b2 	beq.w	8000f20 <WebServerProcess+0x1a0>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8000dbc:	495d      	ldr	r1, [pc, #372]	; (8000f34 <WebServerProcess+0x1b4>)
 8000dbe:	485b      	ldr	r0, [pc, #364]	; (8000f2c <WebServerProcess+0x1ac>)
 8000dc0:	f01b f8cc 	bl	801bf5c <strstr>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d026      	beq.n	8000e18 <WebServerProcess+0x98>
      {
        humidity = (int) BSP_HSENSOR_ReadHumidity();
 8000dca:	f002 f9b7 	bl	800313c <BSP_HSENSOR_ReadHumidity>
 8000dce:	eef0 7a40 	vmov.f32	s15, s0
 8000dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000dda:	793b      	ldrb	r3, [r7, #4]
 8000ddc:	73bb      	strb	r3, [r7, #14]
        temp = (int) BSP_TSENSOR_ReadTemp();
 8000dde:	f002 fdd7 	bl	8003990 <BSP_TSENSOR_ReadTemp>
 8000de2:	eef0 7a40 	vmov.f32	s15, s0
 8000de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dea:	edc7 7a01 	vstr	s15, [r7, #4]
 8000dee:	793b      	ldrb	r3, [r7, #4]
 8000df0:	737b      	strb	r3, [r7, #13]
        if(SendWebPage(LedState, temp, humidity) != WIFI_STATUS_OK)
 8000df2:	4b51      	ldr	r3, [pc, #324]	; (8000f38 <WebServerProcess+0x1b8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	7bba      	ldrb	r2, [r7, #14]
 8000dfa:	7b79      	ldrb	r1, [r7, #13]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f8b5 	bl	8000f6c <SendWebPage>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <WebServerProcess+0x90>
        {
          LOG(("> ERROR : Cannot send web page\n"));
 8000e08:	484c      	ldr	r0, [pc, #304]	; (8000f3c <WebServerProcess+0x1bc>)
 8000e0a:	f01a ff5f 	bl	801bccc <puts>
 8000e0e:	e087      	b.n	8000f20 <WebServerProcess+0x1a0>
        }
        else
        {
          LOG(("Send page after  GET command\n"));
 8000e10:	484b      	ldr	r0, [pc, #300]	; (8000f40 <WebServerProcess+0x1c0>)
 8000e12:	f01a ff5b 	bl	801bccc <puts>
 8000e16:	e083      	b.n	8000f20 <WebServerProcess+0x1a0>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 8000e18:	494a      	ldr	r1, [pc, #296]	; (8000f44 <WebServerProcess+0x1c4>)
 8000e1a:	4844      	ldr	r0, [pc, #272]	; (8000f2c <WebServerProcess+0x1ac>)
 8000e1c:	f01b f89e 	bl	801bf5c <strstr>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d07c      	beq.n	8000f20 <WebServerProcess+0x1a0>
       {
         LOG(("Post request\n"));
 8000e26:	4848      	ldr	r0, [pc, #288]	; (8000f48 <WebServerProcess+0x1c8>)
 8000e28:	f01a ff50 	bl	801bccc <puts>

         if(strstr((char *)resp, "radio"))
 8000e2c:	4947      	ldr	r1, [pc, #284]	; (8000f4c <WebServerProcess+0x1cc>)
 8000e2e:	483f      	ldr	r0, [pc, #252]	; (8000f2c <WebServerProcess+0x1ac>)
 8000e30:	f01b f894 	bl	801bf5c <strstr>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d02e      	beq.n	8000e98 <WebServerProcess+0x118>
         {
           if(strstr((char *)resp, "radio=0"))
 8000e3a:	4945      	ldr	r1, [pc, #276]	; (8000f50 <WebServerProcess+0x1d0>)
 8000e3c:	483b      	ldr	r0, [pc, #236]	; (8000f2c <WebServerProcess+0x1ac>)
 8000e3e:	f01b f88d 	bl	801bf5c <strstr>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <WebServerProcess+0xd6>
           {
             LedState = 0;
 8000e48:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <WebServerProcess+0x1b8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
             BSP_LED_Off(LED2);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f002 fb5a 	bl	8003508 <BSP_LED_Off>
 8000e54:	e00c      	b.n	8000e70 <WebServerProcess+0xf0>
           }
           else if(strstr((char *)resp, "radio=1"))
 8000e56:	493f      	ldr	r1, [pc, #252]	; (8000f54 <WebServerProcess+0x1d4>)
 8000e58:	4834      	ldr	r0, [pc, #208]	; (8000f2c <WebServerProcess+0x1ac>)
 8000e5a:	f01b f87f 	bl	801bf5c <strstr>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d005      	beq.n	8000e70 <WebServerProcess+0xf0>
           {
             LedState = 1;
 8000e64:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <WebServerProcess+0x1b8>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
             BSP_LED_On(LED2);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f002 fb36 	bl	80034dc <BSP_LED_On>
           }
           humidity = (int) BSP_HSENSOR_ReadHumidity();
 8000e70:	f002 f964 	bl	800313c <BSP_HSENSOR_ReadHumidity>
 8000e74:	eef0 7a40 	vmov.f32	s15, s0
 8000e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e80:	793b      	ldrb	r3, [r7, #4]
 8000e82:	73bb      	strb	r3, [r7, #14]
           temp = (int) BSP_TSENSOR_ReadTemp();
 8000e84:	f002 fd84 	bl	8003990 <BSP_TSENSOR_ReadTemp>
 8000e88:	eef0 7a40 	vmov.f32	s15, s0
 8000e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e90:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e94:	793b      	ldrb	r3, [r7, #4]
 8000e96:	737b      	strb	r3, [r7, #13]
         }
         if(strstr((char *)resp, "stop_server"))
 8000e98:	492f      	ldr	r1, [pc, #188]	; (8000f58 <WebServerProcess+0x1d8>)
 8000e9a:	4824      	ldr	r0, [pc, #144]	; (8000f2c <WebServerProcess+0x1ac>)
 8000e9c:	f01b f85e 	bl	801bf5c <strstr>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d012      	beq.n	8000ecc <WebServerProcess+0x14c>
         {
           if(strstr((char *)resp, "stop_server=0"))
 8000ea6:	492d      	ldr	r1, [pc, #180]	; (8000f5c <WebServerProcess+0x1dc>)
 8000ea8:	4820      	ldr	r0, [pc, #128]	; (8000f2c <WebServerProcess+0x1ac>)
 8000eaa:	f01b f857 	bl	801bf5c <strstr>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <WebServerProcess+0x13a>
           {
             stopserver = false;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e008      	b.n	8000ecc <WebServerProcess+0x14c>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 8000eba:	4929      	ldr	r1, [pc, #164]	; (8000f60 <WebServerProcess+0x1e0>)
 8000ebc:	481b      	ldr	r0, [pc, #108]	; (8000f2c <WebServerProcess+0x1ac>)
 8000ebe:	f01b f84d 	bl	801bf5c <strstr>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <WebServerProcess+0x14c>
           {
             stopserver = true;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
           }
         }
         humidity = (int) BSP_HSENSOR_ReadHumidity();
 8000ecc:	f002 f936 	bl	800313c <BSP_HSENSOR_ReadHumidity>
 8000ed0:	eef0 7a40 	vmov.f32	s15, s0
 8000ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000edc:	793b      	ldrb	r3, [r7, #4]
 8000ede:	73bb      	strb	r3, [r7, #14]
         temp = (int) BSP_TSENSOR_ReadTemp();
 8000ee0:	f002 fd56 	bl	8003990 <BSP_TSENSOR_ReadTemp>
 8000ee4:	eef0 7a40 	vmov.f32	s15, s0
 8000ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eec:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ef0:	793b      	ldrb	r3, [r7, #4]
 8000ef2:	737b      	strb	r3, [r7, #13]
         if(SendWebPage(LedState, temp, humidity) != WIFI_STATUS_OK)
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <WebServerProcess+0x1b8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	7bba      	ldrb	r2, [r7, #14]
 8000efc:	7b79      	ldrb	r1, [r7, #13]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f834 	bl	8000f6c <SendWebPage>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <WebServerProcess+0x192>
         {
           LOG(("> ERROR : Cannot send web page\n"));
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <WebServerProcess+0x1bc>)
 8000f0c:	f01a fede 	bl	801bccc <puts>
 8000f10:	e006      	b.n	8000f20 <WebServerProcess+0x1a0>
         }
         else
         {
           LOG(("Send Page after POST command\n"));
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <WebServerProcess+0x1e4>)
 8000f14:	f01a feda 	bl	801bccc <puts>
 8000f18:	e002      	b.n	8000f20 <WebServerProcess+0x1a0>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n"));
 8000f1a:	4813      	ldr	r0, [pc, #76]	; (8000f68 <WebServerProcess+0x1e8>)
 8000f1c:	f01a fed6 	bl	801bccc <puts>
  }
  return stopserver;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]

 }
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000730 	.word	0x20000730
 8000f30:	0801d668 	.word	0x0801d668
 8000f34:	0801d684 	.word	0x0801d684
 8000f38:	2000072c 	.word	0x2000072c
 8000f3c:	0801d688 	.word	0x0801d688
 8000f40:	0801d6a8 	.word	0x0801d6a8
 8000f44:	0801d6c8 	.word	0x0801d6c8
 8000f48:	0801d6d0 	.word	0x0801d6d0
 8000f4c:	0801d6e0 	.word	0x0801d6e0
 8000f50:	0801d6e8 	.word	0x0801d6e8
 8000f54:	0801d6f0 	.word	0x0801d6f0
 8000f58:	0801d6f8 	.word	0x0801d6f8
 8000f5c:	0801d704 	.word	0x0801d704
 8000f60:	0801d714 	.word	0x0801d714
 8000f64:	0801d724 	.word	0x0801d724
 8000f68:	0801d744 	.word	0x0801d744

08000f6c <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature,  uint8_t humidity_value)
{
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	b0a1      	sub	sp, #132	; 0x84
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	460b      	mov	r3, r1
 8000f78:	71bb      	strb	r3, [r7, #6]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	717b      	strb	r3, [r7, #5]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8000f7e:	4ac8      	ldr	r2, [pc, #800]	; (80012a0 <SendWebPage+0x334>)
 8000f80:	4bc8      	ldr	r3, [pc, #800]	; (80012a4 <SendWebPage+0x338>)
 8000f82:	4614      	mov	r4, r2
 8000f84:	461d      	mov	r5, r3
 8000f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f96:	c407      	stmia	r4!, {r0, r1, r2}
 8000f98:	8023      	strh	r3, [r4, #0]
 8000f9a:	3402      	adds	r4, #2
 8000f9c:	0c1b      	lsrs	r3, r3, #16
 8000f9e:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 8000fa0:	48bf      	ldr	r0, [pc, #764]	; (80012a0 <SendWebPage+0x334>)
 8000fa2:	f7ff f92d 	bl	8000200 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4bbd      	ldr	r3, [pc, #756]	; (80012a0 <SendWebPage+0x334>)
 8000fac:	4413      	add	r3, r2
 8000fae:	4abe      	ldr	r2, [pc, #760]	; (80012a8 <SendWebPage+0x33c>)
 8000fb0:	461d      	mov	r5, r3
 8000fb2:	4614      	mov	r4, r2
 8000fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb6:	6028      	str	r0, [r5, #0]
 8000fb8:	6069      	str	r1, [r5, #4]
 8000fba:	60aa      	str	r2, [r5, #8]
 8000fbc:	60eb      	str	r3, [r5, #12]
 8000fbe:	7823      	ldrb	r3, [r4, #0]
 8000fc0:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 8000fc2:	48b7      	ldr	r0, [pc, #732]	; (80012a0 <SendWebPage+0x334>)
 8000fc4:	f7ff f91c 	bl	8000200 <strlen>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4bb4      	ldr	r3, [pc, #720]	; (80012a0 <SendWebPage+0x334>)
 8000fce:	4413      	add	r3, r2
 8000fd0:	4ab6      	ldr	r2, [pc, #728]	; (80012ac <SendWebPage+0x340>)
 8000fd2:	4614      	mov	r4, r2
 8000fd4:	469c      	mov	ip, r3
 8000fd6:	f104 0e20 	add.w	lr, r4, #32
 8000fda:	4665      	mov	r5, ip
 8000fdc:	4626      	mov	r6, r4
 8000fde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fe0:	6028      	str	r0, [r5, #0]
 8000fe2:	6069      	str	r1, [r5, #4]
 8000fe4:	60aa      	str	r2, [r5, #8]
 8000fe6:	60eb      	str	r3, [r5, #12]
 8000fe8:	3410      	adds	r4, #16
 8000fea:	f10c 0c10 	add.w	ip, ip, #16
 8000fee:	4574      	cmp	r4, lr
 8000ff0:	d1f3      	bne.n	8000fda <SendWebPage+0x6e>
 8000ff2:	4662      	mov	r2, ip
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>STM32L4S Discovery kit IoT node : Web server using WiFi with STM32</h2>\r\n");
 8000ffa:	48a9      	ldr	r0, [pc, #676]	; (80012a0 <SendWebPage+0x334>)
 8000ffc:	f7ff f900 	bl	8000200 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4ba6      	ldr	r3, [pc, #664]	; (80012a0 <SendWebPage+0x334>)
 8001006:	4413      	add	r3, r2
 8001008:	4aa9      	ldr	r2, [pc, #676]	; (80012b0 <SendWebPage+0x344>)
 800100a:	4618      	mov	r0, r3
 800100c:	4611      	mov	r1, r2
 800100e:	234e      	movs	r3, #78	; 0x4e
 8001010:	461a      	mov	r2, r3
 8001012:	f01a fcfe 	bl	801ba12 <memcpy>
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 8001016:	48a2      	ldr	r0, [pc, #648]	; (80012a0 <SendWebPage+0x334>)
 8001018:	f7ff f8f2 	bl	8000200 <strlen>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4b9f      	ldr	r3, [pc, #636]	; (80012a0 <SendWebPage+0x334>)
 8001022:	4413      	add	r3, r2
 8001024:	4aa3      	ldr	r2, [pc, #652]	; (80012b4 <SendWebPage+0x348>)
 8001026:	461c      	mov	r4, r3
 8001028:	4613      	mov	r3, r2
 800102a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800102c:	6020      	str	r0, [r4, #0]
 800102e:	6061      	str	r1, [r4, #4]
 8001030:	60a2      	str	r2, [r4, #8]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8001036:	489a      	ldr	r0, [pc, #616]	; (80012a0 <SendWebPage+0x334>)
 8001038:	f7ff f8e2 	bl	8000200 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	4b97      	ldr	r3, [pc, #604]	; (80012a0 <SendWebPage+0x334>)
 8001042:	4413      	add	r3, r2
 8001044:	4a9c      	ldr	r2, [pc, #624]	; (80012b8 <SendWebPage+0x34c>)
 8001046:	4614      	mov	r4, r2
 8001048:	469c      	mov	ip, r3
 800104a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800104e:	4665      	mov	r5, ip
 8001050:	4626      	mov	r6, r4
 8001052:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001054:	6028      	str	r0, [r5, #0]
 8001056:	6069      	str	r1, [r5, #4]
 8001058:	60aa      	str	r2, [r5, #8]
 800105a:	60eb      	str	r3, [r5, #12]
 800105c:	3410      	adds	r4, #16
 800105e:	f10c 0c10 	add.w	ip, ip, #16
 8001062:	4574      	cmp	r4, lr
 8001064:	d1f3      	bne.n	800104e <SendWebPage+0xe2>
  sprintf((char *)temp, "%d", temperature);
 8001066:	79ba      	ldrb	r2, [r7, #6]
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4993      	ldr	r1, [pc, #588]	; (80012bc <SendWebPage+0x350>)
 800106e:	4618      	mov	r0, r3
 8001070:	f01a ff1e 	bl	801beb0 <siprintf>
  strcat((char *)http, (char *)temp);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	4889      	ldr	r0, [pc, #548]	; (80012a0 <SendWebPage+0x334>)
 800107c:	f01a ff38 	bl	801bef0 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 8001080:	4887      	ldr	r0, [pc, #540]	; (80012a0 <SendWebPage+0x334>)
 8001082:	f7ff f8bd 	bl	8000200 <strlen>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b85      	ldr	r3, [pc, #532]	; (80012a0 <SendWebPage+0x334>)
 800108c:	4413      	add	r3, r2
 800108e:	4a8c      	ldr	r2, [pc, #560]	; (80012c0 <SendWebPage+0x354>)
 8001090:	461d      	mov	r5, r3
 8001092:	4614      	mov	r4, r2
 8001094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001096:	6028      	str	r0, [r5, #0]
 8001098:	6069      	str	r1, [r5, #4]
 800109a:	60aa      	str	r2, [r5, #8]
 800109c:	60eb      	str	r3, [r5, #12]
 800109e:	7823      	ldrb	r3, [r4, #0]
 80010a0:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Humidity: <input type=\"text\" value=\"");
 80010a2:	487f      	ldr	r0, [pc, #508]	; (80012a0 <SendWebPage+0x334>)
 80010a4:	f7ff f8ac 	bl	8000200 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b7c      	ldr	r3, [pc, #496]	; (80012a0 <SendWebPage+0x334>)
 80010ae:	4413      	add	r3, r2
 80010b0:	4a84      	ldr	r2, [pc, #528]	; (80012c4 <SendWebPage+0x358>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	4611      	mov	r1, r2
 80010b6:	2344      	movs	r3, #68	; 0x44
 80010b8:	461a      	mov	r2, r3
 80010ba:	f01a fcaa 	bl	801ba12 <memcpy>
  sprintf((char *)humidity, "%d", humidity_value);
 80010be:	797a      	ldrb	r2, [r7, #5]
 80010c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010c4:	497d      	ldr	r1, [pc, #500]	; (80012bc <SendWebPage+0x350>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f01a fef2 	bl	801beb0 <siprintf>
  strcat((char *)http, (char *)humidity);
 80010cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010d0:	4619      	mov	r1, r3
 80010d2:	4873      	ldr	r0, [pc, #460]	; (80012a0 <SendWebPage+0x334>)
 80010d4:	f01a ff0c 	bl	801bef0 <strcat>
  strcat((char *)http, (char *)"\"> %");
 80010d8:	4871      	ldr	r0, [pc, #452]	; (80012a0 <SendWebPage+0x334>)
 80010da:	f7ff f891 	bl	8000200 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <SendWebPage+0x334>)
 80010e4:	4413      	add	r3, r2
 80010e6:	4a78      	ldr	r2, [pc, #480]	; (80012c8 <SendWebPage+0x35c>)
 80010e8:	6810      	ldr	r0, [r2, #0]
 80010ea:	6018      	str	r0, [r3, #0]
 80010ec:	7912      	ldrb	r2, [r2, #4]
 80010ee:	711a      	strb	r2, [r3, #4]

  if (ledIsOn)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d040      	beq.n	8001178 <SendWebPage+0x20c>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 80010f6:	486a      	ldr	r0, [pc, #424]	; (80012a0 <SendWebPage+0x334>)
 80010f8:	f7ff f882 	bl	8000200 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <SendWebPage+0x334>)
 8001102:	4413      	add	r3, r2
 8001104:	4a71      	ldr	r2, [pc, #452]	; (80012cc <SendWebPage+0x360>)
 8001106:	4614      	mov	r4, r2
 8001108:	469c      	mov	ip, r3
 800110a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800110e:	4665      	mov	r5, ip
 8001110:	4626      	mov	r6, r4
 8001112:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001114:	6028      	str	r0, [r5, #0]
 8001116:	6069      	str	r1, [r5, #4]
 8001118:	60aa      	str	r2, [r5, #8]
 800111a:	60eb      	str	r3, [r5, #12]
 800111c:	3410      	adds	r4, #16
 800111e:	f10c 0c10 	add.w	ip, ip, #16
 8001122:	4574      	cmp	r4, lr
 8001124:	d1f3      	bne.n	800110e <SendWebPage+0x1a2>
 8001126:	4663      	mov	r3, ip
 8001128:	4622      	mov	r2, r4
 800112a:	6810      	ldr	r0, [r2, #0]
 800112c:	6018      	str	r0, [r3, #0]
 800112e:	8891      	ldrh	r1, [r2, #4]
 8001130:	7992      	ldrb	r2, [r2, #6]
 8001132:	8099      	strh	r1, [r3, #4]
 8001134:	719a      	strb	r2, [r3, #6]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8001136:	485a      	ldr	r0, [pc, #360]	; (80012a0 <SendWebPage+0x334>)
 8001138:	f7ff f862 	bl	8000200 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <SendWebPage+0x334>)
 8001142:	4413      	add	r3, r2
 8001144:	4a62      	ldr	r2, [pc, #392]	; (80012d0 <SendWebPage+0x364>)
 8001146:	4614      	mov	r4, r2
 8001148:	469c      	mov	ip, r3
 800114a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800114e:	4665      	mov	r5, ip
 8001150:	4626      	mov	r6, r4
 8001152:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001154:	6028      	str	r0, [r5, #0]
 8001156:	6069      	str	r1, [r5, #4]
 8001158:	60aa      	str	r2, [r5, #8]
 800115a:	60eb      	str	r3, [r5, #12]
 800115c:	3410      	adds	r4, #16
 800115e:	f10c 0c10 	add.w	ip, ip, #16
 8001162:	4574      	cmp	r4, lr
 8001164:	d1f3      	bne.n	800114e <SendWebPage+0x1e2>
 8001166:	4665      	mov	r5, ip
 8001168:	4623      	mov	r3, r4
 800116a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800116c:	6028      	str	r0, [r5, #0]
 800116e:	6069      	str	r1, [r5, #4]
 8001170:	60aa      	str	r2, [r5, #8]
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	81ab      	strh	r3, [r5, #12]
 8001176:	e03f      	b.n	80011f8 <SendWebPage+0x28c>
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8001178:	4849      	ldr	r0, [pc, #292]	; (80012a0 <SendWebPage+0x334>)
 800117a:	f7ff f841 	bl	8000200 <strlen>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <SendWebPage+0x334>)
 8001184:	4413      	add	r3, r2
 8001186:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <SendWebPage+0x368>)
 8001188:	4614      	mov	r4, r2
 800118a:	469c      	mov	ip, r3
 800118c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001190:	4665      	mov	r5, ip
 8001192:	4626      	mov	r6, r4
 8001194:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001196:	6028      	str	r0, [r5, #0]
 8001198:	6069      	str	r1, [r5, #4]
 800119a:	60aa      	str	r2, [r5, #8]
 800119c:	60eb      	str	r3, [r5, #12]
 800119e:	3410      	adds	r4, #16
 80011a0:	f10c 0c10 	add.w	ip, ip, #16
 80011a4:	4574      	cmp	r4, lr
 80011a6:	d1f3      	bne.n	8001190 <SendWebPage+0x224>
 80011a8:	4665      	mov	r5, ip
 80011aa:	4623      	mov	r3, r4
 80011ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011ae:	6028      	str	r0, [r5, #0]
 80011b0:	6069      	str	r1, [r5, #4]
 80011b2:	60aa      	str	r2, [r5, #8]
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	81ab      	strh	r3, [r5, #12]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 80011b8:	4839      	ldr	r0, [pc, #228]	; (80012a0 <SendWebPage+0x334>)
 80011ba:	f7ff f821 	bl	8000200 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <SendWebPage+0x334>)
 80011c4:	4413      	add	r3, r2
 80011c6:	4a44      	ldr	r2, [pc, #272]	; (80012d8 <SendWebPage+0x36c>)
 80011c8:	4614      	mov	r4, r2
 80011ca:	469c      	mov	ip, r3
 80011cc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011d0:	4665      	mov	r5, ip
 80011d2:	4626      	mov	r6, r4
 80011d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011d6:	6028      	str	r0, [r5, #0]
 80011d8:	6069      	str	r1, [r5, #4]
 80011da:	60aa      	str	r2, [r5, #8]
 80011dc:	60eb      	str	r3, [r5, #12]
 80011de:	3410      	adds	r4, #16
 80011e0:	f10c 0c10 	add.w	ip, ip, #16
 80011e4:	4574      	cmp	r4, lr
 80011e6:	d1f3      	bne.n	80011d0 <SendWebPage+0x264>
 80011e8:	4663      	mov	r3, ip
 80011ea:	4622      	mov	r2, r4
 80011ec:	6810      	ldr	r0, [r2, #0]
 80011ee:	6018      	str	r0, [r3, #0]
 80011f0:	8891      	ldrh	r1, [r2, #4]
 80011f2:	7992      	ldrb	r2, [r2, #6]
 80011f4:	8099      	strh	r1, [r3, #4]
 80011f6:	719a      	strb	r2, [r3, #6]
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 80011f8:	4829      	ldr	r0, [pc, #164]	; (80012a0 <SendWebPage+0x334>)
 80011fa:	f7ff f801 	bl	8000200 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <SendWebPage+0x334>)
 8001204:	4413      	add	r3, r2
 8001206:	4a35      	ldr	r2, [pc, #212]	; (80012dc <SendWebPage+0x370>)
 8001208:	4614      	mov	r4, r2
 800120a:	469c      	mov	ip, r3
 800120c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001210:	4665      	mov	r5, ip
 8001212:	4626      	mov	r6, r4
 8001214:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001216:	6028      	str	r0, [r5, #0]
 8001218:	6069      	str	r1, [r5, #4]
 800121a:	60aa      	str	r2, [r5, #8]
 800121c:	60eb      	str	r3, [r5, #12]
 800121e:	3410      	adds	r4, #16
 8001220:	f10c 0c10 	add.w	ip, ip, #16
 8001224:	4574      	cmp	r4, lr
 8001226:	d1f3      	bne.n	8001210 <SendWebPage+0x2a4>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8001228:	481d      	ldr	r0, [pc, #116]	; (80012a0 <SendWebPage+0x334>)
 800122a:	f7fe ffe9 	bl	8000200 <strlen>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <SendWebPage+0x334>)
 8001234:	4413      	add	r3, r2
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <SendWebPage+0x374>)
 8001238:	461d      	mov	r5, r3
 800123a:	4614      	mov	r4, r2
 800123c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123e:	6028      	str	r0, [r5, #0]
 8001240:	6069      	str	r1, [r5, #4]
 8001242:	60aa      	str	r2, [r5, #8]
 8001244:	60eb      	str	r3, [r5, #12]
 8001246:	8823      	ldrh	r3, [r4, #0]
 8001248:	78a2      	ldrb	r2, [r4, #2]
 800124a:	822b      	strh	r3, [r5, #16]
 800124c:	4613      	mov	r3, r2
 800124e:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8001250:	4813      	ldr	r0, [pc, #76]	; (80012a0 <SendWebPage+0x334>)
 8001252:	f7fe ffd5 	bl	8000200 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f107 010e 	add.w	r1, r7, #14
 800125e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	460b      	mov	r3, r1
 8001266:	490e      	ldr	r1, [pc, #56]	; (80012a0 <SendWebPage+0x334>)
 8001268:	2000      	movs	r0, #0
 800126a:	f001 ff03 	bl	8003074 <WIFI_SendData>
 800126e:	4603      	mov	r3, r0
 8001270:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8001274:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10a      	bne.n	8001292 <SendWebPage+0x326>
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	461c      	mov	r4, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <SendWebPage+0x334>)
 8001282:	f7fe ffbd 	bl	8000200 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	429c      	cmp	r4, r3
 800128a:	d002      	beq.n	8001292 <SendWebPage+0x326>
  {
    ret = WIFI_STATUS_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  }

  return ret;
 8001292:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001296:	4618      	mov	r0, r3
 8001298:	377c      	adds	r7, #124	; 0x7c
 800129a:	46bd      	mov	sp, r7
 800129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000328 	.word	0x20000328
 80012a4:	0801d75c 	.word	0x0801d75c
 80012a8:	0801d79c 	.word	0x0801d79c
 80012ac:	0801d7b0 	.word	0x0801d7b0
 80012b0:	0801d7d4 	.word	0x0801d7d4
 80012b4:	0801d824 	.word	0x0801d824
 80012b8:	0801d834 	.word	0x0801d834
 80012bc:	0801d874 	.word	0x0801d874
 80012c0:	0801d878 	.word	0x0801d878
 80012c4:	0801d88c 	.word	0x0801d88c
 80012c8:	0801d8d0 	.word	0x0801d8d0
 80012cc:	0801d8d8 	.word	0x0801d8d8
 80012d0:	0801d910 	.word	0x0801d910
 80012d4:	0801d950 	.word	0x0801d950
 80012d8:	0801d990 	.word	0x0801d990
 80012dc:	0801d9c8 	.word	0x0801d9c8
 80012e0:	0801d9f8 	.word	0x0801d9f8

080012e4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b096      	sub	sp, #88	; 0x58
 80012e8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012ea:	2310      	movs	r3, #16
 80012ec:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012f2:	2360      	movs	r3, #96	; 0x60
 80012f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012fe:	2301      	movs	r3, #1
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001306:	2328      	movs	r3, #40	; 0x28
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130a:	2302      	movs	r3, #2
 800130c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 800130e:	2307      	movs	r3, #7
 8001310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001312:	2304      	movs	r3, #4
 8001314:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4618      	mov	r0, r3
 800131a:	f003 ff73 	bl	8005204 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d000      	beq.n	8001326 <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 8001324:	e7fe      	b.n	8001324 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001326:	230f      	movs	r3, #15
 8001328:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132a:	2303      	movs	r3, #3
 800132c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800133a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800133e:	2104      	movs	r1, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f004 fb85 	bl	8005a50 <HAL_RCC_ClockConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d000      	beq.n	800134e <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 800134c:	e7fe      	b.n	800134c <SystemClock_Config+0x68>
  }
}
 800134e:	bf00      	nop
 8001350:	3758      	adds	r7, #88	; 0x58
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <Button_Reset>:
/**
  * @brief Reset button state
  *        To be called before Button_WaitForPush()
  */
void Button_Reset()
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  button_flag = 0;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <Button_Reset+0x14>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	2000024c 	.word	0x2000024c

08001370 <Button_WaitForPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForPush(uint32_t delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t time_out = HAL_GetTick() + delay;
 8001378:	f002 fb88 	bl	8003a8c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

  do
  {
    if (button_flag > 0)
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <Button_WaitForPush+0x44>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <Button_WaitForPush+0x26>
    {
      return button_flag;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <Button_WaitForPush+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	e009      	b.n	80013aa <Button_WaitForPush+0x3a>
    }
    HAL_Delay(100);
 8001396:	2064      	movs	r0, #100	; 0x64
 8001398:	f002 fb84 	bl	8003aa4 <HAL_Delay>
  }
  while (HAL_GetTick() < time_out);
 800139c:	f002 fb76 	bl	8003a8c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d8ed      	bhi.n	8001384 <Button_WaitForPush+0x14>

  return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000024c 	.word	0x2000024c

080013b8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80013c0:	1d39      	adds	r1, r7, #4
 80013c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c6:	2201      	movs	r2, #1
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <__io_putchar+0x20>)
 80013ca:	f006 fcb8 	bl	8007d3e <HAL_UART_Transmit>

  return ch;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200014d8 	.word	0x200014d8

080013dc <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 80013e6:	bf00      	nop
 80013e8:	1df9      	adds	r1, r7, #7
 80013ea:	f247 5330 	movw	r3, #30000	; 0x7530
 80013ee:	2201      	movs	r2, #1
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <__io_getchar+0x2c>)
 80013f2:	f006 fd3b 	bl	8007e6c <HAL_UART_Receive>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f5      	bne.n	80013e8 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200014d8 	.word	0x200014d8

0800140c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d006      	beq.n	800142a <HAL_GPIO_EXTI_Callback+0x1e>
 800141c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001420:	d000      	beq.n	8001424 <HAL_GPIO_EXTI_Callback+0x18>
      SPI_WIFI_ISR();
      break;
    }
    default:
    {
      break;
 8001422:	e005      	b.n	8001430 <HAL_GPIO_EXTI_Callback+0x24>
      Button_ISR();
 8001424:	f000 f812 	bl	800144c <Button_ISR>
      break;
 8001428:	e002      	b.n	8001430 <HAL_GPIO_EXTI_Callback+0x24>
      SPI_WIFI_ISR();
 800142a:	f001 fcf3 	bl	8002e14 <SPI_WIFI_ISR>
      break;
 800142e:	bf00      	nop
    }
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <SPI3_IRQHandler+0x10>)
 800143e:	f005 fdbd 	bl	8006fbc <HAL_SPI_IRQHandler>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000b74 	.word	0x20000b74

0800144c <Button_ISR>:

/**
  * @brief Update button ISR status
  */
static void Button_ISR(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  button_flag++;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <Button_ISR+0x1c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	3301      	adds	r3, #1
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <Button_ISR+0x1c>)
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	2000024c 	.word	0x2000024c

0800146c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80014c0:	f002 fad0 	bl	8003a64 <HAL_IncTick>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80014cc:	2002      	movs	r0, #2
 80014ce:	f003 f8f9 	bl	80046c4 <HAL_GPIO_EXTI_IRQHandler>
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80014da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014de:	f003 f8f1 	bl	80046c4 <HAL_GPIO_EXTI_IRQHandler>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
	/* The I/O library uses an internal buffer */
		/* It asks for 1024 characters even if only getc() is used. */
		/* If we use a for(;;) loop on the number of characters requested, */
		/* the user is forced to enter the exact number requested, even if only one is needed. */
		/* So here we return only 1 character even if requested length is > 1 */
		*ptr = __io_getchar();
 80014f2:	f7ff ff73 	bl	80013dc <__io_getchar>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	701a      	strb	r2, [r3, #0]

		return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e009      	b.n	800152e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	60ba      	str	r2, [r7, #8]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff48 	bl	80013b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	dbf1      	blt.n	800151a <_write+0x12>
	}
	return len;
 8001536:	687b      	ldr	r3, [r7, #4]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_close>:

int _close(int file)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	return -1;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001568:	605a      	str	r2, [r3, #4]
	return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_isatty>:

int _isatty(int file)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	return 1;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
	return 0;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <_sbrk+0x50>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x16>
		heap_end = &end;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <_sbrk+0x50>)
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <_sbrk+0x54>)
 80015bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <_sbrk+0x50>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <_sbrk+0x50>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	466a      	mov	r2, sp
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d907      	bls.n	80015e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015d2:	f01a f959 	bl	801b888 <__errno>
 80015d6:	4602      	mov	r2, r0
 80015d8:	230c      	movs	r3, #12
 80015da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
 80015e0:	e006      	b.n	80015f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <_sbrk+0x50>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <_sbrk+0x50>)
 80015ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000b30 	.word	0x20000b30
 80015fc:	200015b8 	.word	0x200015b8

08001600 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <SystemInit+0x64>)
 8001606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <SystemInit+0x64>)
 800160c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <SystemInit+0x68>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <SystemInit+0x68>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <SystemInit+0x68>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <SystemInit+0x68>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <SystemInit+0x68>)
 800162c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001630:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001634:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <SystemInit+0x68>)
 8001638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800163c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <SystemInit+0x68>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <SystemInit+0x68>)
 8001644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <SystemInit+0x68>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SystemInit+0x64>)
 8001652:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001656:	609a      	str	r2, [r3, #8]
#endif
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	40021000 	.word	0x40021000

0800166c <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b2f      	cmp	r3, #47	; 0x2f
 800167a:	d906      	bls.n	800168a <Hex2Num+0x1e>
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2b39      	cmp	r3, #57	; 0x39
 8001680:	d803      	bhi.n	800168a <Hex2Num+0x1e>
        return a - '0';
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	3b30      	subs	r3, #48	; 0x30
 8001686:	b2db      	uxtb	r3, r3
 8001688:	e014      	b.n	80016b4 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b60      	cmp	r3, #96	; 0x60
 800168e:	d906      	bls.n	800169e <Hex2Num+0x32>
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b66      	cmp	r3, #102	; 0x66
 8001694:	d803      	bhi.n	800169e <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	3b57      	subs	r3, #87	; 0x57
 800169a:	b2db      	uxtb	r3, r3
 800169c:	e00a      	b.n	80016b4 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b40      	cmp	r3, #64	; 0x40
 80016a2:	d906      	bls.n	80016b2 <Hex2Num+0x46>
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b46      	cmp	r3, #70	; 0x46
 80016a8:	d803      	bhi.n	80016b2 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	3b37      	subs	r3, #55	; 0x37
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	e000      	b.n	80016b4 <Hex2Num+0x48>
    }

    return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80016d2:	e012      	b.n	80016fa <ParseHexNumber+0x3a>
        sum <<= 4;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ffc4 	bl	800166c <Hex2Num>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
        ptr++;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3301      	adds	r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
        i++;
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	3301      	adds	r3, #1
 80016f8:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b2f      	cmp	r3, #47	; 0x2f
 8001700:	d903      	bls.n	800170a <ParseHexNumber+0x4a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b39      	cmp	r3, #57	; 0x39
 8001708:	d9e4      	bls.n	80016d4 <ParseHexNumber+0x14>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b60      	cmp	r3, #96	; 0x60
 8001710:	d903      	bls.n	800171a <ParseHexNumber+0x5a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b66      	cmp	r3, #102	; 0x66
 8001718:	d9dc      	bls.n	80016d4 <ParseHexNumber+0x14>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b40      	cmp	r3, #64	; 0x40
 8001720:	d903      	bls.n	800172a <ParseHexNumber+0x6a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b46      	cmp	r3, #70	; 0x46
 8001728:	d9d4      	bls.n	80016d4 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <ParseHexNumber+0x76>
        *cnt = i;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	7afa      	ldrb	r2, [r7, #11]
 8001734:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	2300      	movs	r3, #0
 8001750:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b2d      	cmp	r3, #45	; 0x2d
 800175c:	d119      	bne.n	8001792 <ParseNumber+0x52>
        minus = 1;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3301      	adds	r3, #1
 8001766:	607b      	str	r3, [r7, #4]
        i++;
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	3301      	adds	r3, #1
 800176c:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800176e:	e010      	b.n	8001792 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	461a      	mov	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3b30      	subs	r3, #48	; 0x30
 8001782:	4413      	add	r3, r2
 8001784:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
        i++;
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	3301      	adds	r3, #1
 8001790:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b2f      	cmp	r3, #47	; 0x2f
 8001798:	d903      	bls.n	80017a2 <ParseNumber+0x62>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b39      	cmp	r3, #57	; 0x39
 80017a0:	d9e6      	bls.n	8001770 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <ParseNumber+0x6e>
        *cnt = i;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	7bba      	ldrb	r2, [r7, #14]
 80017ac:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <ParseNumber+0x7a>
        return 0 - sum;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	425b      	negs	r3, r3
 80017b8:	e000      	b.n	80017bc <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80017ba:	68bb      	ldr	r3, [r7, #8]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80017d6:	e019      	b.n	800180c <ParseMAC+0x44>
    hexcnt = 1;
 80017d8:	2301      	movs	r3, #1
 80017da:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b3a      	cmp	r3, #58	; 0x3a
 80017e2:	d00e      	beq.n	8001802 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80017e4:	f107 030e 	add.w	r3, r7, #14
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff68 	bl	80016c0 <ParseHexNumber>
 80017f0:	4601      	mov	r1, r0
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	73fa      	strb	r2, [r7, #15]
 80017f8:	461a      	mov	r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e1      	bne.n	80017d8 <ParseMAC+0x10>
  }
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8001826:	2300      	movs	r3, #0
 8001828:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800182a:	e019      	b.n	8001860 <ParseIP+0x44>
    hexcnt = 1;
 800182c:	2301      	movs	r3, #1
 800182e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b2e      	cmp	r3, #46	; 0x2e
 8001836:	d00e      	beq.n	8001856 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8001838:	f107 030e 	add.w	r3, r7, #14
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff7e 	bl	8001740 <ParseNumber>
 8001844:	4601      	mov	r1, r0
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	73fa      	strb	r2, [r7, #15]
 800184c:	461a      	mov	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	4413      	add	r3, r2
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001856:	7bbb      	ldrb	r3, [r7, #14]
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e1      	bne.n	800182c <ParseIP+0x10>
  }
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	3302      	adds	r3, #2
 8001882:	4934      	ldr	r1, [pc, #208]	; (8001954 <AT_ParseInfo+0xe4>)
 8001884:	4618      	mov	r0, r3
 8001886:	f01a fb83 	bl	801bf90 <strtok>
 800188a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800188c:	e05a      	b.n	8001944 <AT_ParseInfo+0xd4>
    switch (num++) {
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	72fa      	strb	r2, [r7, #11]
 8001894:	2b06      	cmp	r3, #6
 8001896:	d84f      	bhi.n	8001938 <AT_ParseInfo+0xc8>
 8001898:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <AT_ParseInfo+0x30>)
 800189a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189e:	bf00      	nop
 80018a0:	080018bd 	.word	0x080018bd
 80018a4:	080018cb 	.word	0x080018cb
 80018a8:	080018db 	.word	0x080018db
 80018ac:	080018eb 	.word	0x080018eb
 80018b0:	080018fb 	.word	0x080018fb
 80018b4:	0800190b 	.word	0x0800190b
 80018b8:	0800191f 	.word	0x0800191f
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f01a fb35 	bl	801bf32 <strncpy>
      break;
 80018c8:	e037      	b.n	800193a <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3320      	adds	r3, #32
 80018ce:	2218      	movs	r2, #24
 80018d0:	68f9      	ldr	r1, [r7, #12]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f01a fb2d 	bl	801bf32 <strncpy>
      break;
 80018d8:	e02f      	b.n	800193a <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3338      	adds	r3, #56	; 0x38
 80018de:	2210      	movs	r2, #16
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f01a fb25 	bl	801bf32 <strncpy>
      break;
 80018e8:	e027      	b.n	800193a <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3348      	adds	r3, #72	; 0x48
 80018ee:	2210      	movs	r2, #16
 80018f0:	68f9      	ldr	r1, [r7, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f01a fb1d 	bl	801bf32 <strncpy>
      break;
 80018f8:	e01f      	b.n	800193a <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3358      	adds	r3, #88	; 0x58
 80018fe:	2210      	movs	r2, #16
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	4618      	mov	r0, r3
 8001904:	f01a fb15 	bl	801bf32 <strncpy>
      break;
 8001908:	e017      	b.n	800193a <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800190a:	2100      	movs	r1, #0
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff ff17 	bl	8001740 <ParseNumber>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 800191c:	e00d      	b.n	800193a <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <AT_ParseInfo+0xe8>)
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f01a fb35 	bl	801bf90 <strtok>
 8001926:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3368      	adds	r3, #104	; 0x68
 800192c:	2220      	movs	r2, #32
 800192e:	68f9      	ldr	r1, [r7, #12]
 8001930:	4618      	mov	r0, r3
 8001932:	f01a fafe 	bl	801bf32 <strncpy>
      break;
 8001936:	e000      	b.n	800193a <AT_ParseInfo+0xca>

    default: break;
 8001938:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800193a:	4906      	ldr	r1, [pc, #24]	; (8001954 <AT_ParseInfo+0xe4>)
 800193c:	2000      	movs	r0, #0
 800193e:	f01a fb27 	bl	801bf90 <strtok>
 8001942:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1a1      	bne.n	800188e <AT_ParseInfo+0x1e>
  }
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	0801da3c 	.word	0x0801da3c
 8001958:	0801da40 	.word	0x0801da40

0800195c <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3302      	adds	r3, #2
 800196e:	4952      	ldr	r1, [pc, #328]	; (8001ab8 <AT_ParseConnSettings+0x15c>)
 8001970:	4618      	mov	r0, r3
 8001972:	f01a fb0d 	bl	801bf90 <strtok>
 8001976:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001978:	e095      	b.n	8001aa6 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	73fa      	strb	r2, [r7, #15]
 8001980:	2b0b      	cmp	r3, #11
 8001982:	d87f      	bhi.n	8001a84 <AT_ParseConnSettings+0x128>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <AT_ParseConnSettings+0x30>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	080019bd 	.word	0x080019bd
 8001990:	080019cb 	.word	0x080019cb
 8001994:	080019db 	.word	0x080019db
 8001998:	080019ef 	.word	0x080019ef
 800199c:	08001a03 	.word	0x08001a03
 80019a0:	08001a17 	.word	0x08001a17
 80019a4:	08001a25 	.word	0x08001a25
 80019a8:	08001a33 	.word	0x08001a33
 80019ac:	08001a41 	.word	0x08001a41
 80019b0:	08001a4f 	.word	0x08001a4f
 80019b4:	08001a5d 	.word	0x08001a5d
 80019b8:	08001a71 	.word	0x08001a71
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2221      	movs	r2, #33	; 0x21
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f01a fab5 	bl	801bf32 <strncpy>
      break;
 80019c8:	e05d      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3321      	adds	r3, #33	; 0x21
 80019ce:	2221      	movs	r2, #33	; 0x21
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f01a faad 	bl	801bf32 <strncpy>
      break;
 80019d8:	e055      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80019da:	2100      	movs	r1, #0
 80019dc:	68b8      	ldr	r0, [r7, #8]
 80019de:	f7ff feaf 	bl	8001740 <ParseNumber>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80019ec:	e04b      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80019ee:	2100      	movs	r1, #0
 80019f0:	68b8      	ldr	r0, [r7, #8]
 80019f2:	f7ff fea5 	bl	8001740 <ParseNumber>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8001a00:	e041      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001a02:	2100      	movs	r1, #0
 8001a04:	68b8      	ldr	r0, [r7, #8]
 8001a06:	f7ff fe9b 	bl	8001740 <ParseNumber>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001a14:	e037      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3348      	adds	r3, #72	; 0x48
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	68b8      	ldr	r0, [r7, #8]
 8001a1e:	f7ff fefd 	bl	800181c <ParseIP>
      break;
 8001a22:	e030      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	334c      	adds	r3, #76	; 0x4c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	68b8      	ldr	r0, [r7, #8]
 8001a2c:	f7ff fef6 	bl	800181c <ParseIP>
      break;
 8001a30:	e029      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3350      	adds	r3, #80	; 0x50
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f7ff feef 	bl	800181c <ParseIP>
      break;
 8001a3e:	e022      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	3354      	adds	r3, #84	; 0x54
 8001a44:	4619      	mov	r1, r3
 8001a46:	68b8      	ldr	r0, [r7, #8]
 8001a48:	f7ff fee8 	bl	800181c <ParseIP>
      break;
 8001a4c:	e01b      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3358      	adds	r3, #88	; 0x58
 8001a52:	4619      	mov	r1, r3
 8001a54:	68b8      	ldr	r0, [r7, #8]
 8001a56:	f7ff fee1 	bl	800181c <ParseIP>
      break;
 8001a5a:	e014      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	68b8      	ldr	r0, [r7, #8]
 8001a60:	f7ff fe6e 	bl	8001740 <ParseNumber>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8001a6e:	e00a      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8001a70:	2100      	movs	r1, #0
 8001a72:	68b8      	ldr	r0, [r7, #8]
 8001a74:	f7ff fe64 	bl	8001740 <ParseNumber>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001a82:	e000      	b.n	8001a86 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001a84:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001a86:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <AT_ParseConnSettings+0x15c>)
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f01a fa81 	bl	801bf90 <strtok>
 8001a8e:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <AT_ParseConnSettings+0x14a>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b2c      	cmp	r3, #44	; 0x2c
 8001a9e:	d102      	bne.n	8001aa6 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f af66 	bne.w	800197a <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	0801da3c 	.word	0x0801da3c

08001abc <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b31      	cmp	r3, #49	; 0x31
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	701a      	strb	r2, [r3, #0]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001b02:	68b8      	ldr	r0, [r7, #8]
 8001b04:	f7fe fb7c 	bl	8000200 <strlen>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	b299      	uxth	r1, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001b12:	461a      	mov	r2, r3
 8001b14:	68b8      	ldr	r0, [r7, #8]
 8001b16:	47a0      	blx	r4
 8001b18:	4603      	mov	r3, r0
 8001b1a:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	dd3e      	ble.n	8001ba0 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001b2e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	4798      	blx	r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001b3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	dd27      	ble.n	8001b92 <AT_ExecuteCommand+0xaa>
 8001b42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b4a:	dc22      	bgt.n	8001b92 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001b4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b54:	d105      	bne.n	8001b62 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8001b56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001b62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 8001b6e:	490f      	ldr	r1, [pc, #60]	; (8001bac <AT_ExecuteCommand+0xc4>)
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f01a f9f3 	bl	801bf5c <strstr>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <AT_ExecuteCommand+0x98>
      {
        return ES_WIFI_STATUS_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e010      	b.n	8001ba2 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001b80:	490b      	ldr	r1, [pc, #44]	; (8001bb0 <AT_ExecuteCommand+0xc8>)
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f01a f9ea 	bl	801bf5c <strstr>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <AT_ExecuteCommand+0xaa>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e007      	b.n	8001ba2 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001b92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b96:	f113 0f04 	cmn.w	r3, #4
 8001b9a:	d101      	bne.n	8001ba0 <AT_ExecuteCommand+0xb8>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	e000      	b.n	8001ba2 <AT_ExecuteCommand+0xba>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001ba0:	2304      	movs	r3, #4
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	0801da50 	.word	0x0801da50
 8001bb0:	0801da5c 	.word	0x0801da5c

08001bb4 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 8001bce:	68b8      	ldr	r0, [r7, #8]
 8001bd0:	f7fe fb16 	bl	8000200 <strlen>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001bd8:	8a7b      	ldrh	r3, [r7, #18]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <AT_RequestSendData+0x32>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e053      	b.n	8001c8e <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001bf2:	8a79      	ldrh	r1, [r7, #18]
 8001bf4:	68b8      	ldr	r0, [r7, #8]
 8001bf6:	4798      	blx	r3
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001bfc:	8a3a      	ldrh	r2, [r7, #16]
 8001bfe:	8a7b      	ldrh	r3, [r7, #18]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d143      	bne.n	8001c8c <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001c10:	8879      	ldrh	r1, [r7, #2]
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001c1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d131      	bne.n	8001c88 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001c30:	2100      	movs	r1, #0
 8001c32:	6a38      	ldr	r0, [r7, #32]
 8001c34:	4798      	blx	r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001c3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	dd19      	ble.n	8001c76 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8001c42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c46:	6a3a      	ldr	r2, [r7, #32]
 8001c48:	4413      	add	r3, r2
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001c4e:	4912      	ldr	r1, [pc, #72]	; (8001c98 <AT_RequestSendData+0xe4>)
 8001c50:	6a38      	ldr	r0, [r7, #32]
 8001c52:	f01a f983 	bl	801bf5c <strstr>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <AT_RequestSendData+0xac>
        {
          return ES_WIFI_STATUS_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e016      	b.n	8001c8e <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <AT_RequestSendData+0xe8>)
 8001c62:	6a38      	ldr	r0, [r7, #32]
 8001c64:	f01a f97a 	bl	801bf5c <strstr>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <AT_RequestSendData+0xbe>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e00d      	b.n	8001c8e <AT_RequestSendData+0xda>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 8001c72:	2302      	movs	r3, #2
 8001c74:	e00b      	b.n	8001c8e <AT_RequestSendData+0xda>
        }
      }
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001c76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c7a:	f113 0f04 	cmn.w	r3, #4
 8001c7e:	d101      	bne.n	8001c84 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001c80:	2306      	movs	r3, #6
 8001c82:	e004      	b.n	8001c8e <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8001c84:	2302      	movs	r3, #2
 8001c86:	e002      	b.n	8001c8e <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e000      	b.n	8001c8e <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001c8c:	2304      	movs	r3, #4
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0801da50 	.word	0x0801da50
 8001c9c:	0801da5c 	.word	0x0801da5c

08001ca0 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cb4:	613b      	str	r3, [r7, #16]

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001cbc:	68b8      	ldr	r0, [r7, #8]
 8001cbe:	f7fe fa9f 	bl	8000200 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b299      	uxth	r1, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68b8      	ldr	r0, [r7, #8]
 8001cd0:	47a0      	blx	r4
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	dd6f      	ble.n	8001db8 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	6938      	ldr	r0, [r7, #16]
 8001ce8:	4798      	blx	r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	617b      	str	r3, [r7, #20]
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f113 0f04 	cmn.w	r3, #4
 8001cf4:	d101      	bne.n	8001cfa <AT_RequestReceiveData+0x5a>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
 8001cf6:	2306      	movs	r3, #6
 8001cf8:	e05f      	b.n	8001dba <AT_RequestReceiveData+0x11a>
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b0d      	cmp	r3, #13
 8001d00:	d104      	bne.n	8001d0c <AT_RequestReceiveData+0x6c>
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	3301      	adds	r3, #1
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b0a      	cmp	r3, #10
 8001d0a:	d001      	beq.n	8001d10 <AT_RequestReceiveData+0x70>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	e054      	b.n	8001dba <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3b02      	subs	r3, #2
 8001d14:	617b      	str	r3, [r7, #20]
    p+=2;
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b07      	cmp	r3, #7
 8001d20:	d94a      	bls.n	8001db8 <AT_RequestReceiveData+0x118>
    {
     while(len && (p[len-1]==0x15)) len--;
 8001d22:	e002      	b.n	8001d2a <AT_RequestReceiveData+0x8a>
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <AT_RequestReceiveData+0x9e>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b15      	cmp	r3, #21
 8001d3c:	d0f2      	beq.n	8001d24 <AT_RequestReceiveData+0x84>
     p[len] = '\0';
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	491c      	ldr	r1, [pc, #112]	; (8001dc4 <AT_RequestReceiveData+0x124>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f01a f902 	bl	801bf5c <strstr>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d016      	beq.n	8001d8c <AT_RequestReceiveData+0xec>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b08      	subs	r3, #8
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d202      	bcs.n	8001d7a <AT_RequestReceiveData+0xda>
       {
         *ReadData = Reqlen;
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6939      	ldr	r1, [r7, #16]
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f019 fe45 	bl	801ba12 <memcpy>
       return ES_WIFI_STATUS_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e016      	b.n	8001dba <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	2204      	movs	r2, #4
 8001d96:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <AT_RequestReceiveData+0x128>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f019 fe2b 	bl	801b9f4 <memcmp>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d104      	bne.n	8001dae <AT_RequestReceiveData+0x10e>
     {
       *ReadData = 0;
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001daa:	2305      	movs	r3, #5
 8001dac:	e005      	b.n	8001dba <AT_RequestReceiveData+0x11a>
     }

     *ReadData = 0;
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	2200      	movs	r2, #0
 8001db2:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001db4:	2305      	movs	r3, #5
 8001db6:	e000      	b.n	8001dba <AT_RequestReceiveData+0x11a>
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001db8:	2304      	movs	r3, #4
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	0801da50 	.word	0x0801da50
 8001dc8:	0801da64 	.word	0x0801da64

08001dcc <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f247 5230 	movw	r2, #30000	; 0x7530
 8001dde:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001de8:	2000      	movs	r0, #0
 8001dea:	4798      	blx	r3
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d113      	bne.n	8001e1a <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001df8:	461a      	mov	r2, r3
 8001dfa:	490a      	ldr	r1, [pc, #40]	; (8001e24 <ES_WIFI_Init+0x58>)
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fe73 	bl	8001ae8 <AT_ExecuteCommand>
 8001e02:	4603      	mov	r3, r0
 8001e04:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d106      	bne.n	8001e1a <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e12:	4619      	mov	r1, r3
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff fd2b 	bl	8001870 <AT_ParseInfo>
    }
  }
  return ret;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	0801da6c 	.word	0x0801da6c

08001e28 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <ES_WIFI_RegisterBusIO+0x2c>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <ES_WIFI_RegisterBusIO+0x2c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <ES_WIFI_RegisterBusIO+0x2c>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <ES_WIFI_RegisterBusIO+0x2c>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001e54:	2302      	movs	r3, #2
 8001e56:	e014      	b.n	8001e82 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <ES_WIFI_Connect+0x1a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <ES_WIFI_Connect+0x20>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	75fb      	strb	r3, [r7, #23]
 8001eae:	e061      	b.n	8001f74 <ES_WIFI_Connect+0xe4>
  }
  else
  {
    LOCK_WIFI();

    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	4931      	ldr	r1, [pc, #196]	; (8001f80 <ES_WIFI_Connect+0xf0>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f019 fff8 	bl	801beb0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff fe0a 	bl	8001ae8 <AT_ExecuteCommand>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	75fb      	strb	r3, [r7, #23]
    if(ret == ES_WIFI_STATUS_OK)
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d14a      	bne.n	8001f74 <ES_WIFI_Connect+0xe4>
    {
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <ES_WIFI_Connect+0xf4>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f019 ffe1 	bl	801beb0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001efa:	461a      	mov	r2, r3
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f7ff fdf3 	bl	8001ae8 <AT_ExecuteCommand>
 8001f02:	4603      	mov	r3, r0
 8001f04:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d133      	bne.n	8001f74 <ES_WIFI_Connect+0xe4>
      {
        Obj->Security = SecType;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	491a      	ldr	r1, [pc, #104]	; (8001f88 <ES_WIFI_Connect+0xf8>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f019 ffc6 	bl	801beb0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f30:	461a      	mov	r2, r3
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fdd8 	bl	8001ae8 <AT_ExecuteCommand>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	75fb      	strb	r3, [r7, #23]

        if(ret == ES_WIFI_STATUS_OK)
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <ES_WIFI_Connect+0xe4>
        {
          sprintf((char*)Obj->CmdData,"C0\r");
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f48:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <ES_WIFI_Connect+0xfc>)
 8001f4a:	6810      	ldr	r0, [r2, #0]
 8001f4c:	6018      	str	r0, [r3, #0]
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fdc3 	bl	8001ae8 <AT_ExecuteCommand>
 8001f62:	4603      	mov	r3, r0
 8001f64:	75fb      	strb	r3, [r7, #23]
          if(ret == ES_WIFI_STATUS_OK)
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <ES_WIFI_Connect+0xe4>
          {
            Obj->NetSettings.IsConnected = 1;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
      }
    }

    UNLOCK_WIFI();
  }
  return ret;
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	0801da84 	.word	0x0801da84
 8001f84:	0801da8c 	.word	0x0801da8c
 8001f88:	0801da94 	.word	0x0801da94
 8001f8c:	0801da9c 	.word	0x0801da9c

08001f90 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f9e:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <ES_WIFI_IsConnected+0x54>)
 8001fa0:	6810      	ldr	r0, [r2, #0]
 8001fa2:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fd98 	bl	8001ae8 <AT_ExecuteCommand>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d108      	bne.n	8001fd4 <ES_WIFI_IsConnected+0x44>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	33d2      	adds	r3, #210	; 0xd2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f7ff fd74 	bl	8001abc <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	0801daa0 	.word	0x0801daa0

08001fe8 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <ES_WIFI_GetNetworkSettings+0x50>)
 8001ff8:	6810      	ldr	r0, [r2, #0]
 8001ffa:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002008:	461a      	mov	r2, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fd6c 	bl	8001ae8 <AT_ExecuteCommand>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d108      	bne.n	800202c <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	338d      	adds	r3, #141	; 0x8d
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f7ff fc98 	bl	800195c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	0801daa8 	.word	0x0801daa8

0800203c <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800204c:	4a11      	ldr	r2, [pc, #68]	; (8002094 <ES_WIFI_GetMACAddress+0x58>)
 800204e:	6810      	ldr	r0, [r2, #0]
 8002050:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800205e:	461a      	mov	r2, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff fd41 	bl	8001ae8 <AT_ExecuteCommand>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10c      	bne.n	800208a <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002076:	3302      	adds	r3, #2
 8002078:	4907      	ldr	r1, [pc, #28]	; (8002098 <ES_WIFI_GetMACAddress+0x5c>)
 800207a:	4618      	mov	r0, r3
 800207c:	f019 ff88 	bl	801bf90 <strtok>
 8002080:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	68b8      	ldr	r0, [r7, #8]
 8002086:	f7ff fb9f 	bl	80017c8 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	0801db04 	.word	0x0801db04
 8002098:	0801db08 	.word	0x0801db08

0800209c <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	789b      	ldrb	r3, [r3, #2]
 80020b4:	461a      	mov	r2, r3
 80020b6:	494d      	ldr	r1, [pc, #308]	; (80021ec <ES_WIFI_StartServerSingleConn+0x150>)
 80020b8:	f019 fefa 	bl	801beb0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020c8:	461a      	mov	r2, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fd0c 	bl	8001ae8 <AT_ExecuteCommand>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	e082      	b.n	80021e4 <ES_WIFI_StartServerSingleConn+0x148>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d01c      	beq.n	8002120 <ES_WIFI_StartServerSingleConn+0x84>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d018      	beq.n	8002120 <ES_WIFI_StartServerSingleConn+0x84>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020f4:	493e      	ldr	r1, [pc, #248]	; (80021f0 <ES_WIFI_StartServerSingleConn+0x154>)
 80020f6:	461a      	mov	r2, r3
 80020f8:	460b      	mov	r3, r1
 80020fa:	cb03      	ldmia	r3!, {r0, r1}
 80020fc:	6010      	str	r0, [r2, #0]
 80020fe:	6051      	str	r1, [r2, #4]
 8002100:	8819      	ldrh	r1, [r3, #0]
 8002102:	789b      	ldrb	r3, [r3, #2]
 8002104:	8111      	strh	r1, [r2, #8]
 8002106:	7293      	strb	r3, [r2, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002114:	461a      	mov	r2, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fce6 	bl	8001ae8 <AT_ExecuteCommand>
 800211c:	4603      	mov	r3, r0
 800211e:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d15d      	bne.n	80021e2 <ES_WIFI_StartServerSingleConn+0x146>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4930      	ldr	r1, [pc, #192]	; (80021f4 <ES_WIFI_StartServerSingleConn+0x158>)
 8002134:	f019 febc 	bl	801beb0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002144:	461a      	mov	r2, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fcce 	bl	8001ae8 <AT_ExecuteCommand>
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d145      	bne.n	80021e2 <ES_WIFI_StartServerSingleConn+0x146>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	7c1b      	ldrb	r3, [r3, #16]
 8002160:	461a      	mov	r2, r3
 8002162:	4925      	ldr	r1, [pc, #148]	; (80021f8 <ES_WIFI_StartServerSingleConn+0x15c>)
 8002164:	f019 fea4 	bl	801beb0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002174:	461a      	mov	r2, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fcb6 	bl	8001ae8 <AT_ExecuteCommand>
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d12d      	bne.n	80021e2 <ES_WIFI_StartServerSingleConn+0x146>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	88db      	ldrh	r3, [r3, #6]
 8002190:	461a      	mov	r2, r3
 8002192:	491a      	ldr	r1, [pc, #104]	; (80021fc <ES_WIFI_StartServerSingleConn+0x160>)
 8002194:	f019 fe8c 	bl	801beb0 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021a4:	461a      	mov	r2, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fc9e 	bl	8001ae8 <AT_ExecuteCommand>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d115      	bne.n	80021e2 <ES_WIFI_StartServerSingleConn+0x146>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021bc:	4a10      	ldr	r2, [pc, #64]	; (8002200 <ES_WIFI_StartServerSingleConn+0x164>)
 80021be:	6810      	ldr	r0, [r2, #0]
 80021c0:	6018      	str	r0, [r3, #0]
 80021c2:	8891      	ldrh	r1, [r2, #4]
 80021c4:	7992      	ldrb	r2, [r2, #6]
 80021c6:	8099      	strh	r1, [r3, #4]
 80021c8:	719a      	strb	r2, [r3, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021d6:	461a      	mov	r2, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fc85 	bl	8001ae8 <AT_ExecuteCommand>
 80021de:	4603      	mov	r3, r0
 80021e0:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	0801db6c 	.word	0x0801db6c
 80021f0:	0801dbbc 	.word	0x0801dbbc
 80021f4:	0801db74 	.word	0x0801db74
 80021f8:	0801dbc8 	.word	0x0801dbc8
 80021fc:	0801db7c 	.word	0x0801db7c
 8002200:	0801dbd0 	.word	0x0801dbd0

08002204 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	77fb      	strb	r3, [r7, #31]
  bool          accepted=false;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 800221a:	f001 fc37 	bl	8003a8c <HAL_GetTick>
 800221e:	6238      	str	r0, [r7, #32]
  tlast=tstart+timeout;
 8002220:	6a3a      	ldr	r2, [r7, #32]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4413      	add	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
  if (tlast < tstart )
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	429a      	cmp	r2, r3
 800222e:	d201      	bcs.n	8002234 <ES_WIFI_WaitServerConnection+0x30>
  {
	   tstart=0;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800223a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f019 fc0a 	bl	801ba5a <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800224c:	4a60      	ldr	r2, [pc, #384]	; (80023d0 <ES_WIFI_WaitServerConnection+0x1cc>)
 800224e:	6810      	ldr	r0, [r2, #0]
 8002250:	6018      	str	r0, [r3, #0]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800225e:	461a      	mov	r2, r3
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff fc41 	bl	8001ae8 <AT_ExecuteCommand>
 8002266:	4603      	mov	r3, r0
 8002268:	77fb      	strb	r3, [r7, #31]
    if(ret == ES_WIFI_STATUS_OK)
 800226a:	7ffb      	ldrb	r3, [r7, #31]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d12d      	bne.n	80022cc <ES_WIFI_WaitServerConnection+0xc8>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002276:	4957      	ldr	r1, [pc, #348]	; (80023d4 <ES_WIFI_WaitServerConnection+0x1d0>)
 8002278:	4618      	mov	r0, r3
 800227a:	f019 fe6f 	bl	801bf5c <strstr>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d025      	beq.n	80022d0 <ES_WIFI_WaitServerConnection+0xcc>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800228a:	4953      	ldr	r1, [pc, #332]	; (80023d8 <ES_WIFI_WaitServerConnection+0x1d4>)
 800228c:	4618      	mov	r0, r3
 800228e:	f019 fe65 	bl	801bf5c <strstr>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01b      	beq.n	80022d0 <ES_WIFI_WaitServerConnection+0xcc>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800229e:	494f      	ldr	r1, [pc, #316]	; (80023dc <ES_WIFI_WaitServerConnection+0x1d8>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f019 fe5b 	bl	801bf5c <strstr>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <ES_WIFI_WaitServerConnection+0xb0>
        {
         //printf("SOMA Accepted\n");
         accepted=true;// flushing out the MR messages
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022b2:	e00d      	b.n	80022d0 <ES_WIFI_WaitServerConnection+0xcc>
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022ba:	4949      	ldr	r1, [pc, #292]	; (80023e0 <ES_WIFI_WaitServerConnection+0x1dc>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f019 fe4d 	bl	801bf5c <strstr>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <ES_WIFI_WaitServerConnection+0xcc>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80022c8:	2302      	movs	r3, #2
 80022ca:	e07c      	b.n	80023c6 <ES_WIFI_WaitServerConnection+0x1c2>
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 80022cc:	2302      	movs	r3, #2
 80022ce:	e07a      	b.n	80023c6 <ES_WIFI_WaitServerConnection+0x1c2>
    }

    if (accepted)
 80022d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d05f      	beq.n	8002398 <ES_WIFI_WaitServerConnection+0x194>
    {
#endif /* if (ES_WIFI_USE_UART == 0) */

      memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f019 fbb8 	bl	801ba5a <memset>
      sprintf((char*)Obj->CmdData,"P?\r");
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022f0:	4a3c      	ldr	r2, [pc, #240]	; (80023e4 <ES_WIFI_WaitServerConnection+0x1e0>)
 80022f2:	6810      	ldr	r0, [r2, #0]
 80022f4:	6018      	str	r0, [r3, #0]
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002302:	461a      	mov	r2, r3
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fbef 	bl	8001ae8 <AT_ExecuteCommand>
 800230a:	4603      	mov	r3, r0
 800230c:	77fb      	strb	r3, [r7, #31]
      if(ret == ES_WIFI_STATUS_OK)
 800230e:	7ffb      	ldrb	r3, [r7, #31]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d13f      	bne.n	8002394 <ES_WIFI_WaitServerConnection+0x190>
      {
        if((strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800231a:	220c      	movs	r2, #12
 800231c:	4932      	ldr	r1, [pc, #200]	; (80023e8 <ES_WIFI_WaitServerConnection+0x1e4>)
 800231e:	4618      	mov	r0, r3
 8002320:	f019 fdf5 	bl	801bf0e <strncmp>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d036      	beq.n	8002398 <ES_WIFI_WaitServerConnection+0x194>
        {
          ptr = strtok((char *)Obj->CmdData + 2, ",");
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002330:	3302      	adds	r3, #2
 8002332:	492e      	ldr	r1, [pc, #184]	; (80023ec <ES_WIFI_WaitServerConnection+0x1e8>)
 8002334:	4618      	mov	r0, r3
 8002336:	f019 fe2b 	bl	801bf90 <strtok>
 800233a:	6178      	str	r0, [r7, #20]
          ptr = strtok(0, ","); //port
 800233c:	492b      	ldr	r1, [pc, #172]	; (80023ec <ES_WIFI_WaitServerConnection+0x1e8>)
 800233e:	2000      	movs	r0, #0
 8002340:	f019 fe26 	bl	801bf90 <strtok>
 8002344:	6178      	str	r0, [r7, #20]
          ParseIP((char *)ptr, conn->RemoteIP);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3308      	adds	r3, #8
 800234a:	4619      	mov	r1, r3
 800234c:	6978      	ldr	r0, [r7, #20]
 800234e:	f7ff fa65 	bl	800181c <ParseIP>
          ptr = strtok(0, ","); //port
 8002352:	4926      	ldr	r1, [pc, #152]	; (80023ec <ES_WIFI_WaitServerConnection+0x1e8>)
 8002354:	2000      	movs	r0, #0
 8002356:	f019 fe1b 	bl	801bf90 <strtok>
 800235a:	6178      	str	r0, [r7, #20]
          conn->LocalPort=ParseNumber(ptr,0);
 800235c:	2100      	movs	r1, #0
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	f7ff f9ee 	bl	8001740 <ParseNumber>
 8002364:	4603      	mov	r3, r0
 8002366:	b29a      	uxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	80da      	strh	r2, [r3, #6]
          ptr = strtok(0, ","); //ip
 800236c:	491f      	ldr	r1, [pc, #124]	; (80023ec <ES_WIFI_WaitServerConnection+0x1e8>)
 800236e:	2000      	movs	r0, #0
 8002370:	f019 fe0e 	bl	801bf90 <strtok>
 8002374:	6178      	str	r0, [r7, #20]
          ptr = strtok(0, ","); //remote port
 8002376:	491d      	ldr	r1, [pc, #116]	; (80023ec <ES_WIFI_WaitServerConnection+0x1e8>)
 8002378:	2000      	movs	r0, #0
 800237a:	f019 fe09 	bl	801bf90 <strtok>
 800237e:	6178      	str	r0, [r7, #20]
          conn->RemotePort=ParseNumber(ptr,0);
 8002380:	2100      	movs	r1, #0
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff f9dc 	bl	8001740 <ParseNumber>
 8002388:	4603      	mov	r3, r0
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	809a      	strh	r2, [r3, #4]
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	e018      	b.n	80023c6 <ES_WIFI_WaitServerConnection+0x1c2>
      }
      else
      {
        DEBUG("P? command failed %s\n", Obj->CmdData);
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_ERROR;
 8002394:	2302      	movs	r3, #2
 8002396:	e016      	b.n	80023c6 <ES_WIFI_WaitServerConnection+0x1c2>
#if (ES_WIFI_USE_UART == 0)
    }
#endif /* if (ES_WIFI_USE_UART == 0) */

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800239e:	2064      	movs	r0, #100	; 0x64
 80023a0:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 80023a2:	f001 fb73 	bl	8003a8c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f43f af42 	beq.w	8002234 <ES_WIFI_WaitServerConnection+0x30>
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	f4ff af3d 	bcc.w	8002234 <ES_WIFI_WaitServerConnection+0x30>
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	429a      	cmp	r2, r3
 80023c0:	f4ff af38 	bcc.w	8002234 <ES_WIFI_WaitServerConnection+0x30>
  return ES_WIFI_STATUS_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3728      	adds	r7, #40	; 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	0801da7c 	.word	0x0801da7c
 80023d4:	0801dbd8 	.word	0x0801dbd8
 80023d8:	0801dbe0 	.word	0x0801dbe0
 80023dc:	0801dbe8 	.word	0x0801dbe8
 80023e0:	0801dbf4 	.word	0x0801dbf4
 80023e4:	0801dc04 	.word	0x0801dc04
 80023e8:	0801dc08 	.word	0x0801dc08
 80023ec:	0801da3c 	.word	0x0801da3c

080023f0 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4918      	ldr	r1, [pc, #96]	; (8002464 <ES_WIFI_CloseServerConnection+0x74>)
 8002404:	4618      	mov	r0, r3
 8002406:	f019 fd53 	bl	801beb0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002416:	461a      	mov	r2, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fb65 	bl	8001ae8 <AT_ExecuteCommand>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <ES_WIFI_CloseServerConnection+0x3c>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	e016      	b.n	800245a <ES_WIFI_CloseServerConnection+0x6a>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002432:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <ES_WIFI_CloseServerConnection+0x78>)
 8002434:	6810      	ldr	r0, [r2, #0]
 8002436:	6018      	str	r0, [r3, #0]
 8002438:	8891      	ldrh	r1, [r2, #4]
 800243a:	7992      	ldrb	r2, [r2, #6]
 800243c:	8099      	strh	r1, [r3, #4]
 800243e:	719a      	strb	r2, [r3, #6]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800244c:	461a      	mov	r2, r3
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fb4a 	bl	8001ae8 <AT_ExecuteCommand>
 8002454:	4603      	mov	r3, r0
 8002456:	73fb      	strb	r3, [r7, #15]
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	0801db6c 	.word	0x0801db6c
 8002468:	0801dc18 	.word	0x0801dc18

0800246c <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	4919      	ldr	r1, [pc, #100]	; (80024e4 <ES_WIFI_StopServerSingleConn+0x78>)
 8002480:	4618      	mov	r0, r3
 8002482:	f019 fd15 	bl	801beb0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002492:	461a      	mov	r2, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fb27 	bl	8001ae8 <AT_ExecuteCommand>
 800249a:	4603      	mov	r3, r0
 800249c:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <ES_WIFI_StopServerSingleConn+0x3c>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	e019      	b.n	80024dc <ES_WIFI_StopServerSingleConn+0x70>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024ae:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <ES_WIFI_StopServerSingleConn+0x7c>)
 80024b0:	6810      	ldr	r0, [r2, #0]
 80024b2:	6018      	str	r0, [r3, #0]
 80024b4:	8892      	ldrh	r2, [r2, #4]
 80024b6:	809a      	strh	r2, [r3, #4]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024c4:	461a      	mov	r2, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fb0e 	bl	8001ae8 <AT_ExecuteCommand>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <ES_WIFI_StopServerSingleConn+0x6e>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	e000      	b.n	80024dc <ES_WIFI_StopServerSingleConn+0x70>
  }

  UNLOCK_WIFI();
  return ret;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	0801db6c 	.word	0x0801db6c
 80024e8:	0801dc20 	.word	0x0801dc20

080024ec <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	72fb      	strb	r3, [r7, #11]
 80024fc:	4613      	mov	r3, r2
 80024fe:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002500:	2302      	movs	r3, #2
 8002502:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800250a:	2301      	movs	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e001      	b.n	8002514 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8002514:	893b      	ldrh	r3, [r7, #8]
 8002516:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800251a:	d302      	bcc.n	8002522 <ES_WIFI_SendData+0x36>
 800251c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002520:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	893a      	ldrh	r2, [r7, #8]
 8002526:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800252e:	7afa      	ldrb	r2, [r7, #11]
 8002530:	492d      	ldr	r1, [pc, #180]	; (80025e8 <ES_WIFI_SendData+0xfc>)
 8002532:	4618      	mov	r0, r3
 8002534:	f019 fcbc 	bl	801beb0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002544:	461a      	mov	r2, r3
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff face 	bl	8001ae8 <AT_ExecuteCommand>
 800254c:	4603      	mov	r3, r0
 800254e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d13c      	bne.n	80025d0 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4923      	ldr	r1, [pc, #140]	; (80025ec <ES_WIFI_SendData+0x100>)
 8002560:	4618      	mov	r0, r3
 8002562:	f019 fca5 	bl	801beb0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002572:	461a      	mov	r2, r3
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f7ff fab7 	bl	8001ae8 <AT_ExecuteCommand>
 800257a:	4603      	mov	r3, r0
 800257c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d125      	bne.n	80025d0 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800258a:	893a      	ldrh	r2, [r7, #8]
 800258c:	4918      	ldr	r1, [pc, #96]	; (80025f0 <ES_WIFI_SendData+0x104>)
 800258e:	4618      	mov	r0, r3
 8002590:	f019 fc8e 	bl	801beb0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025a0:	893a      	ldrh	r2, [r7, #8]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff fb03 	bl	8001bb4 <AT_RequestSendData>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10b      	bne.n	80025d0 <ES_WIFI_SendData+0xe4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025be:	490d      	ldr	r1, [pc, #52]	; (80025f4 <ES_WIFI_SendData+0x108>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f019 fccb 	bl	801bf5c <strstr>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <ES_WIFI_SendData+0xe4>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 80025cc:	2302      	movs	r3, #2
 80025ce:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d102      	bne.n	80025dc <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	2200      	movs	r2, #0
 80025da:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	0801db6c 	.word	0x0801db6c
 80025ec:	0801dc50 	.word	0x0801dc50
 80025f0:	0801dc58 	.word	0x0801dc58
 80025f4:	0801dc64 	.word	0x0801dc64

080025f8 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	461a      	mov	r2, r3
 8002604:	460b      	mov	r3, r1
 8002606:	72fb      	strb	r3, [r7, #11]
 8002608:	4613      	mov	r3, r2
 800260a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800260c:	2302      	movs	r3, #2
 800260e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8002616:	2301      	movs	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e001      	b.n	8002620 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8002620:	893b      	ldrh	r3, [r7, #8]
 8002622:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002626:	d861      	bhi.n	80026ec <ES_WIFI_ReceiveData+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800262e:	7afa      	ldrb	r2, [r7, #11]
 8002630:	4931      	ldr	r1, [pc, #196]	; (80026f8 <ES_WIFI_ReceiveData+0x100>)
 8002632:	4618      	mov	r0, r3
 8002634:	f019 fc3c 	bl	801beb0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002644:	461a      	mov	r2, r3
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff fa4e 	bl	8001ae8 <AT_ExecuteCommand>
 800264c:	4603      	mov	r3, r0
 800264e:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d145      	bne.n	80026e2 <ES_WIFI_ReceiveData+0xea>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800265c:	893a      	ldrh	r2, [r7, #8]
 800265e:	4927      	ldr	r1, [pc, #156]	; (80026fc <ES_WIFI_ReceiveData+0x104>)
 8002660:	4618      	mov	r0, r3
 8002662:	f019 fc25 	bl	801beb0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002672:	461a      	mov	r2, r3
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff fa37 	bl	8001ae8 <AT_ExecuteCommand>
 800267a:	4603      	mov	r3, r0
 800267c:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d12a      	bne.n	80026da <ES_WIFI_ReceiveData+0xe2>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	491c      	ldr	r1, [pc, #112]	; (8002700 <ES_WIFI_ReceiveData+0x108>)
 800268e:	4618      	mov	r0, r3
 8002690:	f019 fc0e 	bl	801beb0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026a0:	461a      	mov	r2, r3
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f7ff fa20 	bl	8001ae8 <AT_ExecuteCommand>
 80026a8:	4603      	mov	r3, r0
 80026aa:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11c      	bne.n	80026ec <ES_WIFI_ReceiveData+0xf4>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026b8:	4a12      	ldr	r2, [pc, #72]	; (8002704 <ES_WIFI_ReceiveData+0x10c>)
 80026ba:	6810      	ldr	r0, [r2, #0]
 80026bc:	6018      	str	r0, [r3, #0]
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80026c4:	893a      	ldrh	r2, [r7, #8]
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff fae6 	bl	8001ca0 <AT_RequestReceiveData>
 80026d4:	4603      	mov	r3, r0
 80026d6:	74fb      	strb	r3, [r7, #19]
 80026d8:	e008      	b.n	80026ec <ES_WIFI_ReceiveData+0xf4>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
        *Receivedlen = 0;
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2200      	movs	r2, #0
 80026de:	801a      	strh	r2, [r3, #0]
 80026e0:	e004      	b.n	80026ec <ES_WIFI_ReceiveData+0xf4>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
      issue15++;
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <ES_WIFI_ReceiveData+0x110>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a07      	ldr	r2, [pc, #28]	; (8002708 <ES_WIFI_ReceiveData+0x110>)
 80026ea:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	0801db6c 	.word	0x0801db6c
 80026fc:	0801dc6c 	.word	0x0801dc6c
 8002700:	0801dc74 	.word	0x0801dc74
 8002704:	0801dc7c 	.word	0x0801dc7c
 8002708:	20000b34 	.word	0x20000b34

0800270c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	; 0x30
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002714:	4b56      	ldr	r3, [pc, #344]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	4a55      	ldr	r2, [pc, #340]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 800271a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271e:	6593      	str	r3, [r2, #88]	; 0x58
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272c:	4b50      	ldr	r3, [pc, #320]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	4a4f      	ldr	r2, [pc, #316]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002738:	4b4d      	ldr	r3, [pc, #308]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 800273a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002744:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 8002746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002748:	4a49      	ldr	r2, [pc, #292]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002750:	4b47      	ldr	r3, [pc, #284]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800275c:	4b44      	ldr	r3, [pc, #272]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	4a43      	ldr	r2, [pc, #268]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <SPI_WIFI_MspInit+0x164>)
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002774:	2200      	movs	r2, #0
 8002776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800277a:	483e      	ldr	r0, [pc, #248]	; (8002874 <SPI_WIFI_MspInit+0x168>)
 800277c:	f001 ff8a 	bl	8004694 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002784:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002786:	2301      	movs	r3, #1
 8002788:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002792:	f107 031c 	add.w	r3, r7, #28
 8002796:	4619      	mov	r1, r3
 8002798:	4836      	ldr	r0, [pc, #216]	; (8002874 <SPI_WIFI_MspInit+0x168>)
 800279a:	f001 fdd1 	bl	8004340 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800279e:	2302      	movs	r3, #2
 80027a0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80027a2:	4b35      	ldr	r3, [pc, #212]	; (8002878 <SPI_WIFI_MspInit+0x16c>)
 80027a4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80027ae:	f107 031c 	add.w	r3, r7, #28
 80027b2:	4619      	mov	r1, r3
 80027b4:	4831      	ldr	r0, [pc, #196]	; (800287c <SPI_WIFI_MspInit+0x170>)
 80027b6:	f001 fdc3 	bl	8004340 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80027ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027be:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4619      	mov	r1, r3
 80027d6:	4829      	ldr	r0, [pc, #164]	; (800287c <SPI_WIFI_MspInit+0x170>)
 80027d8:	f001 fdb2 	bl	8004340 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80027dc:	2201      	movs	r2, #1
 80027de:	2101      	movs	r1, #1
 80027e0:	4826      	ldr	r0, [pc, #152]	; (800287c <SPI_WIFI_MspInit+0x170>)
 80027e2:	f001 ff57 	bl	8004694 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80027f2:	2301      	movs	r3, #1
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	4619      	mov	r1, r3
 80027fc:	481f      	ldr	r0, [pc, #124]	; (800287c <SPI_WIFI_MspInit+0x170>)
 80027fe:	f001 fd9f 	bl	8004340 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8002802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002806:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002810:	2301      	movs	r3, #1
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002814:	2306      	movs	r3, #6
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	4818      	ldr	r0, [pc, #96]	; (8002880 <SPI_WIFI_MspInit+0x174>)
 8002820:	f001 fd8e 	bl	8004340 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002828:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002832:	2301      	movs	r3, #1
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002836:	2306      	movs	r3, #6
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	480f      	ldr	r0, [pc, #60]	; (8002880 <SPI_WIFI_MspInit+0x174>)
 8002842:	f001 fd7d 	bl	8004340 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800284a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002850:	2301      	movs	r3, #1
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002854:	2301      	movs	r3, #1
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002858:	2306      	movs	r3, #6
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	4807      	ldr	r0, [pc, #28]	; (8002880 <SPI_WIFI_MspInit+0x174>)
 8002864:	f001 fd6c 	bl	8004340 <HAL_GPIO_Init>
}
 8002868:	bf00      	nop
 800286a:	3730      	adds	r7, #48	; 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	48000400 	.word	0x48000400
 8002878:	10110000 	.word	0x10110000
 800287c:	48001000 	.word	0x48001000
 8002880:	48000800 	.word	0x48000800

08002884 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d145      	bne.n	8002924 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <SPI_WIFI_Init+0xb4>)
 800289a:	4a28      	ldr	r2, [pc, #160]	; (800293c <SPI_WIFI_Init+0xb8>)
 800289c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800289e:	4826      	ldr	r0, [pc, #152]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028a0:	f7ff ff34 	bl	800270c <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028a6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028aa:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028b4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80028b8:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028cc:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028d0:	2210      	movs	r2, #16
 80028d2:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80028ec:	4812      	ldr	r0, [pc, #72]	; (8002938 <SPI_WIFI_Init+0xb4>)
 80028ee:	f003 fb5f 	bl	8005fb0 <HAL_SPI_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80028f8:	f04f 33ff 	mov.w	r3, #4294967295
 80028fc:	e018      	b.n	8002930 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	2007      	movs	r0, #7
 8002904:	f001 f9cb 	bl	8003c9e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8002908:	2007      	movs	r0, #7
 800290a:	f001 f9e4 	bl	8003cd6 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	2033      	movs	r0, #51	; 0x33
 8002914:	f001 f9c3 	bl	8003c9e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002918:	2033      	movs	r0, #51	; 0x33
 800291a:	f001 f9dc 	bl	8003cd6 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800291e:	200a      	movs	r0, #10
 8002920:	f000 f9fe 	bl	8002d20 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8002924:	f000 f80c 	bl	8002940 <SPI_WIFI_ResetModule>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]

  return rc;
 800292c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000b74 	.word	0x20000b74
 800293c:	40003c00 	.word	0x40003c00

08002940 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002946:	f001 f8a1 	bl	8003a8c <HAL_GetTick>
 800294a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8002950:	2200      	movs	r2, #0
 8002952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002956:	4830      	ldr	r0, [pc, #192]	; (8002a18 <SPI_WIFI_ResetModule+0xd8>)
 8002958:	f001 fe9c 	bl	8004694 <HAL_GPIO_WritePin>
 800295c:	200a      	movs	r0, #10
 800295e:	f001 f8a1 	bl	8003aa4 <HAL_Delay>
 8002962:	2201      	movs	r2, #1
 8002964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002968:	482b      	ldr	r0, [pc, #172]	; (8002a18 <SPI_WIFI_ResetModule+0xd8>)
 800296a:	f001 fe93 	bl	8004694 <HAL_GPIO_WritePin>
 800296e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002972:	f001 f897 	bl	8003aa4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8002976:	2200      	movs	r2, #0
 8002978:	2101      	movs	r1, #1
 800297a:	4827      	ldr	r0, [pc, #156]	; (8002a18 <SPI_WIFI_ResetModule+0xd8>)
 800297c:	f001 fe8a 	bl	8004694 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002980:	200f      	movs	r0, #15
 8002982:	f000 f9cd 	bl	8002d20 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8002986:	e020      	b.n	80029ca <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	463a      	mov	r2, r7
 800298c:	18d1      	adds	r1, r2, r3
 800298e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002992:	2201      	movs	r2, #1
 8002994:	4821      	ldr	r0, [pc, #132]	; (8002a1c <SPI_WIFI_ResetModule+0xdc>)
 8002996:	f003 fc13 	bl	80061c0 <HAL_SPI_Receive>
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	3302      	adds	r3, #2
 80029a2:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80029a4:	f001 f872 	bl	8003a8c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b2:	d202      	bcs.n	80029ba <SPI_WIFI_ResetModule+0x7a>
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80029ba:	2201      	movs	r2, #1
 80029bc:	2101      	movs	r1, #1
 80029be:	4816      	ldr	r0, [pc, #88]	; (8002a18 <SPI_WIFI_ResetModule+0xd8>)
 80029c0:	f001 fe68 	bl	8004694 <HAL_GPIO_WritePin>
      return -1;
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	e021      	b.n	8002a0e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80029ca:	2102      	movs	r1, #2
 80029cc:	4812      	ldr	r0, [pc, #72]	; (8002a18 <SPI_WIFI_ResetModule+0xd8>)
 80029ce:	f001 fe49 	bl	8004664 <HAL_GPIO_ReadPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d0d7      	beq.n	8002988 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 80029d8:	2201      	movs	r2, #1
 80029da:	2101      	movs	r1, #1
 80029dc:	480e      	ldr	r0, [pc, #56]	; (8002a18 <SPI_WIFI_ResetModule+0xd8>)
 80029de:	f001 fe59 	bl	8004694 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80029e2:	783b      	ldrb	r3, [r7, #0]
 80029e4:	2b15      	cmp	r3, #21
 80029e6:	d10e      	bne.n	8002a06 <SPI_WIFI_ResetModule+0xc6>
 80029e8:	787b      	ldrb	r3, [r7, #1]
 80029ea:	2b15      	cmp	r3, #21
 80029ec:	d10b      	bne.n	8002a06 <SPI_WIFI_ResetModule+0xc6>
 80029ee:	78bb      	ldrb	r3, [r7, #2]
 80029f0:	2b0d      	cmp	r3, #13
 80029f2:	d108      	bne.n	8002a06 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80029f4:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80029f6:	2b0a      	cmp	r3, #10
 80029f8:	d105      	bne.n	8002a06 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80029fa:	793b      	ldrb	r3, [r7, #4]
 80029fc:	2b3e      	cmp	r3, #62	; 0x3e
 80029fe:	d102      	bne.n	8002a06 <SPI_WIFI_ResetModule+0xc6>
 8002a00:	797b      	ldrb	r3, [r7, #5]
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d002      	beq.n	8002a0c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	e000      	b.n	8002a0e <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	48001000 	.word	0x48001000
 8002a1c:	20000b74 	.word	0x20000b74

08002a20 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <SPI_WIFI_DeInit+0x10>)
 8002a26:	f003 fb8f 	bl	8006148 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000b74 	.word	0x20000b74

08002a34 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002a3c:	f001 f826 	bl	8003a8c <HAL_GetTick>
 8002a40:	4603      	mov	r3, r0
 8002a42:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8002a44:	e00a      	b.n	8002a5c <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002a46:	f001 f821 	bl	8003a8c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad2      	subs	r2, r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d902      	bls.n	8002a5c <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e007      	b.n	8002a6c <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4805      	ldr	r0, [pc, #20]	; (8002a74 <wait_cmddata_rdy_high+0x40>)
 8002a60:	f001 fe00 	bl	8004664 <HAL_GPIO_ReadPin>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d1ed      	bne.n	8002a46 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	48001000 	.word	0x48001000

08002a78 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002a80:	f001 f804 	bl	8003a8c <HAL_GetTick>
 8002a84:	4603      	mov	r3, r0
 8002a86:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8002a88:	e00a      	b.n	8002aa0 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002a8a:	f000 ffff 	bl	8003a8c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d902      	bls.n	8002aa0 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	e004      	b.n	8002aaa <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <wait_cmddata_rdy_rising_event+0x3c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d0f0      	beq.n	8002a8a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8002aa8:	2300      	movs	r3, #0
#endif
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000b40 	.word	0x20000b40

08002ab8 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002ac0:	f000 ffe4 	bl	8003a8c <HAL_GetTick>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8002ac8:	e00a      	b.n	8002ae0 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002aca:	f000 ffdf 	bl	8003a8c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad2      	subs	r2, r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d902      	bls.n	8002ae0 <wait_spi_rx_event+0x28>
    {
      return -1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	e004      	b.n	8002aea <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <wait_spi_rx_event+0x3c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d0f0      	beq.n	8002aca <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002ae8:	2300      	movs	r3, #0
#endif
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000b38 	.word	0x20000b38

08002af8 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002b00:	f000 ffc4 	bl	8003a8c <HAL_GetTick>
 8002b04:	4603      	mov	r3, r0
 8002b06:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8002b08:	e00a      	b.n	8002b20 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002b0a:	f000 ffbf 	bl	8003a8c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad2      	subs	r2, r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d902      	bls.n	8002b20 <wait_spi_tx_event+0x28>
    {
      return -1;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1e:	e004      	b.n	8002b2a <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <wait_spi_tx_event+0x3c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d0f0      	beq.n	8002b0a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002b28:	2300      	movs	r3, #0
#endif
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000b3c 	.word	0x20000b3c

08002b38 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	460b      	mov	r3, r1
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4834      	ldr	r0, [pc, #208]	; (8002c20 <SPI_WIFI_ReceiveData+0xe8>)
 8002b50:	f001 fda0 	bl	8004694 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002b54:	2003      	movs	r0, #3
 8002b56:	f000 f8e3 	bl	8002d20 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff8b 	bl	8002a78 <wait_cmddata_rdy_rising_event>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	da02      	bge.n	8002b6e <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002b68:	f06f 0302 	mvn.w	r3, #2
 8002b6c:	e054      	b.n	8002c18 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2101      	movs	r1, #1
 8002b72:	482b      	ldr	r0, [pc, #172]	; (8002c20 <SPI_WIFI_ReceiveData+0xe8>)
 8002b74:	f001 fd8e 	bl	8004694 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002b78:	200f      	movs	r0, #15
 8002b7a:	f000 f8d1 	bl	8002d20 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002b7e:	e03d      	b.n	8002bfc <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8002b80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002b84:	897b      	ldrh	r3, [r7, #10]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	db02      	blt.n	8002b90 <SPI_WIFI_ReceiveData+0x58>
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d13c      	bne.n	8002c0a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <SPI_WIFI_ReceiveData+0xec>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4822      	ldr	r0, [pc, #136]	; (8002c28 <SPI_WIFI_ReceiveData+0xf0>)
 8002ba0:	f004 f85c 	bl	8006c5c <HAL_SPI_Receive_IT>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8002baa:	2201      	movs	r2, #1
 8002bac:	2101      	movs	r1, #1
 8002bae:	481c      	ldr	r0, [pc, #112]	; (8002c20 <SPI_WIFI_ReceiveData+0xe8>)
 8002bb0:	f001 fd70 	bl	8004694 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb8:	e02e      	b.n	8002c18 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff7b 	bl	8002ab8 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002bc2:	7d3a      	ldrb	r2, [r7, #20]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	7d7a      	ldrb	r2, [r7, #21]
 8002bce:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002bd0:	8afb      	ldrh	r3, [r7, #22]
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3302      	adds	r3, #2
 8002bdc:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8002bde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002be2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002be6:	db09      	blt.n	8002bfc <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002be8:	2201      	movs	r2, #1
 8002bea:	2101      	movs	r1, #1
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <SPI_WIFI_ReceiveData+0xe8>)
 8002bee:	f001 fd51 	bl	8004694 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8002bf2:	f7ff fea5 	bl	8002940 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002bf6:	f06f 0303 	mvn.w	r3, #3
 8002bfa:	e00d      	b.n	8002c18 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4808      	ldr	r0, [pc, #32]	; (8002c20 <SPI_WIFI_ReceiveData+0xe8>)
 8002c00:	f001 fd30 	bl	8004664 <HAL_GPIO_ReadPin>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d0ba      	beq.n	8002b80 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4804      	ldr	r0, [pc, #16]	; (8002c20 <SPI_WIFI_ReceiveData+0xe8>)
 8002c10:	f001 fd40 	bl	8004694 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002c14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	48001000 	.word	0x48001000
 8002c24:	20000b38 	.word	0x20000b38
 8002c28:	20000b74 	.word	0x20000b74

08002c2c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	460b      	mov	r3, r1
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fef9 	bl	8002a34 <wait_cmddata_rdy_high>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	da02      	bge.n	8002c4e <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	e04f      	b.n	8002cee <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <SPI_WIFI_SendData+0xcc>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002c54:	2200      	movs	r2, #0
 8002c56:	2101      	movs	r1, #1
 8002c58:	4828      	ldr	r0, [pc, #160]	; (8002cfc <SPI_WIFI_SendData+0xd0>)
 8002c5a:	f001 fd1b 	bl	8004694 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002c5e:	200f      	movs	r0, #15
 8002c60:	f000 f85e 	bl	8002d20 <SPI_WIFI_DelayUs>
  if (len > 1)
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d919      	bls.n	8002c9e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8002c6a:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <SPI_WIFI_SendData+0xd4>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8002c70:	897b      	ldrh	r3, [r7, #10]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	4822      	ldr	r0, [pc, #136]	; (8002d04 <SPI_WIFI_SendData+0xd8>)
 8002c7c:	f003 ff4c 	bl	8006b18 <HAL_SPI_Transmit_IT>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8002c86:	2201      	movs	r2, #1
 8002c88:	2101      	movs	r1, #1
 8002c8a:	481c      	ldr	r0, [pc, #112]	; (8002cfc <SPI_WIFI_SendData+0xd0>)
 8002c8c:	f001 fd02 	bl	8004694 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	e02b      	b.n	8002cee <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff2d 	bl	8002af8 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002cb4:	230a      	movs	r3, #10
 8002cb6:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <SPI_WIFI_SendData+0xd4>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	480f      	ldr	r0, [pc, #60]	; (8002d04 <SPI_WIFI_SendData+0xd8>)
 8002cc8:	f003 ff26 	bl	8006b18 <HAL_SPI_Transmit_IT>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4809      	ldr	r0, [pc, #36]	; (8002cfc <SPI_WIFI_SendData+0xd0>)
 8002cd8:	f001 fcdc 	bl	8004694 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce0:	e005      	b.n	8002cee <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff07 	bl	8002af8 <wait_spi_tx_event>
    
  }
  return len;
 8002cea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000b40 	.word	0x20000b40
 8002cfc:	48001000 	.word	0x48001000
 8002d00:	20000b3c 	.word	0x20000b3c
 8002d04:	20000b74 	.word	0x20000b74

08002d08 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fec7 	bl	8003aa4 <HAL_Delay>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8002d30:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <SPI_WIFI_DelayUs+0x94>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d122      	bne.n	8002d7e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8002d38:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <SPI_WIFI_DelayUs+0x98>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <SPI_WIFI_DelayUs+0x9c>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002d4e:	f000 fe9d 	bl	8003a8c <HAL_GetTick>
 8002d52:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002d54:	e002      	b.n	8002d5c <SPI_WIFI_DelayUs+0x3c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f9      	bne.n	8002d56 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8002d62:	f000 fe93 	bl	8003a8c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <SPI_WIFI_DelayUs+0x94>)
 8002d6e:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <SPI_WIFI_DelayUs+0x94>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <SPI_WIFI_DelayUs+0x5e>
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <SPI_WIFI_DelayUs+0x94>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <SPI_WIFI_DelayUs+0x98>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <SPI_WIFI_DelayUs+0xa0>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	0c9a      	lsrs	r2, r3, #18
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <SPI_WIFI_DelayUs+0x94>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002d9e:	e002      	b.n	8002da6 <SPI_WIFI_DelayUs+0x86>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f9      	bne.n	8002da0 <SPI_WIFI_DelayUs+0x80>
  return;
 8002dac:	bf00      	nop
}
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000b44 	.word	0x20000b44
 8002db8:	20000004 	.word	0x20000004
 8002dbc:	10624dd3 	.word	0x10624dd3
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_SPI_RxCpltCallback+0x24>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <HAL_SPI_RxCpltCallback+0x24>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
  }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000b38 	.word	0x20000b38

08002dec <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_SPI_TxCpltCallback+0x24>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_SPI_TxCpltCallback+0x24>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
  }
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000b3c 	.word	0x20000b3c

08002e14 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <SPI_WIFI_ISR+0x1c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d102      	bne.n	8002e26 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <SPI_WIFI_ISR+0x1c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
   }
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	20000b40 	.word	0x20000b40

08002e34 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <WIFI_Init+0x40>)
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <WIFI_Init+0x44>)
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <WIFI_Init+0x48>)
 8002e48:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <WIFI_Init+0x4c>)
 8002e4a:	490e      	ldr	r1, [pc, #56]	; (8002e84 <WIFI_Init+0x50>)
 8002e4c:	480e      	ldr	r0, [pc, #56]	; (8002e88 <WIFI_Init+0x54>)
 8002e4e:	f7fe ffeb 	bl	8001e28 <ES_WIFI_RegisterBusIO>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002e58:	480b      	ldr	r0, [pc, #44]	; (8002e88 <WIFI_Init+0x54>)
 8002e5a:	f7fe ffb7 	bl	8001dcc <ES_WIFI_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002e68:	79fb      	ldrb	r3, [r7, #7]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	08002b39 	.word	0x08002b39
 8002e78:	08002c2d 	.word	0x08002c2d
 8002e7c:	08002d09 	.word	0x08002d09
 8002e80:	08002a21 	.word	0x08002a21
 8002e84:	08002885 	.word	0x08002885
 8002e88:	20000bd8 	.word	0x20000bd8

08002e8c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	4809      	ldr	r0, [pc, #36]	; (8002ecc <WIFI_Connect+0x40>)
 8002ea6:	f7fe fff3 	bl	8001e90 <ES_WIFI_Connect>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002eb0:	4806      	ldr	r0, [pc, #24]	; (8002ecc <WIFI_Connect+0x40>)
 8002eb2:	f7ff f899 	bl	8001fe8 <ES_WIFI_GetNetworkSettings>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000bd8 	.word	0x20000bd8

08002ed0 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4806      	ldr	r0, [pc, #24]	; (8002ef8 <WIFI_GetMAC_Address+0x28>)
 8002ee0:	f7ff f8ac 	bl	800203c <ES_WIFI_GetMACAddress>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000bd8 	.word	0x20000bd8

08002efc <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002f08:	4809      	ldr	r0, [pc, #36]	; (8002f30 <WIFI_GetIP_Address+0x34>)
 8002f0a:	f7ff f841 	bl	8001f90 <ES_WIFI_IsConnected>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <WIFI_GetIP_Address+0x34>)
 8002f16:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000bd8 	.word	0x20000bd8

08002f34 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	72fb      	strb	r3, [r7, #11]
 8002f42:	4613      	mov	r3, r2
 8002f44:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	74bb      	strb	r3, [r7, #18]
  conn.LocalPort = port;
 8002f52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f54:	82fb      	strh	r3, [r7, #22]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8002f64:	893b      	ldrh	r3, [r7, #8]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	4619      	mov	r1, r3
 8002f72:	4807      	ldr	r0, [pc, #28]	; (8002f90 <WIFI_StartServer+0x5c>)
 8002f74:	f7ff f892 	bl	800209c <ES_WIFI_StartServerSingleConn>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3728      	adds	r7, #40	; 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000bd8 	.word	0x20000bd8

08002f94 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	74bb      	strb	r3, [r7, #18]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	461a      	mov	r2, r3
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	4818      	ldr	r0, [pc, #96]	; (8003014 <WIFI_WaitServerConnection+0x80>)
 8002fb2:	f7ff f927 	bl	8002204 <ES_WIFI_WaitServerConnection>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8002fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10d      	bne.n	8002fe0 <WIFI_WaitServerConnection+0x4c>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <WIFI_WaitServerConnection+0x3c>
 8002fca:	8aba      	ldrh	r2, [r7, #20]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <WIFI_WaitServerConnection+0x48>
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e014      	b.n	800300a <WIFI_WaitServerConnection+0x76>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 8002fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d10f      	bne.n	8003008 <WIFI_WaitServerConnection+0x74>
  {
    if (RemotePort) *RemotePort=0;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <WIFI_WaitServerConnection+0x60>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <WIFI_WaitServerConnection+0x70>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f018 fd2b 	bl	801ba5a <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8003004:	2305      	movs	r3, #5
 8003006:	e000      	b.n	800300a <WIFI_WaitServerConnection+0x76>
  }

  return WIFI_STATUS_ERROR;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	3728      	adds	r7, #40	; 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000bd8 	.word	0x20000bd8

08003018 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4806      	ldr	r0, [pc, #24]	; (8003040 <WIFI_CloseServerConnection+0x28>)
 8003028:	f7ff f9e2 	bl	80023f0 <ES_WIFI_CloseServerConnection>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000bd8 	.word	0x20000bd8

08003044 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4619      	mov	r1, r3
 8003054:	4806      	ldr	r0, [pc, #24]	; (8003070 <WIFI_StopServer+0x2c>)
 8003056:	f7ff fa09 	bl	800246c <ES_WIFI_StopServerSingleConn>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000bd8 	.word	0x20000bd8

08003074 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	4603      	mov	r3, r0
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	4613      	mov	r3, r2
 8003084:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800308a:	89ba      	ldrh	r2, [r7, #12]
 800308c:	7bf9      	ldrb	r1, [r7, #15]
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	4806      	ldr	r0, [pc, #24]	; (80030b4 <WIFI_SendData+0x40>)
 800309c:	f7ff fa26 	bl	80024ec <ES_WIFI_SendData>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000bd8 	.word	0x20000bd8

080030b8 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	4613      	mov	r3, r2
 80030c8:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80030ce:	89ba      	ldrh	r2, [r7, #12]
 80030d0:	7bf9      	ldrb	r1, [r7, #15]
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	4806      	ldr	r0, [pc, #24]	; (80030f8 <WIFI_ReceiveData+0x40>)
 80030e0:	f7ff fa8a 	bl	80025f8 <ES_WIFI_ReceiveData>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000bd8 	.word	0x20000bd8

080030fc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <BSP_HSENSOR_Init+0x38>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	20be      	movs	r0, #190	; 0xbe
 8003108:	4798      	blx	r3
 800310a:	4603      	mov	r3, r0
 800310c:	2bbc      	cmp	r3, #188	; 0xbc
 800310e:	d002      	beq.n	8003116 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	e009      	b.n	800312a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <BSP_HSENSOR_Init+0x3c>)
 8003118:	4a06      	ldr	r2, [pc, #24]	; (8003134 <BSP_HSENSOR_Init+0x38>)
 800311a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <BSP_HSENSOR_Init+0x3c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	20be      	movs	r0, #190	; 0xbe
 8003124:	4798      	blx	r3
    ret = HSENSOR_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800312a:	687b      	ldr	r3, [r7, #4]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000008 	.word	0x20000008
 8003138:	20000b48 	.word	0x20000b48

0800313c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <BSP_HSENSOR_ReadHumidity+0x18>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	20be      	movs	r0, #190	; 0xbe
 8003148:	4798      	blx	r3
 800314a:	eef0 7a40 	vmov.f32	s15, s0
}
 800314e:	eeb0 0a67 	vmov.f32	s0, s15
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000b48 	.word	0x20000b48

08003158 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2120      	movs	r1, #32
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fbb9 	bl	80038e0 <SENSOR_IO_Read>
 800316e:	4603      	mov	r3, r0
 8003170:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	f023 0303 	bic.w	r3, r3, #3
 8003188:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003198:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	2120      	movs	r1, #32
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fb82 	bl	80038ac <SENSOR_IO_Write>
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80031ba:	2300      	movs	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80031be:	f000 fb6b 	bl	8003898 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	210f      	movs	r1, #15
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fb89 	bl	80038e0 <SENSOR_IO_Read>
 80031ce:	4603      	mov	r3, r0
 80031d0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	b2d8      	uxtb	r0, r3
 80031ea:	f107 020c 	add.w	r2, r7, #12
 80031ee:	2302      	movs	r3, #2
 80031f0:	21b0      	movs	r1, #176	; 0xb0
 80031f2:	f000 fb93 	bl	800391c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80031f6:	7b3b      	ldrb	r3, [r7, #12]
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80031fe:	7b7b      	ldrb	r3, [r7, #13]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	b2d8      	uxtb	r0, r3
 800320a:	f107 020c 	add.w	r2, r7, #12
 800320e:	2302      	movs	r3, #2
 8003210:	21b6      	movs	r1, #182	; 0xb6
 8003212:	f000 fb83 	bl	800391c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003216:	7b7b      	ldrb	r3, [r7, #13]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	b21a      	sxth	r2, r3
 800321c:	7b3b      	ldrb	r3, [r7, #12]
 800321e:	b21b      	sxth	r3, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	b2d8      	uxtb	r0, r3
 8003228:	f107 020c 	add.w	r2, r7, #12
 800322c:	2302      	movs	r3, #2
 800322e:	21ba      	movs	r1, #186	; 0xba
 8003230:	f000 fb74 	bl	800391c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003234:	7b7b      	ldrb	r3, [r7, #13]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	b21a      	sxth	r2, r3
 800323a:	7b3b      	ldrb	r3, [r7, #12]
 800323c:	b21b      	sxth	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	b2d8      	uxtb	r0, r3
 8003246:	f107 020c 	add.w	r2, r7, #12
 800324a:	2302      	movs	r3, #2
 800324c:	21a8      	movs	r1, #168	; 0xa8
 800324e:	f000 fb65 	bl	800391c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003252:	7b7b      	ldrb	r3, [r7, #13]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	b21a      	sxth	r2, r3
 8003258:	7b3b      	ldrb	r3, [r7, #12]
 800325a:	b21b      	sxth	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003260:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003264:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003272:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003276:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003284:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003288:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800328c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800329a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800329e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ae:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80032b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80032b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032be:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80032c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80032c6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800330c <HTS221_H_ReadHumidity+0x130>
 80032ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	dd01      	ble.n	80032d8 <HTS221_H_ReadHumidity+0xfc>
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HTS221_H_ReadHumidity+0x134>)
 80032d6:	e00a      	b.n	80032ee <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80032d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80032dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e4:	d502      	bpl.n	80032ec <HTS221_H_ReadHumidity+0x110>
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e000      	b.n	80032ee <HTS221_H_ReadHumidity+0x112>
 80032ec:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80032ee:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80032f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80032f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8003300:	eeb0 0a67 	vmov.f32	s0, s15
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	447a0000 	.word	0x447a0000
 8003310:	447a0000 	.word	0x447a0000

08003314 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2120      	movs	r1, #32
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fada 	bl	80038e0 <SENSOR_IO_Read>
 800332c:	4603      	mov	r3, r0
 800332e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	f023 0304 	bic.w	r3, r3, #4
 8003336:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	f043 0304 	orr.w	r3, r3, #4
 800333e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003356:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	2120      	movs	r1, #32
 8003360:	4618      	mov	r0, r3
 8003362:	f000 faa3 	bl	80038ac <SENSOR_IO_Write>
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b088      	sub	sp, #32
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	b2d8      	uxtb	r0, r3
 800337c:	f107 0208 	add.w	r2, r7, #8
 8003380:	2302      	movs	r3, #2
 8003382:	21b2      	movs	r1, #178	; 0xb2
 8003384:	f000 faca 	bl	800391c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2135      	movs	r1, #53	; 0x35
 800338e:	4618      	mov	r0, r3
 8003390:	f000 faa6 	bl	80038e0 <SENSOR_IO_Read>
 8003394:	4603      	mov	r3, r0
 8003396:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003398:	7ffb      	ldrb	r3, [r7, #31]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	b21b      	sxth	r3, r3
 800339e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a2:	b21a      	sxth	r2, r3
 80033a4:	7a3b      	ldrb	r3, [r7, #8]
 80033a6:	b21b      	sxth	r3, r3
 80033a8:	4313      	orrs	r3, r2
 80033aa:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80033ac:	7ffb      	ldrb	r3, [r7, #31]
 80033ae:	019b      	lsls	r3, r3, #6
 80033b0:	b21b      	sxth	r3, r3
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	b21a      	sxth	r2, r3
 80033b8:	7a7b      	ldrb	r3, [r7, #9]
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	4313      	orrs	r3, r2
 80033be:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80033c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80033c4:	10db      	asrs	r3, r3, #3
 80033c6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80033c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033cc:	10db      	asrs	r3, r3, #3
 80033ce:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	b2d8      	uxtb	r0, r3
 80033d4:	f107 0208 	add.w	r2, r7, #8
 80033d8:	2304      	movs	r3, #4
 80033da:	21bc      	movs	r1, #188	; 0xbc
 80033dc:	f000 fa9e 	bl	800391c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80033e0:	7a7b      	ldrb	r3, [r7, #9]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	b21a      	sxth	r2, r3
 80033e6:	7a3b      	ldrb	r3, [r7, #8]
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	4313      	orrs	r3, r2
 80033ec:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	b21a      	sxth	r2, r3
 80033f4:	7abb      	ldrb	r3, [r7, #10]
 80033f6:	b21b      	sxth	r3, r3
 80033f8:	4313      	orrs	r3, r2
 80033fa:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	b2d8      	uxtb	r0, r3
 8003400:	f107 0208 	add.w	r2, r7, #8
 8003404:	2302      	movs	r3, #2
 8003406:	21aa      	movs	r1, #170	; 0xaa
 8003408:	f000 fa88 	bl	800391c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800340c:	7a7b      	ldrb	r3, [r7, #9]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	b21a      	sxth	r2, r3
 8003412:	7a3b      	ldrb	r3, [r7, #8]
 8003414:	b21b      	sxth	r3, r3
 8003416:	4313      	orrs	r3, r2
 8003418:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800341a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800341e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800342c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003430:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800343e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003442:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003446:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003458:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003468:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	ee07 3a90 	vmov	s15, r3
}
 8003472:	eeb0 0a67 	vmov.f32	s0, s15
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <BSP_LED_Init+0x28>
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <BSP_LED_Init+0x58>)
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	4a10      	ldr	r2, [pc, #64]	; (80034d4 <BSP_LED_Init+0x58>)
 8003492:	f043 0302 	orr.w	r3, r3, #2
 8003496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <BSP_LED_Init+0x58>)
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 80034a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034a8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80034aa:	2301      	movs	r3, #1
 80034ac:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b2:	2302      	movs	r3, #2
 80034b4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <BSP_LED_Init+0x5c>)
 80034ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034be:	f107 020c 	add.w	r2, r7, #12
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 ff3b 	bl	8004340 <HAL_GPIO_Init>
}
 80034ca:	bf00      	nop
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	20000024 	.word	0x20000024

080034dc <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	4a06      	ldr	r2, [pc, #24]	; (8003504 <BSP_LED_On+0x28>)
 80034ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034f2:	b291      	uxth	r1, r2
 80034f4:	2201      	movs	r2, #1
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 f8cc 	bl	8004694 <HAL_GPIO_WritePin>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000024 	.word	0x20000024

08003508 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	4a06      	ldr	r2, [pc, #24]	; (8003530 <BSP_LED_Off+0x28>)
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800351e:	b291      	uxth	r1, r2
 8003520:	2200      	movs	r2, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f001 f8b6 	bl	8004694 <HAL_GPIO_WritePin>
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000024 	.word	0x20000024

08003534 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	460a      	mov	r2, r1
 800353e:	71fb      	strb	r3, [r7, #7]
 8003540:	4613      	mov	r3, r2
 8003542:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <BSP_PB_Init+0xa0>)
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <BSP_PB_Init+0xa0>)
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003550:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <BSP_PB_Init+0xa0>)
 8003552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800355c:	79bb      	ldrb	r3, [r7, #6]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d112      	bne.n	8003588 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003566:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800356c:	2301      	movs	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003570:	2302      	movs	r3, #2
 8003572:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <BSP_PB_Init+0xa4>)
 8003578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357c:	f107 020c 	add.w	r2, r7, #12
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fedc 	bl	8004340 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003588:	79bb      	ldrb	r3, [r7, #6]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d11e      	bne.n	80035cc <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800358e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003592:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003594:	2301      	movs	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003598:	2303      	movs	r3, #3
 800359a:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <BSP_PB_Init+0xa8>)
 800359e:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <BSP_PB_Init+0xa4>)
 80035a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a8:	f107 020c 	add.w	r2, r7, #12
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fec6 	bl	8004340 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80035b4:	2328      	movs	r3, #40	; 0x28
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	2200      	movs	r2, #0
 80035ba:	210f      	movs	r1, #15
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fb6e 	bl	8003c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80035c2:	2328      	movs	r3, #40	; 0x28
 80035c4:	b25b      	sxtb	r3, r3
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fb85 	bl	8003cd6 <HAL_NVIC_EnableIRQ>
  }
}
 80035cc:	bf00      	nop
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	20000028 	.word	0x20000028
 80035dc:	10110000 	.word	0x10110000

080035e0 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <BSP_COM_Init+0x2a>
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <BSP_COM_Init+0xc8>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <BSP_COM_Init+0xc8>)
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <BSP_COM_Init+0xc8>)
 8003600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <BSP_COM_Init+0x48>
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <BSP_COM_Init+0xc8>)
 8003612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003614:	4a24      	ldr	r2, [pc, #144]	; (80036a8 <BSP_COM_Init+0xc8>)
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800361c:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <BSP_COM_Init+0xc8>)
 800361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10b      	bne.n	8003646 <BSP_COM_Init+0x66>
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <BSP_COM_Init+0xc8>)
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <BSP_COM_Init+0xc8>)
 8003634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003638:	6613      	str	r3, [r2, #96]	; 0x60
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <BSP_COM_Init+0xc8>)
 800363c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8003646:	2340      	movs	r3, #64	; 0x40
 8003648:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800364a:	2302      	movs	r3, #2
 800364c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800364e:	2302      	movs	r3, #2
 8003650:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8003656:	2307      	movs	r3, #7
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	4a13      	ldr	r2, [pc, #76]	; (80036ac <BSP_COM_Init+0xcc>)
 800365e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003662:	f107 0214 	add.w	r2, r7, #20
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fe69 	bl	8004340 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8003676:	2307      	movs	r3, #7
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <BSP_COM_Init+0xd0>)
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	f107 0214 	add.w	r2, r7, #20
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fe59 	bl	8004340 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <BSP_COM_Init+0xd4>)
 8003692:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800369a:	6838      	ldr	r0, [r7, #0]
 800369c:	f004 faf5 	bl	8007c8a <HAL_UART_Init>
}
 80036a0:	bf00      	nop
 80036a2:	3728      	adds	r7, #40	; 0x28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	20000030 	.word	0x20000030
 80036b0:	20000034 	.word	0x20000034
 80036b4:	2000002c 	.word	0x2000002c

080036b8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <I2Cx_MspInit+0xa8>)
 80036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c4:	4a26      	ldr	r2, [pc, #152]	; (8003760 <I2Cx_MspInit+0xa8>)
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <I2Cx_MspInit+0xa8>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80036d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036dc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80036de:	2312      	movs	r3, #18
 80036e0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80036e2:	2301      	movs	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80036ea:	2304      	movs	r3, #4
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	4619      	mov	r1, r3
 80036f4:	481b      	ldr	r0, [pc, #108]	; (8003764 <I2Cx_MspInit+0xac>)
 80036f6:	f000 fe23 	bl	8004340 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036fa:	f107 0314 	add.w	r3, r7, #20
 80036fe:	4619      	mov	r1, r3
 8003700:	4818      	ldr	r0, [pc, #96]	; (8003764 <I2Cx_MspInit+0xac>)
 8003702:	f000 fe1d 	bl	8004340 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <I2Cx_MspInit+0xa8>)
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370a:	4a15      	ldr	r2, [pc, #84]	; (8003760 <I2Cx_MspInit+0xa8>)
 800370c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003710:	6593      	str	r3, [r2, #88]	; 0x58
 8003712:	4b13      	ldr	r3, [pc, #76]	; (8003760 <I2Cx_MspInit+0xa8>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <I2Cx_MspInit+0xa8>)
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <I2Cx_MspInit+0xa8>)
 8003724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003728:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <I2Cx_MspInit+0xa8>)
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <I2Cx_MspInit+0xa8>)
 8003730:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003734:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003736:	2200      	movs	r2, #0
 8003738:	210f      	movs	r1, #15
 800373a:	2021      	movs	r0, #33	; 0x21
 800373c:	f000 faaf 	bl	8003c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003740:	2021      	movs	r0, #33	; 0x21
 8003742:	f000 fac8 	bl	8003cd6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	210f      	movs	r1, #15
 800374a:	2022      	movs	r0, #34	; 0x22
 800374c:	f000 faa7 	bl	8003c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003750:	2022      	movs	r0, #34	; 0x22
 8003752:	f000 fac0 	bl	8003cd6 <HAL_NVIC_EnableIRQ>
}
 8003756:	bf00      	nop
 8003758:	3728      	adds	r7, #40	; 0x28
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	48000400 	.word	0x48000400

08003768 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a12      	ldr	r2, [pc, #72]	; (80037bc <I2Cx_Init+0x54>)
 8003774:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a11      	ldr	r2, [pc, #68]	; (80037c0 <I2Cx_Init+0x58>)
 800377a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff89 	bl	80036b8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 ffa4 	bl	80046f4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80037ac:	2100      	movs	r1, #0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f001 fcbc 	bl	800512c <HAL_I2CEx_ConfigAnalogFilter>
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40005800 	.word	0x40005800
 80037c0:	00702681 	.word	0x00702681

080037c4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af04      	add	r7, sp, #16
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	461a      	mov	r2, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	72fb      	strb	r3, [r7, #11]
 80037d6:	460b      	mov	r3, r1
 80037d8:	813b      	strh	r3, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80037e2:	7afb      	ldrb	r3, [r7, #11]
 80037e4:	b299      	uxth	r1, r3
 80037e6:	88f8      	ldrh	r0, [r7, #6]
 80037e8:	893a      	ldrh	r2, [r7, #8]
 80037ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4603      	mov	r3, r0
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f001 f960 	bl	8004ac0 <HAL_I2C_Mem_Read>
 8003800:	4603      	mov	r3, r0
 8003802:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800380a:	7afb      	ldrb	r3, [r7, #11]
 800380c:	4619      	mov	r1, r3
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f832 	bl	8003878 <I2Cx_Error>
  }
  return status;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b08a      	sub	sp, #40	; 0x28
 8003822:	af04      	add	r7, sp, #16
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	4608      	mov	r0, r1
 8003828:	4611      	mov	r1, r2
 800382a:	461a      	mov	r2, r3
 800382c:	4603      	mov	r3, r0
 800382e:	72fb      	strb	r3, [r7, #11]
 8003830:	460b      	mov	r3, r1
 8003832:	813b      	strh	r3, [r7, #8]
 8003834:	4613      	mov	r3, r2
 8003836:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800383c:	7afb      	ldrb	r3, [r7, #11]
 800383e:	b299      	uxth	r1, r3
 8003840:	88f8      	ldrh	r0, [r7, #6]
 8003842:	893a      	ldrh	r2, [r7, #8]
 8003844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003848:	9302      	str	r3, [sp, #8]
 800384a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	4603      	mov	r3, r0
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f001 f81f 	bl	8004898 <HAL_I2C_Mem_Write>
 800385a:	4603      	mov	r3, r0
 800385c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003864:	7afb      	ldrb	r3, [r7, #11]
 8003866:	4619      	mov	r1, r3
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f805 	bl	8003878 <I2Cx_Error>
  }
  return status;
 800386e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 ffc4 	bl	8004812 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ff6c 	bl	8003768 <I2Cx_Init>
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <SENSOR_IO_Init+0x10>)
 800389e:	f7ff ff63 	bl	8003768 <I2Cx_Init>
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20001564 	.word	0x20001564

080038ac <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
 80038b6:	460b      	mov	r3, r1
 80038b8:	71bb      	strb	r3, [r7, #6]
 80038ba:	4613      	mov	r3, r2
 80038bc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80038be:	79bb      	ldrb	r3, [r7, #6]
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	79f9      	ldrb	r1, [r7, #7]
 80038c4:	2301      	movs	r3, #1
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	1d7b      	adds	r3, r7, #5
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2301      	movs	r3, #1
 80038ce:	4803      	ldr	r0, [pc, #12]	; (80038dc <SENSOR_IO_Write+0x30>)
 80038d0:	f7ff ffa5 	bl	800381e <I2Cx_WriteMultiple>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20001564 	.word	0x20001564

080038e0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	4603      	mov	r3, r0
 80038e8:	460a      	mov	r2, r1
 80038ea:	71fb      	strb	r3, [r7, #7]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80038f4:	79bb      	ldrb	r3, [r7, #6]
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	79f9      	ldrb	r1, [r7, #7]
 80038fa:	2301      	movs	r3, #1
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	f107 030f 	add.w	r3, r7, #15
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	2301      	movs	r3, #1
 8003906:	4804      	ldr	r0, [pc, #16]	; (8003918 <SENSOR_IO_Read+0x38>)
 8003908:	f7ff ff5c 	bl	80037c4 <I2Cx_ReadMultiple>

  return read_value;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20001564 	.word	0x20001564

0800391c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af02      	add	r7, sp, #8
 8003922:	603a      	str	r2, [r7, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
 800392a:	460b      	mov	r3, r1
 800392c:	71bb      	strb	r3, [r7, #6]
 800392e:	4613      	mov	r3, r2
 8003930:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003932:	79bb      	ldrb	r3, [r7, #6]
 8003934:	b29a      	uxth	r2, r3
 8003936:	79f9      	ldrb	r1, [r7, #7]
 8003938:	88bb      	ldrh	r3, [r7, #4]
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2301      	movs	r3, #1
 8003942:	4804      	ldr	r0, [pc, #16]	; (8003954 <SENSOR_IO_ReadMultiple+0x38>)
 8003944:	f7ff ff3e 	bl	80037c4 <I2Cx_ReadMultiple>
 8003948:	4603      	mov	r3, r0
 800394a:	b29b      	uxth	r3, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20001564 	.word	0x20001564

08003958 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <BSP_TSENSOR_Init+0x30>)
 8003964:	4a09      	ldr	r2, [pc, #36]	; (800398c <BSP_TSENSOR_Init+0x34>)
 8003966:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003968:	f7ff ff96 	bl	8003898 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <BSP_TSENSOR_Init+0x30>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2100      	movs	r1, #0
 8003974:	20be      	movs	r0, #190	; 0xbe
 8003976:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800397c:	79fb      	ldrb	r3, [r7, #7]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000b4c 	.word	0x20000b4c
 800398c:	20000014 	.word	0x20000014

08003990 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <BSP_TSENSOR_ReadTemp+0x18>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	20be      	movs	r0, #190	; 0xbe
 800399c:	4798      	blx	r3
 800399e:	eef0 7a40 	vmov.f32	s15, s0
}
 80039a2:	eeb0 0a67 	vmov.f32	s0, s15
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000b4c 	.word	0x20000b4c

080039ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b6:	2003      	movs	r0, #3
 80039b8:	f000 f966 	bl	8003c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039bc:	200f      	movs	r0, #15
 80039be:	f000 f815 	bl	80039ec <HAL_InitTick>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	71fb      	strb	r3, [r7, #7]
 80039cc:	e001      	b.n	80039d2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039ce:	f000 f805 	bl	80039dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039d2:	79fb      	ldrb	r3, [r7, #7]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039f8:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <HAL_InitTick+0x6c>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d023      	beq.n	8003a48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_InitTick+0x70>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <HAL_InitTick+0x6c>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f96b 	bl	8003cf2 <HAL_SYSTICK_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b0f      	cmp	r3, #15
 8003a26:	d809      	bhi.n	8003a3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	f000 f935 	bl	8003c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a34:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <HAL_InitTick+0x74>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e007      	b.n	8003a4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
 8003a40:	e004      	b.n	8003a4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e001      	b.n	8003a4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	2000003c 	.word	0x2000003c
 8003a5c:	20000004 	.word	0x20000004
 8003a60:	20000038 	.word	0x20000038

08003a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_IncTick+0x20>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_IncTick+0x24>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <HAL_IncTick+0x24>)
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2000003c 	.word	0x2000003c
 8003a88:	200015b0 	.word	0x200015b0

08003a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <HAL_GetTick+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	200015b0 	.word	0x200015b0

08003aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7ff ffee 	bl	8003a8c <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d005      	beq.n	8003aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_Delay+0x40>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aca:	bf00      	nop
 8003acc:	f7ff ffde 	bl	8003a8c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d8f7      	bhi.n	8003acc <HAL_Delay+0x28>
  {
  }
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2000003c 	.word	0x2000003c

08003ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <__NVIC_SetPriorityGrouping+0x44>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b04:	4013      	ands	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b1a:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <__NVIC_SetPriorityGrouping+0x44>)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	60d3      	str	r3, [r2, #12]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <__NVIC_GetPriorityGrouping+0x18>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	0a1b      	lsrs	r3, r3, #8
 8003b3a:	f003 0307 	and.w	r3, r3, #7
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	db0b      	blt.n	8003b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	f003 021f 	and.w	r2, r3, #31
 8003b64:	4907      	ldr	r1, [pc, #28]	; (8003b84 <__NVIC_EnableIRQ+0x38>)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	e000e100 	.word	0xe000e100

08003b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	db0a      	blt.n	8003bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	490c      	ldr	r1, [pc, #48]	; (8003bd4 <__NVIC_SetPriority+0x4c>)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	0112      	lsls	r2, r2, #4
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	440b      	add	r3, r1
 8003bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bb0:	e00a      	b.n	8003bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	4908      	ldr	r1, [pc, #32]	; (8003bd8 <__NVIC_SetPriority+0x50>)
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	3b04      	subs	r3, #4
 8003bc0:	0112      	lsls	r2, r2, #4
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	761a      	strb	r2, [r3, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000e100 	.word	0xe000e100
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b089      	sub	sp, #36	; 0x24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f1c3 0307 	rsb	r3, r3, #7
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	bf28      	it	cs
 8003bfa:	2304      	movcs	r3, #4
 8003bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3304      	adds	r3, #4
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	d902      	bls.n	8003c0c <NVIC_EncodePriority+0x30>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3b03      	subs	r3, #3
 8003c0a:	e000      	b.n	8003c0e <NVIC_EncodePriority+0x32>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c10:	f04f 32ff 	mov.w	r2, #4294967295
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	401a      	ands	r2, r3
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c24:	f04f 31ff 	mov.w	r1, #4294967295
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	43d9      	mvns	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c34:	4313      	orrs	r3, r2
         );
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c54:	d301      	bcc.n	8003c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c56:	2301      	movs	r3, #1
 8003c58:	e00f      	b.n	8003c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <SysTick_Config+0x40>)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c62:	210f      	movs	r1, #15
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295
 8003c68:	f7ff ff8e 	bl	8003b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <SysTick_Config+0x40>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c72:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <SysTick_Config+0x40>)
 8003c74:	2207      	movs	r2, #7
 8003c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	e000e010 	.word	0xe000e010

08003c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ff29 	bl	8003ae8 <__NVIC_SetPriorityGrouping>
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b086      	sub	sp, #24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cb0:	f7ff ff3e 	bl	8003b30 <__NVIC_GetPriorityGrouping>
 8003cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	6978      	ldr	r0, [r7, #20]
 8003cbc:	f7ff ff8e 	bl	8003bdc <NVIC_EncodePriority>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff5d 	bl	8003b88 <__NVIC_SetPriority>
}
 8003cce:	bf00      	nop
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	4603      	mov	r3, r0
 8003cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff31 	bl	8003b4c <__NVIC_EnableIRQ>
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ffa2 	bl	8003c44 <SysTick_Config>
 8003d00:	4603      	mov	r3, r0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d005      	beq.n	8003d2e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2204      	movs	r2, #4
 8003d26:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e047      	b.n	8003dbe <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 020e 	bic.w	r2, r2, #14
 8003d3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f003 021c 	and.w	r2, r3, #28
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d70:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d7a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00c      	beq.n	8003d9e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d9c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
    }
  }
  return status;
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dda:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_FLASH_Program+0xd0>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_FLASH_Program+0x1e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e053      	b.n	8003e8e <HAL_FLASH_Program+0xc6>
 8003de6:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <HAL_FLASH_Program+0xd0>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003df0:	f000 f894 	bl	8003f1c <FLASH_WaitForLastOperation>
 8003df4:	4603      	mov	r3, r0
 8003df6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d143      	bne.n	8003e86 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <HAL_FLASH_Program+0xd0>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003e04:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_FLASH_Program+0xd4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003e10:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <HAL_FLASH_Program+0xd4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a21      	ldr	r2, [pc, #132]	; (8003e9c <HAL_FLASH_Program+0xd4>)
 8003e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e1a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_FLASH_Program+0xd0>)
 8003e1e:	2202      	movs	r2, #2
 8003e20:	771a      	strb	r2, [r3, #28]
 8003e22:	e002      	b.n	8003e2a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003e24:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <HAL_FLASH_Program+0xd0>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d107      	bne.n	8003e40 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e34:	68b8      	ldr	r0, [r7, #8]
 8003e36:	f000 f8c9 	bl	8003fcc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	e010      	b.n	8003e62 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d002      	beq.n	8003e4c <HAL_FLASH_Program+0x84>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d10a      	bne.n	8003e62 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	68b8      	ldr	r0, [r7, #8]
 8003e52:	f000 f8df 	bl	8004014 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d102      	bne.n	8003e62 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003e5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e60:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e66:	f000 f859 	bl	8003f1c <FLASH_WaitForLastOperation>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d006      	beq.n	8003e82 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_FLASH_Program+0xd4>)
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	4907      	ldr	r1, [pc, #28]	; (8003e9c <HAL_FLASH_Program+0xd4>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003e82:	f000 fa19 	bl	80042b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e86:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <HAL_FLASH_Program+0xd0>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]

  return status;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000040 	.word	0x20000040
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_FLASH_Unlock+0x38>)
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	da0b      	bge.n	8003eca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_FLASH_Unlock+0x38>)
 8003eb4:	4a09      	ldr	r2, [pc, #36]	; (8003edc <HAL_FLASH_Unlock+0x3c>)
 8003eb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003eb8:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <HAL_FLASH_Unlock+0x38>)
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003ebc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_FLASH_Unlock+0x38>)
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da01      	bge.n	8003eca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003eca:	79fb      	ldrb	r3, [r7, #7]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	45670123 	.word	0x45670123
 8003ee0:	cdef89ab 	.word	0xcdef89ab

08003ee4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_FLASH_Lock+0x1c>)
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <HAL_FLASH_Lock+0x1c>)
 8003eee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40022000 	.word	0x40022000

08003f04 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_FLASH_GetError+0x14>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000040 	.word	0x20000040

08003f1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7ff fdb2 	bl	8003a8c <HAL_GetTick>
 8003f28:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003f2a:	e00d      	b.n	8003f48 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d009      	beq.n	8003f48 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003f34:	f7ff fdaa 	bl	8003a8c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d801      	bhi.n	8003f48 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e036      	b.n	8003fb6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <FLASH_WaitForLastOperation+0xa4>)
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1eb      	bne.n	8003f2c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <FLASH_WaitForLastOperation+0xa4>)
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <FLASH_WaitForLastOperation+0xa8>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01e      	beq.n	8003fa2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003f64:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <FLASH_WaitForLastOperation+0xac>)
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <FLASH_WaitForLastOperation+0xac>)
 8003f6e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <FLASH_WaitForLastOperation+0x6e>
 8003f7a:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <FLASH_WaitForLastOperation+0xa4>)
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f84:	490e      	ldr	r1, [pc, #56]	; (8003fc0 <FLASH_WaitForLastOperation+0xa4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	618b      	str	r3, [r1, #24]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <FLASH_WaitForLastOperation+0x82>
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <FLASH_WaitForLastOperation+0xa4>)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f9c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e009      	b.n	8003fb6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <FLASH_WaitForLastOperation+0xa4>)
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <FLASH_WaitForLastOperation+0xa4>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	0002c3fa 	.word	0x0002c3fa
 8003fc8:	20000040 	.word	0x20000040

08003fcc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003fcc:	b490      	push	{r4, r7}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <FLASH_Program_DoubleWord+0x44>)
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <FLASH_Program_DoubleWord+0x44>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003fea:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003fee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	f04f 0400 	mov.w	r4, #0
 8003ffa:	0013      	movs	r3, r2
 8003ffc:	2400      	movs	r4, #0
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	3204      	adds	r2, #4
 8004002:	6013      	str	r3, [r2, #0]
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bc90      	pop	{r4, r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40022000 	.word	0x40022000

08004014 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800402a:	4b13      	ldr	r3, [pc, #76]	; (8004078 <FLASH_Program_Fast+0x64>)
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <FLASH_Program_Fast+0x64>)
 8004030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004034:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004036:	f3ef 8310 	mrs	r3, PRIMASK
 800403a:	60fb      	str	r3, [r7, #12]
  return(result);
 800403c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800403e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004040:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	3304      	adds	r3, #4
 800404e:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3304      	adds	r3, #4
 8004054:	617b      	str	r3, [r7, #20]
    row_index--;
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	3b01      	subs	r3, #1
 800405a:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800405c:	7ffb      	ldrb	r3, [r7, #31]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1ef      	bne.n	8004042 <FLASH_Program_Fast+0x2e>
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800406c:	bf00      	nop
 800406e:	3724      	adds	r7, #36	; 0x24
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40022000 	.word	0x40022000

0800407c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004086:	4b4c      	ldr	r3, [pc, #304]	; (80041b8 <HAL_FLASHEx_Erase+0x13c>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_FLASHEx_Erase+0x16>
 800408e:	2302      	movs	r3, #2
 8004090:	e08d      	b.n	80041ae <HAL_FLASHEx_Erase+0x132>
 8004092:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <HAL_FLASHEx_Erase+0x13c>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800409c:	f7ff ff3e 	bl	8003f1c <FLASH_WaitForLastOperation>
 80040a0:	4603      	mov	r3, r0
 80040a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d17d      	bne.n	80041a6 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040aa:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <HAL_FLASHEx_Erase+0x13c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80040b0:	4b42      	ldr	r3, [pc, #264]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d019      	beq.n	80040f0 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80040bc:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a3e      	ldr	r2, [pc, #248]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 80040c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040c6:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80040c8:	4b3c      	ldr	r3, [pc, #240]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d009      	beq.n	80040e8 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80040d4:	4b39      	ldr	r3, [pc, #228]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a38      	ldr	r2, [pc, #224]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 80040da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040de:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80040e0:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <HAL_FLASHEx_Erase+0x13c>)
 80040e2:	2203      	movs	r2, #3
 80040e4:	771a      	strb	r2, [r3, #28]
 80040e6:	e016      	b.n	8004116 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80040e8:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <HAL_FLASHEx_Erase+0x13c>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	771a      	strb	r2, [r3, #28]
 80040ee:	e012      	b.n	8004116 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80040f0:	4b32      	ldr	r3, [pc, #200]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d009      	beq.n	8004110 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2e      	ldr	r2, [pc, #184]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 8004102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004106:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004108:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <HAL_FLASHEx_Erase+0x13c>)
 800410a:	2202      	movs	r2, #2
 800410c:	771a      	strb	r2, [r3, #28]
 800410e:	e002      	b.n	8004116 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004110:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <HAL_FLASHEx_Erase+0x13c>)
 8004112:	2200      	movs	r2, #0
 8004114:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d113      	bne.n	8004146 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f84c 	bl	80041c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004128:	f24c 3050 	movw	r0, #50000	; 0xc350
 800412c:	f7ff fef6 	bl	8003f1c <FLASH_WaitForLastOperation>
 8004130:	4603      	mov	r3, r0
 8004132:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8004134:	4b21      	ldr	r3, [pc, #132]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	4a20      	ldr	r2, [pc, #128]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 800413a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800413e:	f023 0304 	bic.w	r3, r3, #4
 8004142:	6153      	str	r3, [r2, #20]
 8004144:	e02d      	b.n	80041a2 <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	e01d      	b.n	8004192 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4619      	mov	r1, r3
 800415c:	68b8      	ldr	r0, [r7, #8]
 800415e:	f000 f867 	bl	8004230 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004162:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004166:	f7ff fed9 	bl	8003f1c <FLASH_WaitForLastOperation>
 800416a:	4603      	mov	r3, r0
 800416c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <HAL_FLASHEx_Erase+0x140>)
 8004174:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004178:	f023 0302 	bic.w	r3, r3, #2
 800417c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	601a      	str	r2, [r3, #0]
          break;
 800418a:	e00a      	b.n	80041a2 <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	3301      	adds	r3, #1
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	4413      	add	r3, r2
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d3d9      	bcc.n	8004156 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80041a2:	f000 f889 	bl	80042b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <HAL_FLASHEx_Erase+0x13c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]

  return status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000040 	.word	0x20000040
 80041bc:	40022000 	.word	0x40022000

080041c0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80041c8:	4b18      	ldr	r3, [pc, #96]	; (800422c <FLASH_MassErase+0x6c>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d016      	beq.n	8004202 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <FLASH_MassErase+0x6c>)
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <FLASH_MassErase+0x6c>)
 80041e4:	f043 0304 	orr.w	r3, r3, #4
 80041e8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00e      	beq.n	8004212 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <FLASH_MassErase+0x6c>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	4a0c      	ldr	r2, [pc, #48]	; (800422c <FLASH_MassErase+0x6c>)
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fe:	6153      	str	r3, [r2, #20]
 8004200:	e007      	b.n	8004212 <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <FLASH_MassErase+0x6c>)
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <FLASH_MassErase+0x6c>)
 8004208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420c:	f043 0304 	orr.w	r3, r3, #4
 8004210:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <FLASH_MassErase+0x6c>)
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	4a05      	ldr	r2, [pc, #20]	; (800422c <FLASH_MassErase+0x6c>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6153      	str	r3, [r2, #20]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40022000 	.word	0x40022000

08004230 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800423a:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <FLASH_PageErase+0x84>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <FLASH_PageErase+0x84>)
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <FLASH_PageErase+0x84>)
 800424c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004250:	6153      	str	r3, [r2, #20]
 8004252:	e011      	b.n	8004278 <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <FLASH_PageErase+0x84>)
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <FLASH_PageErase+0x84>)
 8004264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004268:	6153      	str	r3, [r2, #20]
 800426a:	e005      	b.n	8004278 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <FLASH_PageErase+0x84>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	4a10      	ldr	r2, [pc, #64]	; (80042b4 <FLASH_PageErase+0x84>)
 8004272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004276:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <FLASH_PageErase+0x84>)
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004288:	490a      	ldr	r1, [pc, #40]	; (80042b4 <FLASH_PageErase+0x84>)
 800428a:	4313      	orrs	r3, r2
 800428c:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <FLASH_PageErase+0x84>)
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	4a08      	ldr	r2, [pc, #32]	; (80042b4 <FLASH_PageErase+0x84>)
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <FLASH_PageErase+0x84>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <FLASH_PageErase+0x84>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6153      	str	r3, [r2, #20]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40022000 	.word	0x40022000

080042b8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80042be:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <FLASH_FlushCaches+0x80>)
 80042c0:	7f1b      	ldrb	r3, [r3, #28]
 80042c2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d002      	beq.n	80042d0 <FLASH_FlushCaches+0x18>
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d111      	bne.n	80042f4 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80042d0:	4b1a      	ldr	r3, [pc, #104]	; (800433c <FLASH_FlushCaches+0x84>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <FLASH_FlushCaches+0x84>)
 80042d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b17      	ldr	r3, [pc, #92]	; (800433c <FLASH_FlushCaches+0x84>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <FLASH_FlushCaches+0x84>)
 80042e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e8:	4b14      	ldr	r3, [pc, #80]	; (800433c <FLASH_FlushCaches+0x84>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <FLASH_FlushCaches+0x84>)
 80042ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042f2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d002      	beq.n	8004300 <FLASH_FlushCaches+0x48>
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d111      	bne.n	8004324 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <FLASH_FlushCaches+0x84>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0d      	ldr	r2, [pc, #52]	; (800433c <FLASH_FlushCaches+0x84>)
 8004306:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <FLASH_FlushCaches+0x84>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0a      	ldr	r2, [pc, #40]	; (800433c <FLASH_FlushCaches+0x84>)
 8004312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004316:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <FLASH_FlushCaches+0x84>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a07      	ldr	r2, [pc, #28]	; (800433c <FLASH_FlushCaches+0x84>)
 800431e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004322:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <FLASH_FlushCaches+0x80>)
 8004326:	2200      	movs	r2, #0
 8004328:	771a      	strb	r2, [r3, #28]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000040 	.word	0x20000040
 800433c:	40022000 	.word	0x40022000

08004340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800434e:	e166      	b.n	800461e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2101      	movs	r1, #1
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	4013      	ands	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8158 	beq.w	8004618 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d00b      	beq.n	8004388 <HAL_GPIO_Init+0x48>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d007      	beq.n	8004388 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800437c:	2b11      	cmp	r3, #17
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b12      	cmp	r3, #18
 8004386:	d130      	bne.n	80043ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	2203      	movs	r2, #3
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4013      	ands	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043be:	2201      	movs	r2, #1
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4013      	ands	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	f003 0201 	and.w	r2, r3, #1
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	2203      	movs	r2, #3
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0xea>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b12      	cmp	r3, #18
 8004428:	d123      	bne.n	8004472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	08da      	lsrs	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3208      	adds	r2, #8
 8004432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	220f      	movs	r2, #15
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4013      	ands	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	08da      	lsrs	r2, r3, #3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3208      	adds	r2, #8
 800446c:	6939      	ldr	r1, [r7, #16]
 800446e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	2203      	movs	r2, #3
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0203 	and.w	r2, r3, #3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80b2 	beq.w	8004618 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b4:	4b61      	ldr	r3, [pc, #388]	; (800463c <HAL_GPIO_Init+0x2fc>)
 80044b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b8:	4a60      	ldr	r2, [pc, #384]	; (800463c <HAL_GPIO_Init+0x2fc>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6613      	str	r3, [r2, #96]	; 0x60
 80044c0:	4b5e      	ldr	r3, [pc, #376]	; (800463c <HAL_GPIO_Init+0x2fc>)
 80044c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044cc:	4a5c      	ldr	r2, [pc, #368]	; (8004640 <HAL_GPIO_Init+0x300>)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	089b      	lsrs	r3, r3, #2
 80044d2:	3302      	adds	r3, #2
 80044d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	220f      	movs	r2, #15
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044f6:	d02b      	beq.n	8004550 <HAL_GPIO_Init+0x210>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a52      	ldr	r2, [pc, #328]	; (8004644 <HAL_GPIO_Init+0x304>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d025      	beq.n	800454c <HAL_GPIO_Init+0x20c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a51      	ldr	r2, [pc, #324]	; (8004648 <HAL_GPIO_Init+0x308>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d01f      	beq.n	8004548 <HAL_GPIO_Init+0x208>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a50      	ldr	r2, [pc, #320]	; (800464c <HAL_GPIO_Init+0x30c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d019      	beq.n	8004544 <HAL_GPIO_Init+0x204>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a4f      	ldr	r2, [pc, #316]	; (8004650 <HAL_GPIO_Init+0x310>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <HAL_GPIO_Init+0x200>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a4e      	ldr	r2, [pc, #312]	; (8004654 <HAL_GPIO_Init+0x314>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00d      	beq.n	800453c <HAL_GPIO_Init+0x1fc>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a4d      	ldr	r2, [pc, #308]	; (8004658 <HAL_GPIO_Init+0x318>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <HAL_GPIO_Init+0x1f8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a4c      	ldr	r2, [pc, #304]	; (800465c <HAL_GPIO_Init+0x31c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d101      	bne.n	8004534 <HAL_GPIO_Init+0x1f4>
 8004530:	2307      	movs	r3, #7
 8004532:	e00e      	b.n	8004552 <HAL_GPIO_Init+0x212>
 8004534:	2308      	movs	r3, #8
 8004536:	e00c      	b.n	8004552 <HAL_GPIO_Init+0x212>
 8004538:	2306      	movs	r3, #6
 800453a:	e00a      	b.n	8004552 <HAL_GPIO_Init+0x212>
 800453c:	2305      	movs	r3, #5
 800453e:	e008      	b.n	8004552 <HAL_GPIO_Init+0x212>
 8004540:	2304      	movs	r3, #4
 8004542:	e006      	b.n	8004552 <HAL_GPIO_Init+0x212>
 8004544:	2303      	movs	r3, #3
 8004546:	e004      	b.n	8004552 <HAL_GPIO_Init+0x212>
 8004548:	2302      	movs	r3, #2
 800454a:	e002      	b.n	8004552 <HAL_GPIO_Init+0x212>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_GPIO_Init+0x212>
 8004550:	2300      	movs	r3, #0
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	f002 0203 	and.w	r2, r2, #3
 8004558:	0092      	lsls	r2, r2, #2
 800455a:	4093      	lsls	r3, r2
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004562:	4937      	ldr	r1, [pc, #220]	; (8004640 <HAL_GPIO_Init+0x300>)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	3302      	adds	r3, #2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004570:	4b3b      	ldr	r3, [pc, #236]	; (8004660 <HAL_GPIO_Init+0x320>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	43db      	mvns	r3, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004594:	4a32      	ldr	r2, [pc, #200]	; (8004660 <HAL_GPIO_Init+0x320>)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <HAL_GPIO_Init+0x320>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045be:	4a28      	ldr	r2, [pc, #160]	; (8004660 <HAL_GPIO_Init+0x320>)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045c4:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_GPIO_Init+0x320>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045e8:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <HAL_GPIO_Init+0x320>)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045ee:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <HAL_GPIO_Init+0x320>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004612:	4a13      	ldr	r2, [pc, #76]	; (8004660 <HAL_GPIO_Init+0x320>)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	3301      	adds	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	f47f ae91 	bne.w	8004350 <HAL_GPIO_Init+0x10>
  }
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000
 8004640:	40010000 	.word	0x40010000
 8004644:	48000400 	.word	0x48000400
 8004648:	48000800 	.word	0x48000800
 800464c:	48000c00 	.word	0x48000c00
 8004650:	48001000 	.word	0x48001000
 8004654:	48001400 	.word	0x48001400
 8004658:	48001800 	.word	0x48001800
 800465c:	48001c00 	.word	0x48001c00
 8004660:	40010400 	.word	0x40010400

08004664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	e001      	b.n	8004686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	807b      	strh	r3, [r7, #2]
 80046a0:	4613      	mov	r3, r2
 80046a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046a4:	787b      	ldrb	r3, [r7, #1]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046aa:	887a      	ldrh	r2, [r7, #2]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046b0:	e002      	b.n	80046b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046b2:	887a      	ldrh	r2, [r7, #2]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d006      	beq.n	80046e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fc fe92 	bl	800140c <HAL_GPIO_EXTI_Callback>
  }
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40010400 	.word	0x40010400

080046f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e081      	b.n	800480a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f8a8 	bl	8004870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	; 0x24
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004744:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004754:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d107      	bne.n	800476e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	e006      	b.n	800477c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800477a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d104      	bne.n	800478e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800478c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800479c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	ea42 0103 	orr.w	r1, r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	021a      	lsls	r2, r3, #8
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e021      	b.n	8004868 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f821 	bl	8004884 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	4608      	mov	r0, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	817b      	strh	r3, [r7, #10]
 80048aa:	460b      	mov	r3, r1
 80048ac:	813b      	strh	r3, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	f040 80f9 	bne.w	8004ab2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_I2C_Mem_Write+0x34>
 80048c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d105      	bne.n	80048d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0ed      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_I2C_Mem_Write+0x4e>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e0e6      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x21c>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048ee:	f7ff f8cd 	bl	8003a8c <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2319      	movs	r3, #25
 80048fa:	2201      	movs	r2, #1
 80048fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fac3 	bl	8004e8c <I2C_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0d1      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2221      	movs	r2, #33	; 0x21
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2240      	movs	r2, #64	; 0x40
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a3a      	ldr	r2, [r7, #32]
 800492a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004938:	88f8      	ldrh	r0, [r7, #6]
 800493a:	893a      	ldrh	r2, [r7, #8]
 800493c:	8979      	ldrh	r1, [r7, #10]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	4603      	mov	r3, r0
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f9d3 	bl	8004cf4 <I2C_RequestMemoryWrite>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0a9      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	2bff      	cmp	r3, #255	; 0xff
 8004968:	d90e      	bls.n	8004988 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	22ff      	movs	r2, #255	; 0xff
 800496e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	b2da      	uxtb	r2, r3
 8004976:	8979      	ldrh	r1, [r7, #10]
 8004978:	2300      	movs	r3, #0
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fba5 	bl	80050d0 <I2C_TransferConfig>
 8004986:	e00f      	b.n	80049a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004996:	b2da      	uxtb	r2, r3
 8004998:	8979      	ldrh	r1, [r7, #10]
 800499a:	2300      	movs	r3, #0
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fb94 	bl	80050d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 faad 	bl	8004f0c <I2C_WaitOnTXISFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e07b      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d034      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x1c8>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d130      	bne.n	8004a60 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	2200      	movs	r2, #0
 8004a06:	2180      	movs	r1, #128	; 0x80
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fa3f 	bl	8004e8c <I2C_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e04d      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2bff      	cmp	r3, #255	; 0xff
 8004a20:	d90e      	bls.n	8004a40 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	22ff      	movs	r2, #255	; 0xff
 8004a26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	8979      	ldrh	r1, [r7, #10]
 8004a30:	2300      	movs	r3, #0
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fb49 	bl	80050d0 <I2C_TransferConfig>
 8004a3e:	e00f      	b.n	8004a60 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	8979      	ldrh	r1, [r7, #10]
 8004a52:	2300      	movs	r3, #0
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fb38 	bl	80050d0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d19e      	bne.n	80049a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fa8c 	bl	8004f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e01a      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2220      	movs	r2, #32
 8004a84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_I2C_Mem_Write+0x224>)
 8004a92:	400b      	ands	r3, r1
 8004a94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e000      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
  }
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	fe00e800 	.word	0xfe00e800

08004ac0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	4608      	mov	r0, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	461a      	mov	r2, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	813b      	strh	r3, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	f040 80fd 	bne.w	8004ce2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_I2C_Mem_Read+0x34>
 8004aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0f1      	b.n	8004ce4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_I2C_Mem_Read+0x4e>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e0ea      	b.n	8004ce4 <HAL_I2C_Mem_Read+0x224>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b16:	f7fe ffb9 	bl	8003a8c <HAL_GetTick>
 8004b1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2319      	movs	r3, #25
 8004b22:	2201      	movs	r2, #1
 8004b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f9af 	bl	8004e8c <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0d5      	b.n	8004ce4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2222      	movs	r2, #34	; 0x22
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2240      	movs	r2, #64	; 0x40
 8004b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b60:	88f8      	ldrh	r0, [r7, #6]
 8004b62:	893a      	ldrh	r2, [r7, #8]
 8004b64:	8979      	ldrh	r1, [r7, #10]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4603      	mov	r3, r0
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f913 	bl	8004d9c <I2C_RequestMemoryRead>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0ad      	b.n	8004ce4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2bff      	cmp	r3, #255	; 0xff
 8004b90:	d90e      	bls.n	8004bb0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	22ff      	movs	r2, #255	; 0xff
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	8979      	ldrh	r1, [r7, #10]
 8004ba0:	4b52      	ldr	r3, [pc, #328]	; (8004cec <HAL_I2C_Mem_Read+0x22c>)
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fa91 	bl	80050d0 <I2C_TransferConfig>
 8004bae:	e00f      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	8979      	ldrh	r1, [r7, #10]
 8004bc2:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <HAL_I2C_Mem_Read+0x22c>)
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fa80 	bl	80050d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2104      	movs	r1, #4
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f956 	bl	8004e8c <I2C_WaitOnFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07c      	b.n	8004ce4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d034      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x1d0>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d130      	bne.n	8004c90 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	2200      	movs	r2, #0
 8004c36:	2180      	movs	r1, #128	; 0x80
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f927 	bl	8004e8c <I2C_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e04d      	b.n	8004ce4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2bff      	cmp	r3, #255	; 0xff
 8004c50:	d90e      	bls.n	8004c70 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	22ff      	movs	r2, #255	; 0xff
 8004c56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	8979      	ldrh	r1, [r7, #10]
 8004c60:	2300      	movs	r3, #0
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fa31 	bl	80050d0 <I2C_TransferConfig>
 8004c6e:	e00f      	b.n	8004c90 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	8979      	ldrh	r1, [r7, #10]
 8004c82:	2300      	movs	r3, #0
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fa20 	bl	80050d0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d19a      	bne.n	8004bd0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f974 	bl	8004f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e01a      	b.n	8004ce4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_I2C_Mem_Read+0x230>)
 8004cc2:	400b      	ands	r3, r1
 8004cc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e000      	b.n	8004ce4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	80002400 	.word	0x80002400
 8004cf0:	fe00e800 	.word	0xfe00e800

08004cf4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	817b      	strh	r3, [r7, #10]
 8004d06:	460b      	mov	r3, r1
 8004d08:	813b      	strh	r3, [r7, #8]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	8979      	ldrh	r1, [r7, #10]
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <I2C_RequestMemoryWrite+0xa4>)
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f9d7 	bl	80050d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	69b9      	ldr	r1, [r7, #24]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f8f0 	bl	8004f0c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e02c      	b.n	8004d90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d3c:	893b      	ldrh	r3, [r7, #8]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
 8004d46:	e015      	b.n	8004d74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	69b9      	ldr	r1, [r7, #24]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f8d6 	bl	8004f0c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e012      	b.n	8004d90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d6a:	893b      	ldrh	r3, [r7, #8]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2180      	movs	r1, #128	; 0x80
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f884 	bl	8004e8c <I2C_WaitOnFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	80002000 	.word	0x80002000

08004d9c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	4608      	mov	r0, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	461a      	mov	r2, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	817b      	strh	r3, [r7, #10]
 8004dae:	460b      	mov	r3, r1
 8004db0:	813b      	strh	r3, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	8979      	ldrh	r1, [r7, #10]
 8004dbc:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <I2C_RequestMemoryRead+0xa4>)
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f984 	bl	80050d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	69b9      	ldr	r1, [r7, #24]
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f89d 	bl	8004f0c <I2C_WaitOnTXISFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e02c      	b.n	8004e36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d105      	bne.n	8004dee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004de2:	893b      	ldrh	r3, [r7, #8]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28
 8004dec:	e015      	b.n	8004e1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dee:	893b      	ldrh	r3, [r7, #8]
 8004df0:	0a1b      	lsrs	r3, r3, #8
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	69b9      	ldr	r1, [r7, #24]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f883 	bl	8004f0c <I2C_WaitOnTXISFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e012      	b.n	8004e36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e10:	893b      	ldrh	r3, [r7, #8]
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2140      	movs	r1, #64	; 0x40
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f831 	bl	8004e8c <I2C_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	80002000 	.word	0x80002000

08004e44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d103      	bne.n	8004e62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d007      	beq.n	8004e80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	619a      	str	r2, [r3, #24]
  }
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e9c:	e022      	b.n	8004ee4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d01e      	beq.n	8004ee4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fe fdf1 	bl	8003a8c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d113      	bne.n	8004ee4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e00f      	b.n	8004f04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4013      	ands	r3, r2
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d0cd      	beq.n	8004e9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f18:	e02c      	b.n	8004f74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f870 	bl	8005004 <I2C_IsAcknowledgeFailed>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e02a      	b.n	8004f84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d01e      	beq.n	8004f74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fe fda9 	bl	8003a8c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d113      	bne.n	8004f74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e007      	b.n	8004f84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d1cb      	bne.n	8004f1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f98:	e028      	b.n	8004fec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f830 	bl	8005004 <I2C_IsAcknowledgeFailed>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e026      	b.n	8004ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fe fd6d 	bl	8003a8c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d113      	bne.n	8004fec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e007      	b.n	8004ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d1cf      	bne.n	8004f9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b10      	cmp	r3, #16
 800501c:	d151      	bne.n	80050c2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501e:	e022      	b.n	8005066 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d01e      	beq.n	8005066 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005028:	f7fe fd30 	bl	8003a8c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	429a      	cmp	r2, r3
 8005036:	d302      	bcc.n	800503e <I2C_IsAcknowledgeFailed+0x3a>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d113      	bne.n	8005066 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e02e      	b.n	80050c4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b20      	cmp	r3, #32
 8005072:	d1d5      	bne.n	8005020 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2210      	movs	r2, #16
 800507a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2220      	movs	r2, #32
 8005082:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff fedd 	bl	8004e44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6859      	ldr	r1, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <I2C_IsAcknowledgeFailed+0xc8>)
 8005096:	400b      	ands	r3, r1
 8005098:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	f043 0204 	orr.w	r2, r3, #4
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	fe00e800 	.word	0xfe00e800

080050d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	607b      	str	r3, [r7, #4]
 80050da:	460b      	mov	r3, r1
 80050dc:	817b      	strh	r3, [r7, #10]
 80050de:	4613      	mov	r3, r2
 80050e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	0d5b      	lsrs	r3, r3, #21
 80050ec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80050f0:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <I2C_TransferConfig+0x58>)
 80050f2:	430b      	orrs	r3, r1
 80050f4:	43db      	mvns	r3, r3
 80050f6:	ea02 0103 	and.w	r1, r2, r3
 80050fa:	897b      	ldrh	r3, [r7, #10]
 80050fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005100:	7a7b      	ldrb	r3, [r7, #9]
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	431a      	orrs	r2, r3
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	03ff63ff 	.word	0x03ff63ff

0800512c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b20      	cmp	r3, #32
 8005140:	d138      	bne.n	80051b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800514c:	2302      	movs	r3, #2
 800514e:	e032      	b.n	80051b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	; 0x24
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800517e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e000      	b.n	80051b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051c8:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <HAL_PWREx_GetVoltageRange+0x3c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d4:	d102      	bne.n	80051dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80051d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051da:	e00b      	b.n	80051f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80051dc:	4b08      	ldr	r3, [pc, #32]	; (8005200 <HAL_PWREx_GetVoltageRange+0x3c>)
 80051de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ea:	d102      	bne.n	80051f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80051ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051f0:	e000      	b.n	80051f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80051f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40007000 	.word	0x40007000

08005204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d102      	bne.n	8005218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f000 bc16 	b.w	8005a44 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005218:	4ba0      	ldr	r3, [pc, #640]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005222:	4b9e      	ldr	r3, [pc, #632]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80e4 	beq.w	8005402 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <HAL_RCC_OscConfig+0x4c>
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b0c      	cmp	r3, #12
 8005244:	f040 808b 	bne.w	800535e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b01      	cmp	r3, #1
 800524c:	f040 8087 	bne.w	800535e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005250:	4b92      	ldr	r3, [pc, #584]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_RCC_OscConfig+0x64>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e3ed      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	4b8b      	ldr	r3, [pc, #556]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <HAL_RCC_OscConfig+0x7e>
 8005278:	4b88      	ldr	r3, [pc, #544]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005280:	e005      	b.n	800528e <HAL_RCC_OscConfig+0x8a>
 8005282:	4b86      	ldr	r3, [pc, #536]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005288:	091b      	lsrs	r3, r3, #4
 800528a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528e:	4293      	cmp	r3, r2
 8005290:	d223      	bcs.n	80052da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fdc8 	bl	8005e2c <RCC_SetFlashLatencyFromMSIRange>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e3ce      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052a6:	4b7d      	ldr	r3, [pc, #500]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a7c      	ldr	r2, [pc, #496]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052ac:	f043 0308 	orr.w	r3, r3, #8
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	4b7a      	ldr	r3, [pc, #488]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4977      	ldr	r1, [pc, #476]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052c4:	4b75      	ldr	r3, [pc, #468]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	4972      	ldr	r1, [pc, #456]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]
 80052d8:	e025      	b.n	8005326 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052da:	4b70      	ldr	r3, [pc, #448]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6f      	ldr	r2, [pc, #444]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052e0:	f043 0308 	orr.w	r3, r3, #8
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b6d      	ldr	r3, [pc, #436]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	496a      	ldr	r1, [pc, #424]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052f8:	4b68      	ldr	r3, [pc, #416]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	4965      	ldr	r1, [pc, #404]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005308:	4313      	orrs	r3, r2
 800530a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fd88 	bl	8005e2c <RCC_SetFlashLatencyFromMSIRange>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e38e      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005326:	f000 fcbf 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 800532a:	4601      	mov	r1, r0
 800532c:	4b5b      	ldr	r3, [pc, #364]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	091b      	lsrs	r3, r3, #4
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	4a5a      	ldr	r2, [pc, #360]	; (80054a0 <HAL_RCC_OscConfig+0x29c>)
 8005338:	5cd3      	ldrb	r3, [r2, r3]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	fa21 f303 	lsr.w	r3, r1, r3
 8005342:	4a58      	ldr	r2, [pc, #352]	; (80054a4 <HAL_RCC_OscConfig+0x2a0>)
 8005344:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005346:	4b58      	ldr	r3, [pc, #352]	; (80054a8 <HAL_RCC_OscConfig+0x2a4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fb4e 	bl	80039ec <HAL_InitTick>
 8005350:	4603      	mov	r3, r0
 8005352:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d052      	beq.n	8005400 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	e372      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d032      	beq.n	80053cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005366:	4b4d      	ldr	r3, [pc, #308]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a4c      	ldr	r2, [pc, #304]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005372:	f7fe fb8b 	bl	8003a8c <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800537a:	f7fe fb87 	bl	8003a8c <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e35b      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800538c:	4b43      	ldr	r3, [pc, #268]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005398:	4b40      	ldr	r3, [pc, #256]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a3f      	ldr	r2, [pc, #252]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800539e:	f043 0308 	orr.w	r3, r3, #8
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b3d      	ldr	r3, [pc, #244]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	493a      	ldr	r1, [pc, #232]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053b6:	4b39      	ldr	r3, [pc, #228]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	4935      	ldr	r1, [pc, #212]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	604b      	str	r3, [r1, #4]
 80053ca:	e01a      	b.n	8005402 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053cc:	4b33      	ldr	r3, [pc, #204]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a32      	ldr	r2, [pc, #200]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053d8:	f7fe fb58 	bl	8003a8c <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053e0:	f7fe fb54 	bl	8003a8c <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e328      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053f2:	4b2a      	ldr	r3, [pc, #168]	; (800549c <HAL_RCC_OscConfig+0x298>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x1dc>
 80053fe:	e000      	b.n	8005402 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005400:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d073      	beq.n	80054f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d005      	beq.n	8005420 <HAL_RCC_OscConfig+0x21c>
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2b0c      	cmp	r3, #12
 8005418:	d10e      	bne.n	8005438 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b03      	cmp	r3, #3
 800541e:	d10b      	bne.n	8005438 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005420:	4b1e      	ldr	r3, [pc, #120]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d063      	beq.n	80054f4 <HAL_RCC_OscConfig+0x2f0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d15f      	bne.n	80054f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e305      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d106      	bne.n	8005450 <HAL_RCC_OscConfig+0x24c>
 8005442:	4b16      	ldr	r3, [pc, #88]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a15      	ldr	r2, [pc, #84]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e01d      	b.n	800548c <HAL_RCC_OscConfig+0x288>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005458:	d10c      	bne.n	8005474 <HAL_RCC_OscConfig+0x270>
 800545a:	4b10      	ldr	r3, [pc, #64]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a0f      	ldr	r2, [pc, #60]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	4b0d      	ldr	r3, [pc, #52]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a0c      	ldr	r2, [pc, #48]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800546c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e00b      	b.n	800548c <HAL_RCC_OscConfig+0x288>
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a08      	ldr	r2, [pc, #32]	; (800549c <HAL_RCC_OscConfig+0x298>)
 800547a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a05      	ldr	r2, [pc, #20]	; (800549c <HAL_RCC_OscConfig+0x298>)
 8005486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01b      	beq.n	80054cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fe fafa 	bl	8003a8c <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800549a:	e010      	b.n	80054be <HAL_RCC_OscConfig+0x2ba>
 800549c:	40021000 	.word	0x40021000
 80054a0:	0801e438 	.word	0x0801e438
 80054a4:	20000004 	.word	0x20000004
 80054a8:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ac:	f7fe faee 	bl	8003a8c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	; 0x64
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e2c2      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054be:	4baf      	ldr	r3, [pc, #700]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0x2a8>
 80054ca:	e014      	b.n	80054f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fe fade 	bl	8003a8c <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d4:	f7fe fada 	bl	8003a8c <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b64      	cmp	r3, #100	; 0x64
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e2ae      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054e6:	4ba5      	ldr	r3, [pc, #660]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x2d0>
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d060      	beq.n	80055c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b04      	cmp	r3, #4
 8005506:	d005      	beq.n	8005514 <HAL_RCC_OscConfig+0x310>
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b0c      	cmp	r3, #12
 800550c:	d119      	bne.n	8005542 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d116      	bne.n	8005542 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005514:	4b99      	ldr	r3, [pc, #612]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <HAL_RCC_OscConfig+0x328>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e28b      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552c:	4b93      	ldr	r3, [pc, #588]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	061b      	lsls	r3, r3, #24
 800553a:	4990      	ldr	r1, [pc, #576]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800553c:	4313      	orrs	r3, r2
 800553e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005540:	e040      	b.n	80055c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d023      	beq.n	8005592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800554a:	4b8c      	ldr	r3, [pc, #560]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a8b      	ldr	r2, [pc, #556]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fe fa99 	bl	8003a8c <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555e:	f7fe fa95 	bl	8003a8c <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e269      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005570:	4b82      	ldr	r3, [pc, #520]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557c:	4b7f      	ldr	r3, [pc, #508]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	061b      	lsls	r3, r3, #24
 800558a:	497c      	ldr	r1, [pc, #496]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800558c:	4313      	orrs	r3, r2
 800558e:	604b      	str	r3, [r1, #4]
 8005590:	e018      	b.n	80055c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005592:	4b7a      	ldr	r3, [pc, #488]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a79      	ldr	r2, [pc, #484]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800559c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fe fa75 	bl	8003a8c <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a6:	f7fe fa71 	bl	8003a8c <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e245      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055b8:	4b70      	ldr	r3, [pc, #448]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f0      	bne.n	80055a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d03c      	beq.n	800564a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01c      	beq.n	8005612 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055d8:	4b68      	ldr	r3, [pc, #416]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80055da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055de:	4a67      	ldr	r2, [pc, #412]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fe fa50 	bl	8003a8c <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f0:	f7fe fa4c 	bl	8003a8c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e220      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005602:	4b5e      	ldr	r3, [pc, #376]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ef      	beq.n	80055f0 <HAL_RCC_OscConfig+0x3ec>
 8005610:	e01b      	b.n	800564a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005612:	4b5a      	ldr	r3, [pc, #360]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005618:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005622:	f7fe fa33 	bl	8003a8c <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800562a:	f7fe fa2f 	bl	8003a8c <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e203      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800563c:	4b4f      	ldr	r3, [pc, #316]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800563e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ef      	bne.n	800562a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80a6 	beq.w	80057a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005658:	2300      	movs	r3, #0
 800565a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800565c:	4b47      	ldr	r3, [pc, #284]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10d      	bne.n	8005684 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005668:	4b44      	ldr	r3, [pc, #272]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	4a43      	ldr	r2, [pc, #268]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	6593      	str	r3, [r2, #88]	; 0x58
 8005674:	4b41      	ldr	r3, [pc, #260]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005680:	2301      	movs	r3, #1
 8005682:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005684:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <HAL_RCC_OscConfig+0x57c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d118      	bne.n	80056c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005690:	4b3b      	ldr	r3, [pc, #236]	; (8005780 <HAL_RCC_OscConfig+0x57c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a3a      	ldr	r2, [pc, #232]	; (8005780 <HAL_RCC_OscConfig+0x57c>)
 8005696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569c:	f7fe f9f6 	bl	8003a8c <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a4:	f7fe f9f2 	bl	8003a8c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e1c6      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b6:	4b32      	ldr	r3, [pc, #200]	; (8005780 <HAL_RCC_OscConfig+0x57c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d108      	bne.n	80056dc <HAL_RCC_OscConfig+0x4d8>
 80056ca:	4b2c      	ldr	r3, [pc, #176]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80056cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d0:	4a2a      	ldr	r2, [pc, #168]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056da:	e024      	b.n	8005726 <HAL_RCC_OscConfig+0x522>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b05      	cmp	r3, #5
 80056e2:	d110      	bne.n	8005706 <HAL_RCC_OscConfig+0x502>
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	4a24      	ldr	r2, [pc, #144]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80056ec:	f043 0304 	orr.w	r3, r3, #4
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056f4:	4b21      	ldr	r3, [pc, #132]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <HAL_RCC_OscConfig+0x578>)
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005704:	e00f      	b.n	8005726 <HAL_RCC_OscConfig+0x522>
 8005706:	4b1d      	ldr	r3, [pc, #116]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005716:	4b19      	ldr	r3, [pc, #100]	; (800577c <HAL_RCC_OscConfig+0x578>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	4a17      	ldr	r2, [pc, #92]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800571e:	f023 0304 	bic.w	r3, r3, #4
 8005722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d016      	beq.n	800575c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572e:	f7fe f9ad 	bl	8003a8c <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005734:	e00a      	b.n	800574c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fe f9a9 	bl	8003a8c <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	; 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e17b      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCC_OscConfig+0x578>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ed      	beq.n	8005736 <HAL_RCC_OscConfig+0x532>
 800575a:	e01a      	b.n	8005792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575c:	f7fe f996 	bl	8003a8c <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005762:	e00f      	b.n	8005784 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005764:	f7fe f992 	bl	8003a8c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005772:	4293      	cmp	r3, r2
 8005774:	d906      	bls.n	8005784 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e164      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000
 8005780:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005784:	4ba8      	ldr	r3, [pc, #672]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e8      	bne.n	8005764 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005792:	7ffb      	ldrb	r3, [r7, #31]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d105      	bne.n	80057a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005798:	4ba3      	ldr	r3, [pc, #652]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 800579a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579c:	4aa2      	ldr	r2, [pc, #648]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 800579e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d03c      	beq.n	800582a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01c      	beq.n	80057f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057b8:	4b9b      	ldr	r3, [pc, #620]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80057ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057be:	4a9a      	ldr	r2, [pc, #616]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fe f960 	bl	8003a8c <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057d0:	f7fe f95c 	bl	8003a8c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e130      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057e2:	4b91      	ldr	r3, [pc, #580]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80057e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ef      	beq.n	80057d0 <HAL_RCC_OscConfig+0x5cc>
 80057f0:	e01b      	b.n	800582a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057f2:	4b8d      	ldr	r3, [pc, #564]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80057f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057f8:	4a8b      	ldr	r2, [pc, #556]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005802:	f7fe f943 	bl	8003a8c <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800580a:	f7fe f93f 	bl	8003a8c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e113      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800581c:	4b82      	ldr	r3, [pc, #520]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 800581e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1ef      	bne.n	800580a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8107 	beq.w	8005a42 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	2b02      	cmp	r3, #2
 800583a:	f040 80cb 	bne.w	80059d4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800583e:	4b7a      	ldr	r3, [pc, #488]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 0203 	and.w	r2, r3, #3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	429a      	cmp	r2, r3
 8005850:	d12c      	bne.n	80058ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	3b01      	subs	r3, #1
 800585e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d123      	bne.n	80058ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d11b      	bne.n	80058ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d113      	bne.n	80058ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	3b01      	subs	r3, #1
 8005892:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d109      	bne.n	80058ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	3b01      	subs	r3, #1
 80058a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d06d      	beq.n	8005988 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d068      	beq.n	8005984 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058b2:	4b5d      	ldr	r3, [pc, #372]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d105      	bne.n	80058ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058be:	4b5a      	ldr	r3, [pc, #360]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0ba      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058ce:	4b56      	ldr	r3, [pc, #344]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a55      	ldr	r2, [pc, #340]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80058d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058da:	f7fe f8d7 	bl	8003a8c <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e2:	f7fe f8d3 	bl	8003a8c <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e0a7      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f4:	4b4c      	ldr	r3, [pc, #304]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f0      	bne.n	80058e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005900:	4b49      	ldr	r3, [pc, #292]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	4b49      	ldr	r3, [pc, #292]	; (8005a2c <HAL_RCC_OscConfig+0x828>)
 8005906:	4013      	ands	r3, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005910:	3a01      	subs	r2, #1
 8005912:	0112      	lsls	r2, r2, #4
 8005914:	4311      	orrs	r1, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800591a:	0212      	lsls	r2, r2, #8
 800591c:	4311      	orrs	r1, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005922:	0852      	lsrs	r2, r2, #1
 8005924:	3a01      	subs	r2, #1
 8005926:	0552      	lsls	r2, r2, #21
 8005928:	4311      	orrs	r1, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800592e:	0852      	lsrs	r2, r2, #1
 8005930:	3a01      	subs	r2, #1
 8005932:	0652      	lsls	r2, r2, #25
 8005934:	4311      	orrs	r1, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800593a:	06d2      	lsls	r2, r2, #27
 800593c:	430a      	orrs	r2, r1
 800593e:	493a      	ldr	r1, [pc, #232]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005940:	4313      	orrs	r3, r2
 8005942:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005944:	4b38      	ldr	r3, [pc, #224]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a37      	ldr	r2, [pc, #220]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 800594a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800594e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005950:	4b35      	ldr	r3, [pc, #212]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4a34      	ldr	r2, [pc, #208]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800595a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800595c:	f7fe f896 	bl	8003a8c <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005964:	f7fe f892 	bl	8003a8c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e066      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005976:	4b2c      	ldr	r3, [pc, #176]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005982:	e05e      	b.n	8005a42 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e05d      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005988:	4b27      	ldr	r3, [pc, #156]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d156      	bne.n	8005a42 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005994:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a23      	ldr	r2, [pc, #140]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 800599a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800599e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059a0:	4b21      	ldr	r3, [pc, #132]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4a20      	ldr	r2, [pc, #128]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80059a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059ac:	f7fe f86e 	bl	8003a8c <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fe f86a 	bl	8003a8c <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e03e      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c6:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x7b0>
 80059d2:	e036      	b.n	8005a42 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b0c      	cmp	r3, #12
 80059d8:	d031      	beq.n	8005a3e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059da:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a12      	ldr	r2, [pc, #72]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80059e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80059e6:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d105      	bne.n	80059fe <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80059f2:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	4a0c      	ldr	r2, [pc, #48]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 80059f8:	f023 0303 	bic.w	r3, r3, #3
 80059fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <HAL_RCC_OscConfig+0x824>)
 8005a04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fe f83d 	bl	8003a8c <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a14:	e00c      	b.n	8005a30 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a16:	f7fe f839 	bl	8003a8c <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d905      	bls.n	8005a30 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e00d      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <HAL_RCC_OscConfig+0x848>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ec      	bne.n	8005a16 <HAL_RCC_OscConfig+0x812>
 8005a3c:	e001      	b.n	8005a42 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40021000 	.word	0x40021000

08005a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e10f      	b.n	8005c88 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a68:	4b89      	ldr	r3, [pc, #548]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d910      	bls.n	8005a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b86      	ldr	r3, [pc, #536]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f023 020f 	bic.w	r2, r3, #15
 8005a7e:	4984      	ldr	r1, [pc, #528]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a86:	4b82      	ldr	r3, [pc, #520]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0f7      	b.n	8005c88 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8089 	beq.w	8005bb8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d133      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aae:	4b79      	ldr	r3, [pc, #484]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e0e4      	b.n	8005c88 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005abe:	f000 fa0f 	bl	8005ee0 <RCC_GetSysClockFreqFromPLLSource>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	4b74      	ldr	r3, [pc, #464]	; (8005c98 <HAL_RCC_ClockConfig+0x248>)
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d955      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005aca:	4b72      	ldr	r3, [pc, #456]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ad6:	4b6f      	ldr	r3, [pc, #444]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ade:	4a6d      	ldr	r2, [pc, #436]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	e044      	b.n	8005b76 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d03e      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x126>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d13a      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b00:	4b64      	ldr	r3, [pc, #400]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b08:	4a62      	ldr	r2, [pc, #392]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e02f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d107      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b1e:	4b5d      	ldr	r3, [pc, #372]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d115      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e0ac      	b.n	8005c88 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b36:	4b57      	ldr	r3, [pc, #348]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e0a0      	b.n	8005c88 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b46:	4b53      	ldr	r3, [pc, #332]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e098      	b.n	8005c88 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005b56:	f000 f8a7 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	4b4e      	ldr	r3, [pc, #312]	; (8005c98 <HAL_RCC_ClockConfig+0x248>)
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d909      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b62:	4b4c      	ldr	r3, [pc, #304]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6a:	4a4a      	ldr	r2, [pc, #296]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b76:	4b47      	ldr	r3, [pc, #284]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f023 0203 	bic.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4944      	ldr	r1, [pc, #272]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b88:	f7fd ff80 	bl	8003a8c <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b90:	f7fd ff7c 	bl	8003a8c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e070      	b.n	8005c88 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba6:	4b3b      	ldr	r3, [pc, #236]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 020c 	and.w	r2, r3, #12
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d1eb      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc4:	4b33      	ldr	r3, [pc, #204]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4930      	ldr	r1, [pc, #192]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d105      	bne.n	8005bea <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bde:	4b2d      	ldr	r3, [pc, #180]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4a2c      	ldr	r2, [pc, #176]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bea:	4b29      	ldr	r3, [pc, #164]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d210      	bcs.n	8005c1a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf8:	4b25      	ldr	r3, [pc, #148]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f023 020f 	bic.w	r2, r3, #15
 8005c00:	4923      	ldr	r1, [pc, #140]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c08:	4b21      	ldr	r3, [pc, #132]	; (8005c90 <HAL_RCC_ClockConfig+0x240>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d001      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e036      	b.n	8005c88 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d008      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c26:	4b1b      	ldr	r3, [pc, #108]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	4918      	ldr	r1, [pc, #96]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d009      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c44:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	4910      	ldr	r1, [pc, #64]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c58:	f000 f826 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8005c5c:	4601      	mov	r1, r0
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <HAL_RCC_ClockConfig+0x244>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	4a0c      	ldr	r2, [pc, #48]	; (8005c9c <HAL_RCC_ClockConfig+0x24c>)
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	fa21 f303 	lsr.w	r3, r1, r3
 8005c74:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <HAL_RCC_ClockConfig+0x250>)
 8005c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <HAL_RCC_ClockConfig+0x254>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fd feb5 	bl	80039ec <HAL_InitTick>
 8005c82:	4603      	mov	r3, r0
 8005c84:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40022000 	.word	0x40022000
 8005c94:	40021000 	.word	0x40021000
 8005c98:	04c4b400 	.word	0x04c4b400
 8005c9c:	0801e438 	.word	0x0801e438
 8005ca0:	20000004 	.word	0x20000004
 8005ca4:	20000038 	.word	0x20000038

08005ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b089      	sub	sp, #36	; 0x24
 8005cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cb6:	4b3d      	ldr	r3, [pc, #244]	; (8005dac <HAL_RCC_GetSysClockFreq+0x104>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cc0:	4b3a      	ldr	r3, [pc, #232]	; (8005dac <HAL_RCC_GetSysClockFreq+0x104>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_GetSysClockFreq+0x34>
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b0c      	cmp	r3, #12
 8005cd4:	d121      	bne.n	8005d1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d11e      	bne.n	8005d1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cdc:	4b33      	ldr	r3, [pc, #204]	; (8005dac <HAL_RCC_GetSysClockFreq+0x104>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d107      	bne.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ce8:	4b30      	ldr	r3, [pc, #192]	; (8005dac <HAL_RCC_GetSysClockFreq+0x104>)
 8005cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e005      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cf8:	4b2c      	ldr	r3, [pc, #176]	; (8005dac <HAL_RCC_GetSysClockFreq+0x104>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	091b      	lsrs	r3, r3, #4
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d04:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10d      	bne.n	8005d30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d102      	bne.n	8005d26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d20:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	e004      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d101      	bne.n	8005d30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d2c:	4b22      	ldr	r3, [pc, #136]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b0c      	cmp	r3, #12
 8005d34:	d133      	bne.n	8005d9e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d36:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <HAL_RCC_GetSysClockFreq+0x104>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d002      	beq.n	8005d4c <HAL_RCC_GetSysClockFreq+0xa4>
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d003      	beq.n	8005d52 <HAL_RCC_GetSysClockFreq+0xaa>
 8005d4a:	e005      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d4c:	4b19      	ldr	r3, [pc, #100]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d4e:	617b      	str	r3, [r7, #20]
      break;
 8005d50:	e005      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d54:	617b      	str	r3, [r7, #20]
      break;
 8005d56:	e002      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	617b      	str	r3, [r7, #20]
      break;
 8005d5c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <HAL_RCC_GetSysClockFreq+0x104>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	091b      	lsrs	r3, r3, #4
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	3301      	adds	r3, #1
 8005d6a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <HAL_RCC_GetSysClockFreq+0x104>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	0a1b      	lsrs	r3, r3, #8
 8005d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	fb02 f203 	mul.w	r2, r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d84:	4b09      	ldr	r3, [pc, #36]	; (8005dac <HAL_RCC_GetSysClockFreq+0x104>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	0e5b      	lsrs	r3, r3, #25
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	3301      	adds	r3, #1
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3724      	adds	r7, #36	; 0x24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40021000 	.word	0x40021000
 8005db0:	0801e450 	.word	0x0801e450
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	007a1200 	.word	0x007a1200

08005dbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc0:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000004 	.word	0x20000004

08005dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005dd8:	f7ff fff0 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8005ddc:	4601      	mov	r1, r0
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	0a1b      	lsrs	r3, r3, #8
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	4a04      	ldr	r2, [pc, #16]	; (8005dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dea:	5cd3      	ldrb	r3, [r2, r3]
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	0801e448 	.word	0x0801e448

08005e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e04:	f7ff ffda 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8005e08:	4601      	mov	r1, r0
 8005e0a:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	0adb      	lsrs	r3, r3, #11
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	4a04      	ldr	r2, [pc, #16]	; (8005e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e16:	5cd3      	ldrb	r3, [r2, r3]
 8005e18:	f003 031f 	and.w	r3, r3, #31
 8005e1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40021000 	.word	0x40021000
 8005e28:	0801e448 	.word	0x0801e448

08005e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e38:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e44:	f7ff f9be 	bl	80051c4 <HAL_PWREx_GetVoltageRange>
 8005e48:	6178      	str	r0, [r7, #20]
 8005e4a:	e014      	b.n	8005e76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e4c:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e50:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e56:	6593      	str	r3, [r2, #88]	; 0x58
 8005e58:	4b1f      	ldr	r3, [pc, #124]	; (8005ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e64:	f7ff f9ae 	bl	80051c4 <HAL_PWREx_GetVoltageRange>
 8005e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6e:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e7c:	d10b      	bne.n	8005e96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b80      	cmp	r3, #128	; 0x80
 8005e82:	d913      	bls.n	8005eac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2ba0      	cmp	r3, #160	; 0xa0
 8005e88:	d902      	bls.n	8005e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e00d      	b.n	8005eac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e90:	2301      	movs	r3, #1
 8005e92:	613b      	str	r3, [r7, #16]
 8005e94:	e00a      	b.n	8005eac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9a:	d902      	bls.n	8005ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	e004      	b.n	8005eac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b70      	cmp	r3, #112	; 0x70
 8005ea6:	d101      	bne.n	8005eac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f023 020f 	bic.w	r2, r3, #15
 8005eb4:	4909      	ldr	r1, [pc, #36]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ebc:	4b07      	ldr	r3, [pc, #28]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 030f 	and.w	r3, r3, #15
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d001      	beq.n	8005ece <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40022000 	.word	0x40022000

08005ee0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005eea:	4b2d      	ldr	r3, [pc, #180]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d118      	bne.n	8005f28 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ef6:	4b2a      	ldr	r3, [pc, #168]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d107      	bne.n	8005f12 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f08:	0a1b      	lsrs	r3, r3, #8
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	e005      	b.n	8005f1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f12:	4b23      	ldr	r3, [pc, #140]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	091b      	lsrs	r3, r3, #4
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f1e:	4a21      	ldr	r2, [pc, #132]	; (8005fa4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f26:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f28:	4b1d      	ldr	r3, [pc, #116]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d002      	beq.n	8005f3e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d003      	beq.n	8005f44 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005f3c:	e005      	b.n	8005f4a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005f3e:	4b1a      	ldr	r3, [pc, #104]	; (8005fa8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005f40:	613b      	str	r3, [r7, #16]
    break;
 8005f42:	e005      	b.n	8005f50 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005f44:	4b19      	ldr	r3, [pc, #100]	; (8005fac <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005f46:	613b      	str	r3, [r7, #16]
    break;
 8005f48:	e002      	b.n	8005f50 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	613b      	str	r3, [r7, #16]
    break;
 8005f4e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f50:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f5e:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	fb02 f203 	mul.w	r2, r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f76:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	0e5b      	lsrs	r3, r3, #25
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	3301      	adds	r3, #1
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005f90:	683b      	ldr	r3, [r7, #0]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	0801e450 	.word	0x0801e450
 8005fa8:	00f42400 	.word	0x00f42400
 8005fac:	007a1200 	.word	0x007a1200

08005fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e0be      	b.n	8006140 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d108      	bne.n	8005fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd2:	d009      	beq.n	8005fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	61da      	str	r2, [r3, #28]
 8005fda:	e005      	b.n	8005fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f8cb 	bl	8006198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006018:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006022:	d902      	bls.n	800602a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e002      	b.n	8006030 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800602a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800602e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006038:	d007      	beq.n	800604a <HAL_SPI_Init+0x9a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006042:	d002      	beq.n	800604a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608c:	ea42 0103 	orr.w	r1, r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a8:	d11b      	bne.n	80060e2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060ba:	d903      	bls.n	80060c4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
 80060c2:	e002      	b.n	80060ca <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d107      	bne.n	80060e2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	0c1b      	lsrs	r3, r3, #16
 80060e8:	f003 0204 	and.w	r2, r3, #4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006108:	ea42 0103 	orr.w	r1, r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006122:	d105      	bne.n	8006130 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	b292      	uxth	r2, r2
 800612e:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e01a      	b.n	8006190 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006170:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f81a 	bl	80061ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	4613      	mov	r3, r2
 80061ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061dc:	d112      	bne.n	8006204 <HAL_SPI_Receive+0x44>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10e      	bne.n	8006204 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2204      	movs	r2, #4
 80061ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f9b3 	bl	8006566 <HAL_SPI_TransmitReceive>
 8006200:	4603      	mov	r3, r0
 8006202:	e1ac      	b.n	800655e <HAL_SPI_Receive+0x39e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_SPI_Receive+0x52>
 800620e:	2302      	movs	r3, #2
 8006210:	e1a5      	b.n	800655e <HAL_SPI_Receive+0x39e>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800621a:	f7fd fc37 	bl	8003a8c <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d002      	beq.n	8006232 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800622c:	2302      	movs	r3, #2
 800622e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006230:	e18c      	b.n	800654c <HAL_SPI_Receive+0x38c>
  }

  if ((pData == NULL) || (Size == 0U))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_SPI_Receive+0x7e>
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006242:	e183      	b.n	800654c <HAL_SPI_Receive+0x38c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2204      	movs	r2, #4
 8006248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628e:	d118      	bne.n	80062c2 <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ae:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062ca:	d908      	bls.n	80062de <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062da:	605a      	str	r2, [r3, #4]
 80062dc:	e007      	b.n	80062ee <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f6:	d10f      	bne.n	8006318 <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006306:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006316:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	d007      	beq.n	8006336 <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006334:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800633e:	d867      	bhi.n	8006410 <HAL_SPI_Receive+0x250>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006340:	e030      	b.n	80063a4 <HAL_SPI_Receive+0x1e4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b01      	cmp	r3, #1
 800634e:	d117      	bne.n	8006380 <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f103 020c 	add.w	r2, r3, #12
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	7812      	ldrb	r2, [r2, #0]
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800637e:	e011      	b.n	80063a4 <HAL_SPI_Receive+0x1e4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006380:	f7fd fb84 	bl	8003a8c <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d803      	bhi.n	8006398 <HAL_SPI_Receive+0x1d8>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006396:	d102      	bne.n	800639e <HAL_SPI_Receive+0x1de>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <HAL_SPI_Receive+0x1e4>
        {
          errorcode = HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063a2:	e0d3      	b.n	800654c <HAL_SPI_Receive+0x38c>
    while (hspi->RxXferCount > 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1c8      	bne.n	8006342 <HAL_SPI_Receive+0x182>
 80063b0:	e034      	b.n	800641c <HAL_SPI_Receive+0x25c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d115      	bne.n	80063ec <HAL_SPI_Receive+0x22c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	b292      	uxth	r2, r2
 80063cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	1c9a      	adds	r2, r3, #2
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063ea:	e011      	b.n	8006410 <HAL_SPI_Receive+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ec:	f7fd fb4e 	bl	8003a8c <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d803      	bhi.n	8006404 <HAL_SPI_Receive+0x244>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d102      	bne.n	800640a <HAL_SPI_Receive+0x24a>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d102      	bne.n	8006410 <HAL_SPI_Receive+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800640e:	e09d      	b.n	800654c <HAL_SPI_Receive+0x38c>
    while (hspi->RxXferCount > 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1ca      	bne.n	80063b2 <HAL_SPI_Receive+0x1f2>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006424:	d16d      	bne.n	8006502 <HAL_SPI_Receive+0x342>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006434:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2201      	movs	r2, #1
 800643e:	2101      	movs	r1, #1
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f001 f98d 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_SPI_Receive+0x292>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	75fb      	strb	r3, [r7, #23]
      goto error;
 8006450:	e07c      	b.n	800654c <HAL_SPI_Receive+0x38c>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800645a:	d907      	bls.n	800646c <HAL_SPI_Receive+0x2ac>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	b292      	uxth	r2, r2
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	e008      	b.n	800647e <HAL_SPI_Receive+0x2be>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f103 020c 	add.w	r2, r3, #12
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	7812      	ldrb	r2, [r2, #0]
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2201      	movs	r2, #1
 8006486:	2101      	movs	r1, #1
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f001 f969 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <HAL_SPI_Receive+0x2e6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	f043 0202 	orr.w	r2, r3, #2
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	75fb      	strb	r3, [r7, #23]
      goto error;
 80064a4:	e052      	b.n	800654c <HAL_SPI_Receive+0x38c>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064ae:	d103      	bne.n	80064b8 <HAL_SPI_Receive+0x2f8>
    {
      /* Read 16bit CRC */
      READ_REG(hspi->Instance->DR);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	e024      	b.n	8006502 <HAL_SPI_Receive+0x342>
    }
    else
    {
      /* Read 8bit CRC */
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	781b      	ldrb	r3, [r3, #0]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064c8:	d11b      	bne.n	8006502 <HAL_SPI_Receive+0x342>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d117      	bne.n	8006502 <HAL_SPI_Receive+0x342>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2201      	movs	r2, #1
 80064da:	2101      	movs	r1, #1
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f001 f93f 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_SPI_Receive+0x33a>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ec:	f043 0202 	orr.w	r2, r3, #2
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064f8:	e028      	b.n	800654c <HAL_SPI_Receive+0x38c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	781b      	ldrb	r3, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f001 fa40 	bl	800798c <SPI_EndRxTransaction>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_SPI_Receive+0x358>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b10      	cmp	r3, #16
 8006524:	d10a      	bne.n	800653c <HAL_SPI_Receive+0x37c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652a:	f043 0202 	orr.w	r2, r3, #2
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800653a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <HAL_SPI_Receive+0x38a>
  {
    errorcode = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	75fb      	strb	r3, [r7, #23]
 8006548:	e000      	b.n	800654c <HAL_SPI_Receive+0x38c>
  }

error :
 800654a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b08e      	sub	sp, #56	; 0x38
 800656a:	af02      	add	r7, sp, #8
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006574:	2301      	movs	r3, #1
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_SPI_TransmitReceive+0x26>
 8006588:	2302      	movs	r3, #2
 800658a:	e2c0      	b.n	8006b0e <HAL_SPI_TransmitReceive+0x5a8>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006594:	f7fd fa7a 	bl	8003a8c <HAL_GetTick>
 8006598:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065aa:	887b      	ldrh	r3, [r7, #2]
 80065ac:	837b      	strh	r3, [r7, #26]
  initial_RxXferCount = Size;
 80065ae:	887b      	ldrh	r3, [r7, #2]
 80065b0:	833b      	strh	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	617b      	str	r3, [r7, #20]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	613b      	str	r3, [r7, #16]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d00f      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x84>
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d0:	d107      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x7c>
 80065da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d003      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80065e2:	2302      	movs	r3, #2
 80065e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065e8:	e287      	b.n	8006afa <HAL_SPI_TransmitReceive+0x594>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x96>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x96>
 80065f6:	887b      	ldrh	r3, [r7, #2]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d103      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006602:	e27a      	b.n	8006afa <HAL_SPI_TransmitReceive+0x594>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b04      	cmp	r3, #4
 800660e:	d003      	beq.n	8006618 <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2205      	movs	r2, #5
 8006614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	887a      	ldrh	r2, [r7, #2]
 8006628:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	887a      	ldrh	r2, [r7, #2]
 8006630:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	887a      	ldrh	r2, [r7, #2]
 800663e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	887a      	ldrh	r2, [r7, #2]
 8006644:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665a:	d10f      	bne.n	800667c <HAL_SPI_TransmitReceive+0x116>
  {
    SPI_RESET_CRC(hspi);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800667a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006684:	d802      	bhi.n	800668c <HAL_SPI_TransmitReceive+0x126>
 8006686:	8b3b      	ldrh	r3, [r7, #24]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d908      	bls.n	800669e <HAL_SPI_TransmitReceive+0x138>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800669a:	605a      	str	r2, [r3, #4]
 800669c:	e007      	b.n	80066ae <HAL_SPI_TransmitReceive+0x148>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d007      	beq.n	80066cc <HAL_SPI_TransmitReceive+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d4:	f240 80a4 	bls.w	8006820 <HAL_SPI_TransmitReceive+0x2ba>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_SPI_TransmitReceive+0x182>
 80066e0:	8b7b      	ldrh	r3, [r7, #26]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	f040 808e 	bne.w	8006804 <HAL_SPI_TransmitReceive+0x29e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	881a      	ldrh	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	1c9a      	adds	r2, r3, #2
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800670c:	e07a      	b.n	8006804 <HAL_SPI_TransmitReceive+0x29e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b02      	cmp	r3, #2
 800671a:	d13f      	bne.n	800679c <HAL_SPI_TransmitReceive+0x236>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d03a      	beq.n	800679c <HAL_SPI_TransmitReceive+0x236>
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d137      	bne.n	800679c <HAL_SPI_TransmitReceive+0x236>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	881a      	ldrh	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	1c9a      	adds	r2, r3, #2
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11e      	bne.n	800679c <HAL_SPI_TransmitReceive+0x236>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006766:	d119      	bne.n	800679c <HAL_SPI_TransmitReceive+0x236>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10c      	bne.n	800678c <HAL_SPI_TransmitReceive+0x226>
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b00      	cmp	r3, #0
 800677a:	d007      	beq.n	800678c <HAL_SPI_TransmitReceive+0x226>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800678a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800679a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d11c      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x27e>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d016      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x27e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	b292      	uxth	r2, r2
 80067c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	1c9a      	adds	r2, r3, #2
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067e0:	2301      	movs	r3, #1
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067e4:	f7fd f952 	bl	8003a8c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d807      	bhi.n	8006804 <HAL_SPI_TransmitReceive+0x29e>
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d003      	beq.n	8006804 <HAL_SPI_TransmitReceive+0x29e>
      {
        errorcode = HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006802:	e17a      	b.n	8006afa <HAL_SPI_TransmitReceive+0x594>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	f47f af7f 	bne.w	800670e <HAL_SPI_TransmitReceive+0x1a8>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006816:	b29b      	uxth	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	f47f af78 	bne.w	800670e <HAL_SPI_TransmitReceive+0x1a8>
 800681e:	e103      	b.n	8006a28 <HAL_SPI_TransmitReceive+0x4c2>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x2ca>
 8006828:	8b7b      	ldrh	r3, [r7, #26]
 800682a:	2b01      	cmp	r3, #1
 800682c:	f040 80ef 	bne.w	8006a0e <HAL_SPI_TransmitReceive+0x4a8>
    {
      if (hspi->TxXferCount > 1U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b01      	cmp	r3, #1
 8006838:	d912      	bls.n	8006860 <HAL_SPI_TransmitReceive+0x2fa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	881a      	ldrh	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	1c9a      	adds	r2, r3, #2
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b02      	subs	r3, #2
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800685e:	e0d6      	b.n	8006a0e <HAL_SPI_TransmitReceive+0x4a8>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	7812      	ldrb	r2, [r2, #0]
 800686c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006886:	e0c2      	b.n	8006a0e <HAL_SPI_TransmitReceive+0x4a8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b02      	cmp	r3, #2
 8006894:	d158      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x3e2>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d053      	beq.n	8006948 <HAL_SPI_TransmitReceive+0x3e2>
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d150      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x3e2>
      {
        if (hspi->TxXferCount > 1U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d912      	bls.n	80068d6 <HAL_SPI_TransmitReceive+0x370>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	881a      	ldrh	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	1c9a      	adds	r2, r3, #2
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b02      	subs	r3, #2
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068d4:	e012      	b.n	80068fc <HAL_SPI_TransmitReceive+0x396>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	7812      	ldrb	r2, [r2, #0]
 80068e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d11e      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x3e2>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006912:	d119      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x3e2>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10c      	bne.n	8006938 <HAL_SPI_TransmitReceive+0x3d2>
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <HAL_SPI_TransmitReceive+0x3d2>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006936:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006946:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b01      	cmp	r3, #1
 8006954:	d148      	bne.n	80069e8 <HAL_SPI_TransmitReceive+0x482>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d042      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x482>
      {
        if (hspi->RxXferCount > 1U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b01      	cmp	r3, #1
 800696c:	d923      	bls.n	80069b6 <HAL_SPI_TransmitReceive+0x450>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	b292      	uxth	r2, r2
 800697a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	1c9a      	adds	r2, r3, #2
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800698c:	b29b      	uxth	r3, r3
 800698e:	3b02      	subs	r3, #2
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d81f      	bhi.n	80069e4 <HAL_SPI_TransmitReceive+0x47e>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069b2:	605a      	str	r2, [r3, #4]
 80069b4:	e016      	b.n	80069e4 <HAL_SPI_TransmitReceive+0x47e>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f103 020c 	add.w	r2, r3, #12
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	7812      	ldrb	r2, [r2, #0]
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069e4:	2301      	movs	r3, #1
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069e8:	f7fd f850 	bl	8003a8c <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d803      	bhi.n	8006a00 <HAL_SPI_TransmitReceive+0x49a>
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d102      	bne.n	8006a06 <HAL_SPI_TransmitReceive+0x4a0>
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d103      	bne.n	8006a0e <HAL_SPI_TransmitReceive+0x4a8>
      {
        errorcode = HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a0c:	e075      	b.n	8006afa <HAL_SPI_TransmitReceive+0x594>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f47f af37 	bne.w	8006888 <HAL_SPI_TransmitReceive+0x322>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f47f af30 	bne.w	8006888 <HAL_SPI_TransmitReceive+0x322>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a30:	d13e      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x54a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	2201      	movs	r2, #1
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fe8f 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d009      	beq.n	8006a5c <HAL_SPI_TransmitReceive+0x4f6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4c:	f043 0202 	orr.w	r2, r3, #2
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8006a5a:	e04e      	b.n	8006afa <HAL_SPI_TransmitReceive+0x594>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a64:	d103      	bne.n	8006a6e <HAL_SPI_TransmitReceive+0x508>
    {
      /* Read 16bit CRC */
      READ_REG(hspi->Instance->DR);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	e020      	b.n	8006ab0 <HAL_SPI_TransmitReceive+0x54a>
    }
    else
    {
      /* Read 8bit CRC */
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	781b      	ldrb	r3, [r3, #0]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d118      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x54a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a84:	2201      	movs	r2, #1
 8006a86:	2101      	movs	r1, #1
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fe69 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <HAL_SPI_TransmitReceive+0x542>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a98:	f043 0202 	orr.w	r2, r3, #2
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          goto error;
 8006aa6:	e028      	b.n	8006afa <HAL_SPI_TransmitReceive+0x594>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	330c      	adds	r3, #12
 8006aae:	781b      	ldrb	r3, [r3, #0]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d10d      	bne.n	8006ada <HAL_SPI_TransmitReceive+0x574>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac2:	f043 0202 	orr.w	r2, r3, #2
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006ad2:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 ffac 	bl	8007a3c <SPI_EndRxTxTransaction>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d006      	beq.n	8006af8 <HAL_SPI_TransmitReceive+0x592>
  {
    errorcode = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	661a      	str	r2, [r3, #96]	; 0x60
 8006af6:	e000      	b.n	8006afa <HAL_SPI_TransmitReceive+0x594>
  }

error :
 8006af8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3730      	adds	r7, #48	; 0x30
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	4613      	mov	r3, r2
 8006b24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_SPI_Transmit_IT+0x20>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e087      	b.n	8006c48 <HAL_SPI_Transmit_IT+0x130>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_SPI_Transmit_IT+0x34>
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d102      	bne.n	8006b52 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b50:	e075      	b.n	8006c3e <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d002      	beq.n	8006b64 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b62:	e06c      	b.n	8006c3e <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2203      	movs	r2, #3
 8006b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	88fa      	ldrh	r2, [r7, #6]
 8006b7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	88fa      	ldrh	r2, [r7, #6]
 8006b82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ba8:	d903      	bls.n	8006bb2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4a29      	ldr	r2, [pc, #164]	; (8006c54 <HAL_SPI_Transmit_IT+0x13c>)
 8006bae:	651a      	str	r2, [r3, #80]	; 0x50
 8006bb0:	e002      	b.n	8006bb8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a28      	ldr	r2, [pc, #160]	; (8006c58 <HAL_SPI_Transmit_IT+0x140>)
 8006bb6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc0:	d10f      	bne.n	8006be2 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006be0:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bea:	d10f      	bne.n	8006c0c <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c0a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006c1a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d008      	beq.n	8006c3c <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e000      	b.n	8006c3e <HAL_SPI_Transmit_IT+0x126>
  }

error :
 8006c3c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	08007701 	.word	0x08007701
 8006c58:	080076a1 	.word	0x080076a1

08006c5c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d110      	bne.n	8006c98 <HAL_SPI_Receive_IT+0x3c>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c7e:	d10b      	bne.n	8006c98 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2204      	movs	r2, #4
 8006c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f8bc 	bl	8006e0c <HAL_SPI_TransmitReceive_IT>
 8006c94:	4603      	mov	r3, r0
 8006c96:	e0b1      	b.n	8006dfc <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_SPI_Receive_IT+0x4a>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e0aa      	b.n	8006dfc <HAL_SPI_Receive_IT+0x1a0>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d002      	beq.n	8006cc0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cbe:	e098      	b.n	8006df2 <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_SPI_Receive_IT+0x70>
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cd0:	e08f      	b.n	8006df2 <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	88fa      	ldrh	r2, [r7, #6]
 8006cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d16:	d90b      	bls.n	8006d30 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d26:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a36      	ldr	r2, [pc, #216]	; (8006e04 <HAL_SPI_Receive_IT+0x1a8>)
 8006d2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8006d2e:	e00a      	b.n	8006d46 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d3e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a31      	ldr	r2, [pc, #196]	; (8006e08 <HAL_SPI_Receive_IT+0x1ac>)
 8006d44:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d4e:	d10f      	bne.n	8006d70 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d6e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d78:	d11f      	bne.n	8006dba <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d88:	d806      	bhi.n	8006d98 <HAL_SPI_Receive_IT+0x13c>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d102      	bne.n	8006d98 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2202      	movs	r2, #2
 8006d96:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e002      	b.n	8006dc0 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006dce:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d008      	beq.n	8006df0 <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e000      	b.n	8006df2 <HAL_SPI_Receive_IT+0x196>
  }

error :
 8006df0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	08007619 	.word	0x08007619
 8006e08:	08007561 	.word	0x08007561

08006e0c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_SPI_TransmitReceive_IT+0x20>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e0b9      	b.n	8006fa0 <HAL_SPI_TransmitReceive_IT+0x194>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e3a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e42:	7dbb      	ldrb	r3, [r7, #22]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d00d      	beq.n	8006e64 <HAL_SPI_TransmitReceive_IT+0x58>
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e4e:	d106      	bne.n	8006e5e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d102      	bne.n	8006e5e <HAL_SPI_TransmitReceive_IT+0x52>
 8006e58:	7dbb      	ldrb	r3, [r7, #22]
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d002      	beq.n	8006e64 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e62:	e098      	b.n	8006f96 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006e70:	887b      	ldrh	r3, [r7, #2]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e7a:	e08c      	b.n	8006f96 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d003      	beq.n	8006e90 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2205      	movs	r2, #5
 8006e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	887a      	ldrh	r2, [r7, #2]
 8006ea0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	887a      	ldrh	r2, [r7, #2]
 8006ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	887a      	ldrh	r2, [r7, #2]
 8006eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	887a      	ldrh	r2, [r7, #2]
 8006eba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ec6:	d906      	bls.n	8006ed6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a38      	ldr	r2, [pc, #224]	; (8006fac <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8006ecc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a37      	ldr	r2, [pc, #220]	; (8006fb0 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8006ed2:	651a      	str	r2, [r3, #80]	; 0x50
 8006ed4:	e005      	b.n	8006ee2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4a36      	ldr	r2, [pc, #216]	; (8006fb4 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 8006eda:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a36      	ldr	r2, [pc, #216]	; (8006fb8 <HAL_SPI_TransmitReceive_IT+0x1ac>)
 8006ee0:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eea:	d11f      	bne.n	8006f2c <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006efa:	d806      	bhi.n	8006f0a <HAL_SPI_TransmitReceive_IT+0xfe>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d102      	bne.n	8006f0a <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2202      	movs	r2, #2
 8006f08:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e002      	b.n	8006f32 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f3a:	d802      	bhi.n	8006f42 <HAL_SPI_TransmitReceive_IT+0x136>
 8006f3c:	887b      	ldrh	r3, [r7, #2]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d908      	bls.n	8006f54 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	e007      	b.n	8006f64 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f62:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006f72:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7e:	2b40      	cmp	r3, #64	; 0x40
 8006f80:	d008      	beq.n	8006f94 <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e000      	b.n	8006f96 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 8006f94:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	080073fd 	.word	0x080073fd
 8006fb0:	080074a5 	.word	0x080074a5
 8006fb4:	08007211 	.word	0x08007211
 8006fb8:	0800733f 	.word	0x0800733f

08006fbc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	099b      	lsrs	r3, r3, #6
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10f      	bne.n	8007000 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	099b      	lsrs	r3, r3, #6
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
    return;
 8006ffe:	e0d8      	b.n	80071b2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	085b      	lsrs	r3, r3, #1
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <HAL_SPI_IRQHandler+0x66>
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	09db      	lsrs	r3, r3, #7
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
    return;
 8007020:	e0c7      	b.n	80071b2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10c      	bne.n	8007048 <HAL_SPI_IRQHandler+0x8c>
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	099b      	lsrs	r3, r3, #6
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80b5 	beq.w	80071b2 <HAL_SPI_IRQHandler+0x1f6>
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 80ae 	beq.w	80071b2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	099b      	lsrs	r3, r3, #6
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d023      	beq.n	80070aa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b03      	cmp	r3, #3
 800706c:	d011      	beq.n	8007092 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007072:	f043 0204 	orr.w	r2, r3, #4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	e00b      	b.n	80070aa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007092:	2300      	movs	r3, #0
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	693b      	ldr	r3, [r7, #16]
        return;
 80070a8:	e083      	b.n	80071b2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d014      	beq.n	80070e0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ba:	f043 0201 	orr.w	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00c      	beq.n	8007106 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f0:	f043 0208 	orr.w	r2, r3, #8
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80070f8:	2300      	movs	r3, #0
 80070fa:	60bb      	str	r3, [r7, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	60bb      	str	r3, [r7, #8]
 8007104:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710a:	2b00      	cmp	r3, #0
 800710c:	d050      	beq.n	80071b0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800711c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <HAL_SPI_IRQHandler+0x17e>
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d034      	beq.n	80071a4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0203 	bic.w	r2, r2, #3
 8007148:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	2b00      	cmp	r3, #0
 8007150:	d011      	beq.n	8007176 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007156:	4a18      	ldr	r2, [pc, #96]	; (80071b8 <HAL_SPI_IRQHandler+0x1fc>)
 8007158:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715e:	4618      	mov	r0, r3
 8007160:	f7fc fdd3 	bl	8003d0a <HAL_DMA_Abort_IT>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	2b00      	cmp	r3, #0
 800717c:	d016      	beq.n	80071ac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	4a0d      	ldr	r2, [pc, #52]	; (80071b8 <HAL_SPI_IRQHandler+0x1fc>)
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	4618      	mov	r0, r3
 800718c:	f7fc fdbd 	bl	8003d0a <HAL_DMA_Abort_IT>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80071a2:	e003      	b.n	80071ac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f813 	bl	80071d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80071aa:	e000      	b.n	80071ae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80071ac:	bf00      	nop
    return;
 80071ae:	bf00      	nop
 80071b0:	bf00      	nop
  }
}
 80071b2:	3720      	adds	r7, #32
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	080071e5 	.word	0x080071e5

080071bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7ff ffe5 	bl	80071d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	d923      	bls.n	800726c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	b292      	uxth	r2, r2
 8007230:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	1c9a      	adds	r2, r3, #2
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b02      	subs	r3, #2
 8007246:	b29a      	uxth	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b01      	cmp	r3, #1
 8007258:	d11f      	bne.n	800729a <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	e016      	b.n	800729a <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f103 020c 	add.w	r2, r3, #12
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	7812      	ldrb	r2, [r2, #0]
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d120      	bne.n	80072e8 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ae:	d10b      	bne.n	80072c8 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072be:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a0b      	ldr	r2, [pc, #44]	; (80072f0 <SPI_2linesRxISR_8BIT+0xe0>)
 80072c4:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80072c6:	e00f      	b.n	80072e8 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072d6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fbf0 	bl	8007ac8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	080072f5 	.word	0x080072f5

080072f4 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Read 8bit CRC to flush Data Register */
  READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	330c      	adds	r3, #12
 8007302:	781b      	ldrb	r3, [r3, #0]

  hspi->CRCSize--;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007308:	1e5a      	subs	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10f      	bne.n	8007336 <SPI_2linesRxISR_8BITCRC+0x42>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007324:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d102      	bne.n	8007336 <SPI_2linesRxISR_8BITCRC+0x42>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fbc9 	bl	8007ac8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800734a:	b29b      	uxth	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	d912      	bls.n	8007376 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	881a      	ldrh	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	1c9a      	adds	r2, r3, #2
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b02      	subs	r3, #2
 800736e:	b29a      	uxth	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007374:	e012      	b.n	800739c <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	330c      	adds	r3, #12
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d126      	bne.n	80073f4 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ae:	d110      	bne.n	80073d2 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073be:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073ce:	605a      	str	r2, [r3, #4]
      return;
 80073d0:	e010      	b.n	80073f4 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073e0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fb6a 	bl	8007ac8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	b292      	uxth	r2, r2
 8007410:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	1c9a      	adds	r2, r3, #2
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d118      	bne.n	800746c <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007442:	d103      	bne.n	800744c <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a0b      	ldr	r2, [pc, #44]	; (8007474 <SPI_2linesRxISR_16BIT+0x78>)
 8007448:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800744a:	e00f      	b.n	800746c <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d102      	bne.n	800746c <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fb2e 	bl	8007ac8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	08007479 	.word	0x08007479

08007478 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Read 16bit CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68db      	ldr	r3, [r3, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007494:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fb16 	bl	8007ac8 <SPI_CloseRxTx_ISR>
}
 800749c:	bf00      	nop
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	881a      	ldrh	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d126      	bne.n	8007528 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e2:	d110      	bne.n	8007506 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074f2:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007502:	605a      	str	r2, [r3, #4]
      return;
 8007504:	e010      	b.n	8007528 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007514:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fad0 	bl	8007ac8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Read 8bit CRC to flush Data Register */
  READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	330c      	adds	r3, #12
 800753c:	781b      	ldrb	r3, [r3, #0]

  hspi->CRCSize--;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007542:	1e5a      	subs	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <SPI_RxISR_8BITCRC+0x28>
  {
    SPI_CloseRx_ISR(hspi);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fb15 	bl	8007b80 <SPI_CloseRx_ISR>
  }
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f103 020c 	add.w	r2, r3, #12
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	7812      	ldrb	r2, [r2, #0]
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800758a:	b29b      	uxth	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d10c      	bne.n	80075bc <SPI_RxISR_8BIT+0x5c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075aa:	d107      	bne.n	80075bc <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075ba:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d0:	d103      	bne.n	80075da <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a04      	ldr	r2, [pc, #16]	; (80075e8 <SPI_RxISR_8BIT+0x88>)
 80075d6:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80075d8:	e002      	b.n	80075e0 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fad0 	bl	8007b80 <SPI_CloseRx_ISR>
  }
}
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	0800752f 	.word	0x0800752f

080075ec <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Read 16bit CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007608:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fab8 	bl	8007b80 <SPI_CloseRx_ISR>
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	b292      	uxth	r2, r2
 800762c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	1c9a      	adds	r2, r3, #2
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b01      	cmp	r3, #1
 8007654:	d10c      	bne.n	8007670 <SPI_RxISR_16BIT+0x58>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800765e:	d107      	bne.n	8007670 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800766e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10b      	bne.n	8007694 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007684:	d103      	bne.n	800768e <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a04      	ldr	r2, [pc, #16]	; (800769c <SPI_RxISR_16BIT+0x84>)
 800768a:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800768c:	e002      	b.n	8007694 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa76 	bl	8007b80 <SPI_CloseRx_ISR>
  }
}
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	080075ed 	.word	0x080075ed

080076a0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	330c      	adds	r3, #12
 80076b2:	7812      	ldrb	r2, [r2, #0]
 80076b4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10f      	bne.n	80076f8 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e0:	d107      	bne.n	80076f2 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076f0:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa8a 	bl	8007c0c <SPI_CloseTx_ISR>
  }
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770c:	881a      	ldrh	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10f      	bne.n	8007756 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773e:	d107      	bne.n	8007750 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800774e:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fa5b 	bl	8007c0c <SPI_CloseTx_ISR>
  }
}
 8007756:	bf00      	nop
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007770:	f7fc f98c 	bl	8003a8c <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4413      	add	r3, r2
 800777e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007780:	f7fc f984 	bl	8003a8c <HAL_GetTick>
 8007784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007786:	4b39      	ldr	r3, [pc, #228]	; (800786c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	015b      	lsls	r3, r3, #5
 800778c:	0d1b      	lsrs	r3, r3, #20
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007796:	e054      	b.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d050      	beq.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077a0:	f7fc f974 	bl	8003a8c <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d902      	bls.n	80077b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d13d      	bne.n	8007832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ce:	d111      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d8:	d004      	beq.n	80077e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e2:	d107      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fc:	d10f      	bne.n	800781e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800781c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e017      	b.n	8007862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	3b01      	subs	r3, #1
 8007840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4013      	ands	r3, r2
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	bf0c      	ite	eq
 8007852:	2301      	moveq	r3, #1
 8007854:	2300      	movne	r3, #0
 8007856:	b2db      	uxtb	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	429a      	cmp	r2, r3
 800785e:	d19b      	bne.n	8007798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000004 	.word	0x20000004

08007870 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800787e:	f7fc f905 	bl	8003a8c <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	4413      	add	r3, r2
 800788c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800788e:	f7fc f8fd 	bl	8003a8c <HAL_GetTick>
 8007892:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007894:	4b3c      	ldr	r3, [pc, #240]	; (8007988 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	00da      	lsls	r2, r3, #3
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	0d1b      	lsrs	r3, r3, #20
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	fb02 f303 	mul.w	r3, r2, r3
 80078aa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80078ac:	e05f      	b.n	800796e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80078b4:	d106      	bne.n	80078c4 <SPI_WaitFifoStateUntilTimeout+0x54>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	330c      	adds	r3, #12
 80078c2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ca:	d050      	beq.n	800796e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078cc:	f7fc f8de 	bl	8003a8c <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	69fa      	ldr	r2, [r7, #28]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d902      	bls.n	80078e2 <SPI_WaitFifoStateUntilTimeout+0x72>
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d13d      	bne.n	800795e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078fa:	d111      	bne.n	8007920 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007904:	d004      	beq.n	8007910 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790e:	d107      	bne.n	8007920 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800791e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007928:	d10f      	bne.n	800794a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e010      	b.n	8007980 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	3b01      	subs	r3, #1
 800796c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4013      	ands	r3, r2
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	429a      	cmp	r2, r3
 800797c:	d197      	bne.n	80078ae <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3720      	adds	r7, #32
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000004 	.word	0x20000004

0800798c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079a0:	d111      	bne.n	80079c6 <SPI_EndRxTransaction+0x3a>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079aa:	d004      	beq.n	80079b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b4:	d107      	bne.n	80079c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2200      	movs	r2, #0
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f7ff fec5 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e0:	f043 0220 	orr.w	r2, r3, #32
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e023      	b.n	8007a34 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079f4:	d11d      	bne.n	8007a32 <SPI_EndRxTransaction+0xa6>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fe:	d004      	beq.n	8007a0a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a08:	d113      	bne.n	8007a32 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f7ff ff2a 	bl	8007870 <SPI_WaitFifoStateUntilTimeout>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d007      	beq.n	8007a32 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a26:	f043 0220 	orr.w	r2, r3, #32
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e000      	b.n	8007a34 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f7ff ff0b 	bl	8007870 <SPI_WaitFifoStateUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d007      	beq.n	8007a70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a64:	f043 0220 	orr.w	r2, r3, #32
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e027      	b.n	8007ac0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2200      	movs	r2, #0
 8007a78:	2180      	movs	r1, #128	; 0x80
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7ff fe70 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d007      	beq.n	8007a96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a8a:	f043 0220 	orr.w	r2, r3, #32
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e014      	b.n	8007ac0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff fee4 	bl	8007870 <SPI_WaitFifoStateUntilTimeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d007      	beq.n	8007abe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab2:	f043 0220 	orr.w	r2, r3, #32
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e000      	b.n	8007ac0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ad0:	f7fb ffdc 	bl	8003a8c <HAL_GetTick>
 8007ad4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0220 	bic.w	r2, r2, #32
 8007ae4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	2164      	movs	r1, #100	; 0x64
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff ffa6 	bl	8007a3c <SPI_EndRxTxTransaction>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afa:	f043 0220 	orr.w	r2, r3, #32
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b10      	cmp	r3, #16
 8007b0e:	d112      	bne.n	8007b36 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b1c:	f043 0202 	orr.w	r2, r3, #2
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007b2c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff fb4e 	bl	80071d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007b34:	e020      	b.n	8007b78 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d115      	bne.n	8007b6a <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d107      	bne.n	8007b5a <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fb f936 	bl	8002dc4 <HAL_SPI_RxCpltCallback>
}
 8007b58:	e00e      	b.n	8007b78 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fb2a 	bl	80071bc <HAL_SPI_TxRxCpltCallback>
}
 8007b68:	e006      	b.n	8007b78 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff fb2c 	bl	80071d0 <HAL_SPI_ErrorCallback>
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b96:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007b98:	f7fb ff78 	bl	8003a8c <HAL_GetTick>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	2164      	movs	r1, #100	; 0x64
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7ff fef2 	bl	800798c <SPI_EndRxTransaction>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb2:	f043 0220 	orr.w	r2, r3, #32
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	d10e      	bne.n	8007bee <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd4:	f043 0202 	orr.w	r2, r3, #2
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007be4:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff faf2 	bl	80071d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007bec:	e00a      	b.n	8007c04 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d103      	bne.n	8007bfe <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fb f8e4 	bl	8002dc4 <HAL_SPI_RxCpltCallback>
}
 8007bfc:	e002      	b.n	8007c04 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7ff fae6 	bl	80071d0 <HAL_SPI_ErrorCallback>
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c14:	f7fb ff3a 	bl	8003a8c <HAL_GetTick>
 8007c18:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c28:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	2164      	movs	r1, #100	; 0x64
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff ff04 	bl	8007a3c <SPI_EndRxTxTransaction>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c3e:	f043 0220 	orr.w	r2, r3, #32
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60bb      	str	r3, [r7, #8]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	60bb      	str	r3, [r7, #8]
 8007c62:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff faab 	bl	80071d0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007c7a:	e002      	b.n	8007c82 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7fb f8b5 	bl	8002dec <HAL_SPI_TxCpltCallback>
}
 8007c82:	bf00      	nop
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e042      	b.n	8007d22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d106      	bne.n	8007cb4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f83b 	bl	8007d2a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2224      	movs	r2, #36	; 0x24
 8007cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0201 	bic.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f99f 	bl	8008010 <UART_SetConfig>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e022      	b.n	8007d22 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fc65 	bl	80085b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0201 	orr.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fcec 	bl	80086f8 <UART_CheckIdleState>
 8007d20:	4603      	mov	r3, r0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b08a      	sub	sp, #40	; 0x28
 8007d42:	af02      	add	r7, sp, #8
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	603b      	str	r3, [r7, #0]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	f040 8084 	bne.w	8007e62 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <HAL_UART_Transmit+0x28>
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e07c      	b.n	8007e64 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_UART_Transmit+0x3a>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e075      	b.n	8007e64 <HAL_UART_Transmit+0x126>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2221      	movs	r2, #33	; 0x21
 8007d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007d90:	f7fb fe7c 	bl	8003a8c <HAL_GetTick>
 8007d94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	88fa      	ldrh	r2, [r7, #6]
 8007d9a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dae:	d108      	bne.n	8007dc2 <HAL_UART_Transmit+0x84>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	61bb      	str	r3, [r7, #24]
 8007dc0:	e003      	b.n	8007dca <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007dd2:	e02d      	b.n	8007e30 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2180      	movs	r1, #128	; 0x80
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 fcd2 	bl	8008788 <UART_WaitOnFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e03a      	b.n	8007e64 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10b      	bne.n	8007e0c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	881a      	ldrh	r2, [r3, #0]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e00:	b292      	uxth	r2, r2
 8007e02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	3302      	adds	r3, #2
 8007e08:	61bb      	str	r3, [r7, #24]
 8007e0a:	e008      	b.n	8007e1e <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	b292      	uxth	r2, r2
 8007e16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1cb      	bne.n	8007dd4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2200      	movs	r2, #0
 8007e44:	2140      	movs	r1, #64	; 0x40
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fc9e 	bl	8008788 <UART_WaitOnFlagUntilTimeout>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e006      	b.n	8007e64 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e000      	b.n	8007e64 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007e62:	2302      	movs	r3, #2
  }
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3720      	adds	r7, #32
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	; 0x28
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	f040 80be 	bne.w	8008004 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <HAL_UART_Receive+0x28>
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e0b6      	b.n	8008006 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d101      	bne.n	8007ea6 <HAL_UART_Receive+0x3a>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e0af      	b.n	8008006 <HAL_UART_Receive+0x19a>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2222      	movs	r2, #34	; 0x22
 8007eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007ebe:	f7fb fde5 	bl	8003a8c <HAL_GetTick>
 8007ec2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	88fa      	ldrh	r2, [r7, #6]
 8007ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	88fa      	ldrh	r2, [r7, #6]
 8007ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007edc:	d10e      	bne.n	8007efc <HAL_UART_Receive+0x90>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d105      	bne.n	8007ef2 <HAL_UART_Receive+0x86>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007eec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ef0:	e02d      	b.n	8007f4e <HAL_UART_Receive+0xe2>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	22ff      	movs	r2, #255	; 0xff
 8007ef6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007efa:	e028      	b.n	8007f4e <HAL_UART_Receive+0xe2>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <HAL_UART_Receive+0xb4>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <HAL_UART_Receive+0xaa>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	22ff      	movs	r2, #255	; 0xff
 8007f10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f14:	e01b      	b.n	8007f4e <HAL_UART_Receive+0xe2>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	227f      	movs	r2, #127	; 0x7f
 8007f1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f1e:	e016      	b.n	8007f4e <HAL_UART_Receive+0xe2>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f28:	d10d      	bne.n	8007f46 <HAL_UART_Receive+0xda>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <HAL_UART_Receive+0xd0>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	227f      	movs	r2, #127	; 0x7f
 8007f36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f3a:	e008      	b.n	8007f4e <HAL_UART_Receive+0xe2>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	223f      	movs	r2, #63	; 0x3f
 8007f40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f44:	e003      	b.n	8007f4e <HAL_UART_Receive+0xe2>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f54:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5e:	d108      	bne.n	8007f72 <HAL_UART_Receive+0x106>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d104      	bne.n	8007f72 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	61bb      	str	r3, [r7, #24]
 8007f70:	e003      	b.n	8007f7a <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007f82:	e033      	b.n	8007fec <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2120      	movs	r1, #32
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fbfa 	bl	8008788 <UART_WaitOnFlagUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e033      	b.n	8008006 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10c      	bne.n	8007fbe <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	8a7b      	ldrh	r3, [r7, #18]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	3302      	adds	r3, #2
 8007fba:	61bb      	str	r3, [r7, #24]
 8007fbc:	e00d      	b.n	8007fda <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	8a7b      	ldrh	r3, [r7, #18]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	4013      	ands	r3, r2
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1c5      	bne.n	8007f84 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	e000      	b.n	8008006 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008004:	2302      	movs	r3, #2
  }
}
 8008006:	4618      	mov	r0, r3
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008010:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008014:	b088      	sub	sp, #32
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	431a      	orrs	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	4313      	orrs	r3, r2
 8008034:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	4313      	orrs	r3, r2
 800803e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	4bb1      	ldr	r3, [pc, #708]	; (800830c <UART_SetConfig+0x2fc>)
 8008048:	4013      	ands	r3, r2
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	6812      	ldr	r2, [r2, #0]
 800804e:	69f9      	ldr	r1, [r7, #28]
 8008050:	430b      	orrs	r3, r1
 8008052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4aa6      	ldr	r2, [pc, #664]	; (8008310 <UART_SetConfig+0x300>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d004      	beq.n	8008084 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	4313      	orrs	r3, r2
 8008082:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800808e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	6812      	ldr	r2, [r2, #0]
 8008096:	69f9      	ldr	r1, [r7, #28]
 8008098:	430b      	orrs	r3, r1
 800809a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	f023 010f 	bic.w	r1, r3, #15
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a97      	ldr	r2, [pc, #604]	; (8008314 <UART_SetConfig+0x304>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d121      	bne.n	8008100 <UART_SetConfig+0xf0>
 80080bc:	4b96      	ldr	r3, [pc, #600]	; (8008318 <UART_SetConfig+0x308>)
 80080be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d816      	bhi.n	80080f8 <UART_SetConfig+0xe8>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <UART_SetConfig+0xc0>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	080080e1 	.word	0x080080e1
 80080d4:	080080ed 	.word	0x080080ed
 80080d8:	080080e7 	.word	0x080080e7
 80080dc:	080080f3 	.word	0x080080f3
 80080e0:	2301      	movs	r3, #1
 80080e2:	76fb      	strb	r3, [r7, #27]
 80080e4:	e0e8      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80080e6:	2302      	movs	r3, #2
 80080e8:	76fb      	strb	r3, [r7, #27]
 80080ea:	e0e5      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80080ec:	2304      	movs	r3, #4
 80080ee:	76fb      	strb	r3, [r7, #27]
 80080f0:	e0e2      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80080f2:	2308      	movs	r3, #8
 80080f4:	76fb      	strb	r3, [r7, #27]
 80080f6:	e0df      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80080f8:	2310      	movs	r3, #16
 80080fa:	76fb      	strb	r3, [r7, #27]
 80080fc:	bf00      	nop
 80080fe:	e0db      	b.n	80082b8 <UART_SetConfig+0x2a8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a85      	ldr	r2, [pc, #532]	; (800831c <UART_SetConfig+0x30c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d134      	bne.n	8008174 <UART_SetConfig+0x164>
 800810a:	4b83      	ldr	r3, [pc, #524]	; (8008318 <UART_SetConfig+0x308>)
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008110:	f003 030c 	and.w	r3, r3, #12
 8008114:	2b0c      	cmp	r3, #12
 8008116:	d829      	bhi.n	800816c <UART_SetConfig+0x15c>
 8008118:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <UART_SetConfig+0x110>)
 800811a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811e:	bf00      	nop
 8008120:	08008155 	.word	0x08008155
 8008124:	0800816d 	.word	0x0800816d
 8008128:	0800816d 	.word	0x0800816d
 800812c:	0800816d 	.word	0x0800816d
 8008130:	08008161 	.word	0x08008161
 8008134:	0800816d 	.word	0x0800816d
 8008138:	0800816d 	.word	0x0800816d
 800813c:	0800816d 	.word	0x0800816d
 8008140:	0800815b 	.word	0x0800815b
 8008144:	0800816d 	.word	0x0800816d
 8008148:	0800816d 	.word	0x0800816d
 800814c:	0800816d 	.word	0x0800816d
 8008150:	08008167 	.word	0x08008167
 8008154:	2300      	movs	r3, #0
 8008156:	76fb      	strb	r3, [r7, #27]
 8008158:	e0ae      	b.n	80082b8 <UART_SetConfig+0x2a8>
 800815a:	2302      	movs	r3, #2
 800815c:	76fb      	strb	r3, [r7, #27]
 800815e:	e0ab      	b.n	80082b8 <UART_SetConfig+0x2a8>
 8008160:	2304      	movs	r3, #4
 8008162:	76fb      	strb	r3, [r7, #27]
 8008164:	e0a8      	b.n	80082b8 <UART_SetConfig+0x2a8>
 8008166:	2308      	movs	r3, #8
 8008168:	76fb      	strb	r3, [r7, #27]
 800816a:	e0a5      	b.n	80082b8 <UART_SetConfig+0x2a8>
 800816c:	2310      	movs	r3, #16
 800816e:	76fb      	strb	r3, [r7, #27]
 8008170:	bf00      	nop
 8008172:	e0a1      	b.n	80082b8 <UART_SetConfig+0x2a8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a69      	ldr	r2, [pc, #420]	; (8008320 <UART_SetConfig+0x310>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d120      	bne.n	80081c0 <UART_SetConfig+0x1b0>
 800817e:	4b66      	ldr	r3, [pc, #408]	; (8008318 <UART_SetConfig+0x308>)
 8008180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008184:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008188:	2b10      	cmp	r3, #16
 800818a:	d00f      	beq.n	80081ac <UART_SetConfig+0x19c>
 800818c:	2b10      	cmp	r3, #16
 800818e:	d802      	bhi.n	8008196 <UART_SetConfig+0x186>
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <UART_SetConfig+0x190>
 8008194:	e010      	b.n	80081b8 <UART_SetConfig+0x1a8>
 8008196:	2b20      	cmp	r3, #32
 8008198:	d005      	beq.n	80081a6 <UART_SetConfig+0x196>
 800819a:	2b30      	cmp	r3, #48	; 0x30
 800819c:	d009      	beq.n	80081b2 <UART_SetConfig+0x1a2>
 800819e:	e00b      	b.n	80081b8 <UART_SetConfig+0x1a8>
 80081a0:	2300      	movs	r3, #0
 80081a2:	76fb      	strb	r3, [r7, #27]
 80081a4:	e088      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80081a6:	2302      	movs	r3, #2
 80081a8:	76fb      	strb	r3, [r7, #27]
 80081aa:	e085      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80081ac:	2304      	movs	r3, #4
 80081ae:	76fb      	strb	r3, [r7, #27]
 80081b0:	e082      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80081b2:	2308      	movs	r3, #8
 80081b4:	76fb      	strb	r3, [r7, #27]
 80081b6:	e07f      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80081b8:	2310      	movs	r3, #16
 80081ba:	76fb      	strb	r3, [r7, #27]
 80081bc:	bf00      	nop
 80081be:	e07b      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a57      	ldr	r2, [pc, #348]	; (8008324 <UART_SetConfig+0x314>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d120      	bne.n	800820c <UART_SetConfig+0x1fc>
 80081ca:	4b53      	ldr	r3, [pc, #332]	; (8008318 <UART_SetConfig+0x308>)
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081d4:	2b40      	cmp	r3, #64	; 0x40
 80081d6:	d00f      	beq.n	80081f8 <UART_SetConfig+0x1e8>
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d802      	bhi.n	80081e2 <UART_SetConfig+0x1d2>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <UART_SetConfig+0x1dc>
 80081e0:	e010      	b.n	8008204 <UART_SetConfig+0x1f4>
 80081e2:	2b80      	cmp	r3, #128	; 0x80
 80081e4:	d005      	beq.n	80081f2 <UART_SetConfig+0x1e2>
 80081e6:	2bc0      	cmp	r3, #192	; 0xc0
 80081e8:	d009      	beq.n	80081fe <UART_SetConfig+0x1ee>
 80081ea:	e00b      	b.n	8008204 <UART_SetConfig+0x1f4>
 80081ec:	2300      	movs	r3, #0
 80081ee:	76fb      	strb	r3, [r7, #27]
 80081f0:	e062      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80081f2:	2302      	movs	r3, #2
 80081f4:	76fb      	strb	r3, [r7, #27]
 80081f6:	e05f      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80081f8:	2304      	movs	r3, #4
 80081fa:	76fb      	strb	r3, [r7, #27]
 80081fc:	e05c      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80081fe:	2308      	movs	r3, #8
 8008200:	76fb      	strb	r3, [r7, #27]
 8008202:	e059      	b.n	80082b8 <UART_SetConfig+0x2a8>
 8008204:	2310      	movs	r3, #16
 8008206:	76fb      	strb	r3, [r7, #27]
 8008208:	bf00      	nop
 800820a:	e055      	b.n	80082b8 <UART_SetConfig+0x2a8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a45      	ldr	r2, [pc, #276]	; (8008328 <UART_SetConfig+0x318>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d124      	bne.n	8008260 <UART_SetConfig+0x250>
 8008216:	4b40      	ldr	r3, [pc, #256]	; (8008318 <UART_SetConfig+0x308>)
 8008218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008224:	d012      	beq.n	800824c <UART_SetConfig+0x23c>
 8008226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822a:	d802      	bhi.n	8008232 <UART_SetConfig+0x222>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <UART_SetConfig+0x230>
 8008230:	e012      	b.n	8008258 <UART_SetConfig+0x248>
 8008232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008236:	d006      	beq.n	8008246 <UART_SetConfig+0x236>
 8008238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800823c:	d009      	beq.n	8008252 <UART_SetConfig+0x242>
 800823e:	e00b      	b.n	8008258 <UART_SetConfig+0x248>
 8008240:	2300      	movs	r3, #0
 8008242:	76fb      	strb	r3, [r7, #27]
 8008244:	e038      	b.n	80082b8 <UART_SetConfig+0x2a8>
 8008246:	2302      	movs	r3, #2
 8008248:	76fb      	strb	r3, [r7, #27]
 800824a:	e035      	b.n	80082b8 <UART_SetConfig+0x2a8>
 800824c:	2304      	movs	r3, #4
 800824e:	76fb      	strb	r3, [r7, #27]
 8008250:	e032      	b.n	80082b8 <UART_SetConfig+0x2a8>
 8008252:	2308      	movs	r3, #8
 8008254:	76fb      	strb	r3, [r7, #27]
 8008256:	e02f      	b.n	80082b8 <UART_SetConfig+0x2a8>
 8008258:	2310      	movs	r3, #16
 800825a:	76fb      	strb	r3, [r7, #27]
 800825c:	bf00      	nop
 800825e:	e02b      	b.n	80082b8 <UART_SetConfig+0x2a8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a2a      	ldr	r2, [pc, #168]	; (8008310 <UART_SetConfig+0x300>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d124      	bne.n	80082b4 <UART_SetConfig+0x2a4>
 800826a:	4b2b      	ldr	r3, [pc, #172]	; (8008318 <UART_SetConfig+0x308>)
 800826c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008270:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008278:	d012      	beq.n	80082a0 <UART_SetConfig+0x290>
 800827a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827e:	d802      	bhi.n	8008286 <UART_SetConfig+0x276>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d007      	beq.n	8008294 <UART_SetConfig+0x284>
 8008284:	e012      	b.n	80082ac <UART_SetConfig+0x29c>
 8008286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800828a:	d006      	beq.n	800829a <UART_SetConfig+0x28a>
 800828c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008290:	d009      	beq.n	80082a6 <UART_SetConfig+0x296>
 8008292:	e00b      	b.n	80082ac <UART_SetConfig+0x29c>
 8008294:	2300      	movs	r3, #0
 8008296:	76fb      	strb	r3, [r7, #27]
 8008298:	e00e      	b.n	80082b8 <UART_SetConfig+0x2a8>
 800829a:	2302      	movs	r3, #2
 800829c:	76fb      	strb	r3, [r7, #27]
 800829e:	e00b      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80082a0:	2304      	movs	r3, #4
 80082a2:	76fb      	strb	r3, [r7, #27]
 80082a4:	e008      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80082a6:	2308      	movs	r3, #8
 80082a8:	76fb      	strb	r3, [r7, #27]
 80082aa:	e005      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80082ac:	2310      	movs	r3, #16
 80082ae:	76fb      	strb	r3, [r7, #27]
 80082b0:	bf00      	nop
 80082b2:	e001      	b.n	80082b8 <UART_SetConfig+0x2a8>
 80082b4:	2310      	movs	r3, #16
 80082b6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a14      	ldr	r2, [pc, #80]	; (8008310 <UART_SetConfig+0x300>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	f040 80a1 	bne.w	8008406 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082c4:	7efb      	ldrb	r3, [r7, #27]
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d836      	bhi.n	8008338 <UART_SetConfig+0x328>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <UART_SetConfig+0x2c0>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	080082f5 	.word	0x080082f5
 80082d4:	08008339 	.word	0x08008339
 80082d8:	080082fd 	.word	0x080082fd
 80082dc:	08008339 	.word	0x08008339
 80082e0:	08008303 	.word	0x08008303
 80082e4:	08008339 	.word	0x08008339
 80082e8:	08008339 	.word	0x08008339
 80082ec:	08008339 	.word	0x08008339
 80082f0:	08008331 	.word	0x08008331
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082f4:	f7fd fd6e 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
 80082f8:	6178      	str	r0, [r7, #20]
        break;
 80082fa:	e022      	b.n	8008342 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082fc:	4b0b      	ldr	r3, [pc, #44]	; (800832c <UART_SetConfig+0x31c>)
 80082fe:	617b      	str	r3, [r7, #20]
        break;
 8008300:	e01f      	b.n	8008342 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008302:	f7fd fcd1 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8008306:	6178      	str	r0, [r7, #20]
        break;
 8008308:	e01b      	b.n	8008342 <UART_SetConfig+0x332>
 800830a:	bf00      	nop
 800830c:	cfff69f3 	.word	0xcfff69f3
 8008310:	40008000 	.word	0x40008000
 8008314:	40013800 	.word	0x40013800
 8008318:	40021000 	.word	0x40021000
 800831c:	40004400 	.word	0x40004400
 8008320:	40004800 	.word	0x40004800
 8008324:	40004c00 	.word	0x40004c00
 8008328:	40005000 	.word	0x40005000
 800832c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008334:	617b      	str	r3, [r7, #20]
        break;
 8008336:	e004      	b.n	8008342 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	76bb      	strb	r3, [r7, #26]
        break;
 8008340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 811d 	beq.w	8008584 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	4a97      	ldr	r2, [pc, #604]	; (80085ac <UART_SetConfig+0x59c>)
 8008350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008354:	461a      	mov	r2, r3
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	fbb3 f3f2 	udiv	r3, r3, r2
 800835c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	4613      	mov	r3, r2
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4413      	add	r3, r2
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	429a      	cmp	r2, r3
 800836c:	d305      	bcc.n	800837a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	429a      	cmp	r2, r3
 8008378:	d902      	bls.n	8008380 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	76bb      	strb	r3, [r7, #26]
 800837e:	e101      	b.n	8008584 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	4618      	mov	r0, r3
 8008384:	f04f 0100 	mov.w	r1, #0
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4a87      	ldr	r2, [pc, #540]	; (80085ac <UART_SetConfig+0x59c>)
 800838e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008392:	b29b      	uxth	r3, r3
 8008394:	f04f 0400 	mov.w	r4, #0
 8008398:	461a      	mov	r2, r3
 800839a:	4623      	mov	r3, r4
 800839c:	f7f7 ff88 	bl	80002b0 <__aeabi_uldivmod>
 80083a0:	4603      	mov	r3, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	4619      	mov	r1, r3
 80083a6:	4622      	mov	r2, r4
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	f04f 0400 	mov.w	r4, #0
 80083b0:	0214      	lsls	r4, r2, #8
 80083b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80083b6:	020b      	lsls	r3, r1, #8
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6852      	ldr	r2, [r2, #4]
 80083bc:	0852      	lsrs	r2, r2, #1
 80083be:	4611      	mov	r1, r2
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	eb13 0b01 	adds.w	fp, r3, r1
 80083c8:	eb44 0c02 	adc.w	ip, r4, r2
 80083cc:	4658      	mov	r0, fp
 80083ce:	4661      	mov	r1, ip
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f04f 0400 	mov.w	r4, #0
 80083d8:	461a      	mov	r2, r3
 80083da:	4623      	mov	r3, r4
 80083dc:	f7f7 ff68 	bl	80002b0 <__aeabi_uldivmod>
 80083e0:	4603      	mov	r3, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083ec:	d308      	bcc.n	8008400 <UART_SetConfig+0x3f0>
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f4:	d204      	bcs.n	8008400 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	60da      	str	r2, [r3, #12]
 80083fe:	e0c1      	b.n	8008584 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	76bb      	strb	r3, [r7, #26]
 8008404:	e0be      	b.n	8008584 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800840e:	d164      	bne.n	80084da <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8008410:	7efb      	ldrb	r3, [r7, #27]
 8008412:	2b08      	cmp	r3, #8
 8008414:	d827      	bhi.n	8008466 <UART_SetConfig+0x456>
 8008416:	a201      	add	r2, pc, #4	; (adr r2, 800841c <UART_SetConfig+0x40c>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	08008441 	.word	0x08008441
 8008420:	08008449 	.word	0x08008449
 8008424:	08008451 	.word	0x08008451
 8008428:	08008467 	.word	0x08008467
 800842c:	08008457 	.word	0x08008457
 8008430:	08008467 	.word	0x08008467
 8008434:	08008467 	.word	0x08008467
 8008438:	08008467 	.word	0x08008467
 800843c:	0800845f 	.word	0x0800845f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008440:	f7fd fcc8 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
 8008444:	6178      	str	r0, [r7, #20]
        break;
 8008446:	e013      	b.n	8008470 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008448:	f7fd fcda 	bl	8005e00 <HAL_RCC_GetPCLK2Freq>
 800844c:	6178      	str	r0, [r7, #20]
        break;
 800844e:	e00f      	b.n	8008470 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008450:	4b57      	ldr	r3, [pc, #348]	; (80085b0 <UART_SetConfig+0x5a0>)
 8008452:	617b      	str	r3, [r7, #20]
        break;
 8008454:	e00c      	b.n	8008470 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008456:	f7fd fc27 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 800845a:	6178      	str	r0, [r7, #20]
        break;
 800845c:	e008      	b.n	8008470 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800845e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008462:	617b      	str	r3, [r7, #20]
        break;
 8008464:	e004      	b.n	8008470 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	76bb      	strb	r3, [r7, #26]
        break;
 800846e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8086 	beq.w	8008584 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	4a4b      	ldr	r2, [pc, #300]	; (80085ac <UART_SetConfig+0x59c>)
 800847e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008482:	461a      	mov	r2, r3
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	fbb3 f3f2 	udiv	r3, r3, r2
 800848a:	005a      	lsls	r2, r3, #1
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	085b      	lsrs	r3, r3, #1
 8008492:	441a      	add	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	fbb2 f3f3 	udiv	r3, r2, r3
 800849c:	b29b      	uxth	r3, r3
 800849e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2b0f      	cmp	r3, #15
 80084a4:	d916      	bls.n	80084d4 <UART_SetConfig+0x4c4>
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ac:	d212      	bcs.n	80084d4 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f023 030f 	bic.w	r3, r3, #15
 80084b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	085b      	lsrs	r3, r3, #1
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	89fb      	ldrh	r3, [r7, #14]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	89fa      	ldrh	r2, [r7, #14]
 80084d0:	60da      	str	r2, [r3, #12]
 80084d2:	e057      	b.n	8008584 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	76bb      	strb	r3, [r7, #26]
 80084d8:	e054      	b.n	8008584 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084da:	7efb      	ldrb	r3, [r7, #27]
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d828      	bhi.n	8008532 <UART_SetConfig+0x522>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <UART_SetConfig+0x4d8>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	0800850d 	.word	0x0800850d
 80084ec:	08008515 	.word	0x08008515
 80084f0:	0800851d 	.word	0x0800851d
 80084f4:	08008533 	.word	0x08008533
 80084f8:	08008523 	.word	0x08008523
 80084fc:	08008533 	.word	0x08008533
 8008500:	08008533 	.word	0x08008533
 8008504:	08008533 	.word	0x08008533
 8008508:	0800852b 	.word	0x0800852b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800850c:	f7fd fc62 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
 8008510:	6178      	str	r0, [r7, #20]
        break;
 8008512:	e013      	b.n	800853c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008514:	f7fd fc74 	bl	8005e00 <HAL_RCC_GetPCLK2Freq>
 8008518:	6178      	str	r0, [r7, #20]
        break;
 800851a:	e00f      	b.n	800853c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800851c:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <UART_SetConfig+0x5a0>)
 800851e:	617b      	str	r3, [r7, #20]
        break;
 8008520:	e00c      	b.n	800853c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008522:	f7fd fbc1 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8008526:	6178      	str	r0, [r7, #20]
        break;
 8008528:	e008      	b.n	800853c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800852a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800852e:	617b      	str	r3, [r7, #20]
        break;
 8008530:	e004      	b.n	800853c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	76bb      	strb	r3, [r7, #26]
        break;
 800853a:	bf00      	nop
    }

    if (pclk != 0U)
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d020      	beq.n	8008584 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	4a19      	ldr	r2, [pc, #100]	; (80085ac <UART_SetConfig+0x59c>)
 8008548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800854c:	461a      	mov	r2, r3
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	fbb3 f2f2 	udiv	r2, r3, r2
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	441a      	add	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	fbb2 f3f3 	udiv	r3, r2, r3
 8008564:	b29b      	uxth	r3, r3
 8008566:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2b0f      	cmp	r3, #15
 800856c:	d908      	bls.n	8008580 <UART_SetConfig+0x570>
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008574:	d204      	bcs.n	8008580 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	60da      	str	r2, [r3, #12]
 800857e:	e001      	b.n	8008584 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80085a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80085ac:	0801e480 	.word	0x0801e480
 80085b0:	00f42400 	.word	0x00f42400

080085b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01a      	beq.n	80086ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b2:	d10a      	bne.n	80086ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	605a      	str	r2, [r3, #4]
  }
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008708:	f7fb f9c0 	bl	8003a8c <HAL_GetTick>
 800870c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0308 	and.w	r3, r3, #8
 8008718:	2b08      	cmp	r3, #8
 800871a:	d10e      	bne.n	800873a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800871c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f82c 	bl	8008788 <UART_WaitOnFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e022      	b.n	8008780 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b04      	cmp	r3, #4
 8008746:	d10e      	bne.n	8008766 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f816 	bl	8008788 <UART_WaitOnFlagUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e00c      	b.n	8008780 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2220      	movs	r2, #32
 8008772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	4613      	mov	r3, r2
 8008796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008798:	e062      	b.n	8008860 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a0:	d05e      	beq.n	8008860 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a2:	f7fb f973 	bl	8003a8c <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d302      	bcc.n	80087b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d11d      	bne.n	80087f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087c6:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0201 	bic.w	r2, r2, #1
 80087d6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2220      	movs	r2, #32
 80087dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e045      	b.n	8008880 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0304 	and.w	r3, r3, #4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d02e      	beq.n	8008860 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800880c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008810:	d126      	bne.n	8008860 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800881a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800882a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0201 	bic.w	r2, r2, #1
 800883a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2220      	movs	r2, #32
 8008840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2220      	movs	r2, #32
 8008848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2220      	movs	r2, #32
 8008850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e00f      	b.n	8008880 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	69da      	ldr	r2, [r3, #28]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	4013      	ands	r3, r2
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	429a      	cmp	r2, r3
 800886e:	bf0c      	ite	eq
 8008870:	2301      	moveq	r3, #1
 8008872:	2300      	movne	r3, #0
 8008874:	b2db      	uxtb	r3, r3
 8008876:	461a      	mov	r2, r3
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	429a      	cmp	r2, r3
 800887c:	d08d      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <IsAtLeastTLSv1_3>:

    return 0;
}

int IsAtLeastTLSv1_3(const ProtocolVersion pv)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	80b8      	strh	r0, [r7, #4]
    return (pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_3_MINOR);
 8008890:	793b      	ldrb	r3, [r7, #4]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d104      	bne.n	80088a0 <IsAtLeastTLSv1_3+0x18>
 8008896:	797b      	ldrb	r3, [r7, #5]
 8008898:	2b03      	cmp	r3, #3
 800889a:	d901      	bls.n	80088a0 <IsAtLeastTLSv1_3+0x18>
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <IsAtLeastTLSv1_3+0x1a>
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <InitSSL_Method>:
#endif /* WOLFSSL_DTLS */
#endif /* WOLFSSL_SESSION_EXPORT */


void InitSSL_Method(WOLFSSL_METHOD* method, ProtocolVersion pv)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	8039      	strh	r1, [r7, #0]
    method->version    = pv;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	461a      	mov	r2, r3
 80088bc:	463b      	mov	r3, r7
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	8013      	strh	r3, [r2, #0]
    method->side       = WOLFSSL_CLIENT_END;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	709a      	strb	r2, [r3, #2]
    method->downgrade  = 0;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	70da      	strb	r2, [r3, #3]
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <InitSSL_Ctx>:
}
#endif /* OPENSSL_EXTRA || WOLFSSL_EITHER_SIDE */

/* Initialize SSL context, return 0 on success */
int InitSSL_Ctx(WOLFSSL_CTX* ctx, WOLFSSL_METHOD* method, void* heap)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b086      	sub	sp, #24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
    int ret = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	617b      	str	r3, [r7, #20]

    XMEMSET(ctx, 0, sizeof(WOLFSSL_CTX));
 80088ea:	22a0      	movs	r2, #160	; 0xa0
 80088ec:	2100      	movs	r1, #0
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f013 f8b3 	bl	801ba5a <memset>

    ctx->method   = method;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	601a      	str	r2, [r3, #0]
    ctx->refCount = 1;          /* so either CTX_free or SSL_free can release */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	60da      	str	r2, [r3, #12]
    ctx->heap     = ctx;        /* defaults to self */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	649a      	str	r2, [r3, #72]	; 0x48
    ctx->timeout  = WOLFSSL_SESSION_TIMEOUT;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800890c:	66da      	str	r2, [r3, #108]	; 0x6c
    ctx->minDowngrade = WOLFSSL_MIN_DOWNGRADE; /* current default: TLSv1_MINOR */
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2203      	movs	r2, #3
 8008912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    if (wc_InitMutex(&ctx->countMutex) < 0) {
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3308      	adds	r3, #8
 800891a:	4618      	mov	r0, r3
 800891c:	f012 ff56 	bl	801b7cc <wc_InitMutex>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	da06      	bge.n	8008934 <InitSSL_Ctx+0x5a>
        WOLFSSL_MSG("Mutex error on CTX init");
        ctx->err = CTX_INIT_MUTEX_E;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f46f 72ce 	mvn.w	r2, #412	; 0x19c
 800892c:	611a      	str	r2, [r3, #16]
        return BAD_MUTEX_E;
 800892e:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8008932:	e05e      	b.n	80089f2 <InitSSL_Ctx+0x118>
    }

#ifndef NO_CERTS
    ctx->privateKeyDevId = INVALID_DEVID;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f06f 0201 	mvn.w	r2, #1
 800893a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

#ifndef NO_DH
    ctx->minDhKeySz  = MIN_DHKEY_SZ;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2280      	movs	r2, #128	; 0x80
 8008940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    ctx->maxDhKeySz  = MAX_DHKEY_SZ;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800894a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
#endif
#ifndef NO_RSA
    ctx->minRsaKeySz = MIN_RSAKEY_SZ;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2280      	movs	r2, #128	; 0x80
 8008952:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#endif
#ifdef HAVE_ECC
    ctx->minEccKeySz  = MIN_ECCKEY_SZ;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	221c      	movs	r2, #28
 800895a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    ctx->eccTempKeySz = ECDHE_SIZE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2220      	movs	r2, #32
 8008962:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
    if (method->side == WOLFSSL_CLIENT_END)
        ctx->haveNTRU = 1;           /* always on client side */
                                     /* server can turn on by loading key */
#endif
#ifdef HAVE_ECC
    if (method->side == WOLFSSL_CLIENT_END) {
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	789b      	ldrb	r3, [r3, #2]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d114      	bne.n	8008998 <InitSSL_Ctx+0xbe>
        ctx->haveECDSAsig  = 1;        /* always on client side */
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
 8008974:	f043 0310 	orr.w	r3, r3, #16
 8008978:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
        ctx->haveECC  = 1;             /* server turns on with ECC key cert */
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
 8008982:	f043 0302 	orr.w	r3, r3, #2
 8008986:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
        ctx->haveStaticECC = 1;        /* server can turn on by loading key */
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
 8008990:	f043 0320 	orr.w	r3, r3, #32
 8008994:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
        ctx->haveECDSAsig  = 1;        /* always on client side */
        ctx->haveECC  = 1;             /* server turns on with ECC key cert */
    }
#endif

    ctx->devId = INVALID_DEVID;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f06f 0201 	mvn.w	r2, #1
 800899e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ctx->dtlsMtuSz = MAX_MTU;
    #endif
#endif

#ifndef NO_CERTS
    ctx->cm = wolfSSL_CertManagerNew_ex(heap);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fd11 	bl	80093ca <wolfSSL_CertManagerNew_ex>
 80089a8:	4602      	mov	r2, r0
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	641a      	str	r2, [r3, #64]	; 0x40
    if (ctx->cm == NULL) {
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d102      	bne.n	80089bc <InitSSL_Ctx+0xe2>
        WOLFSSL_MSG("Bad Cert Manager New");
        return BAD_CERT_MANAGER_ERROR;
 80089b6:	f46f 73b3 	mvn.w	r3, #358	; 0x166
 80089ba:	e01a      	b.n	80089f2 <InitSSL_Ctx+0x118>
    ctx->x509_store.cm = ctx->cm;
    #endif
#endif

#if defined(HAVE_EXTENDED_MASTER) && !defined(NO_WOLFSSL_CLIENT)
    if (method->side == WOLFSSL_CLIENT_END) {
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	789b      	ldrb	r3, [r3, #2]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d10e      	bne.n	80089e2 <InitSSL_Ctx+0x108>
        if ((method->version.major == SSLv3_MAJOR) &&
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d10a      	bne.n	80089e2 <InitSSL_Ctx+0x108>
             (method->version.minor >= TLSv1_MINOR)) {
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	785b      	ldrb	r3, [r3, #1]
        if ((method->version.major == SSLv3_MAJOR) &&
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d006      	beq.n	80089e2 <InitSSL_Ctx+0x108>

            ctx->haveEMS = 1;
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80089da:	f043 0301 	orr.w	r3, r3, #1
 80089de:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51

#if defined(WOLFSSL_TLS13) && !defined(HAVE_SUPPORTED_CURVES)
    ctx->noPskDheKe = 1;
#endif

    ctx->heap = heap; /* wolfSSL_CTX_load_static_memory sets */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	649a      	str	r2, [r3, #72]	; 0x48
    ctx->verifyDepth = MAX_CHAIN_DEPTH;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2209      	movs	r2, #9
 80089ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return ret;
 80089f0:	697b      	ldr	r3, [r7, #20]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <SSL_CtxResourceFree>:


/* In case contexts are held in array and don't want to free actual ctx */
void SSL_CtxResourceFree(WOLFSSL_CTX* ctx)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b088      	sub	sp, #32
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
    }
    else {
        XFREE(ctx->method, NULL, DYNAMIC_TYPE_METHOD);
    }
#else
    XFREE(ctx->method, ctx->heap, DYNAMIC_TYPE_METHOD);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	61fb      	str	r3, [r7, #28]
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <SSL_CtxResourceFree+0x1a>
 8008a0e:	69f8      	ldr	r0, [r7, #28]
 8008a10:	f008 fd40 	bl	8011494 <wolfSSL_Free>
#endif
    ctx->method = NULL;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
    if (ctx->suites) {
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00b      	beq.n	8008a3a <SSL_CtxResourceFree+0x40>
        XFREE(ctx->suites, ctx->heap, DYNAMIC_TYPE_SUITES);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a26:	61bb      	str	r3, [r7, #24]
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <SSL_CtxResourceFree+0x3a>
 8008a2e:	69b8      	ldr	r0, [r7, #24]
 8008a30:	f008 fd30 	bl	8011494 <wolfSSL_Free>
        ctx->suites = NULL;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	645a      	str	r2, [r3, #68]	; 0x44
    }

#ifndef NO_DH
    XFREE(ctx->serverDH_G.buffer, ctx->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	617b      	str	r3, [r7, #20]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <SSL_CtxResourceFree+0x52>
 8008a46:	6978      	ldr	r0, [r7, #20]
 8008a48:	f008 fd24 	bl	8011494 <wolfSSL_Free>
    ctx->serverDH_G.buffer = NULL;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	61da      	str	r2, [r3, #28]
    XFREE(ctx->serverDH_P.buffer, ctx->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	613b      	str	r3, [r7, #16]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <SSL_CtxResourceFree+0x6a>
 8008a5e:	6938      	ldr	r0, [r7, #16]
 8008a60:	f008 fd18 	bl	8011494 <wolfSSL_Free>
    ctx->serverDH_P.buffer = NULL;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	615a      	str	r2, [r3, #20]
#endif /* !NO_DH */

#ifdef SINGLE_THREADED
    if (ctx->rng) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d010      	beq.n	8008a94 <SSL_CtxResourceFree+0x9a>
        wc_FreeRng(ctx->rng);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f008 fd61 	bl	801153e <wc_FreeRng>
        XFREE(ctx->rng, ctx->heap, DYNAMIC_TYPE_RNG);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	60fb      	str	r3, [r7, #12]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <SSL_CtxResourceFree+0x94>
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f008 fd03 	bl	8011494 <wolfSSL_Free>
        ctx->rng = NULL;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	605a      	str	r2, [r3, #4]
    }
#endif /* SINGLE_THREADED */

#ifndef NO_CERTS
    FreeDer(&ctx->privateKey);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3330      	adds	r3, #48	; 0x30
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f006 fe27 	bl	800f6ec <FreeDer>
    FreeDer(&ctx->certificate);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3324      	adds	r3, #36	; 0x24
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f006 fe22 	bl	800f6ec <FreeDer>
            FreeX509(ctx->ourCert);
            XFREE(ctx->ourCert, ctx->heap, DYNAMIC_TYPE_X509);
            ctx->ourCert = NULL;
        }
    #endif /* KEEP_OUR_CERT */
    FreeDer(&ctx->certChain);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3328      	adds	r3, #40	; 0x28
 8008aac:	4618      	mov	r0, r3
 8008aae:	f006 fe1d 	bl	800f6ec <FreeDer>
    wolfSSL_CertManagerFree(ctx->cm);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 fcc4 	bl	8009444 <wolfSSL_CertManagerFree>
    ctx->cm = NULL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	641a      	str	r2, [r3, #64]	; 0x40
        }
    #endif
#endif /* !NO_CERTS */

#ifdef HAVE_TLS_EXTENSIONS
    TLSX_FreeAll(ctx->extensions, ctx->heap);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	f002 f835 	bl	800ab3e <TLSX_FreeAll>
            WOLFSSL_HEAP_HINT* hint = (WOLFSSL_HEAP_HINT*)(ctx->heap);
            wc_FreeMutex(&((WOLFSSL_HEAP*)(hint->memory))->memory_mutex);
        }
    }
#endif /* WOLFSSL_STATIC_MEMORY */
}
 8008ad4:	bf00      	nop
 8008ad6:	3720      	adds	r7, #32
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <FreeSSL_Ctx>:


void FreeSSL_Ctx(WOLFSSL_CTX* ctx)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
    int refCount;

    /* decrement CTX reference count */
    if ((refCount = SSL_CTX_RefCount(ctx, -1)) < 0) {
 8008ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fa7f 	bl	8008fec <SSL_CTX_RefCount>
 8008aee:	6178      	str	r0, [r7, #20]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	da11      	bge.n	8008b1a <FreeSSL_Ctx+0x3e>
        /* check error state, if mutex error code then mutex init failed but
         * CTX was still malloc'd */
        if (ctx->err == CTX_INIT_MUTEX_E) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f46f 72ce 	mvn.w	r2, #412	; 0x19c
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d122      	bne.n	8008b48 <FreeSSL_Ctx+0x6c>
            SSL_CtxResourceFree(ctx);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff ff79 	bl	80089fa <SSL_CtxResourceFree>
            XFREE(ctx, ctx->heap, DYNAMIC_TYPE_CTX);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60bb      	str	r3, [r7, #8]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d01a      	beq.n	8008b48 <FreeSSL_Ctx+0x6c>
 8008b12:	68b8      	ldr	r0, [r7, #8]
 8008b14:	f008 fcbe 	bl	8011494 <wolfSSL_Free>
        }
        return;
 8008b18:	e016      	b.n	8008b48 <FreeSSL_Ctx+0x6c>
    }

    if (refCount == 0) {
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d114      	bne.n	8008b4a <FreeSSL_Ctx+0x6e>
        void* heap = ctx->heap;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b24:	613b      	str	r3, [r7, #16]
        WOLFSSL_MSG("CTX ref count down to 0, doing full free");
        SSL_CtxResourceFree(ctx);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff ff67 	bl	80089fa <SSL_CtxResourceFree>
        wc_FreeMutex(&ctx->countMutex);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	4618      	mov	r0, r3
 8008b32:	f012 fe56 	bl	801b7e2 <wc_FreeMutex>
#ifdef WOLFSSL_STATIC_MEMORY
        if (ctx->onHeap == 0) {
            heap = NULL;
        }
#endif
        XFREE(ctx, heap, DYNAMIC_TYPE_CTX);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d004      	beq.n	8008b4a <FreeSSL_Ctx+0x6e>
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f008 fca7 	bl	8011494 <wolfSSL_Free>
 8008b46:	e000      	b.n	8008b4a <FreeSSL_Ctx+0x6e>
        return;
 8008b48:	bf00      	nop
    }
    else {
        (void)ctx;
        WOLFSSL_MSG("CTX ref count not 0 yet, no free");
    }
}
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <AddSuiteHashSigAlgo>:
}
#endif /* USE_ECDSA_KEYSZ_HASH_ALGO */

static WC_INLINE void AddSuiteHashSigAlgo(Suites* suites, byte macAlgo, byte sigAlgo,
    int keySz, word16* inOutIdx)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	607b      	str	r3, [r7, #4]
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	72fb      	strb	r3, [r7, #11]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	72bb      	strb	r3, [r7, #10]
    int addSigAlgo = 1;
 8008b62:	2301      	movs	r3, #1
 8008b64:	617b      	str	r3, [r7, #20]
    }
#else
    (void)keySz;
#endif /* USE_ECDSA_KEYSZ_HASH_ALGO */

    if (addSigAlgo) {
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d059      	beq.n	8008c20 <AddSuiteHashSigAlgo+0xd0>
#ifdef WC_RSA_PSS
        if (sigAlgo == rsa_pss_sa_algo) {
 8008b6c:	7abb      	ldrb	r3, [r7, #10]
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d13a      	bne.n	8008be8 <AddSuiteHashSigAlgo+0x98>
            /* RSA PSS is sig then mac */
            suites->hashSigAlgo[*inOutIdx] = sigAlgo;
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	7aba      	ldrb	r2, [r7, #10]
 8008b7e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	3301      	adds	r3, #1
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	801a      	strh	r2, [r3, #0]
            suites->hashSigAlgo[*inOutIdx] = macAlgo;
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4413      	add	r3, r2
 8008b98:	7afa      	ldrb	r2, [r7, #11]
 8008b9a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	801a      	strh	r2, [r3, #0]
    #ifdef WOLFSSL_TLS13
            /* Add the certificate algorithm as well */
            suites->hashSigAlgo[*inOutIdx] = sigAlgo;
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	7aba      	ldrb	r2, [r7, #10]
 8008bb6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	801a      	strh	r2, [r3, #0]
            suites->hashSigAlgo[*inOutIdx] = PSS_RSAE_TO_PSS_PSS(macAlgo);
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	7afb      	ldrb	r3, [r7, #11]
 8008bce:	3305      	adds	r3, #5
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	440b      	add	r3, r1
 8008bd6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	3301      	adds	r3, #1
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	801a      	strh	r2, [r3, #0]
            *inOutIdx += 1;
            suites->hashSigAlgo[*inOutIdx] = sigAlgo;
            *inOutIdx += 1;
        }
    }
}
 8008be6:	e01b      	b.n	8008c20 <AddSuiteHashSigAlgo+0xd0>
            suites->hashSigAlgo[*inOutIdx] = macAlgo;
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	7afa      	ldrb	r2, [r7, #11]
 8008bf4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	801a      	strh	r2, [r3, #0]
            suites->hashSigAlgo[*inOutIdx] = sigAlgo;
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	7aba      	ldrb	r2, [r7, #10]
 8008c10:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            *inOutIdx += 1;
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	801a      	strh	r2, [r3, #0]
}
 8008c20:	bf00      	nop
 8008c22:	371c      	adds	r7, #28
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <InitSuitesHashSigAlgo>:

void InitSuitesHashSigAlgo(Suites* suites, int haveECDSAsig, int haveRSAsig,
                           int haveAnon, int tls1_2, int keySz)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
    word16 idx = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	82fb      	strh	r3, [r7, #22]

    (void)tls1_2;
    (void)keySz;

#if defined(HAVE_ECC) || defined(HAVE_ED25519) || defined(HAVE_ED448)
    if (haveECDSAsig) {
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d008      	beq.n	8008c56 <InitSuitesHashSigAlgo+0x2a>
    #endif
    #ifdef WOLFSSL_SHA384
        AddSuiteHashSigAlgo(suites, sha384_mac, ecc_dsa_sa_algo, keySz, &idx);
    #endif
    #ifndef NO_SHA256
        AddSuiteHashSigAlgo(suites, sha256_mac, ecc_dsa_sa_algo, keySz, &idx);
 8008c44:	f107 0316 	add.w	r3, r7, #22
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	2104      	movs	r1, #4
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f7ff ff7d 	bl	8008b50 <AddSuiteHashSigAlgo>
                                                                          &idx);
    #endif
    }
#endif /* HAVE_ECC || HAVE_ED25519 || defined(HAVE_ED448 */

    if (haveRSAsig) {
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d014      	beq.n	8008c86 <InitSuitesHashSigAlgo+0x5a>
    #ifdef WC_RSA_PSS
        if (tls1_2) {
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d008      	beq.n	8008c74 <InitSuitesHashSigAlgo+0x48>
        #ifdef WOLFSSL_SHA384
            AddSuiteHashSigAlgo(suites, sha384_mac, rsa_pss_sa_algo, keySz,
                                                                          &idx);
        #endif
        #ifndef NO_SHA256
            AddSuiteHashSigAlgo(suites, sha256_mac, rsa_pss_sa_algo, keySz,
 8008c62:	f107 0316 	add.w	r3, r7, #22
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	2208      	movs	r2, #8
 8008c6c:	2104      	movs	r1, #4
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f7ff ff6e 	bl	8008b50 <AddSuiteHashSigAlgo>
    #endif
    #ifdef WOLFSSL_SHA384
        AddSuiteHashSigAlgo(suites, sha384_mac, rsa_sa_algo, keySz, &idx);
    #endif
    #ifndef NO_SHA256
        AddSuiteHashSigAlgo(suites, sha256_mac, rsa_sa_algo, keySz, &idx);
 8008c74:	f107 0316 	add.w	r3, r7, #22
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	2104      	movs	r1, #4
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7ff ff65 	bl	8008b50 <AddSuiteHashSigAlgo>
    }
#endif

    (void)haveAnon;
    (void)haveECDSAsig;
    suites->hashSigAlgoSz = idx;
 8008c86:	8afa      	ldrh	r2, [r7, #22]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	805a      	strh	r2, [r3, #2]
}
 8008c8c:	bf00      	nop
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <InitSuites>:

void InitSuites(Suites* suites, ProtocolVersion pv, int keySz, word16 haveRSA,
                word16 havePSK, word16 haveDH, word16 haveNTRU,
                word16 haveECDSAsig, word16 haveECC,
                word16 haveStaticECC, int side)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08c      	sub	sp, #48	; 0x30
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	8139      	strh	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	807b      	strh	r3, [r7, #2]
    word16 idx = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	84fb      	strh	r3, [r7, #38]	; 0x26
    int    tls    = pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_MINOR;
 8008ca6:	7a3b      	ldrb	r3, [r7, #8]
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d104      	bne.n	8008cb6 <InitSuites+0x22>
 8008cac:	7a7b      	ldrb	r3, [r7, #9]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <InitSuites+0x22>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e000      	b.n	8008cb8 <InitSuites+0x24>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]
    int    tls1_2 = pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_2_MINOR;
 8008cba:	7a3b      	ldrb	r3, [r7, #8]
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d104      	bne.n	8008cca <InitSuites+0x36>
 8008cc0:	7a7b      	ldrb	r3, [r7, #9]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d901      	bls.n	8008cca <InitSuites+0x36>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e000      	b.n	8008ccc <InitSuites+0x38>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	61bb      	str	r3, [r7, #24]
#ifdef WOLFSSL_TLS13
    int    tls1_3 = IsAtLeastTLSv1_3(pv);
 8008cce:	68b8      	ldr	r0, [r7, #8]
 8008cd0:	f7ff fdda 	bl	8008888 <IsAtLeastTLSv1_3>
 8008cd4:	6178      	str	r0, [r7, #20]
#endif
    int    dtls   = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	613b      	str	r3, [r7, #16]
    int    haveRSAsig = 1;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	623b      	str	r3, [r7, #32]
    (void)haveECC;
    (void)side;
    (void)haveRSA;    /* some builds won't read */
    (void)haveRSAsig; /* non ecc builds won't read */

    if (suites == NULL) {
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 817d 	beq.w	8008fe0 <InitSuites+0x34c>
        WOLFSSL_MSG("InitSuites pointer error");
        return;
    }

    if (suites->setSuites)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f040 8179 	bne.w	8008fe4 <InitSuites+0x350>
        return;      /* trust user settings, don't override */

#ifdef WOLFSSL_TLS13
#ifdef BUILD_TLS_AES_128_GCM_SHA256
    if (tls1_3) {
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00f      	beq.n	8008d18 <InitSuites+0x84>
        suites->suites[idx++] = TLS13_BYTE;
 8008cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	2213      	movs	r2, #19
 8008d06:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_AES_128_GCM_SHA256;
 8008d08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008d0e:	461a      	mov	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	2201      	movs	r2, #1
 8008d16:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_AES_256_GCM_SHA384;
    }
#endif

#ifdef BUILD_TLS_CHACHA20_POLY1305_SHA256
    if (tls1_3) {
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00f      	beq.n	8008d3e <InitSuites+0xaa>
        suites->suites[idx++] = TLS13_BYTE;
 8008d1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008d24:	461a      	mov	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4413      	add	r3, r2
 8008d2a:	2213      	movs	r2, #19
 8008d2c:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_CHACHA20_POLY1305_SHA256;
 8008d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008d34:	461a      	mov	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4413      	add	r3, r2
 8008d3a:	2203      	movs	r2, #3
 8008d3c:	711a      	strb	r2, [r3, #4]
#endif /* WOLFSSL_TLS13 */

#ifndef WOLFSSL_NO_TLS12

#if !defined(NO_WOLFSSL_SERVER) && !defined(NO_RSA)
    if (side == WOLFSSL_SERVER_END && haveStaticECC) {
 8008d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d105      	bne.n	8008d50 <InitSuites+0xbc>
 8008d44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <InitSuites+0xbc>
        haveRSA = 0;   /* can't do RSA with ECDSA key */
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	807b      	strh	r3, [r7, #2]
    }

    if (side == WOLFSSL_SERVER_END && haveECDSAsig) {
 8008d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d104      	bne.n	8008d60 <InitSuites+0xcc>
 8008d56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <InitSuites+0xcc>
        haveRSAsig = 0;     /* can't have RSA sig if signed by ECDSA */
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	623b      	str	r3, [r7, #32]
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
    }
#endif

#ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    if (tls1_2 && haveECC) {
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d013      	beq.n	8008d8e <InitSuites+0xfa>
 8008d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00f      	beq.n	8008d8e <InitSuites+0xfa>
        suites->suites[idx++] = ECC_BYTE;
 8008d6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008d74:	461a      	mov	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	22c0      	movs	r2, #192	; 0xc0
 8008d7c:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;
 8008d7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008d84:	461a      	mov	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4413      	add	r3, r2
 8008d8a:	222b      	movs	r2, #43	; 0x2b
 8008d8c:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384;
    }
#endif

#ifdef BUILD_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    if (tls1_2 && haveRSA) {
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d012      	beq.n	8008dba <InitSuites+0x126>
 8008d94:	887b      	ldrh	r3, [r7, #2]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00f      	beq.n	8008dba <InitSuites+0x126>
        suites->suites[idx++] = ECC_BYTE;
 8008d9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008da0:	461a      	mov	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4413      	add	r3, r2
 8008da6:	22c0      	movs	r2, #192	; 0xc0
 8008da8:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;
 8008daa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008db0:	461a      	mov	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4413      	add	r3, r2
 8008db6:	222f      	movs	r2, #47	; 0x2f
 8008db8:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_DHE_RSA_WITH_AES_256_GCM_SHA384;
    }
#endif

#ifdef BUILD_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
    if (tls1_2 && haveDH && haveRSA) {
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d015      	beq.n	8008dec <InitSuites+0x158>
 8008dc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d012      	beq.n	8008dec <InitSuites+0x158>
 8008dc6:	887b      	ldrh	r3, [r7, #2]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00f      	beq.n	8008dec <InitSuites+0x158>
        suites->suites[idx++] = CIPHER_BYTE;
 8008dcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	2200      	movs	r2, #0
 8008dda:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_DHE_RSA_WITH_AES_128_GCM_SHA256;
 8008ddc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008de2:	461a      	mov	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	229e      	movs	r2, #158	; 0x9e
 8008dea:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_PSK_WITH_AES_128_GCM_SHA256;
    }
#endif

#ifdef BUILD_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
    if (tls1_2 && haveECC) {
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d013      	beq.n	8008e1a <InitSuites+0x186>
 8008df2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00f      	beq.n	8008e1a <InitSuites+0x186>
        suites->suites[idx++] = CHACHA_BYTE;
 8008dfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008e00:	461a      	mov	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4413      	add	r3, r2
 8008e06:	22cc      	movs	r2, #204	; 0xcc
 8008e08:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256;
 8008e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008e10:	461a      	mov	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	22a9      	movs	r2, #169	; 0xa9
 8008e18:	711a      	strb	r2, [r3, #4]
    }
#endif

#ifdef BUILD_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    if (tls1_2 && haveRSA) {
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d012      	beq.n	8008e46 <InitSuites+0x1b2>
 8008e20:	887b      	ldrh	r3, [r7, #2]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00f      	beq.n	8008e46 <InitSuites+0x1b2>
        suites->suites[idx++] = CHACHA_BYTE;
 8008e26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4413      	add	r3, r2
 8008e32:	22cc      	movs	r2, #204	; 0xcc
 8008e34:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
 8008e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	22a8      	movs	r2, #168	; 0xa8
 8008e44:	711a      	strb	r2, [r3, #4]
    }
#endif

#ifdef BUILD_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    if (tls1_2 && haveRSA) {
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d012      	beq.n	8008e72 <InitSuites+0x1de>
 8008e4c:	887b      	ldrh	r3, [r7, #2]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00f      	beq.n	8008e72 <InitSuites+0x1de>
        suites->suites[idx++] = CHACHA_BYTE;
 8008e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	22cc      	movs	r2, #204	; 0xcc
 8008e60:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
 8008e62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008e68:	461a      	mov	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	22aa      	movs	r2, #170	; 0xaa
 8008e70:	711a      	strb	r2, [r3, #4]
    }
#endif
#endif

#ifdef BUILD_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    if (tls1_2 && haveRSA) {
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d012      	beq.n	8008e9e <InitSuites+0x20a>
 8008e78:	887b      	ldrh	r3, [r7, #2]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00f      	beq.n	8008e9e <InitSuites+0x20a>
        suites->suites[idx++] = ECC_BYTE;
 8008e7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008e84:	461a      	mov	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	22c0      	movs	r2, #192	; 0xc0
 8008e8c:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256;
 8008e8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008e94:	461a      	mov	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4413      	add	r3, r2
 8008e9a:	2227      	movs	r2, #39	; 0x27
 8008e9c:	711a      	strb	r2, [r3, #4]
    }
#endif

#ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    if (tls1_2 && haveECC) {
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d013      	beq.n	8008ecc <InitSuites+0x238>
 8008ea4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00f      	beq.n	8008ecc <InitSuites+0x238>
        suites->suites[idx++] = ECC_BYTE;
 8008eac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	22c0      	movs	r2, #192	; 0xc0
 8008eba:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
 8008ebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	2223      	movs	r2, #35	; 0x23
 8008eca:	711a      	strb	r2, [r3, #4]
    }
#endif

#ifdef BUILD_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
#ifndef WOLFSSL_OLDTLS_SHA2_CIPHERSUITES
    if (tls1_2 && haveDH && haveRSA)
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d015      	beq.n	8008efe <InitSuites+0x26a>
 8008ed2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d012      	beq.n	8008efe <InitSuites+0x26a>
 8008ed8:	887b      	ldrh	r3, [r7, #2]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00f      	beq.n	8008efe <InitSuites+0x26a>
#else
    if (tls && haveDH && haveRSA)
#endif
    {
        suites->suites[idx++] = CIPHER_BYTE;
 8008ede:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4413      	add	r3, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_DHE_RSA_WITH_AES_256_CBC_SHA256;
 8008eee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	4413      	add	r3, r2
 8008efa:	226b      	movs	r2, #107	; 0x6b
 8008efc:	711a      	strb	r2, [r3, #4]
    }
#endif

#ifdef BUILD_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
#ifndef WOLFSSL_OLDTLS_SHA2_CIPHERSUITES
    if (tls1_2 && haveDH && haveRSA)
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d015      	beq.n	8008f30 <InitSuites+0x29c>
 8008f04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d012      	beq.n	8008f30 <InitSuites+0x29c>
 8008f0a:	887b      	ldrh	r3, [r7, #2]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00f      	beq.n	8008f30 <InitSuites+0x29c>
#else
    if (tls && haveDH && haveRSA)
#endif
    {
        suites->suites[idx++] = CIPHER_BYTE;
 8008f10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008f16:	461a      	mov	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_DHE_RSA_WITH_AES_128_CBC_SHA256;
 8008f20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008f26:	461a      	mov	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	2267      	movs	r2, #103	; 0x67
 8008f2e:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_RSA_WITH_AES_128_CBC_SHA;
    }
#endif

#ifdef BUILD_TLS_ECDHE_ECDSA_WITH_CHACHA20_OLD_POLY1305_SHA256
    if (tls1_2 && haveECC) {
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d013      	beq.n	8008f5e <InitSuites+0x2ca>
 8008f36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00f      	beq.n	8008f5e <InitSuites+0x2ca>
        suites->suites[idx++] = CHACHA_BYTE;
 8008f3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008f44:	461a      	mov	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4413      	add	r3, r2
 8008f4a:	22cc      	movs	r2, #204	; 0xcc
 8008f4c:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] =
 8008f4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008f54:	461a      	mov	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4413      	add	r3, r2
 8008f5a:	2214      	movs	r2, #20
 8008f5c:	711a      	strb	r2, [r3, #4]
                              TLS_ECDHE_ECDSA_WITH_CHACHA20_OLD_POLY1305_SHA256;
    }
#endif

#ifdef BUILD_TLS_ECDHE_RSA_WITH_CHACHA20_OLD_POLY1305_SHA256
    if (tls1_2 && haveRSA) {
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d012      	beq.n	8008f8a <InitSuites+0x2f6>
 8008f64:	887b      	ldrh	r3, [r7, #2]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00f      	beq.n	8008f8a <InitSuites+0x2f6>
        suites->suites[idx++] = CHACHA_BYTE;
 8008f6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008f70:	461a      	mov	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4413      	add	r3, r2
 8008f76:	22cc      	movs	r2, #204	; 0xcc
 8008f78:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_ECDHE_RSA_WITH_CHACHA20_OLD_POLY1305_SHA256;
 8008f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008f80:	461a      	mov	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	4413      	add	r3, r2
 8008f86:	2213      	movs	r2, #19
 8008f88:	711a      	strb	r2, [r3, #4]
    }
#endif

#ifdef BUILD_TLS_DHE_RSA_WITH_CHACHA20_OLD_POLY1305_SHA256
    if (tls1_2 && haveRSA) {
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d012      	beq.n	8008fb6 <InitSuites+0x322>
 8008f90:	887b      	ldrh	r3, [r7, #2]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00f      	beq.n	8008fb6 <InitSuites+0x322>
        suites->suites[idx++] = CHACHA_BYTE;
 8008f96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	22cc      	movs	r2, #204	; 0xcc
 8008fa4:	711a      	strb	r2, [r3, #4]
        suites->suites[idx++] = TLS_DHE_RSA_WITH_CHACHA20_OLD_POLY1305_SHA256;
 8008fa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	84fa      	strh	r2, [r7, #38]	; 0x26
 8008fac:	461a      	mov	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	2215      	movs	r2, #21
 8008fb4:	711a      	strb	r2, [r3, #4]
    }
#endif

#endif /* !WOLFSSL_NO_TLS12 */

    suites->suiteSz = idx;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008fba:	801a      	strh	r2, [r3, #0]

    InitSuitesHashSigAlgo(suites, haveECDSAsig | haveECC, haveRSAsig | haveRSA,
 8008fbc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008fbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	887a      	ldrh	r2, [r7, #2]
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f7ff fe27 	bl	8008c2c <InitSuitesHashSigAlgo>
 8008fde:	e002      	b.n	8008fe6 <InitSuites+0x352>
        return;
 8008fe0:	bf00      	nop
 8008fe2:	e000      	b.n	8008fe6 <InitSuites+0x352>
        return;      /* trust user settings, don't override */
 8008fe4:	bf00      	nop
                                                              0, tls1_2, keySz);
}
 8008fe6:	3728      	adds	r7, #40	; 0x28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <SSL_CTX_RefCount>:
    return WOLFSSL_SUCCESS;
}

/* returns new reference count. Arg incr positive=up or negative=down */
int SSL_CTX_RefCount(WOLFSSL_CTX* ctx, int incr)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
    int refCount;

    if (ctx == NULL) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <SSL_CTX_RefCount+0x16>
        return BAD_FUNC_ARG;
 8008ffc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8009000:	e020      	b.n	8009044 <SSL_CTX_RefCount+0x58>
    }

    if (wc_LockMutex(&ctx->countMutex) != 0) {
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3308      	adds	r3, #8
 8009006:	4618      	mov	r0, r3
 8009008:	f012 fbf6 	bl	801b7f8 <wc_LockMutex>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <SSL_CTX_RefCount+0x2c>
        WOLFSSL_MSG("Couldn't lock CTX count mutex");
        return BAD_MUTEX_E;
 8009012:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8009016:	e015      	b.n	8009044 <SSL_CTX_RefCount+0x58>
    }

    ctx->refCount += incr;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	441a      	add	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	60da      	str	r2, [r3, #12]
    /* make sure refCount is never negative */
    if (ctx->refCount < 0) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	da02      	bge.n	8009032 <SSL_CTX_RefCount+0x46>
        ctx->refCount = 0;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	60da      	str	r2, [r3, #12]
    }
    refCount = ctx->refCount;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	60fb      	str	r3, [r7, #12]

    wc_UnLockMutex(&ctx->countMutex);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3308      	adds	r3, #8
 800903c:	4618      	mov	r0, r3
 800903e:	f012 fbe6 	bl	801b80e <wc_UnLockMutex>

    return refCount;
 8009042:	68fb      	ldr	r3, [r7, #12]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <DoVerifyCallback>:
 * store->error_depth member to determine index (0=peer, >1 intermediates)
 */

int DoVerifyCallback(WOLFSSL_CERT_MANAGER* cm, WOLFSSL* ssl, int ret,
                                                        ProcPeerCertArgs* args)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08e      	sub	sp, #56	; 0x38
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
    int verify_ok = 0, use_cb = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	637b      	str	r3, [r7, #52]	; 0x34
 800905e:	2300      	movs	r3, #0
 8009060:	633b      	str	r3, [r7, #48]	; 0x30
    void *heap;

    if (cm == NULL) {
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <DoVerifyCallback+0x22>
        return BAD_FUNC_ARG;
 8009068:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800906c:	e0f1      	b.n	8009252 <DoVerifyCallback+0x206>
    }

    heap = (ssl != NULL) ? ssl->heap : cm->heap;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <DoVerifyCallback+0x30>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800907a:	e001      	b.n	8009080 <DoVerifyCallback+0x34>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	627b      	str	r3, [r7, #36]	; 0x24

    /* Determine if verify was okay */
    if (ret == 0) {
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <DoVerifyCallback+0x40>
        verify_ok = 1;
 8009088:	2301      	movs	r3, #1
 800908a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Determine if verify callback should be used */
    if (ret != 0) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00c      	beq.n	80090ac <DoVerifyCallback+0x60>
        if ((ssl != NULL) && (!ssl->options.verifyNone)) {
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d009      	beq.n	80090ac <DoVerifyCallback+0x60>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800909e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <DoVerifyCallback+0x60>
            use_cb = 1; /* always report errors */
 80090a8:	2301      	movs	r3, #1
 80090aa:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }
    }
#endif
    /* if verify callback has been set */
    if ((use_cb && (ssl != NULL) && ((ssl->verifyCallback != NULL)
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d007      	beq.n	80090c2 <DoVerifyCallback+0x76>
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <DoVerifyCallback+0x76>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d104      	bne.n	80090cc <DoVerifyCallback+0x80>
    #ifdef OPENSSL_ALL
        || (ssl->ctx->verifyCertCb != NULL)
    #endif
        ))
    #ifndef NO_WOLFSSL_CM_VERIFY
        || (cm->verifyCallback != NULL)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 80c2 	beq.w	8009250 <DoVerifyCallback+0x204>
    #endif
        ) {
        int verifyFail = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    #ifdef WOLFSSL_SMALL_STACK
        WOLFSSL_X509_STORE_CTX* store;
        #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        WOLFSSL_X509* x509;
        #endif
        char* domain = NULL;
 80090d0:	2300      	movs	r3, #0
 80090d2:	623b      	str	r3, [r7, #32]
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        int x509Free = 0;
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        store = (WOLFSSL_X509_STORE_CTX*)XMALLOC(
 80090d4:	2030      	movs	r0, #48	; 0x30
 80090d6:	f008 f9c1 	bl	801145c <wolfSSL_Malloc>
 80090da:	61f8      	str	r0, [r7, #28]
            sizeof(WOLFSSL_X509_STORE_CTX), heap, DYNAMIC_TYPE_X509_STORE);
        if (store == NULL) {
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d102      	bne.n	80090e8 <DoVerifyCallback+0x9c>
            return MEMORY_E;
 80090e2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80090e6:	e0b4      	b.n	8009252 <DoVerifyCallback+0x206>
        if (x509 == NULL) {
            XFREE(store, heap, DYNAMIC_TYPE_X509);
            return MEMORY_E;
        }
        #endif
        domain = (char*)XMALLOC(ASN_NAME_MAX, heap, DYNAMIC_TYPE_STRING);
 80090e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80090ec:	f008 f9b6 	bl	801145c <wolfSSL_Malloc>
 80090f0:	6238      	str	r0, [r7, #32]
        if (domain == NULL) {
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <DoVerifyCallback+0xc2>
            XFREE(store, heap, DYNAMIC_TYPE_X509);
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	613b      	str	r3, [r7, #16]
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <DoVerifyCallback+0xbc>
 8009102:	6938      	ldr	r0, [r7, #16]
 8009104:	f008 f9c6 	bl	8011494 <wolfSSL_Free>
            #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
            XFREE(x509, heap, DYNAMIC_TYPE_X509);
            #endif
            return MEMORY_E;
 8009108:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800910c:	e0a1      	b.n	8009252 <DoVerifyCallback+0x206>
        }
    #endif /* WOLFSSL_SMALL_STACK */

        XMEMSET(store, 0, sizeof(WOLFSSL_X509_STORE_CTX));
 800910e:	2230      	movs	r2, #48	; 0x30
 8009110:	2100      	movs	r1, #0
 8009112:	69f8      	ldr	r0, [r7, #28]
 8009114:	f012 fca1 	bl	801ba5a <memset>
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        XMEMSET(x509, 0, sizeof(WOLFSSL_X509));
    #endif
        domain[0] = '\0';
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]

        /* build subject CN as string to return in store */
        if (args->dCertInit && args->dCert && args->dCert->subjectCN) {
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d022      	beq.n	8009174 <DoVerifyCallback+0x128>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01e      	beq.n	8009174 <DoVerifyCallback+0x128>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d019      	beq.n	8009174 <DoVerifyCallback+0x128>
            int subjectCNLen = args->dCert->subjectCNLen;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009148:	62bb      	str	r3, [r7, #40]	; 0x28
            if (subjectCNLen > ASN_NAME_MAX-1)
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	2bff      	cmp	r3, #255	; 0xff
 800914e:	dd01      	ble.n	8009154 <DoVerifyCallback+0x108>
                subjectCNLen = ASN_NAME_MAX-1;
 8009150:	23ff      	movs	r3, #255	; 0xff
 8009152:	62bb      	str	r3, [r7, #40]	; 0x28
            if (subjectCNLen > 0) {
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	2b00      	cmp	r3, #0
 8009158:	dd0c      	ble.n	8009174 <DoVerifyCallback+0x128>
                XMEMCPY(domain, args->dCert->subjectCN, subjectCNLen);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009162:	4619      	mov	r1, r3
 8009164:	6a38      	ldr	r0, [r7, #32]
 8009166:	f012 fc54 	bl	801ba12 <memcpy>
                domain[subjectCNLen] = '\0';
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	6a3a      	ldr	r2, [r7, #32]
 800916e:	4413      	add	r3, r2
 8009170:	2200      	movs	r2, #0
 8009172:	701a      	strb	r2, [r3, #0]
            }
        }

        store->error = ret;
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	619a      	str	r2, [r3, #24]
        store->error_depth = args->certIdx;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	69da      	ldr	r2, [r3, #28]
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	61da      	str	r2, [r3, #28]
        store->discardSessionCerts = 0;
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	2200      	movs	r2, #0
 8009186:	621a      	str	r2, [r3, #32]
        store->domain = domain;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	6a3a      	ldr	r2, [r7, #32]
 800918c:	611a      	str	r2, [r3, #16]
        store->userCtx = (ssl != NULL) ? ssl->verifyCbCtx : cm;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <DoVerifyCallback+0x14e>
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009198:	e000      	b.n	800919c <DoVerifyCallback+0x150>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	6153      	str	r3, [r2, #20]
        store->certs = args->certs;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	629a      	str	r2, [r3, #40]	; 0x28
        store->totalCerts = args->totalCerts;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	695a      	ldr	r2, [r3, #20]
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	625a      	str	r2, [r3, #36]	; 0x24
            store->sesChain = &ssl->session.chain;
    #endif
        }
    #ifndef NO_WOLFSSL_CM_VERIFY
        /* non-zero return code indicates failure override */
        if (cm->verifyCallback != NULL) {
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d012      	beq.n	80091de <DoVerifyCallback+0x192>
            store->userCtx = cm;
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	615a      	str	r2, [r3, #20]
            if (cm->verifyCallback(verify_ok, store)) {
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	69f9      	ldr	r1, [r7, #28]
 80091c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80091c6:	4798      	blx	r3
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <DoVerifyCallback+0x18e>
                if (ret != 0) {
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <DoVerifyCallback+0x192>
                    WOLFSSL_MSG("Verify CM callback overriding error!");
                    ret = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	607b      	str	r3, [r7, #4]
 80091d8:	e001      	b.n	80091de <DoVerifyCallback+0x192>
                }
            }
            else {
                verifyFail = 1;
 80091da:	2301      	movs	r3, #1
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }
    #endif

        if (ssl != NULL) {
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d015      	beq.n	8009210 <DoVerifyCallback+0x1c4>
                }
            }
    #endif

            /* non-zero return code indicates failure override */
            if (ssl->verifyCallback) {
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d010      	beq.n	8009210 <DoVerifyCallback+0x1c4>
                if (ssl->verifyCallback(verify_ok, store)) {
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091f4:	69f9      	ldr	r1, [r7, #28]
 80091f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80091f8:	4798      	blx	r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d005      	beq.n	800920c <DoVerifyCallback+0x1c0>
                    if (ret != 0) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <DoVerifyCallback+0x1c4>
                        WOLFSSL_MSG("Verify callback overriding error!");
                        ret = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	607b      	str	r3, [r7, #4]
 800920a:	e001      	b.n	8009210 <DoVerifyCallback+0x1c4>
                    }
                }
                else {
                    verifyFail = 1;
 800920c:	2301      	movs	r3, #1
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }
        }

        if (verifyFail) {
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00c      	beq.n	8009230 <DoVerifyCallback+0x1e4>
            /* induce error if one not present */
            if (ret == 0) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d102      	bne.n	8009222 <DoVerifyCallback+0x1d6>
                ret = VERIFY_CERT_ERROR;
 800921c:	f46f 73a4 	mvn.w	r3, #328	; 0x148
 8009220:	607b      	str	r3, [r7, #4]
            }

            /* mark as verify error */
            args->verifyErr = 1;
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8009228:	f043 0302 	orr.w	r3, r3, #2
 800922c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        if ((ssl != NULL) && (store->param)) {
            XFREE(store->param, heap, DYNAMIC_TYPE_OPENSSL);
        }
#endif
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(domain, heap, DYNAMIC_TYPE_STRING);
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	61bb      	str	r3, [r7, #24]
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <DoVerifyCallback+0x1f4>
 800923a:	69b8      	ldr	r0, [r7, #24]
 800923c:	f008 f92a 	bl	8011494 <wolfSSL_Free>
        #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        XFREE(x509, heap, DYNAMIC_TYPE_X509);
        #endif
        XFREE(store, heap, DYNAMIC_TYPE_X509_STORE);
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	617b      	str	r3, [r7, #20]
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <DoVerifyCallback+0x204>
 800924a:	6978      	ldr	r0, [r7, #20]
 800924c:	f008 f922 	bl	8011494 <wolfSSL_Free>
    #endif
    }

    (void)heap;

    return ret;
 8009250:	687b      	ldr	r3, [r7, #4]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3738      	adds	r7, #56	; 0x38
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <c32to24>:
#endif /* !WOLFSSL_HAVE_MAX */

#ifndef WOLFSSL_NO_INT_ENCODE
/* converts a 32 bit integer to 24 bit */
WC_STATIC WC_INLINE void c32to24(word32 in, word24 out)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
    out[0] = (in >> 16) & 0xff;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	0c1b      	lsrs	r3, r3, #16
 8009268:	b2da      	uxtb	r2, r3
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	701a      	strb	r2, [r3, #0]
    out[1] = (in >>  8) & 0xff;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	0a1a      	lsrs	r2, r3, #8
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	3301      	adds	r3, #1
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	701a      	strb	r2, [r3, #0]
    out[2] =  in & 0xff;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	3302      	adds	r3, #2
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	b2d2      	uxtb	r2, r2
 8009282:	701a      	strb	r2, [r3, #0]
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <wolfSSL_CTX_new_ex>:
   WOLFSSL_METHOD pointer passed in is given to ctx to manage.
   This function frees the passed in WOLFSSL_METHOD struct on failure and on
   success is freed when ctx is freed.
 */
WOLFSSL_CTX* wolfSSL_CTX_new_ex(WOLFSSL_METHOD* method, void* heap)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
    WOLFSSL_CTX* ctx = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	61fb      	str	r3, [r7, #28]

    WOLFSSL_ENTER("wolfSSL_CTX_new_ex");

    if (initRefCount == 0) {
 800929e:	4b1f      	ldr	r3, [pc, #124]	; (800931c <wolfSSL_CTX_new_ex+0x8c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d112      	bne.n	80092cc <wolfSSL_CTX_new_ex+0x3c>
        /* user no longer forced to call Init themselves */
        int ret = wolfSSL_Init();
 80092a6:	f000 fb97 	bl	80099d8 <wolfSSL_Init>
 80092aa:	61b8      	str	r0, [r7, #24]
        if (ret != WOLFSSL_SUCCESS) {
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d00c      	beq.n	80092cc <wolfSSL_CTX_new_ex+0x3c>
            WOLFSSL_MSG("wolfSSL_Init failed");
            WOLFSSL_LEAVE("WOLFSSL_CTX_new", 0);
            if (method != NULL) {
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d007      	beq.n	80092c8 <wolfSSL_CTX_new_ex+0x38>
                XFREE(method, heap, DYNAMIC_TYPE_METHOD);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <wolfSSL_CTX_new_ex+0x38>
 80092c2:	6978      	ldr	r0, [r7, #20]
 80092c4:	f008 f8e6 	bl	8011494 <wolfSSL_Free>
            }
            return NULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	e023      	b.n	8009314 <wolfSSL_CTX_new_ex+0x84>
        }
    }

    if (method == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <wolfSSL_CTX_new_ex+0x46>
        return ctx;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	e01e      	b.n	8009314 <wolfSSL_CTX_new_ex+0x84>

    ctx = (WOLFSSL_CTX*) XMALLOC(sizeof(WOLFSSL_CTX), heap, DYNAMIC_TYPE_CTX);
 80092d6:	20a0      	movs	r0, #160	; 0xa0
 80092d8:	f008 f8c0 	bl	801145c <wolfSSL_Malloc>
 80092dc:	61f8      	str	r0, [r7, #28]
    if (ctx) {
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00e      	beq.n	8009302 <wolfSSL_CTX_new_ex+0x72>
        int ret;

        ret = InitSSL_Ctx(ctx, method, heap);
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	69f8      	ldr	r0, [r7, #28]
 80092ea:	f7ff faf6 	bl	80088da <InitSSL_Ctx>
 80092ee:	60f8      	str	r0, [r7, #12]
    #ifdef WOLFSSL_STATIC_MEMORY
        if (heap != NULL) {
            ctx->onHeap = 1; /* free the memory back to heap when done */
        }
    #endif
        if (ret < 0) {
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	da0d      	bge.n	8009312 <wolfSSL_CTX_new_ex+0x82>
            WOLFSSL_MSG("Init CTX failed");
            wolfSSL_CTX_free(ctx);
 80092f6:	69f8      	ldr	r0, [r7, #28]
 80092f8:	f000 f81f 	bl	800933a <wolfSSL_CTX_free>
            ctx = NULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	61fb      	str	r3, [r7, #28]
 8009300:	e007      	b.n	8009312 <wolfSSL_CTX_new_ex+0x82>
        }
#endif
    }
    else {
        WOLFSSL_MSG("Alloc CTX failed, method freed");
        XFREE(method, heap, DYNAMIC_TYPE_METHOD);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <wolfSSL_CTX_new_ex+0x82>
 800930c:	6938      	ldr	r0, [r7, #16]
 800930e:	f008 f8c1 	bl	8011494 <wolfSSL_Free>
    }


    WOLFSSL_LEAVE("WOLFSSL_CTX_new", 0);
    return ctx;
 8009312:	69fb      	ldr	r3, [r7, #28]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3720      	adds	r7, #32
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000b50 	.word	0x20000b50

08009320 <wolfSSL_CTX_new>:


WOLFSSL_ABI
WOLFSSL_CTX* wolfSSL_CTX_new(WOLFSSL_METHOD* method)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_HEAP_TEST
    /* if testing the heap hint then set top level CTX to have test value */
    return wolfSSL_CTX_new_ex(method, (void*)WOLFSSL_HEAP_TEST);
#else
    return wolfSSL_CTX_new_ex(method, NULL);
 8009328:	2100      	movs	r1, #0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff ffb0 	bl	8009290 <wolfSSL_CTX_new_ex>
 8009330:	4603      	mov	r3, r0
#endif
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <wolfSSL_CTX_free>:
}
#endif

WOLFSSL_ABI
void wolfSSL_CTX_free(WOLFSSL_CTX* ctx)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
    WOLFSSL_ENTER("SSL_CTX_free");
    if (ctx) {
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <wolfSSL_CTX_free+0x14>
            wc_SrpTerm(ctx->srp);
            XFREE(ctx->srp, ctx->heap, DYNAMIC_TYPE_SRP);
            ctx->srp = NULL;
        }
#endif
        FreeSSL_Ctx(ctx);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff fbc7 	bl	8008adc <FreeSSL_Ctx>
    }

    WOLFSSL_LEAVE("SSL_CTX_free", 0);
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <wolfSSL_CTX_GetDevId>:
}

/* helpers to get device id and heap */
WOLFSSL_ABI
int wolfSSL_CTX_GetDevId(WOLFSSL_CTX* ctx, WOLFSSL* ssl)
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
    int devId = INVALID_DEVID;
 8009360:	f06f 0301 	mvn.w	r3, #1
 8009364:	60fb      	str	r3, [r7, #12]
    if (ctx != NULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <wolfSSL_CTX_GetDevId+0x20>
        devId = ctx->devId;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	e006      	b.n	8009384 <wolfSSL_CTX_GetDevId+0x2e>
    else if (ssl != NULL)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <wolfSSL_CTX_GetDevId+0x2e>
        devId = ssl->devId;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	f8d3 33a8 	ldr.w	r3, [r3, #936]	; 0x3a8
 8009382:	60fb      	str	r3, [r7, #12]
    return devId;
 8009384:	68fb      	ldr	r3, [r7, #12]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <wolfSSL_CTX_GetHeap>:
void* wolfSSL_CTX_GetHeap(WOLFSSL_CTX* ctx, WOLFSSL* ssl)
{
 8009392:	b480      	push	{r7}
 8009394:	b085      	sub	sp, #20
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	6039      	str	r1, [r7, #0]
    void* heap = NULL;
 800939c:	2300      	movs	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]
    if (ctx != NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <wolfSSL_CTX_GetHeap+0x1c>
        heap = ctx->heap;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	e006      	b.n	80093bc <wolfSSL_CTX_GetHeap+0x2a>
    else if (ssl != NULL)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <wolfSSL_CTX_GetHeap+0x2a>
        heap = ssl->heap;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ba:	60fb      	str	r3, [r7, #12]
    return heap;
 80093bc:	68fb      	ldr	r3, [r7, #12]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <wolfSSL_CertManagerNew_ex>:
        cm = ctx->cm;
    return cm;
}

WOLFSSL_CERT_MANAGER* wolfSSL_CertManagerNew_ex(void* heap)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
    WOLFSSL_CERT_MANAGER* cm;

    WOLFSSL_ENTER("wolfSSL_CertManagerNew");

    cm = (WOLFSSL_CERT_MANAGER*) XMALLOC(sizeof(WOLFSSL_CERT_MANAGER), heap,
 80093d2:	2068      	movs	r0, #104	; 0x68
 80093d4:	f008 f842 	bl	801145c <wolfSSL_Malloc>
 80093d8:	60f8      	str	r0, [r7, #12]
                                         DYNAMIC_TYPE_CERT_MANAGER);
    if (cm) {
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d02c      	beq.n	800943a <wolfSSL_CertManagerNew_ex+0x70>
        XMEMSET(cm, 0, sizeof(WOLFSSL_CERT_MANAGER));
 80093e0:	2268      	movs	r2, #104	; 0x68
 80093e2:	2100      	movs	r1, #0
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f012 fb38 	bl	801ba5a <memset>
        cm->refCount = 1;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2201      	movs	r2, #1
 80093ee:	665a      	str	r2, [r3, #100]	; 0x64

        if (wc_InitMutex(&cm->caLock) != 0) {
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3354      	adds	r3, #84	; 0x54
 80093f4:	4618      	mov	r0, r3
 80093f6:	f012 f9e9 	bl	801b7cc <wc_InitMutex>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d004      	beq.n	800940a <wolfSSL_CertManagerNew_ex+0x40>
            WOLFSSL_MSG("Bad mutex init");
            wolfSSL_CertManagerFree(cm);
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 f81f 	bl	8009444 <wolfSSL_CertManagerFree>
            return NULL;
 8009406:	2300      	movs	r3, #0
 8009408:	e018      	b.n	800943c <wolfSSL_CertManagerNew_ex+0x72>
        }
        if (wc_InitMutex(&cm->refMutex) != 0) {
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3360      	adds	r3, #96	; 0x60
 800940e:	4618      	mov	r0, r3
 8009410:	f012 f9dc 	bl	801b7cc <wc_InitMutex>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <wolfSSL_CertManagerNew_ex+0x5a>
            WOLFSSL_MSG("Bad mutex init");
            wolfSSL_CertManagerFree(cm);
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f812 	bl	8009444 <wolfSSL_CertManagerFree>
            return NULL;
 8009420:	2300      	movs	r3, #0
 8009422:	e00b      	b.n	800943c <wolfSSL_CertManagerNew_ex+0x72>
        }
        #endif

        /* set default minimum key size allowed */
        #ifndef NO_RSA
            cm->minRsaKeySz = MIN_RSAKEY_SZ;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2280      	movs	r2, #128	; 0x80
 8009428:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        #endif
        #ifdef HAVE_ECC
            cm->minEccKeySz = MIN_ECCKEY_SZ;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	221c      	movs	r2, #28
 8009430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        #endif
            cm->heap = heap;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return cm;
 800943a:	68fb      	ldr	r3, [r7, #12]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <wolfSSL_CertManagerFree>:
    return wolfSSL_CertManagerNew_ex(NULL);
}


void wolfSSL_CertManagerFree(WOLFSSL_CERT_MANAGER* cm)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
    int doFree = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	60fb      	str	r3, [r7, #12]
    WOLFSSL_ENTER("wolfSSL_CertManagerFree");

    if (cm) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d02b      	beq.n	80094ae <wolfSSL_CertManagerFree+0x6a>
        if (wc_LockMutex(&cm->refMutex) != 0) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3360      	adds	r3, #96	; 0x60
 800945a:	4618      	mov	r0, r3
 800945c:	f012 f9cc 	bl	801b7f8 <wc_LockMutex>
            WOLFSSL_MSG("Couldn't lock cm mutex");
        }
        cm->refCount--;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009464:	1e5a      	subs	r2, r3, #1
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	665a      	str	r2, [r3, #100]	; 0x64
        if (cm->refCount == 0)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <wolfSSL_CertManagerFree+0x32>
            doFree = 1;
 8009472:	2301      	movs	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
        wc_UnLockMutex(&cm->refMutex);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3360      	adds	r3, #96	; 0x60
 800947a:	4618      	mov	r0, r3
 800947c:	f012 f9c7 	bl	801b80e <wc_UnLockMutex>
        if (doFree) {
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d013      	beq.n	80094ae <wolfSSL_CertManagerFree+0x6a>
                 defined(HAVE_CERTIFICATE_STATUS_REQUEST_V2))
                if (cm->ocsp_stapling)
                    FreeOCSP(cm->ocsp_stapling, 1);
            #endif
            #endif
            FreeSignerTable(cm->caTable, CA_TABLE_SIZE, cm->heap);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948c:	461a      	mov	r2, r3
 800948e:	210b      	movs	r1, #11
 8009490:	f006 f841 	bl	800f516 <FreeSignerTable>
            wc_FreeMutex(&cm->caLock);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	3354      	adds	r3, #84	; 0x54
 8009498:	4618      	mov	r0, r3
 800949a:	f012 f9a2 	bl	801b7e2 <wc_FreeMutex>
            #ifdef WOLFSSL_TRUST_PEER_CERT
            FreeTrustedPeerTable(cm->tpTable, TP_TABLE_SIZE, cm->heap);
            wc_FreeMutex(&cm->tpLock);
            #endif

            XFREE(cm, cm->heap, DYNAMIC_TYPE_CERT_MANAGER);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	60bb      	str	r3, [r7, #8]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <wolfSSL_CertManagerFree+0x6a>
 80094a8:	68b8      	ldr	r0, [r7, #8]
 80094aa:	f007 fff3 	bl	8011494 <wolfSSL_Free>
        }
    }

}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <MakeWordFromHash>:

#if !defined(NO_CERTS) || !defined(NO_SESSION_CACHE)

/* Make a work from the front of random hash */
static WC_INLINE word32 MakeWordFromHash(const byte* hashID)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
    return ((word32)hashID[0] << 24) | ((word32)hashID[1] << 16) |
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	061a      	lsls	r2, r3, #24
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3301      	adds	r3, #1
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	431a      	orrs	r2, r3
           ((word32)hashID[2] <<  8) |  (word32)hashID[3];
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3302      	adds	r3, #2
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	021b      	lsls	r3, r3, #8
    return ((word32)hashID[0] << 24) | ((word32)hashID[1] << 16) |
 80094d6:	4313      	orrs	r3, r2
           ((word32)hashID[2] <<  8) |  (word32)hashID[3];
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	3203      	adds	r2, #3
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	4313      	orrs	r3, r2
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HashSigner>:

#ifndef NO_CERTS

/* hash is the SHA digest of name, just use first 32 bits as hash */
static WC_INLINE word32 HashSigner(const byte* hash)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
    return MakeWordFromHash(hash) % CA_TABLE_SIZE;
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff ffde 	bl	80094b6 <MakeWordFromHash>
 80094fa:	4601      	mov	r1, r0
 80094fc:	4b07      	ldr	r3, [pc, #28]	; (800951c <HashSigner+0x30>)
 80094fe:	fba3 2301 	umull	r2, r3, r3, r1
 8009502:	08da      	lsrs	r2, r3, #3
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	4413      	add	r3, r2
 800950e:	1aca      	subs	r2, r1, r3
 8009510:	4613      	mov	r3, r2
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	ba2e8ba3 	.word	0xba2e8ba3

08009520 <AlreadySigner>:


/* does CA already exist on signer list */
int AlreadySigner(WOLFSSL_CERT_MANAGER* cm, byte* hash)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
    Signer* signers;
    int     ret = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	613b      	str	r3, [r7, #16]
    word32  row;

    if (cm == NULL || hash == NULL) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <AlreadySigner+0x1a>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <AlreadySigner+0x1e>
        return ret;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	e02d      	b.n	800959a <AlreadySigner+0x7a>
    }

    row = HashSigner(hash);
 800953e:	6838      	ldr	r0, [r7, #0]
 8009540:	f7ff ffd4 	bl	80094ec <HashSigner>
 8009544:	60f8      	str	r0, [r7, #12]

    if (wc_LockMutex(&cm->caLock) != 0) {
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3354      	adds	r3, #84	; 0x54
 800954a:	4618      	mov	r0, r3
 800954c:	f012 f954 	bl	801b7f8 <wc_LockMutex>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <AlreadySigner+0x3a>
        return ret;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	e01f      	b.n	800959a <AlreadySigner+0x7a>
    }
    signers = cm->caTable[row];
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009562:	617b      	str	r3, [r7, #20]
    while (signers) {
 8009564:	e010      	b.n	8009588 <AlreadySigner+0x68>
        byte* subjectHash;

    #ifndef NO_SKID
        subjectHash = signers->subjectKeyIdHash;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	3344      	adds	r3, #68	; 0x44
 800956a:	60bb      	str	r3, [r7, #8]
    #else
        subjectHash = signers->subjectNameHash;
    #endif

        if (XMEMCMP(hash, subjectHash, SIGNER_DIGEST_SIZE) == 0) {
 800956c:	2220      	movs	r2, #32
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	6838      	ldr	r0, [r7, #0]
 8009572:	f012 fa3f 	bl	801b9f4 <memcmp>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <AlreadySigner+0x62>
            ret = 1; /* success */
 800957c:	2301      	movs	r3, #1
 800957e:	613b      	str	r3, [r7, #16]
            break;
 8009580:	e005      	b.n	800958e <AlreadySigner+0x6e>
        }
        signers = signers->next;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009586:	617b      	str	r3, [r7, #20]
    while (signers) {
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1eb      	bne.n	8009566 <AlreadySigner+0x46>
    }
    wc_UnLockMutex(&cm->caLock);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3354      	adds	r3, #84	; 0x54
 8009592:	4618      	mov	r0, r3
 8009594:	f012 f93b 	bl	801b80e <wc_UnLockMutex>

    return ret;
 8009598:	693b      	ldr	r3, [r7, #16]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <GetCA>:
#endif /* WOLFSSL_TRUST_PEER_CERT */


/* return CA if found, otherwise NULL */
Signer* GetCA(void* vp, byte* hash)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b088      	sub	sp, #32
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
    WOLFSSL_CERT_MANAGER* cm = (WOLFSSL_CERT_MANAGER*)vp;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	617b      	str	r3, [r7, #20]
    Signer* ret = NULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	61fb      	str	r3, [r7, #28]
    Signer* signers;
    word32  row = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	613b      	str	r3, [r7, #16]

    if (cm == NULL || hash == NULL)
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d002      	beq.n	80095c4 <GetCA+0x22>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <GetCA+0x26>
        return NULL;
 80095c4:	2300      	movs	r3, #0
 80095c6:	e02d      	b.n	8009624 <GetCA+0x82>

    row = HashSigner(hash);
 80095c8:	6838      	ldr	r0, [r7, #0]
 80095ca:	f7ff ff8f 	bl	80094ec <HashSigner>
 80095ce:	6138      	str	r0, [r7, #16]

    if (wc_LockMutex(&cm->caLock) != 0)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	3354      	adds	r3, #84	; 0x54
 80095d4:	4618      	mov	r0, r3
 80095d6:	f012 f90f 	bl	801b7f8 <wc_LockMutex>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <GetCA+0x42>
        return ret;
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	e01f      	b.n	8009624 <GetCA+0x82>

    signers = cm->caTable[row];
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ec:	61bb      	str	r3, [r7, #24]
    while (signers) {
 80095ee:	e010      	b.n	8009612 <GetCA+0x70>
        byte* subjectHash;
        #ifndef NO_SKID
            subjectHash = signers->subjectKeyIdHash;
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	3344      	adds	r3, #68	; 0x44
 80095f4:	60fb      	str	r3, [r7, #12]
        #else
            subjectHash = signers->subjectNameHash;
        #endif
        if (XMEMCMP(hash, subjectHash, SIGNER_DIGEST_SIZE) == 0) {
 80095f6:	2220      	movs	r2, #32
 80095f8:	68f9      	ldr	r1, [r7, #12]
 80095fa:	6838      	ldr	r0, [r7, #0]
 80095fc:	f012 f9fa 	bl	801b9f4 <memcmp>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d102      	bne.n	800960c <GetCA+0x6a>
            ret = signers;
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	61fb      	str	r3, [r7, #28]
            break;
 800960a:	e005      	b.n	8009618 <GetCA+0x76>
        }
        signers = signers->next;
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009610:	61bb      	str	r3, [r7, #24]
    while (signers) {
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1eb      	bne.n	80095f0 <GetCA+0x4e>
    }
    wc_UnLockMutex(&cm->caLock);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	3354      	adds	r3, #84	; 0x54
 800961c:	4618      	mov	r0, r3
 800961e:	f012 f8f6 	bl	801b80e <wc_UnLockMutex>

    return ret;
 8009622:	69fb      	ldr	r3, [r7, #28]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3720      	adds	r7, #32
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <GetCAByName>:


#ifndef NO_SKID
/* return CA if found, otherwise NULL. Walk through hash table. */
Signer* GetCAByName(void* vp, byte* hash)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
    WOLFSSL_CERT_MANAGER* cm = (WOLFSSL_CERT_MANAGER*)vp;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	60bb      	str	r3, [r7, #8]
    Signer* ret = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
    Signer* signers;
    word32  row;

    if (cm == NULL)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <GetCAByName+0x1c>
        return NULL;
 8009644:	2300      	movs	r3, #0
 8009646:	e036      	b.n	80096b6 <GetCAByName+0x8a>

    if (wc_LockMutex(&cm->caLock) != 0)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	3354      	adds	r3, #84	; 0x54
 800964c:	4618      	mov	r0, r3
 800964e:	f012 f8d3 	bl	801b7f8 <wc_LockMutex>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <GetCAByName+0x30>
        return ret;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	e02c      	b.n	80096b6 <GetCAByName+0x8a>

    for (row = 0; row < CA_TABLE_SIZE && ret == NULL; row++) {
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e01d      	b.n	800969e <GetCAByName+0x72>
        signers = cm->caTable[row];
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966a:	613b      	str	r3, [r7, #16]
        while (signers && ret == NULL) {
 800966c:	e00e      	b.n	800968c <GetCAByName+0x60>
            if (XMEMCMP(hash, signers->subjectNameHash,
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	3324      	adds	r3, #36	; 0x24
 8009672:	2220      	movs	r2, #32
 8009674:	4619      	mov	r1, r3
 8009676:	6838      	ldr	r0, [r7, #0]
 8009678:	f012 f9bc 	bl	801b9f4 <memcmp>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <GetCAByName+0x5a>
                        SIGNER_DIGEST_SIZE) == 0) {
                ret = signers;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	617b      	str	r3, [r7, #20]
            }
            signers = signers->next;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800968a:	613b      	str	r3, [r7, #16]
        while (signers && ret == NULL) {
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d002      	beq.n	8009698 <GetCAByName+0x6c>
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d0ea      	beq.n	800966e <GetCAByName+0x42>
    for (row = 0; row < CA_TABLE_SIZE && ret == NULL; row++) {
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3301      	adds	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b0a      	cmp	r3, #10
 80096a2:	d802      	bhi.n	80096aa <GetCAByName+0x7e>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0db      	beq.n	8009662 <GetCAByName+0x36>
        }
    }
    wc_UnLockMutex(&cm->caLock);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	3354      	adds	r3, #84	; 0x54
 80096ae:	4618      	mov	r0, r3
 80096b0:	f012 f8ad 	bl	801b80e <wc_UnLockMutex>

    return ret;
 80096b4:	697b      	ldr	r3, [r7, #20]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <AddCA>:

/* owns der, internal now uses too */
/* type flag ids from user or from chain received during verify
   don't allow chain ones to be added w/o isCA extension */
int AddCA(WOLFSSL_CERT_MANAGER* cm, DerBuffer** pDer, int type, int verify)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08c      	sub	sp, #48	; 0x30
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
    int         ret;
    Signer*     signer = NULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	62bb      	str	r3, [r7, #40]	; 0x28
    word32      row;
    byte*       subjectHash;
#ifdef WOLFSSL_SMALL_STACK
    DecodedCert* cert = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
#else
    DecodedCert  cert[1];
#endif
    DerBuffer*   der = *pDer;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	623b      	str	r3, [r7, #32]

    WOLFSSL_MSG("Adding a CA");

    if (cm == NULL) {
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d105      	bne.n	80096ee <AddCA+0x2e>
        FreeDer(pDer);
 80096e2:	68b8      	ldr	r0, [r7, #8]
 80096e4:	f006 f802 	bl	800f6ec <FreeDer>
        return BAD_FUNC_ARG;
 80096e8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80096ec:	e16d      	b.n	80099ca <AddCA+0x30a>
    }

#ifdef WOLFSSL_SMALL_STACK
    cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), NULL,
 80096ee:	f44f 705f 	mov.w	r0, #892	; 0x37c
 80096f2:	f007 feb3 	bl	801145c <wolfSSL_Malloc>
 80096f6:	6278      	str	r0, [r7, #36]	; 0x24
                                 DYNAMIC_TYPE_DCERT);
    if (cert == NULL) {
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d105      	bne.n	800970a <AddCA+0x4a>
        FreeDer(pDer);
 80096fe:	68b8      	ldr	r0, [r7, #8]
 8009700:	f005 fff4 	bl	800f6ec <FreeDer>
        return MEMORY_E;
 8009704:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8009708:	e15f      	b.n	80099ca <AddCA+0x30a>
    }
#endif

    InitDecodedCert(cert, der->buffer, der->length, cm->heap);
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	6819      	ldr	r1, [r3, #0]
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	689a      	ldr	r2, [r3, #8]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009718:	f002 fda7 	bl	800c26a <InitDecodedCert>
    ret = ParseCert(cert, CA_TYPE, verify, cm);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	2105      	movs	r1, #5
 8009722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009724:	f005 fbc8 	bl	800eeb8 <ParseCert>
 8009728:	62f8      	str	r0, [r7, #44]	; 0x2c
    WOLFSSL_MSG("\tParsed new CA");

#ifndef NO_SKID
    subjectHash = cert->extSubjKeyId;
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 8009730:	61fb      	str	r3, [r7, #28]
#else
    subjectHash = cert->subjectHash;
#endif

    /* check CA key size */
    if (verify) {
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d02b      	beq.n	8009790 <AddCA+0xd0>
        switch (cert->keyOID) {
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	f240 2206 	movw	r2, #518	; 0x206
 8009740:	4293      	cmp	r3, r2
 8009742:	d015      	beq.n	8009770 <AddCA+0xb0>
 8009744:	f240 2285 	movw	r2, #645	; 0x285
 8009748:	4293      	cmp	r3, r2
 800974a:	d000      	beq.n	800974e <AddCA+0x8e>
                break;
            #endif /* HAVE_ED448 */

            default:
                WOLFSSL_MSG("\tNo key size check done on CA");
                break; /* no size check if key type is not in switch */
 800974c:	e025      	b.n	800979a <AddCA+0xda>
                if (cm->minRsaKeySz < 0 ||
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8009754:	2b00      	cmp	r3, #0
 8009756:	db07      	blt.n	8009768 <AddCA+0xa8>
                                   cert->pubKeySize < (word16)cm->minRsaKeySz) {
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	f9b2 205a 	ldrsh.w	r2, [r2, #90]	; 0x5a
 8009762:	b292      	uxth	r2, r2
                if (cm->minRsaKeySz < 0 ||
 8009764:	4293      	cmp	r3, r2
 8009766:	d215      	bcs.n	8009794 <AddCA+0xd4>
                    ret = RSA_KEY_SIZE_E;
 8009768:	f46f 73cc 	mvn.w	r3, #408	; 0x198
 800976c:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800976e:	e011      	b.n	8009794 <AddCA+0xd4>
                if (cm->minEccKeySz < 0 ||
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8009776:	2b00      	cmp	r3, #0
 8009778:	db07      	blt.n	800978a <AddCA+0xca>
                                   cert->pubKeySize < (word16)cm->minEccKeySz) {
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	f9b2 205c 	ldrsh.w	r2, [r2, #92]	; 0x5c
 8009784:	b292      	uxth	r2, r2
                if (cm->minEccKeySz < 0 ||
 8009786:	4293      	cmp	r3, r2
 8009788:	d206      	bcs.n	8009798 <AddCA+0xd8>
                    ret = ECC_KEY_SIZE_E;
 800978a:	4b92      	ldr	r3, [pc, #584]	; (80099d4 <AddCA+0x314>)
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800978e:	e003      	b.n	8009798 <AddCA+0xd8>
        }
    }
 8009790:	bf00      	nop
 8009792:	e002      	b.n	800979a <AddCA+0xda>
                break;
 8009794:	bf00      	nop
 8009796:	e000      	b.n	800979a <AddCA+0xda>
                break;
 8009798:	bf00      	nop

    if (ret == 0 && cert->isCA == 0 && type != WOLFSSL_USER_CA) {
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10e      	bne.n	80097be <AddCA+0xfe>
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 80097a6:	f003 0310 	and.w	r3, r3, #16
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d106      	bne.n	80097be <AddCA+0xfe>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d003      	beq.n	80097be <AddCA+0xfe>
        WOLFSSL_MSG("\tCan't add as CA if not actually one");
        ret = NOT_CA_ERROR;
 80097b6:	f46f 73b2 	mvn.w	r3, #356	; 0x164
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097bc:	e039      	b.n	8009832 <AddCA+0x172>
    }
#ifndef ALLOW_INVALID_CERTSIGN
    else if (ret == 0 && cert->isCA == 1 && type != WOLFSSL_USER_CA &&
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d11d      	bne.n	8009800 <AddCA+0x140>
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 80097ca:	f003 0310 	and.w	r3, r3, #16
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d015      	beq.n	8009800 <AddCA+0x140>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d012      	beq.n	8009800 <AddCA+0x140>
        !cert->selfSigned && (cert->extKeyUsage & KEYUSE_KEY_CERT_SIGN) == 0) {
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 80097e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e4:	b2db      	uxtb	r3, r3
    else if (ret == 0 && cert->isCA == 1 && type != WOLFSSL_USER_CA &&
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10a      	bne.n	8009800 <AddCA+0x140>
        !cert->selfSigned && (cert->extKeyUsage & KEYUSE_KEY_CERT_SIGN) == 0) {
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	f8b3 331e 	ldrh.w	r3, [r3, #798]	; 0x31e
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d103      	bne.n	8009800 <AddCA+0x140>
        /* Intermediate CA certs are required to have the keyCertSign
        * extension set. User loaded root certs are not. */
        WOLFSSL_MSG("\tDoesn't have key usage certificate signing");
        ret = NOT_CA_ERROR;
 80097f8:	f46f 73b2 	mvn.w	r3, #356	; 0x164
 80097fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097fe:	e018      	b.n	8009832 <AddCA+0x172>
    }
#endif
    else if (ret == 0 && AlreadySigner(cm, subjectHash)) {
 8009800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <AddCA+0x154>
 8009806:	69f9      	ldr	r1, [r7, #28]
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f7ff fe89 	bl	8009520 <AlreadySigner>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10e      	bne.n	8009832 <AddCA+0x172>
        WOLFSSL_MSG("\tAlready have this CA, not adding again");
        (void)ret;
    }
    else if (ret == 0) {
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <AddCA+0x172>
        /* take over signer parts */
        signer = MakeSigner(cm->heap);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981e:	4618      	mov	r0, r3
 8009820:	f005 fe2d 	bl	800f47e <MakeSigner>
 8009824:	62b8      	str	r0, [r7, #40]	; 0x28
        if (!signer)
 8009826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <AddCA+0x172>
            ret = MEMORY_ERROR;
 800982c:	f46f 7397 	mvn.w	r3, #302	; 0x12e
 8009830:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (ret == 0 && signer != NULL) {
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	2b00      	cmp	r3, #0
 8009836:	f040 80b4 	bne.w	80099a2 <AddCA+0x2e2>
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 80b0 	beq.w	80099a2 <AddCA+0x2e2>
        ret = AllocDer(&signer->derCert, der->length, der->type, NULL);
    }
    if (ret == 0 && signer != NULL) {
        XMEMCPY(signer->derCert->buffer, der->buffer, der->length);
    #endif
        signer->keyOID         = cert->keyOID;
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	69da      	ldr	r2, [r3, #28]
 8009846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009848:	605a      	str	r2, [r3, #4]
        if (cert->pubKeyStored) {
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d007      	beq.n	8009862 <AddCA+0x1a2>
            signer->publicKey      = cert->publicKey;
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009858:	611a      	str	r2, [r3, #16]
            signer->pubKeySize     = cert->pubKeySize;
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	601a      	str	r2, [r3, #0]
        }
        if (cert->subjectCNStored) {
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d008      	beq.n	8009884 <AddCA+0x1c4>
            signer->nameLen        = cert->subjectCNLen;
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	615a      	str	r2, [r3, #20]
            signer->name           = cert->subjectCN;
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	619a      	str	r2, [r3, #24]
        }
        signer->pathLength     = cert->pathLength;
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	72da      	strb	r2, [r3, #11]
        signer->maxPathLen     = cert->maxPathLen;
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	f893 231d 	ldrb.w	r2, [r3, #797]	; 0x31d
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	729a      	strb	r2, [r3, #10]
        signer->pathLengthSet  = cert->pathLengthSet;
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800989e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80098a2:	b2d9      	uxtb	r1, r3
 80098a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098a6:	7b13      	ldrb	r3, [r2, #12]
 80098a8:	f361 0300 	bfi	r3, r1, #0, #1
 80098ac:	7313      	strb	r3, [r2, #12]
        signer->selfSigned     = cert->selfSigned;
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 80098b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80098b8:	b2d9      	uxtb	r1, r3
 80098ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098bc:	7b13      	ldrb	r3, [r2, #12]
 80098be:	f361 0341 	bfi	r3, r1, #1, #1
 80098c2:	7313      	strb	r3, [r2, #12]
    #ifndef IGNORE_NAME_CONSTRAINTS
        signer->permittedNames = cert->permittedNames;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	61da      	str	r2, [r3, #28]
        signer->excludedNames  = cert->excludedNames;
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	621a      	str	r2, [r3, #32]
    #endif
    #ifndef NO_SKID
        XMEMCPY(signer->subjectKeyIdHash, cert->extSubjKeyId,
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80098e0:	2220      	movs	r2, #32
 80098e2:	4619      	mov	r1, r3
 80098e4:	f012 f895 	bl	801ba12 <memcpy>
                SIGNER_DIGEST_SIZE);
    #endif
        XMEMCPY(signer->subjectNameHash, cert->subjectHash,
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	3338      	adds	r3, #56	; 0x38
 80098f2:	2220      	movs	r2, #32
 80098f4:	4619      	mov	r1, r3
 80098f6:	f012 f88c 	bl	801ba12 <memcpy>
                SIGNER_DIGEST_SIZE);
    #ifdef HAVE_OCSP
        XMEMCPY(signer->subjectKeyHash, cert->subjectKeyHash,
                KEYID_SIZE);
    #endif
        signer->keyUsage = cert->extKeyUsageSet ? cert->extKeyUsage
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8009900:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <AddCA+0x252>
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	f8b3 231e 	ldrh.w	r2, [r3, #798]	; 0x31e
 8009910:	e001      	b.n	8009916 <AddCA+0x256>
 8009912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	811a      	strh	r2, [r3, #8]
                                                : 0xFFFF;
        signer->next    = NULL; /* If Key Usage not set, all uses valid. */
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	2200      	movs	r2, #0
 800991e:	665a      	str	r2, [r3, #100]	; 0x64
        cert->publicKey = 0;    /* in case lock fails don't free here.   */
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
        cert->subjectCN = 0;
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	2200      	movs	r2, #0
 800992a:	67da      	str	r2, [r3, #124]	; 0x7c
    #ifndef IGNORE_NAME_CONSTRAINTS
        cert->permittedNames = NULL;
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	2200      	movs	r2, #0
 8009930:	631a      	str	r2, [r3, #48]	; 0x30
        cert->excludedNames = NULL;
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	2200      	movs	r2, #0
 8009936:	635a      	str	r2, [r3, #52]	; 0x34
    #endif

    #ifndef NO_SKID
        row = HashSigner(signer->subjectKeyIdHash);
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	3344      	adds	r3, #68	; 0x44
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff fdd5 	bl	80094ec <HashSigner>
 8009942:	61b8      	str	r0, [r7, #24]
    #else
        row = HashSigner(signer->subjectNameHash);
    #endif

        if (wc_LockMutex(&cm->caLock) == 0) {
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3354      	adds	r3, #84	; 0x54
 8009948:	4618      	mov	r0, r3
 800994a:	f011 ff55 	bl	801b7f8 <wc_LockMutex>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d11d      	bne.n	8009990 <AddCA+0x2d0>
            signer->next = cm->caTable[row];
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	665a      	str	r2, [r3, #100]	; 0x64
            cm->caTable[row] = signer;   /* takes ownership */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            wc_UnLockMutex(&cm->caLock);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3354      	adds	r3, #84	; 0x54
 800996e:	4618      	mov	r0, r3
 8009970:	f011 ff4d 	bl	801b80e <wc_UnLockMutex>
            if (cm->caCacheCallback)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009978:	2b00      	cmp	r3, #0
 800997a:	d012      	beq.n	80099a2 <AddCA+0x2e2>
                cm->caCacheCallback(der->buffer, (int)der->length, type);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009980:	6a3a      	ldr	r2, [r7, #32]
 8009982:	6810      	ldr	r0, [r2, #0]
 8009984:	6a3a      	ldr	r2, [r7, #32]
 8009986:	6892      	ldr	r2, [r2, #8]
 8009988:	4611      	mov	r1, r2
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	4798      	blx	r3
 800998e:	e008      	b.n	80099a2 <AddCA+0x2e2>
        }
        else {
            WOLFSSL_MSG("\tCA Mutex Lock failed");
            ret = BAD_MUTEX_E;
 8009990:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8009994:	62fb      	str	r3, [r7, #44]	; 0x2c
            FreeSigner(signer, cm->heap);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999a:	4619      	mov	r1, r3
 800999c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999e:	f005 fd83 	bl	800f4a8 <FreeSigner>
                WOLFSSL_MSG("tsip_tls_RootCertVerify() succeed");
        }
    }
#endif
    WOLFSSL_MSG("\tFreeing Parsed CA");
    FreeDecodedCert(cert);
 80099a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099a4:	f002 fce0 	bl	800c368 <FreeDecodedCert>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(cert, NULL, DYNAMIC_TYPE_DCERT);
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <AddCA+0x2f8>
 80099b2:	6978      	ldr	r0, [r7, #20]
 80099b4:	f007 fd6e 	bl	8011494 <wolfSSL_Free>
#endif
    WOLFSSL_MSG("\tFreeing der CA");
    FreeDer(pDer);
 80099b8:	68b8      	ldr	r0, [r7, #8]
 80099ba:	f005 fe97 	bl	800f6ec <FreeDer>
    WOLFSSL_MSG("\t\tOK Freeing der CA");

    WOLFSSL_LEAVE("AddCA", ret);

    return ret == 0 ? WOLFSSL_SUCCESS : ret;
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <AddCA+0x308>
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	e000      	b.n	80099ca <AddCA+0x30a>
 80099c8:	2301      	movs	r3, #1
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3730      	adds	r7, #48	; 0x30
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	fffffe66 	.word	0xfffffe66

080099d8 <wolfSSL_Init>:
static wolfSSL_Mutex globalRNGMutex;
#endif

WOLFSSL_ABI
int wolfSSL_Init(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
    WOLFSSL_ENTER("wolfSSL_Init");

    if (initRefCount == 0) {
 80099dc:	4b14      	ldr	r3, [pc, #80]	; (8009a30 <wolfSSL_Init+0x58>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d110      	bne.n	8009a06 <wolfSSL_Init+0x2e>
        /* Initialize crypto for use with TLS connection */
        if (wolfCrypt_Init() != 0) {
 80099e4:	f011 feb8 	bl	801b758 <wolfCrypt_Init>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <wolfSSL_Init+0x1c>
            WOLFSSL_MSG("Bad wolfCrypt Init");
            return WC_INIT_E;
 80099ee:	f06f 03e3 	mvn.w	r3, #227	; 0xe3
 80099f2:	e01a      	b.n	8009a2a <wolfSSL_Init+0x52>
        if (wc_InitMutex(&session_mutex) != 0) {
            WOLFSSL_MSG("Bad Init Mutex session");
            return BAD_MUTEX_E;
        }
#endif
        if (wc_InitMutex(&count_mutex) != 0) {
 80099f4:	480f      	ldr	r0, [pc, #60]	; (8009a34 <wolfSSL_Init+0x5c>)
 80099f6:	f011 fee9 	bl	801b7cc <wc_InitMutex>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <wolfSSL_Init+0x2e>
            WOLFSSL_MSG("Bad Init Mutex count");
            return BAD_MUTEX_E;
 8009a00:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8009a04:	e011      	b.n	8009a2a <wolfSSL_Init+0x52>
        }
    }

    if (wc_LockMutex(&count_mutex) != 0) {
 8009a06:	480b      	ldr	r0, [pc, #44]	; (8009a34 <wolfSSL_Init+0x5c>)
 8009a08:	f011 fef6 	bl	801b7f8 <wc_LockMutex>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <wolfSSL_Init+0x40>
        WOLFSSL_MSG("Bad Lock Mutex count");
        return BAD_MUTEX_E;
 8009a12:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8009a16:	e008      	b.n	8009a2a <wolfSSL_Init+0x52>
    }

    initRefCount++;
 8009a18:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <wolfSSL_Init+0x58>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	4a04      	ldr	r2, [pc, #16]	; (8009a30 <wolfSSL_Init+0x58>)
 8009a20:	6013      	str	r3, [r2, #0]
    wc_UnLockMutex(&count_mutex);
 8009a22:	4804      	ldr	r0, [pc, #16]	; (8009a34 <wolfSSL_Init+0x5c>)
 8009a24:	f011 fef3 	bl	801b80e <wc_UnLockMutex>

    return WOLFSSL_SUCCESS;
 8009a28:	2301      	movs	r3, #1
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000b50 	.word	0x20000b50
 8009a34:	20000b54 	.word	0x20000b54

08009a38 <ProcessUserChain>:

/* process user cert chain to pass during the handshake */
static int ProcessUserChain(WOLFSSL_CTX* ctx, const unsigned char* buff,
                         long sz, int format, int type, WOLFSSL* ssl,
                         long* used, EncryptedInfo* info, int verify)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b098      	sub	sp, #96	; 0x60
 8009a3c:	af04      	add	r7, sp, #16
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	64fb      	str	r3, [r7, #76]	; 0x4c
    void* heap = wolfSSL_CTX_GetHeap(ctx, ssl);
 8009a4a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff fca0 	bl	8009392 <wolfSSL_CTX_GetHeap>
 8009a52:	6338      	str	r0, [r7, #48]	; 0x30
#ifdef WOLFSSL_TLS13
    int cnt = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	64bb      	str	r3, [r7, #72]	; 0x48
#endif

    if ((type == CA_TYPE) && (ctx == NULL)) {
 8009a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a5a:	2b05      	cmp	r3, #5
 8009a5c:	d105      	bne.n	8009a6a <ProcessUserChain+0x32>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d102      	bne.n	8009a6a <ProcessUserChain+0x32>
        WOLFSSL_MSG("Need context for CA load");
        return BAD_FUNC_ARG;
 8009a64:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8009a68:	e14d      	b.n	8009d06 <ProcessUserChain+0x2ce>
    }

    /* we may have a user cert chain, try to consume */
    if ((type == CERT_TYPE || type == CA_TYPE) && (info->consumed < sz)) {
 8009a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <ProcessUserChain+0x40>
 8009a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a72:	2b05      	cmp	r3, #5
 8009a74:	f040 8146 	bne.w	8009d04 <ProcessUserChain+0x2cc>
 8009a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	f340 8140 	ble.w	8009d04 <ProcessUserChain+0x2cc>
    #ifdef WOLFSSL_SMALL_STACK
        byte   staticBuffer[1];                 /* force heap usage */
    #else
        byte   staticBuffer[FILE_BUFFER_SIZE];  /* tmp chain buffer */
    #endif
        byte*  chainBuffer = staticBuffer;
 8009a84:	f107 031c 	add.w	r3, r7, #28
 8009a88:	647b      	str	r3, [r7, #68]	; 0x44
        int    dynamicBuffer = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	643b      	str	r3, [r7, #64]	; 0x40
        word32 bufferSz;
        long   consumed = info->consumed;
 8009a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        word32 idx = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	63bb      	str	r3, [r7, #56]	; 0x38
        int    gotOne = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate max possible size, including max headers */
        bufferSz = (word32)(sz - consumed) + (CERT_HEADER_SZ * MAX_CHAIN_DEPTH);
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	331b      	adds	r3, #27
 8009aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (bufferSz > sizeof(staticBuffer)) {
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	f240 80c9 	bls.w	8009c40 <ProcessUserChain+0x208>
            WOLFSSL_MSG("Growing Tmp Chain Buffer");
            /* will shrink to actual size */
            chainBuffer = (byte*)XMALLOC(bufferSz, heap, DYNAMIC_TYPE_FILE);
 8009aae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ab0:	f007 fcd4 	bl	801145c <wolfSSL_Malloc>
 8009ab4:	6478      	str	r0, [r7, #68]	; 0x44
            if (chainBuffer == NULL) {
 8009ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <ProcessUserChain+0x8a>
                return MEMORY_E;
 8009abc:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8009ac0:	e121      	b.n	8009d06 <ProcessUserChain+0x2ce>
            }
            dynamicBuffer = 1;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	643b      	str	r3, [r7, #64]	; 0x40
        }

        WOLFSSL_MSG("Processing Cert Chain");
        while (consumed < sz) {
 8009ac6:	e0bb      	b.n	8009c40 <ProcessUserChain+0x208>
            DerBuffer* part = NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	61bb      	str	r3, [r7, #24]
            word32 remain = (word32)(sz - consumed);
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	62bb      	str	r3, [r7, #40]	; 0x28
            info->consumed = 0;
 8009ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	609a      	str	r2, [r3, #8]

            if (format == WOLFSSL_FILETYPE_PEM) {
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d111      	bne.n	8009b04 <ProcessUserChain+0xcc>
            #ifdef WOLFSSL_PEM_TO_DER
                ret = PemToDer(buff + consumed, remain, type, &part,
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	18d0      	adds	r0, r2, r3
 8009ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ae8:	f107 0218 	add.w	r2, r7, #24
 8009aec:	2300      	movs	r3, #0
 8009aee:	9302      	str	r3, [sp, #8]
 8009af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009af2:	9301      	str	r3, [sp, #4]
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	4613      	mov	r3, r2
 8009afa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009afc:	f005 ff22 	bl	800f944 <PemToDer>
 8009b00:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009b02:	e036      	b.n	8009b72 <ProcessUserChain+0x13a>
            #else
                ret = NOT_COMPILED_IN;
            #endif
            }
            else {
                int length = remain;
 8009b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b06:	617b      	str	r3, [r7, #20]
                if (format == WOLFSSL_FILETYPE_ASN1) {
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d116      	bne.n	8009b3c <ProcessUserChain+0x104>
                    /* get length of der (read sequence) */
                    word32 inOutIdx = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	613b      	str	r3, [r7, #16]
                    if (GetSequence(buff + consumed, &inOutIdx, &length,
 8009b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	18d0      	adds	r0, r2, r3
 8009b18:	f107 0214 	add.w	r2, r7, #20
 8009b1c:	f107 0110 	add.w	r1, r7, #16
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	f001 f9e7 	bl	800aef4 <GetSequence>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	da02      	bge.n	8009b32 <ProcessUserChain+0xfa>
                            remain) < 0) {
                        ret = ASN_NO_PEM_HEADER;
 8009b2c:	f06f 03a1 	mvn.w	r3, #161	; 0xa1
 8009b30:	64fb      	str	r3, [r7, #76]	; 0x4c
                    }
                    length += inOutIdx; /* include leading sequence */
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	461a      	mov	r2, r3
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	4413      	add	r3, r2
 8009b3a:	617b      	str	r3, [r7, #20]
                }
                info->consumed = length;
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b40:	609a      	str	r2, [r3, #8]
                if (ret == 0) {
 8009b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d114      	bne.n	8009b72 <ProcessUserChain+0x13a>
                    ret = AllocDer(&part, length, type, heap);
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f107 0018 	add.w	r0, r7, #24
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b54:	f005 fd54 	bl	800f600 <AllocDer>
 8009b58:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (ret == 0) {
 8009b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d108      	bne.n	8009b72 <ProcessUserChain+0x13a>
                        XMEMCPY(part->buffer, buff + consumed, length);
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	6818      	ldr	r0, [r3, #0]
 8009b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	4413      	add	r3, r2
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	f011 ff50 	bl	801ba12 <memcpy>
                    }
                }
            }
            if (ret == 0) {
 8009b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d147      	bne.n	8009c08 <ProcessUserChain+0x1d0>
                gotOne = 1;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	637b      	str	r3, [r7, #52]	; 0x34
#ifdef WOLFSSL_TLS13
                cnt++;
 8009b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b7e:	3301      	adds	r3, #1
 8009b80:	64bb      	str	r3, [r7, #72]	; 0x48
#endif
                if ((idx + part->length + CERT_HEADER_SZ) > bufferSz) {
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	689a      	ldr	r2, [r3, #8]
 8009b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b88:	4413      	add	r3, r2
 8009b8a:	3303      	adds	r3, #3
 8009b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d203      	bcs.n	8009b9a <ProcessUserChain+0x162>
                    WOLFSSL_MSG("   Cert Chain bigger than buffer");
                    ret = BUFFER_E;
 8009b92:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8009b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b98:	e028      	b.n	8009bec <ProcessUserChain+0x1b4>
                }
                else {
                    c32to24(part->length, &chainBuffer[idx]);
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	6898      	ldr	r0, [r3, #8]
 8009b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	4413      	add	r3, r2
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	f7ff fb58 	bl	800925a <c32to24>
                    idx += CERT_HEADER_SZ;
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	3303      	adds	r3, #3
 8009bae:	63bb      	str	r3, [r7, #56]	; 0x38
                    XMEMCPY(&chainBuffer[idx], part->buffer, part->length);
 8009bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	18d0      	adds	r0, r2, r3
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	6819      	ldr	r1, [r3, #0]
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f011 ff27 	bl	801ba12 <memcpy>
                    idx += part->length;
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bca:	4413      	add	r3, r2
 8009bcc:	63bb      	str	r3, [r7, #56]	; 0x38
                    consumed  += info->consumed;
 8009bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bd4:	4413      	add	r3, r2
 8009bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (used)
 8009bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d006      	beq.n	8009bec <ProcessUserChain+0x1b4>
                        *used += info->consumed;
 8009bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	441a      	add	r2, r3
 8009be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bea:	601a      	str	r2, [r3, #0]
                }

                /* add CA's to certificate manager */
                if (type == CA_TYPE) {
 8009bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bee:	2b05      	cmp	r3, #5
 8009bf0:	d10a      	bne.n	8009c08 <ProcessUserChain+0x1d0>
                    /* verify CA unless user set to no verify */
                    ret = AddCA(ctx->cm, &part, WOLFSSL_USER_CA, verify);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009bf6:	f107 0118 	add.w	r1, r7, #24
 8009bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f7ff fd5f 	bl	80096c0 <AddCA>
 8009c02:	64f8      	str	r0, [r7, #76]	; 0x4c
                    gotOne = 0; /* don't exit loop for CA type */
 8009c04:	2300      	movs	r3, #0
 8009c06:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            FreeDer(&part);
 8009c08:	f107 0318 	add.w	r3, r7, #24
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f005 fd6d 	bl	800f6ec <FreeDer>

            if (ret == ASN_NO_PEM_HEADER && gotOne) {
 8009c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c14:	f113 0fa2 	cmn.w	r3, #162	; 0xa2
 8009c18:	d102      	bne.n	8009c20 <ProcessUserChain+0x1e8>
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d115      	bne.n	8009c4c <ProcessUserChain+0x214>
                WOLFSSL_MSG("We got one good cert, so stuff at end ok");
                break;
            }

            if (ret < 0) {
 8009c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da0c      	bge.n	8009c40 <ProcessUserChain+0x208>
                WOLFSSL_MSG("   Error in Cert in Chain");
                if (dynamicBuffer)
 8009c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d007      	beq.n	8009c3c <ProcessUserChain+0x204>
                    XFREE(chainBuffer, heap, DYNAMIC_TYPE_FILE);
 8009c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <ProcessUserChain+0x204>
 8009c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c38:	f007 fc2c 	bl	8011494 <wolfSSL_Free>
                return ret;
 8009c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
                return MEMORY_E;
 8009c3e:	e062      	b.n	8009d06 <ProcessUserChain+0x2ce>
        while (consumed < sz) {
 8009c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	f6ff af3f 	blt.w	8009ac8 <ProcessUserChain+0x90>
 8009c4a:	e000      	b.n	8009c4e <ProcessUserChain+0x216>
                break;
 8009c4c:	bf00      	nop
            WOLFSSL_MSG("   Consumed another Cert in Chain");
        }
        WOLFSSL_MSG("Finished Processing Cert Chain");

        /* only retain actual size used */
        ret = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (idx > 0) {
 8009c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d04a      	beq.n	8009cee <ProcessUserChain+0x2b6>
            if (ssl) {
 8009c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d028      	beq.n	8009cb0 <ProcessUserChain+0x278>
                if (ssl->buffers.weOwnCertChain) {
 8009c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c60:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d005      	beq.n	8009c74 <ProcessUserChain+0x23c>
                    FreeDer(&ssl->buffers.certChain);
 8009c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c6a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f005 fd3c 	bl	800f6ec <FreeDer>
                }
                ret = AllocDer(&ssl->buffers.certChain, idx, type, heap);
 8009c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c76:	f503 70b8 	add.w	r0, r3, #368	; 0x170
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c80:	f005 fcbe 	bl	800f600 <AllocDer>
 8009c84:	64f8      	str	r0, [r7, #76]	; 0x4c
                if (ret == 0) {
 8009c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10c      	bne.n	8009ca6 <ProcessUserChain+0x26e>
                    XMEMCPY(ssl->buffers.certChain->buffer, chainBuffer,
 8009c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c8e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f011 feba 	bl	801ba12 <memcpy>
                            idx);
                    ssl->buffers.weOwnCertChain = 1;
 8009c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
                }
            #ifdef WOLFSSL_TLS13
                ssl->buffers.certChainCnt = cnt;
 8009ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009caa:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8009cae:	e01e      	b.n	8009cee <ProcessUserChain+0x2b6>
            #endif
            } else if (ctx) {
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d01b      	beq.n	8009cee <ProcessUserChain+0x2b6>
                FreeDer(&ctx->certChain);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3328      	adds	r3, #40	; 0x28
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f005 fd16 	bl	800f6ec <FreeDer>
                ret = AllocDer(&ctx->certChain, idx, type, heap);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ccc:	f005 fc98 	bl	800f600 <AllocDer>
 8009cd0:	64f8      	str	r0, [r7, #76]	; 0x4c
                if (ret == 0) {
 8009cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d107      	bne.n	8009ce8 <ProcessUserChain+0x2b0>
                    XMEMCPY(ctx->certChain->buffer, chainBuffer, idx);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ce0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f011 fe95 	bl	801ba12 <memcpy>
                }
            #ifdef WOLFSSL_TLS13
                ctx->certChainCnt = cnt;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cec:	62da      	str	r2, [r3, #44]	; 0x2c
            #endif
            }
        }

        if (dynamicBuffer)
 8009cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d007      	beq.n	8009d04 <ProcessUserChain+0x2cc>
            XFREE(chainBuffer, heap, DYNAMIC_TYPE_FILE);
 8009cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf6:	623b      	str	r3, [r7, #32]
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <ProcessUserChain+0x2cc>
 8009cfe:	6a38      	ldr	r0, [r7, #32]
 8009d00:	f007 fbc8 	bl	8011494 <wolfSSL_Free>
    }

    return ret;
 8009d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3750      	adds	r7, #80	; 0x50
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <ProcessBufferTryDecode>:

static int ProcessBufferTryDecode(WOLFSSL_CTX* ctx, WOLFSSL* ssl, DerBuffer* der,
    int* keySz, word32* idx, int* resetSuites, int* keyFormat, void* heap, int devId)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08c      	sub	sp, #48	; 0x30
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	62fb      	str	r3, [r7, #44]	; 0x2c

    (void)heap;
    (void)devId;

    if (ctx == NULL && ssl == NULL)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d105      	bne.n	8009d34 <ProcessBufferTryDecode+0x24>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <ProcessBufferTryDecode+0x24>
        ret = BAD_FUNC_ARG;
 8009d2e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8009d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!der || !keySz || !idx || !resetSuites || !keyFormat)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <ProcessBufferTryDecode+0x42>
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d008      	beq.n	8009d52 <ProcessBufferTryDecode+0x42>
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d005      	beq.n	8009d52 <ProcessBufferTryDecode+0x42>
 8009d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <ProcessBufferTryDecode+0x42>
 8009d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <ProcessBufferTryDecode+0x48>
        ret = BAD_FUNC_ARG;
 8009d52:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8009d56:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NO_RSA
    if (ret == 0 && (*keyFormat == 0 || *keyFormat == RSAk)) {
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f040 8086 	bne.w	8009e6c <ProcessBufferTryDecode+0x15c>
 8009d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d005      	beq.n	8009d74 <ProcessBufferTryDecode+0x64>
 8009d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f240 2285 	movw	r2, #645	; 0x285
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d17b      	bne.n	8009e6c <ProcessBufferTryDecode+0x15c>
    #else
        RsaKey  key[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        key = (RsaKey*)XMALLOC(sizeof(RsaKey), heap, DYNAMIC_TYPE_RSA);
 8009d74:	f641 007c 	movw	r0, #6268	; 0x187c
 8009d78:	f007 fb70 	bl	801145c <wolfSSL_Malloc>
 8009d7c:	62b8      	str	r0, [r7, #40]	; 0x28
        if (key == NULL)
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <ProcessBufferTryDecode+0x7a>
            return MEMORY_E;
 8009d84:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8009d88:	e101      	b.n	8009f8e <ProcessBufferTryDecode+0x27e>
    #endif

        ret = wc_InitRsaKey_ex(key, heap, devId);
 8009d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d90:	f007 fd64 	bl	801185c <wc_InitRsaKey_ex>
 8009d94:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (ret == 0) {
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d15f      	bne.n	8009e5c <ProcessBufferTryDecode+0x14c>
            *idx = 0;
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]
            if (wc_RsaPrivateKeyDecode(der->buffer, idx, key, der->length)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dae:	f001 ffa4 	bl	800bcfa <wc_RsaPrivateKeyDecode>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d14e      	bne.n	8009e56 <ProcessBufferTryDecode+0x146>
                ret = WOLFSSL_BAD_FILE;
            #endif
            }
            else {
                /* check that the size of the RSA key is enough */
                int minRsaSz = ssl ? ssl->options.minRsaKeySz :
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <ProcessBufferTryDecode+0xb6>
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f9b3 3336 	ldrsh.w	r3, [r3, #822]	; 0x336
 8009dc4:	e002      	b.n	8009dcc <ProcessBufferTryDecode+0xbc>
                    ctx->minRsaKeySz;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
                int minRsaSz = ssl ? ssl->options.minRsaKeySz :
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
                *keySz = wc_RsaEncryptSize((RsaKey*)key);
 8009dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd0:	f008 fd38 	bl	8012844 <wc_RsaEncryptSize>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	601a      	str	r2, [r3, #0]
                if (*keySz < minRsaSz) {
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de0:	429a      	cmp	r2, r3
 8009de2:	dd02      	ble.n	8009dea <ProcessBufferTryDecode+0xda>
                    ret = RSA_KEY_SIZE_E;
 8009de4:	f46f 73cc 	mvn.w	r3, #408	; 0x198
 8009de8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    WOLFSSL_MSG("Private Key size too small");
                }

                if (ssl) {
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00d      	beq.n	8009e0c <ProcessBufferTryDecode+0xfc>
                    ssl->buffers.keyType = rsa_sa_algo;
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	f892 3164 	ldrb.w	r3, [r2, #356]	; 0x164
 8009df6:	2101      	movs	r1, #1
 8009df8:	f361 0305 	bfi	r3, r1, #0, #6
 8009dfc:	f882 3164 	strb.w	r3, [r2, #356]	; 0x164
                    ssl->buffers.keySz = *keySz;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8009e0a:	e00b      	b.n	8009e24 <ProcessBufferTryDecode+0x114>
                }
                else {
                    ctx->privateKeyType = rsa_sa_algo;
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8009e12:	2101      	movs	r1, #1
 8009e14:	f361 0305 	bfi	r3, r1, #0, #6
 8009e18:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                    ctx->privateKeySz = *keySz;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	639a      	str	r2, [r3, #56]	; 0x38
                }

                *keyFormat = RSAk;
 8009e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e26:	f240 2285 	movw	r2, #645	; 0x285
 8009e2a:	601a      	str	r2, [r3, #0]

                if (ssl && ssl->options.side == WOLFSSL_SERVER_END) {
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d011      	beq.n	8009e56 <ProcessBufferTryDecode+0x146>
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 8009e38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d109      	bne.n	8009e56 <ProcessBufferTryDecode+0x146>
                    ssl->options.haveStaticECC = 0;
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	f892 331f 	ldrb.w	r3, [r2, #799]	; 0x31f
 8009e48:	f36f 1304 	bfc	r3, #4, #1
 8009e4c:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
                    *resetSuites = 1;
 8009e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e52:	2201      	movs	r2, #1
 8009e54:	601a      	str	r2, [r3, #0]
                }
            }

            wc_FreeRsaKey(key);
 8009e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e58:	f007 fd7f 	bl	801195a <wc_FreeRsaKey>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(key, heap, DYNAMIC_TYPE_RSA);
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	623b      	str	r3, [r7, #32]
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <ProcessBufferTryDecode+0x15c>
 8009e66:	6a38      	ldr	r0, [r7, #32]
 8009e68:	f007 fb14 	bl	8011494 <wolfSSL_Free>
    #endif
    }
#endif
#ifdef HAVE_ECC
    if (ret == 0 && (*keyFormat == 0 || *keyFormat == ECDSAk)) {
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f040 808c 	bne.w	8009f8c <ProcessBufferTryDecode+0x27c>
 8009e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d006      	beq.n	8009e8a <ProcessBufferTryDecode+0x17a>
 8009e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f240 2206 	movw	r2, #518	; 0x206
 8009e84:	4293      	cmp	r3, r2
 8009e86:	f040 8081 	bne.w	8009f8c <ProcessBufferTryDecode+0x27c>
    #else
        ecc_key  key[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        key = (ecc_key*)XMALLOC(sizeof(ecc_key), heap, DYNAMIC_TYPE_ECC);
 8009e8a:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8009e8e:	f007 fae5 	bl	801145c <wolfSSL_Malloc>
 8009e92:	61f8      	str	r0, [r7, #28]
        if (key == NULL)
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d102      	bne.n	8009ea0 <ProcessBufferTryDecode+0x190>
            return MEMORY_E;
 8009e9a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8009e9e:	e076      	b.n	8009f8e <ProcessBufferTryDecode+0x27e>
    #endif

        if (wc_ecc_init_ex(key, heap, devId) == 0) {
 8009ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ea4:	69f8      	ldr	r0, [r7, #28]
 8009ea6:	f006 fe69 	bl	8010b7c <wc_ecc_init_ex>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d165      	bne.n	8009f7c <ProcessBufferTryDecode+0x26c>
            *idx = 0;
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
            if (wc_EccPrivateKeyDecode(der->buffer, idx, key,
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	69fa      	ldr	r2, [r7, #28]
 8009ec0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ec2:	f005 fea1 	bl	800fc08 <wc_EccPrivateKeyDecode>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d154      	bne.n	8009f76 <ProcessBufferTryDecode+0x266>
                                                        der->length) == 0) {
                /* check for minimum ECC key size and then free */
                int minKeySz = ssl ? ssl->options.minEccKeySz :
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <ProcessBufferTryDecode+0x1ca>
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f9b3 3338 	ldrsh.w	r3, [r3, #824]	; 0x338
 8009ed8:	e002      	b.n	8009ee0 <ProcessBufferTryDecode+0x1d0>
                                                        ctx->minEccKeySz;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
                int minKeySz = ssl ? ssl->options.minEccKeySz :
 8009ee0:	61bb      	str	r3, [r7, #24]
                *keySz = wc_ecc_size(key);
 8009ee2:	69f8      	ldr	r0, [r7, #28]
 8009ee4:	f007 f98f 	bl	8011206 <wc_ecc_size>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	601a      	str	r2, [r3, #0]
                if (*keySz < minKeySz) {
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	dd01      	ble.n	8009efc <ProcessBufferTryDecode+0x1ec>
                    WOLFSSL_MSG("ECC private key too small");
                    ret = ECC_KEY_SIZE_E;
 8009ef8:	4b27      	ldr	r3, [pc, #156]	; (8009f98 <ProcessBufferTryDecode+0x288>)
 8009efa:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

                *keyFormat = ECDSAk;
 8009efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009efe:	f240 2206 	movw	r2, #518	; 0x206
 8009f02:	601a      	str	r2, [r3, #0]
                if (ssl) {
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d014      	beq.n	8009f34 <ProcessBufferTryDecode+0x224>
                    ssl->options.haveStaticECC = 1;
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	f892 331f 	ldrb.w	r3, [r2, #799]	; 0x31f
 8009f10:	f043 0310 	orr.w	r3, r3, #16
 8009f14:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
                    ssl->buffers.keyType = ecc_dsa_sa_algo;
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	f892 3164 	ldrb.w	r3, [r2, #356]	; 0x164
 8009f1e:	2103      	movs	r1, #3
 8009f20:	f361 0305 	bfi	r3, r1, #0, #6
 8009f24:	f882 3164 	strb.w	r3, [r2, #356]	; 0x164
                    ssl->buffers.keySz = *keySz;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8009f32:	e012      	b.n	8009f5a <ProcessBufferTryDecode+0x24a>
                }
                else {
                    ctx->haveStaticECC = 1;
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
 8009f3a:	f043 0320 	orr.w	r3, r3, #32
 8009f3e:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
                    ctx->privateKeyType = ecc_dsa_sa_algo;
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8009f48:	2103      	movs	r1, #3
 8009f4a:	f361 0305 	bfi	r3, r1, #0, #6
 8009f4e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                    ctx->privateKeySz = *keySz;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
                }

                if (ssl && ssl->options.side == WOLFSSL_SERVER_END) {
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00a      	beq.n	8009f76 <ProcessBufferTryDecode+0x266>
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 8009f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d102      	bne.n	8009f76 <ProcessBufferTryDecode+0x266>
                    *resetSuites = 1;
 8009f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f72:	2201      	movs	r2, #1
 8009f74:	601a      	str	r2, [r3, #0]
                }
            }

            wc_ecc_free(key);
 8009f76:	69f8      	ldr	r0, [r7, #28]
 8009f78:	f006 fe4a 	bl	8010c10 <wc_ecc_free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(key, heap, DYNAMIC_TYPE_ECC);
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <ProcessBufferTryDecode+0x27c>
 8009f86:	6978      	ldr	r0, [r7, #20]
 8009f88:	f007 fa84 	bl	8011494 <wolfSSL_Free>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(key, heap, DYNAMIC_TYPE_ED448);
    #endif
    }
#endif /* HAVE_ED448 */
    return ret;
 8009f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3730      	adds	r7, #48	; 0x30
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	fffffe66 	.word	0xfffffe66

08009f9c <ProcessBuffer>:
   used tracks bytes consumed, userChain specifies a user cert chain
   to pass during the handshake */
int ProcessBuffer(WOLFSSL_CTX* ctx, const unsigned char* buff,
                         long sz, int format, int type, WOLFSSL* ssl,
                         long* used, int userChain, int verify)
{
 8009f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9e:	b0a3      	sub	sp, #140	; 0x8c
 8009fa0:	af08      	add	r7, sp, #32
 8009fa2:	6178      	str	r0, [r7, #20]
 8009fa4:	6139      	str	r1, [r7, #16]
 8009fa6:	60fa      	str	r2, [r7, #12]
 8009fa8:	60bb      	str	r3, [r7, #8]
    DerBuffer*    der = NULL;        /* holds DER or RAW (for NTRU) */
 8009faa:	2300      	movs	r3, #0
 8009fac:	63bb      	str	r3, [r7, #56]	; 0x38
    int           ret = 0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	667b      	str	r3, [r7, #100]	; 0x64
    int           done = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	663b      	str	r3, [r7, #96]	; 0x60
    int           keyFormat = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	637b      	str	r3, [r7, #52]	; 0x34
    int           resetSuites = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	633b      	str	r3, [r7, #48]	; 0x30
    void*         heap = wolfSSL_CTX_GetHeap(ctx, ssl);
 8009fbe:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009fc2:	6978      	ldr	r0, [r7, #20]
 8009fc4:	f7ff f9e5 	bl	8009392 <wolfSSL_CTX_GetHeap>
 8009fc8:	65f8      	str	r0, [r7, #92]	; 0x5c
    int           devId = wolfSSL_CTX_GetDevId(ctx, ssl);
 8009fca:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009fce:	6978      	ldr	r0, [r7, #20]
 8009fd0:	f7ff f9c1 	bl	8009356 <wolfSSL_CTX_GetDevId>
 8009fd4:	65b8      	str	r0, [r7, #88]	; 0x58
    word32        idx = 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int           keySz = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	62bb      	str	r3, [r7, #40]	; 0x28
#if (defined(WOLFSSL_ENCRYPTED_KEYS) && !defined(NO_PWDBASED)) || \
     defined(HAVE_PKCS8)
    word32        algId = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	627b      	str	r3, [r7, #36]	; 0x24
#endif
#ifdef WOLFSSL_SMALL_STACK
    EncryptedInfo* info = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	657b      	str	r3, [r7, #84]	; 0x54

    (void)devId;
    (void)idx;
    (void)keySz;

    if (used)
 8009fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <ProcessBuffer+0x5a>
        *used = sz;     /* used bytes default to sz, PEM chain may shorten*/
 8009fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	601a      	str	r2, [r3, #0]

    /* check args */
    if (format != WOLFSSL_FILETYPE_ASN1 && format != WOLFSSL_FILETYPE_PEM
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d008      	beq.n	800a00e <ProcessBuffer+0x72>
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d005      	beq.n	800a00e <ProcessBuffer+0x72>
                                    && format != WOLFSSL_FILETYPE_RAW)
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b03      	cmp	r3, #3
 800a006:	d002      	beq.n	800a00e <ProcessBuffer+0x72>
        return WOLFSSL_BAD_FILETYPE;
 800a008:	f06f 0304 	mvn.w	r3, #4
 800a00c:	e3aa      	b.n	800a764 <ProcessBuffer+0x7c8>

    if (ctx == NULL && ssl == NULL)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <ProcessBuffer+0x86>
 800a014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d102      	bne.n	800a022 <ProcessBuffer+0x86>
        return BAD_FUNC_ARG;
 800a01c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800a020:	e3a0      	b.n	800a764 <ProcessBuffer+0x7c8>

#ifdef WOLFSSL_SMALL_STACK
    info = (EncryptedInfo*)XMALLOC(sizeof(EncryptedInfo), heap,
 800a022:	208c      	movs	r0, #140	; 0x8c
 800a024:	f007 fa1a 	bl	801145c <wolfSSL_Malloc>
 800a028:	6578      	str	r0, [r7, #84]	; 0x54
                                   DYNAMIC_TYPE_ENCRYPTEDINFO);
    if (info == NULL)
 800a02a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <ProcessBuffer+0x9a>
        return MEMORY_E;
 800a030:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800a034:	e396      	b.n	800a764 <ProcessBuffer+0x7c8>
#endif

    XMEMSET(info, 0, sizeof(EncryptedInfo));
 800a036:	228c      	movs	r2, #140	; 0x8c
 800a038:	2100      	movs	r1, #0
 800a03a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a03c:	f011 fd0d 	bl	801ba5a <memset>
        info->passwd_cb       = ctx->passwd_cb;
        info->passwd_userdata = ctx->passwd_userdata;
    }
#endif

    if (format == WOLFSSL_FILETYPE_PEM) {
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d111      	bne.n	800a06a <ProcessBuffer+0xce>
    #ifdef WOLFSSL_PEM_TO_DER
        ret = PemToDer(buff, sz, type, &der, heap, info, &keyFormat);
 800a046:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a04a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a04e:	9302      	str	r3, [sp, #8]
 800a050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	4613      	mov	r3, r2
 800a05a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a05e:	68f9      	ldr	r1, [r7, #12]
 800a060:	6938      	ldr	r0, [r7, #16]
 800a062:	f005 fc6f 	bl	800f944 <PemToDer>
 800a066:	6678      	str	r0, [r7, #100]	; 0x64
 800a068:	e05f      	b.n	800a12a <ProcessBuffer+0x18e>
        ret = NOT_COMPILED_IN;
    #endif
    }
    else {
        /* ASN1 (DER) or RAW (NTRU) */
        int length = (int)sz;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	623b      	str	r3, [r7, #32]
        if (format == WOLFSSL_FILETYPE_ASN1) {
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d12a      	bne.n	800a0ca <ProcessBuffer+0x12e>
            /* get length of der (read sequence or octet string) */
            word32 inOutIdx = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	61fb      	str	r3, [r7, #28]
            if (GetSequence(buff, &inOutIdx, &length, (word32)sz) >= 0) {
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f107 0220 	add.w	r2, r7, #32
 800a07e:	f107 011c 	add.w	r1, r7, #28
 800a082:	6938      	ldr	r0, [r7, #16]
 800a084:	f000 ff36 	bl	800aef4 <GetSequence>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	db05      	blt.n	800a09a <ProcessBuffer+0xfe>
                length += inOutIdx; /* include leading sequence */
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	461a      	mov	r2, r3
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	4413      	add	r3, r2
 800a096:	623b      	str	r3, [r7, #32]
 800a098:	e017      	b.n	800a0ca <ProcessBuffer+0x12e>
            }
            /* get length using octect string (allowed for private key types) */
            else if (type == PRIVATEKEY_TYPE &&
 800a09a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d110      	bne.n	800a0c4 <ProcessBuffer+0x128>
                    GetOctetString(buff, &inOutIdx, &length, (word32)sz) >= 0) {
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f107 0220 	add.w	r2, r7, #32
 800a0a8:	f107 011c 	add.w	r1, r7, #28
 800a0ac:	6938      	ldr	r0, [r7, #16]
 800a0ae:	f000 ffcd 	bl	800b04c <GetOctetString>
 800a0b2:	4603      	mov	r3, r0
            else if (type == PRIVATEKEY_TYPE &&
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	db05      	blt.n	800a0c4 <ProcessBuffer+0x128>
                length += inOutIdx; /* include leading oct string */
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	4413      	add	r3, r2
 800a0c0:	623b      	str	r3, [r7, #32]
 800a0c2:	e002      	b.n	800a0ca <ProcessBuffer+0x12e>
            }
            else {
                ret = ASN_PARSE_E;
 800a0c4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800a0c8:	667b      	str	r3, [r7, #100]	; 0x64
            }
        }

        info->consumed = length;
 800a0ca:	6a3a      	ldr	r2, [r7, #32]
 800a0cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ce:	609a      	str	r2, [r3, #8]

        if (ret == 0) {
 800a0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d129      	bne.n	800a12a <ProcessBuffer+0x18e>
            ret = AllocDer(&der, (word32)length, type, heap);
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800a0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0e4:	f005 fa8c 	bl	800f600 <AllocDer>
 800a0e8:	6678      	str	r0, [r7, #100]	; 0x64
            if (ret == 0) {
 800a0ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <ProcessBuffer+0x162>
                XMEMCPY(der->buffer, buff, length);
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6a3a      	ldr	r2, [r7, #32]
 800a0f6:	6939      	ldr	r1, [r7, #16]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f011 fc8a 	bl	801ba12 <memcpy>
            }

        #ifdef HAVE_PKCS8
            /* if private key try and remove PKCS8 header */
            if (type == PRIVATEKEY_TYPE) {
 800a0fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a102:	2b01      	cmp	r3, #1
 800a104:	d111      	bne.n	800a12a <ProcessBuffer+0x18e>
                if ((ret = ToTraditional_ex(der->buffer, der->length, &algId)) > 0) {
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a112:	4619      	mov	r1, r3
 800a114:	f001 ff01 	bl	800bf1a <ToTraditional_ex>
 800a118:	6678      	str	r0, [r7, #100]	; 0x64
 800a11a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dd02      	ble.n	800a126 <ProcessBuffer+0x18a>
                    /* Found PKCS8 header */
                    /* ToTraditional_ex moves buff and returns adjusted length */
                    der->length = ret;
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a124:	609a      	str	r2, [r3, #8]
                }
                ret = 0; /* failures should be ignored */
 800a126:	2300      	movs	r3, #0
 800a128:	667b      	str	r3, [r7, #100]	; 0x64
            }
        #endif
        }
    }

    if (used) {
 800a12a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d004      	beq.n	800a13c <ProcessBuffer+0x1a0>
        *used = info->consumed;
 800a132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a134:	689a      	ldr	r2, [r3, #8]
 800a136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a13a:	601a      	str	r2, [r3, #0]
    }

    /* process user chain */
    if (ret >= 0) {
 800a13c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a13e:	2b00      	cmp	r3, #0
 800a140:	db18      	blt.n	800a174 <ProcessBuffer+0x1d8>
        /* Chain should have server cert first, then intermediates, then root.
         * First certificate in chain is processed below after ProcessUserChain
         *   and is loaded into ssl->buffers.certificate.
         * Remainder are processed using ProcessUserChain and are loaded into
         *   ssl->buffers.certChain. */
        if (userChain) {
 800a142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a146:	2b00      	cmp	r3, #0
 800a148:	d014      	beq.n	800a174 <ProcessBuffer+0x1d8>
            ret = ProcessUserChain(ctx, buff, sz, format, type, ssl, used, info,
 800a14a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a14e:	9304      	str	r3, [sp, #16]
 800a150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a152:	9303      	str	r3, [sp, #12]
 800a154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a158:	9302      	str	r3, [sp, #8]
 800a15a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	6939      	ldr	r1, [r7, #16]
 800a16c:	6978      	ldr	r0, [r7, #20]
 800a16e:	f7ff fc63 	bl	8009a38 <ProcessUserChain>
 800a172:	6678      	str	r0, [r7, #100]	; 0x64
                                   verify);
        }
    }

    /* info is only used for private key with DER or PEM, so free now */
    if (ret < 0 || type != PRIVATEKEY_TYPE || format == WOLFSSL_FILETYPE_RAW) {
 800a174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a176:	2b00      	cmp	r3, #0
 800a178:	db06      	blt.n	800a188 <ProcessBuffer+0x1ec>
 800a17a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d102      	bne.n	800a188 <ProcessBuffer+0x1ec>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b03      	cmp	r3, #3
 800a186:	d107      	bne.n	800a198 <ProcessBuffer+0x1fc>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(info, heap, DYNAMIC_TYPE_ENCRYPTEDINFO);
 800a188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a18a:	653b      	str	r3, [r7, #80]	; 0x50
 800a18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <ProcessBuffer+0x1fc>
 800a192:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a194:	f007 f97e 	bl	8011494 <wolfSSL_Free>
    #endif
    }

    /* check for error */
    if (ret < 0) {
 800a198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	da06      	bge.n	800a1ac <ProcessBuffer+0x210>
        FreeDer(&der);
 800a19e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f005 faa2 	bl	800f6ec <FreeDer>
        done = 1;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	663b      	str	r3, [r7, #96]	; 0x60
    }

    if (done == 1) {
 800a1ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d07b      	beq.n	800a2aa <ProcessBuffer+0x30e>
        /* No operation, just skip the next section */
    }
    /* Handle DER owner */
    else if (type == CA_TYPE) {
 800a1b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1b6:	2b05      	cmp	r3, #5
 800a1b8:	d117      	bne.n	800a1ea <ProcessBuffer+0x24e>
        if (ctx == NULL) {
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d107      	bne.n	800a1d0 <ProcessBuffer+0x234>
            WOLFSSL_MSG("Need context for CA load");
            FreeDer(&der);
 800a1c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f005 fa91 	bl	800f6ec <FreeDer>
            return BAD_FUNC_ARG;
 800a1ca:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800a1ce:	e2c9      	b.n	800a764 <ProcessBuffer+0x7c8>
        }
        /* verify CA unless user set to no verify */
        ret = AddCA(ctx->cm, &der, WOLFSSL_USER_CA, verify);
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a1d4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a1d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f7ff fa6f 	bl	80096c0 <AddCA>
 800a1e2:	6678      	str	r0, [r7, #100]	; 0x64
        done = 1;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	663b      	str	r3, [r7, #96]	; 0x60
 800a1e8:	e05f      	b.n	800a2aa <ProcessBuffer+0x30e>
        /* add trusted peer cert */
        ret = AddTrustedPeer(ctx->cm, &der, !ctx->verifyNone);
        done = 1;
    }
#endif /* WOLFSSL_TRUST_PEER_CERT */
    else if (type == CERT_TYPE) {
 800a1ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d127      	bne.n	800a242 <ProcessBuffer+0x2a6>
        if (ssl) {
 800a1f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d017      	beq.n	800a22a <ProcessBuffer+0x28e>
             /* Make sure previous is free'd */
            if (ssl->buffers.weOwnCert) {
 800a1fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1fe:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800a202:	2b00      	cmp	r3, #0
 800a204:	d006      	beq.n	800a214 <ProcessBuffer+0x278>
                FreeDer(&ssl->buffers.certificate);
 800a206:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a20a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800a20e:	4618      	mov	r0, r3
 800a210:	f005 fa6c 	bl	800f6ec <FreeDer>
                    XFREE(ssl->ourCert, ssl->heap, DYNAMIC_TYPE_X509);
                    ssl->ourCert = NULL;
                }
            #endif
            }
            ssl->buffers.certificate = der;
 800a214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a21a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        #ifdef KEEP_OUR_CERT
            ssl->keepCert = 1; /* hold cert for ssl lifetime */
        #endif
            ssl->buffers.weOwnCert = 1;
 800a21e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 800a228:	e03f      	b.n	800a2aa <ProcessBuffer+0x30e>
        }
        else if (ctx) {
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d03c      	beq.n	800a2aa <ProcessBuffer+0x30e>
            FreeDer(&ctx->certificate); /* Make sure previous is free'd */
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	3324      	adds	r3, #36	; 0x24
 800a234:	4618      	mov	r0, r3
 800a236:	f005 fa59 	bl	800f6ec <FreeDer>
                    XFREE(ctx->ourCert, ctx->heap, DYNAMIC_TYPE_X509);
                }
                ctx->ourCert = NULL;
            }
        #endif
            ctx->certificate = der;
 800a23a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	625a      	str	r2, [r3, #36]	; 0x24
 800a240:	e033      	b.n	800a2aa <ProcessBuffer+0x30e>
        }
    }
    else if (type == PRIVATEKEY_TYPE) {
 800a242:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a246:	2b01      	cmp	r3, #1
 800a248:	d127      	bne.n	800a29a <ProcessBuffer+0x2fe>
        if (ssl) {
 800a24a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d017      	beq.n	800a282 <ProcessBuffer+0x2e6>
             /* Make sure previous is free'd */
            if (ssl->buffers.weOwnKey) {
 800a252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a256:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d006      	beq.n	800a26c <ProcessBuffer+0x2d0>
                FreeDer(&ssl->buffers.key);
 800a25e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a262:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a266:	4618      	mov	r0, r3
 800a268:	f005 fa40 	bl	800f6ec <FreeDer>
            }
            ssl->buffers.key = der;
 800a26c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a26e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a272:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
            ssl->buffers.weOwnKey = 1;
 800a276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 800a280:	e013      	b.n	800a2aa <ProcessBuffer+0x30e>
        }
        else if (ctx) {
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d010      	beq.n	800a2aa <ProcessBuffer+0x30e>
            FreeDer(&ctx->privateKey);
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	3330      	adds	r3, #48	; 0x30
 800a28c:	4618      	mov	r0, r3
 800a28e:	f005 fa2d 	bl	800f6ec <FreeDer>
            ctx->privateKey = der;
 800a292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	631a      	str	r2, [r3, #48]	; 0x30
 800a298:	e007      	b.n	800a2aa <ProcessBuffer+0x30e>
        }
    }
    else {
        FreeDer(&der);
 800a29a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f005 fa24 	bl	800f6ec <FreeDer>
        return WOLFSSL_BAD_CERTTYPE;
 800a2a4:	f06f 0307 	mvn.w	r3, #7
 800a2a8:	e25c      	b.n	800a764 <ProcessBuffer+0x7c8>
    }

    if (done == 1) {
 800a2aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	f000 81d5 	beq.w	800a65c <ProcessBuffer+0x6c0>
        /* No operation, just skip the next section */
    }
    else if (type == PRIVATEKEY_TYPE && format != WOLFSSL_FILETYPE_RAW) {
 800a2b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d12f      	bne.n	800a31a <ProcessBuffer+0x37e>
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d02c      	beq.n	800a31a <ProcessBuffer+0x37e>
    #if defined(WOLFSSL_ENCRYPTED_KEYS) || defined(HAVE_PKCS8)
        keyFormat = algId;
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	637b      	str	r3, [r7, #52]	; 0x34
    #endif

        ret = ProcessBufferTryDecode(ctx, ssl, der, &keySz, &idx, &resetSuites,
 800a2c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a2ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2d0:	9303      	str	r3, [sp, #12]
 800a2d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a2d6:	9302      	str	r3, [sp, #8]
 800a2d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a2ea:	6978      	ldr	r0, [r7, #20]
 800a2ec:	f7ff fd10 	bl	8009d10 <ProcessBufferTryDecode>
 800a2f0:	6678      	str	r0, [r7, #100]	; 0x64
                &resetSuites, &keyFormat, heap, devId);
        }
    #endif /* WOLFSSL_ENCRYPTED_KEYS && !NO_PWDBASED */

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(info, heap, DYNAMIC_TYPE_ENCRYPTEDINFO);
 800a2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <ProcessBuffer+0x366>
 800a2fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a2fe:	f007 f8c9 	bl	8011494 <wolfSSL_Free>
    #endif

        if (ret != 0)
 800a302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <ProcessBuffer+0x370>
            return ret;
 800a308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a30a:	e22b      	b.n	800a764 <ProcessBuffer+0x7c8>
        if (keyFormat == 0) {
 800a30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f040 81a3 	bne.w	800a65a <ProcessBuffer+0x6be>
            /* Reaching this point probably means that the
             * decryption password is wrong */
            if (info->passwd_cb)
                EVPerr(0, EVP_R_BAD_DECRYPT);
#endif
            return WOLFSSL_BAD_FILE;
 800a314:	f06f 0303 	mvn.w	r3, #3
 800a318:	e224      	b.n	800a764 <ProcessBuffer+0x7c8>
        }

        (void)devId;
    }
    else if (type == CERT_TYPE) {
 800a31a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f040 819c 	bne.w	800a65c <ProcessBuffer+0x6c0>
    #if defined(HAVE_PKCS11) || defined(HAVE_PK_CALLBACKS)
        int keyType = 0;
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), heap,
 800a324:	f44f 705f 	mov.w	r0, #892	; 0x37c
 800a328:	f007 f898 	bl	801145c <wolfSSL_Malloc>
 800a32c:	64b8      	str	r0, [r7, #72]	; 0x48
                                     DYNAMIC_TYPE_DCERT);
        if (cert == NULL)
 800a32e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a330:	2b00      	cmp	r3, #0
 800a332:	d102      	bne.n	800a33a <ProcessBuffer+0x39e>
            return MEMORY_E;
 800a334:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800a338:	e214      	b.n	800a764 <ProcessBuffer+0x7c8>
    #endif

        WOLFSSL_MSG("Checking cert signature type");
        InitDecodedCert(cert, der->buffer, der->length, heap);
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	6819      	ldr	r1, [r3, #0]
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a344:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a346:	f001 ff90 	bl	800c26a <InitDecodedCert>

        if (DecodeToKey(cert, 0) < 0) {
 800a34a:	2100      	movs	r1, #0
 800a34c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a34e:	f002 fe5d 	bl	800d00c <DecodeToKey>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	da0d      	bge.n	800a374 <ProcessBuffer+0x3d8>
            WOLFSSL_MSG("Decode to key failed");
            FreeDecodedCert(cert);
 800a358:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a35a:	f002 f805 	bl	800c368 <FreeDecodedCert>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(cert, heap, DYNAMIC_TYPE_DCERT);
 800a35e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a360:	643b      	str	r3, [r7, #64]	; 0x40
 800a362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <ProcessBuffer+0x3d2>
 800a368:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a36a:	f007 f893 	bl	8011494 <wolfSSL_Free>
        #endif
            return WOLFSSL_BAD_FILE;
 800a36e:	f06f 0303 	mvn.w	r3, #3
 800a372:	e1f7      	b.n	800a764 <ProcessBuffer+0x7c8>
        }

        if (ssl && ssl->options.side == WOLFSSL_SERVER_END) {
 800a374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00a      	beq.n	800a392 <ProcessBuffer+0x3f6>
 800a37c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a380:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800a384:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <ProcessBuffer+0x3f6>
            resetSuites = 1;
 800a38e:	2301      	movs	r3, #1
 800a390:	633b      	str	r3, [r7, #48]	; 0x30
        }
        if (ssl && ssl->ctx->haveECDSAsig) {
 800a392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a396:	2b00      	cmp	r3, #0
 800a398:	d011      	beq.n	800a3be <ProcessBuffer+0x422>
 800a39a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a3a4:	f003 0310 	and.w	r3, r3, #16
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d007      	beq.n	800a3be <ProcessBuffer+0x422>
            WOLFSSL_MSG("SSL layer setting cert, CTX had ECDSA, turning off");
            ssl->options.haveECDSAsig = 0;   /* may turn back on next */
 800a3ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a3b2:	f892 331f 	ldrb.w	r3, [r2, #799]	; 0x31f
 800a3b6:	f36f 03c3 	bfc	r3, #3, #1
 800a3ba:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
        }

        switch (cert->signatureOID) {
 800a3be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800a3c6:	d00e      	beq.n	800a3e6 <ProcessBuffer+0x44a>
 800a3c8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800a3cc:	d807      	bhi.n	800a3de <ProcessBuffer+0x442>
 800a3ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d2:	d020      	beq.n	800a416 <ProcessBuffer+0x47a>
 800a3d4:	f240 1201 	movw	r2, #257	; 0x101
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d034      	beq.n	800a446 <ProcessBuffer+0x4aa>
                else if (ctx)
                    ctx->haveECDSAsig = 1;
                break;
            default:
                WOLFSSL_MSG("Not ECDSA cert signature");
                break;
 800a3dc:	e04b      	b.n	800a476 <ProcessBuffer+0x4da>
        switch (cert->signatureOID) {
 800a3de:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d847      	bhi.n	800a476 <ProcessBuffer+0x4da>
                if (ssl)
 800a3e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d008      	beq.n	800a400 <ProcessBuffer+0x464>
                    ssl->options.haveECDSAsig = 1;
 800a3ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a3f2:	f892 331f 	ldrb.w	r3, [r2, #799]	; 0x31f
 800a3f6:	f043 0308 	orr.w	r3, r3, #8
 800a3fa:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
                break;
 800a3fe:	e03c      	b.n	800a47a <ProcessBuffer+0x4de>
                else if (ctx)
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d039      	beq.n	800a47a <ProcessBuffer+0x4de>
                    ctx->haveECDSAsig = 1;
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
 800a40c:	f043 0310 	orr.w	r3, r3, #16
 800a410:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
                break;
 800a414:	e031      	b.n	800a47a <ProcessBuffer+0x4de>
                if (ssl)
 800a416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d008      	beq.n	800a430 <ProcessBuffer+0x494>
                    ssl->options.haveECDSAsig = 1;
 800a41e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a422:	f892 331f 	ldrb.w	r3, [r2, #799]	; 0x31f
 800a426:	f043 0308 	orr.w	r3, r3, #8
 800a42a:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
                break;
 800a42e:	e026      	b.n	800a47e <ProcessBuffer+0x4e2>
                else if (ctx)
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d023      	beq.n	800a47e <ProcessBuffer+0x4e2>
                    ctx->haveECDSAsig = 1;
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
 800a43c:	f043 0310 	orr.w	r3, r3, #16
 800a440:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
                break;
 800a444:	e01b      	b.n	800a47e <ProcessBuffer+0x4e2>
                if (ssl)
 800a446:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d008      	beq.n	800a460 <ProcessBuffer+0x4c4>
                    ssl->options.haveECDSAsig = 1;
 800a44e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a452:	f892 331f 	ldrb.w	r3, [r2, #799]	; 0x31f
 800a456:	f043 0308 	orr.w	r3, r3, #8
 800a45a:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
                break;
 800a45e:	e010      	b.n	800a482 <ProcessBuffer+0x4e6>
                else if (ctx)
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00d      	beq.n	800a482 <ProcessBuffer+0x4e6>
                    ctx->haveECDSAsig = 1;
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
 800a46c:	f043 0310 	orr.w	r3, r3, #16
 800a470:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
                break;
 800a474:	e005      	b.n	800a482 <ProcessBuffer+0x4e6>
                break;
 800a476:	bf00      	nop
 800a478:	e004      	b.n	800a484 <ProcessBuffer+0x4e8>
                break;
 800a47a:	bf00      	nop
 800a47c:	e002      	b.n	800a484 <ProcessBuffer+0x4e8>
                break;
 800a47e:	bf00      	nop
 800a480:	e000      	b.n	800a484 <ProcessBuffer+0x4e8>
                break;
 800a482:	bf00      	nop
        }

    #if defined(HAVE_ECC) || defined(HAVE_ED25519) || defined(HAVE_ED448)
        if (ssl) {
 800a484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d015      	beq.n	800a4b8 <ProcessBuffer+0x51c>
            ssl->pkCurveOID = cert->pkCurveOID;
 800a48c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a48e:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 800a492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a496:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
        #ifndef WC_STRICT_SIG
            if (cert->keyOID == ECDSAk) {
 800a49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f240 2206 	movw	r2, #518	; 0x206
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d11d      	bne.n	800a4e2 <ProcessBuffer+0x546>
                ssl->options.haveECC = 1;
 800a4a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a4aa:	f892 331e 	ldrb.w	r3, [r2, #798]	; 0x31e
 800a4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4b2:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
 800a4b6:	e014      	b.n	800a4e2 <ProcessBuffer+0x546>
            #endif
        #else
            ssl->options.haveECC = ssl->options.haveECDSAsig;
        #endif
        }
        else if (ctx) {
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d011      	beq.n	800a4e2 <ProcessBuffer+0x546>
            ctx->pkCurveOID = cert->pkCurveOID;
 800a4be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c0:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	679a      	str	r2, [r3, #120]	; 0x78
        #ifndef WC_STRICT_SIG
            if (cert->keyOID == ECDSAk) {
 800a4c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	f240 2206 	movw	r2, #518	; 0x206
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d106      	bne.n	800a4e2 <ProcessBuffer+0x546>
                ctx->haveECC = 1;
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
 800a4da:	f043 0302 	orr.w	r3, r3, #2
 800a4de:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
        #endif
        }
    #endif

        /* check key size of cert unless specified not to */
        switch (cert->keyOID) {
 800a4e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	f240 2206 	movw	r2, #518	; 0x206
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d057      	beq.n	800a59e <ProcessBuffer+0x602>
 800a4ee:	f240 2285 	movw	r2, #645	; 0x285
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d000      	beq.n	800a4f8 <ProcessBuffer+0x55c>
                break;
        #endif /* HAVE_ED448 */

            default:
                WOLFSSL_MSG("No key size check done on certificate");
                break; /* do no check if not a case for the key */
 800a4f6:	e09f      	b.n	800a638 <ProcessBuffer+0x69c>
                idx = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                ret = wc_RsaPublicKeyDecode_ex(cert->publicKey, &idx,
 800a4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4fe:	6818      	ldr	r0, [r3, #0]
 800a500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a508:	2300      	movs	r3, #0
 800a50a:	9302      	str	r3, [sp, #8]
 800a50c:	2300      	movs	r3, #0
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	2300      	movs	r3, #0
 800a518:	f001 fd30 	bl	800bf7c <wc_RsaPublicKeyDecode_ex>
 800a51c:	6678      	str	r0, [r7, #100]	; 0x64
                if (ret < 0)
 800a51e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a520:	2b00      	cmp	r3, #0
 800a522:	f2c0 8084 	blt.w	800a62e <ProcessBuffer+0x692>
                if (ssl && !ssl->options.verifyNone) {
 800a526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d01a      	beq.n	800a564 <ProcessBuffer+0x5c8>
 800a52e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a532:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800a536:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d111      	bne.n	800a564 <ProcessBuffer+0x5c8>
                    if (ssl->options.minRsaKeySz < 0 ||
 800a540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a544:	f9b3 3336 	ldrsh.w	r3, [r3, #822]	; 0x336
 800a548:	2b00      	cmp	r3, #0
 800a54a:	db07      	blt.n	800a55c <ProcessBuffer+0x5c0>
                          keySz < (int)ssl->options.minRsaKeySz) {
 800a54c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a550:	f9b3 3336 	ldrsh.w	r3, [r3, #822]	; 0x336
 800a554:	461a      	mov	r2, r3
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
                    if (ssl->options.minRsaKeySz < 0 ||
 800a558:	429a      	cmp	r2, r3
 800a55a:	dd1e      	ble.n	800a59a <ProcessBuffer+0x5fe>
                        ret = RSA_KEY_SIZE_E;
 800a55c:	f46f 73cc 	mvn.w	r3, #408	; 0x198
 800a560:	667b      	str	r3, [r7, #100]	; 0x64
                    if (ssl->options.minRsaKeySz < 0 ||
 800a562:	e01a      	b.n	800a59a <ProcessBuffer+0x5fe>
                else if (ctx && !ctx->verifyNone) {
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d063      	beq.n	800a632 <ProcessBuffer+0x696>
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d15b      	bne.n	800a632 <ProcessBuffer+0x696>
                    if (ctx->minRsaKeySz < 0 ||
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800a580:	2b00      	cmp	r3, #0
 800a582:	db06      	blt.n	800a592 <ProcessBuffer+0x5f6>
                                  keySz < (int)ctx->minRsaKeySz) {
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800a58a:	461a      	mov	r2, r3
 800a58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                    if (ctx->minRsaKeySz < 0 ||
 800a58e:	429a      	cmp	r2, r3
 800a590:	dd4f      	ble.n	800a632 <ProcessBuffer+0x696>
                        ret = RSA_KEY_SIZE_E;
 800a592:	f46f 73cc 	mvn.w	r3, #408	; 0x198
 800a596:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 800a598:	e04b      	b.n	800a632 <ProcessBuffer+0x696>
                    if (ssl->options.minRsaKeySz < 0 ||
 800a59a:	bf00      	nop
                break;
 800a59c:	e049      	b.n	800a632 <ProcessBuffer+0x696>
                keySz = wc_ecc_get_curve_size_from_id(
 800a59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5a0:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f006 fe3f 	bl	801122c <wc_ecc_get_oid>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f006 f9f5 	bl	80109a0 <wc_ecc_get_curve_size_from_id>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	62bb      	str	r3, [r7, #40]	; 0x28
                if (ssl && !ssl->options.verifyNone) {
 800a5ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d019      	beq.n	800a5f6 <ProcessBuffer+0x65a>
 800a5c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5c6:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800a5ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d110      	bne.n	800a5f6 <ProcessBuffer+0x65a>
                    if (ssl->options.minEccKeySz < 0 ||
 800a5d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5d8:	f9b3 3338 	ldrsh.w	r3, [r3, #824]	; 0x338
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	db07      	blt.n	800a5f0 <ProcessBuffer+0x654>
                          keySz < (int)ssl->options.minEccKeySz) {
 800a5e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5e4:	f9b3 3338 	ldrsh.w	r3, [r3, #824]	; 0x338
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
                    if (ssl->options.minEccKeySz < 0 ||
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	dd1c      	ble.n	800a62a <ProcessBuffer+0x68e>
                        ret = ECC_KEY_SIZE_E;
 800a5f0:	4b5e      	ldr	r3, [pc, #376]	; (800a76c <ProcessBuffer+0x7d0>)
 800a5f2:	667b      	str	r3, [r7, #100]	; 0x64
                    if (ssl->options.minEccKeySz < 0 ||
 800a5f4:	e019      	b.n	800a62a <ProcessBuffer+0x68e>
                else if (ctx && !ctx->verifyNone) {
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d01c      	beq.n	800a636 <ProcessBuffer+0x69a>
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d114      	bne.n	800a636 <ProcessBuffer+0x69a>
                    if (ctx->minEccKeySz < 0 ||
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a612:	2b00      	cmp	r3, #0
 800a614:	db06      	blt.n	800a624 <ProcessBuffer+0x688>
                                  keySz < (int)ctx->minEccKeySz) {
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a61c:	461a      	mov	r2, r3
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                    if (ctx->minEccKeySz < 0 ||
 800a620:	429a      	cmp	r2, r3
 800a622:	dd08      	ble.n	800a636 <ProcessBuffer+0x69a>
                        ret = ECC_KEY_SIZE_E;
 800a624:	4b51      	ldr	r3, [pc, #324]	; (800a76c <ProcessBuffer+0x7d0>)
 800a626:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 800a628:	e005      	b.n	800a636 <ProcessBuffer+0x69a>
                    if (ssl->options.minEccKeySz < 0 ||
 800a62a:	bf00      	nop
                break;
 800a62c:	e003      	b.n	800a636 <ProcessBuffer+0x69a>
                    break;
 800a62e:	bf00      	nop
 800a630:	e002      	b.n	800a638 <ProcessBuffer+0x69c>
                break;
 800a632:	bf00      	nop
 800a634:	e000      	b.n	800a638 <ProcessBuffer+0x69c>
                break;
 800a636:	bf00      	nop
            ctx->privateKeyType = keyType;
            ctx->privateKeySz = keySz;
        }
    #endif

        FreeDecodedCert(cert);
 800a638:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a63a:	f001 fe95 	bl	800c368 <FreeDecodedCert>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(cert, heap, DYNAMIC_TYPE_DCERT);
 800a63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a640:	647b      	str	r3, [r7, #68]	; 0x44
 800a642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a644:	2b00      	cmp	r3, #0
 800a646:	d002      	beq.n	800a64e <ProcessBuffer+0x6b2>
 800a648:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a64a:	f006 ff23 	bl	8011494 <wolfSSL_Free>
    #endif

        if (ret != 0) {
 800a64e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <ProcessBuffer+0x6c0>
            done = 1;
 800a654:	2301      	movs	r3, #1
 800a656:	663b      	str	r3, [r7, #96]	; 0x60
 800a658:	e000      	b.n	800a65c <ProcessBuffer+0x6c0>
        (void)devId;
 800a65a:	bf00      	nop
        }
    }

    if (done == 1) {
 800a65c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d124      	bne.n	800a6ac <ProcessBuffer+0x710>
    #if !defined(NO_WOLFSSL_CM_VERIFY) && (!defined(NO_WOLFSSL_CLIENT) || \
                                           !defined(WOLFSSL_NO_CLIENT_AUTH))
        if ((type == CA_TYPE) || (type == CERT_TYPE)) {
 800a662:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a666:	2b05      	cmp	r3, #5
 800a668:	d003      	beq.n	800a672 <ProcessBuffer+0x6d6>
 800a66a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d11a      	bne.n	800a6a8 <ProcessBuffer+0x70c>
            /* Call to over-ride status */
            if ((ctx != NULL) && (ctx->cm != NULL) &&
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d017      	beq.n	800a6a8 <ProcessBuffer+0x70c>
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d013      	beq.n	800a6a8 <ProcessBuffer+0x70c>
                (ctx->cm->verifyCallback != NULL)) {
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if ((ctx != NULL) && (ctx->cm != NULL) &&
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00e      	beq.n	800a6a8 <ProcessBuffer+0x70c>
                ret = CM_VerifyBuffer_ex(ctx->cm, buff,
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a68e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a690:	2b01      	cmp	r3, #1
 800a692:	d001      	beq.n	800a698 <ProcessBuffer+0x6fc>
 800a694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a696:	e000      	b.n	800a69a <ProcessBuffer+0x6fe>
 800a698:	2300      	movs	r3, #0
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	6939      	ldr	r1, [r7, #16]
 800a6a2:	f000 f8a6 	bl	800a7f2 <CM_VerifyBuffer_ex>
 800a6a6:	6678      	str	r0, [r7, #100]	; 0x64
                        sz, format, (ret == WOLFSSL_SUCCESS ? 0 : ret));
            }
        }
    #endif /* NO_WOLFSSL_CM_VERIFY */

        return ret;
 800a6a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6aa:	e05b      	b.n	800a764 <ProcessBuffer+0x7c8>
    }


    if (ssl && resetSuites) {
 800a6ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d056      	beq.n	800a762 <ProcessBuffer+0x7c6>
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d053      	beq.n	800a762 <ProcessBuffer+0x7c6>
        word16 havePSK = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        word16 haveRSA = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (ssl->options.havePSK) {
            havePSK = 1;
        }
        #endif
        #ifndef NO_RSA
            haveRSA = 1;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
        #endif
        #ifndef NO_CERTS
            keySz = ssl->buffers.keySz;
 800a6c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6ca:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a6ce:	62bb      	str	r3, [r7, #40]	; 0x28
        #endif

        /* let's reset suites */
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 800a6d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	607b      	str	r3, [r7, #4]
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	603b      	str	r3, [r7, #0]
                   havePSK, ssl->options.haveDH, ssl->options.haveNTRU,
 800a6dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6e0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a6e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a6e8:	b2db      	uxtb	r3, r3
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 800a6ea:	b29b      	uxth	r3, r3
                   havePSK, ssl->options.haveDH, ssl->options.haveNTRU,
 800a6ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a6f0:	f892 231f 	ldrb.w	r2, [r2, #799]	; 0x31f
 800a6f4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800a6f8:	b2d2      	uxtb	r2, r2
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 800a6fa:	b292      	uxth	r2, r2
                   ssl->options.haveECDSAsig, ssl->options.haveECC,
 800a6fc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a700:	f891 131f 	ldrb.w	r1, [r1, #799]	; 0x31f
 800a704:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800a708:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 800a70a:	b288      	uxth	r0, r1
                   ssl->options.haveECDSAsig, ssl->options.haveECC,
 800a70c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a710:	f891 131e 	ldrb.w	r1, [r1, #798]	; 0x31e
 800a714:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 800a718:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 800a71a:	b28c      	uxth	r4, r1
                   ssl->options.haveStaticECC, ssl->options.side);
 800a71c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a720:	f891 131f 	ldrb.w	r1, [r1, #799]	; 0x31f
 800a724:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a728:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 800a72a:	b28d      	uxth	r5, r1
                   ssl->options.haveStaticECC, ssl->options.side);
 800a72c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a730:	f891 131c 	ldrb.w	r1, [r1, #796]	; 0x31c
 800a734:	f3c1 1101 	ubfx	r1, r1, #4, #2
 800a738:	b2c9      	uxtb	r1, r1
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA,
 800a73a:	f8b7 c03c 	ldrh.w	ip, [r7, #60]	; 0x3c
 800a73e:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 800a742:	9106      	str	r1, [sp, #24]
 800a744:	9505      	str	r5, [sp, #20]
 800a746:	9404      	str	r4, [sp, #16]
 800a748:	9003      	str	r0, [sp, #12]
 800a74a:	9202      	str	r2, [sp, #8]
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	4663      	mov	r3, ip
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	4631      	mov	r1, r6
 800a758:	f8d1 122c 	ldr.w	r1, [r1, #556]	; 0x22c
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7fe fa99 	bl	8008c94 <InitSuites>
    }

    return WOLFSSL_SUCCESS;
 800a762:	2301      	movs	r3, #1
}
 800a764:	4618      	mov	r0, r3
 800a766:	376c      	adds	r7, #108	; 0x6c
 800a768:	46bd      	mov	sp, r7
 800a76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a76c:	fffffe66 	.word	0xfffffe66

0800a770 <ProcessChainBuffer>:


/* CA PEM file for verification, may have multiple/chain certs to process */
static int ProcessChainBuffer(WOLFSSL_CTX* ctx, const unsigned char* buff,
                        long sz, int format, int type, WOLFSSL* ssl, int verify)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b08e      	sub	sp, #56	; 0x38
 800a774:	af06      	add	r7, sp, #24
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
 800a77c:	603b      	str	r3, [r7, #0]
    long used   = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	61fb      	str	r3, [r7, #28]
    int  ret    = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	61bb      	str	r3, [r7, #24]
    int  gotOne = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]

    WOLFSSL_MSG("Processing CA PEM file");
    while (used < sz) {
 800a78a:	e024      	b.n	800a7d6 <ProcessChainBuffer+0x66>
        long consumed = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	613b      	str	r3, [r7, #16]

        ret = ProcessBuffer(ctx, buff + used, sz - used, format, type, ssl,
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	18d1      	adds	r1, r2, r3
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	1ad2      	subs	r2, r2, r3
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9303      	str	r3, [sp, #12]
 800a7a4:	f107 0310 	add.w	r3, r7, #16
 800a7a8:	9302      	str	r3, [sp, #8]
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7ff fbf1 	bl	8009f9c <ProcessBuffer>
 800a7ba:	61b8      	str	r0, [r7, #24]
                            &consumed, 0, verify);

        if (ret < 0) {
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	da03      	bge.n	800a7ca <ProcessChainBuffer+0x5a>
                used += info.consumed;
                continue;
            }
#endif

            if (consumed > 0) { /* Made progress in file */
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dc02      	bgt.n	800a7ce <ProcessChainBuffer+0x5e>
                WOLFSSL_MSG("Search for other certs in file");
            }
            else {
                WOLFSSL_MSG("CA Parse failed, no progress in file.");
                WOLFSSL_MSG("Do not continue search for other certs in file");
                break;
 800a7c8:	e009      	b.n	800a7de <ProcessChainBuffer+0x6e>
            }
        }
        else {
            WOLFSSL_MSG("   Processed a CA");
            gotOne = 1;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	617b      	str	r3, [r7, #20]
        }
        used += consumed;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	61fb      	str	r3, [r7, #28]
    while (used < sz) {
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	dbd6      	blt.n	800a78c <ProcessChainBuffer+0x1c>
    }

    if (gotOne) {
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <ProcessChainBuffer+0x78>
        WOLFSSL_MSG("Processed at least one valid CA. Other stuff OK");
        return WOLFSSL_SUCCESS;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e000      	b.n	800a7ea <ProcessChainBuffer+0x7a>
    }
    return ret;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3720      	adds	r7, #32
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <CM_VerifyBuffer_ex>:

#if !defined(NO_WOLFSSL_CLIENT) || !defined(WOLFSSL_NO_CLIENT_AUTH)
/* Verify the certificate, WOLFSSL_SUCCESS for ok, < 0 for error */
int CM_VerifyBuffer_ex(WOLFSSL_CERT_MANAGER* cm, const byte* buff,
                                    long sz, int format, int err_val)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b092      	sub	sp, #72	; 0x48
 800a7f6:	af04      	add	r7, sp, #16
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
 800a7fe:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	637b      	str	r3, [r7, #52]	; 0x34
    DerBuffer* der = NULL;
 800a804:	2300      	movs	r3, #0
 800a806:	61bb      	str	r3, [r7, #24]
#endif

    WOLFSSL_ENTER("wolfSSL_CertManagerVerifyBuffer");

#ifdef WOLFSSL_SMALL_STACK
    cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), cm->heap,
 800a808:	f44f 705f 	mov.w	r0, #892	; 0x37c
 800a80c:	f006 fe26 	bl	801145c <wolfSSL_Malloc>
 800a810:	6338      	str	r0, [r7, #48]	; 0x30
                                 DYNAMIC_TYPE_DCERT);
    if (cert == NULL)
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	2b00      	cmp	r3, #0
 800a816:	d102      	bne.n	800a81e <CM_VerifyBuffer_ex+0x2c>
        return MEMORY_E;
 800a818:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800a81c:	e099      	b.n	800a952 <CM_VerifyBuffer_ex+0x160>
#endif

    if (format == WOLFSSL_FILETYPE_PEM) {
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d12b      	bne.n	800a87c <CM_VerifyBuffer_ex+0x8a>
#ifdef WOLFSSL_PEM_TO_DER
        ret = PemToDer(buff, sz, CERT_TYPE, &der, cm->heap, NULL, NULL);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	f107 0118 	add.w	r1, r7, #24
 800a82c:	2200      	movs	r2, #0
 800a82e:	9202      	str	r2, [sp, #8]
 800a830:	2200      	movs	r2, #0
 800a832:	9201      	str	r2, [sp, #4]
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	460b      	mov	r3, r1
 800a838:	2200      	movs	r2, #0
 800a83a:	6879      	ldr	r1, [r7, #4]
 800a83c:	68b8      	ldr	r0, [r7, #8]
 800a83e:	f005 f881 	bl	800f944 <PemToDer>
 800a842:	6378      	str	r0, [r7, #52]	; 0x34
        if (ret != 0) {
 800a844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00e      	beq.n	800a868 <CM_VerifyBuffer_ex+0x76>
            FreeDer(&der);
 800a84a:	f107 0318 	add.w	r3, r7, #24
 800a84e:	4618      	mov	r0, r3
 800a850:	f004 ff4c 	bl	800f6ec <FreeDer>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(cert, cm->heap, DYNAMIC_TYPE_DCERT);
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <CM_VerifyBuffer_ex+0x72>
 800a85e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a860:	f006 fe18 	bl	8011494 <wolfSSL_Free>
        #endif
            return ret;
 800a864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a866:	e074      	b.n	800a952 <CM_VerifyBuffer_ex+0x160>
        }
        InitDecodedCert(cert, der->buffer, der->length, cm->heap);
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	6819      	ldr	r1, [r3, #0]
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	689a      	ldr	r2, [r3, #8]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a876:	f001 fcf8 	bl	800c26a <InitDecodedCert>
 800a87a:	e006      	b.n	800a88a <CM_VerifyBuffer_ex+0x98>
#else
        ret = NOT_COMPILED_IN;
#endif
    }
    else {
        InitDecodedCert(cert, (byte*)buff, (word32)sz, cm->heap);
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a882:	68b9      	ldr	r1, [r7, #8]
 800a884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a886:	f001 fcf0 	bl	800c26a <InitDecodedCert>
    }

    if (ret == 0)
 800a88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d106      	bne.n	800a89e <CM_VerifyBuffer_ex+0xac>
        ret = ParseCertRelative(cert, CERT_TYPE, 1, cm);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2201      	movs	r2, #1
 800a894:	2100      	movs	r1, #0
 800a896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a898:	f004 fb7c 	bl	800ef94 <ParseCertRelative>
 800a89c:	6378      	str	r0, [r7, #52]	; 0x34
        ret = CheckCertCRL(cm->crl, cert);
#endif

#ifndef NO_WOLFSSL_CM_VERIFY
    /* if verify callback has been set */
    if (cm->verifyCallback) {
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d03f      	beq.n	800a926 <CM_VerifyBuffer_ex+0x134>
        buffer certBuf;
    #ifdef WOLFSSL_SMALL_STACK
        ProcPeerCertArgs* args;
        args = (ProcPeerCertArgs*)XMALLOC(
 800a8a6:	2028      	movs	r0, #40	; 0x28
 800a8a8:	f006 fdd8 	bl	801145c <wolfSSL_Malloc>
 800a8ac:	62b8      	str	r0, [r7, #40]	; 0x28
            sizeof(ProcPeerCertArgs), cm->heap, DYNAMIC_TYPE_TMP_BUFFER);
        if (args == NULL) {
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10a      	bne.n	800a8ca <CM_VerifyBuffer_ex+0xd8>
            XFREE(cert, cm->heap, DYNAMIC_TYPE_DCERT);
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	623b      	str	r3, [r7, #32]
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <CM_VerifyBuffer_ex+0xd2>
 800a8be:	6a38      	ldr	r0, [r7, #32]
 800a8c0:	f006 fde8 	bl	8011494 <wolfSSL_Free>
            return MEMORY_E;
 800a8c4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800a8c8:	e043      	b.n	800a952 <CM_VerifyBuffer_ex+0x160>
        }
    #else
        ProcPeerCertArgs  args[1];
    #endif

        certBuf.buffer = (byte*)buff;
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	613b      	str	r3, [r7, #16]
        certBuf.length = (unsigned int)sz;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	617b      	str	r3, [r7, #20]
        XMEMSET(args, 0, sizeof(ProcPeerCertArgs));
 800a8d2:	2228      	movs	r2, #40	; 0x28
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d8:	f011 f8bf 	bl	801ba5a <memset>

        args->totalCerts = 1;
 800a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8de:	2201      	movs	r2, #1
 800a8e0:	615a      	str	r2, [r3, #20]
        args->certs = &certBuf;
 800a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e4:	f107 0210 	add.w	r2, r7, #16
 800a8e8:	601a      	str	r2, [r3, #0]
        args->dCert = cert;
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ee:	609a      	str	r2, [r3, #8]
        args->dCertInit = 1;
 800a8f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8f2:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800a8f6:	f043 0304 	orr.w	r3, r3, #4
 800a8fa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

        if (err_val != 0) {
 800a8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <CM_VerifyBuffer_ex+0x116>
            ret = err_val;
 800a904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a906:	637b      	str	r3, [r7, #52]	; 0x34
        }
        ret = DoVerifyCallback(cm, NULL, ret, args);
 800a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a90c:	2100      	movs	r1, #0
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f7fe fb9c 	bl	800904c <DoVerifyCallback>
 800a914:	6378      	str	r0, [r7, #52]	; 0x34
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(args, cm->heap, DYNAMIC_TYPE_TMP_BUFFER);
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <CM_VerifyBuffer_ex+0x134>
 800a920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a922:	f006 fdb7 	bl	8011494 <wolfSSL_Free>
    }
#else
    (void)err_val;
#endif

    FreeDecodedCert(cert);
 800a926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a928:	f001 fd1e 	bl	800c368 <FreeDecodedCert>
    FreeDer(&der);
 800a92c:	f107 0318 	add.w	r3, r7, #24
 800a930:	4618      	mov	r0, r3
 800a932:	f004 fedb 	bl	800f6ec <FreeDer>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(cert, cm->heap, DYNAMIC_TYPE_DCERT);
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	61fb      	str	r3, [r7, #28]
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <CM_VerifyBuffer_ex+0x154>
 800a940:	69f8      	ldr	r0, [r7, #28]
 800a942:	f006 fda7 	bl	8011494 <wolfSSL_Free>
#endif

    return ret == 0 ? WOLFSSL_SUCCESS : ret;
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <CM_VerifyBuffer_ex+0x15e>
 800a94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94e:	e000      	b.n	800a952 <CM_VerifyBuffer_ex+0x160>
 800a950:	2301      	movs	r3, #1
}
 800a952:	4618      	mov	r0, r3
 800a954:	3738      	adds	r7, #56	; 0x38
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <wolfSSL_CTX_load_verify_buffer_ex>:

    int wolfSSL_CTX_load_verify_buffer_ex(WOLFSSL_CTX* ctx,
                                         const unsigned char* in,
                                         long sz, int format, int userChain,
                                         word32 flags)
    {
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b08c      	sub	sp, #48	; 0x30
 800a95e:	af06      	add	r7, sp, #24
 800a960:	60f8      	str	r0, [r7, #12]
 800a962:	60b9      	str	r1, [r7, #8]
 800a964:	607a      	str	r2, [r7, #4]
 800a966:	603b      	str	r3, [r7, #0]
        int verify;
        int ret = WOLFSSL_FAILURE;
 800a968:	2300      	movs	r3, #0
 800a96a:	613b      	str	r3, [r7, #16]

        WOLFSSL_ENTER("wolfSSL_CTX_load_verify_buffer_ex");

        verify = GET_VERIFY_SETTING_CTX(ctx);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d007      	beq.n	800a982 <wolfSSL_CTX_load_verify_buffer_ex+0x28>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <wolfSSL_CTX_load_verify_buffer_ex+0x2c>
 800a982:	2301      	movs	r3, #1
 800a984:	e000      	b.n	800a988 <wolfSSL_CTX_load_verify_buffer_ex+0x2e>
 800a986:	2300      	movs	r3, #0
 800a988:	617b      	str	r3, [r7, #20]
        if (flags & WOLFSSL_LOAD_FLAG_DATE_ERR_OKAY)
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	f003 0302 	and.w	r3, r3, #2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <wolfSSL_CTX_load_verify_buffer_ex+0x3e>
            verify = VERIFY_SKIP_DATE;
 800a994:	2305      	movs	r3, #5
 800a996:	617b      	str	r3, [r7, #20]

        if (format == WOLFSSL_FILETYPE_PEM)
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d10d      	bne.n	800a9ba <wolfSSL_CTX_load_verify_buffer_ex+0x60>
            ret = ProcessChainBuffer(ctx, in, sz, format, CA_TYPE, NULL,
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	9302      	str	r3, [sp, #8]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9301      	str	r3, [sp, #4]
 800a9a6:	2305      	movs	r3, #5
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	68b9      	ldr	r1, [r7, #8]
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f7ff fedd 	bl	800a770 <ProcessChainBuffer>
 800a9b6:	6138      	str	r0, [r7, #16]
 800a9b8:	e010      	b.n	800a9dc <wolfSSL_CTX_load_verify_buffer_ex+0x82>
                                      verify);
        else
            ret = ProcessBuffer(ctx, in, sz, format, CA_TYPE, NULL, NULL,
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	9303      	str	r3, [sp, #12]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	9302      	str	r3, [sp, #8]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	2305      	movs	r3, #5
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	68b9      	ldr	r1, [r7, #8]
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f7ff fae1 	bl	8009f9c <ProcessBuffer>
 800a9da:	6138      	str	r0, [r7, #16]
                                 userChain, verify);
        WOLFSSL_LEAVE("wolfSSL_CTX_load_verify_buffer_ex", ret);
        return ret;
 800a9dc:	693b      	ldr	r3, [r7, #16]
    }
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <wolfSSL_CTX_load_verify_buffer>:

    /* wolfSSL extension allows DER files to be loaded from buffers as well */
    int wolfSSL_CTX_load_verify_buffer(WOLFSSL_CTX* ctx,
                                       const unsigned char* in,
                                       long sz, int format)
    {
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b086      	sub	sp, #24
 800a9ea:	af02      	add	r7, sp, #8
 800a9ec:	60f8      	str	r0, [r7, #12]
 800a9ee:	60b9      	str	r1, [r7, #8]
 800a9f0:	607a      	str	r2, [r7, #4]
 800a9f2:	603b      	str	r3, [r7, #0]
        return wolfSSL_CTX_load_verify_buffer_ex(ctx, in, sz, format, 0,
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7ff ffa9 	bl	800a95a <wolfSSL_CTX_load_verify_buffer_ex>
 800aa08:	4603      	mov	r3, r0
            WOLFSSL_LOAD_VERIFY_DEFAULT_FLAGS);
    }
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <MakeTLSv1_2>:


#ifndef WOLFSSL_NO_TLS12

ProtocolVersion MakeTLSv1_2(void)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b083      	sub	sp, #12
 800aa16:	af00      	add	r7, sp, #0
    ProtocolVersion pv;
    pv.major = SSLv3_MAJOR;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	703b      	strb	r3, [r7, #0]
    pv.minor = TLSv1_2_MINOR;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	707b      	strb	r3, [r7, #1]

    return pv;
 800aa20:	883b      	ldrh	r3, [r7, #0]
 800aa22:	80bb      	strh	r3, [r7, #4]
 800aa24:	2300      	movs	r3, #0
 800aa26:	793a      	ldrb	r2, [r7, #4]
 800aa28:	f362 0307 	bfi	r3, r2, #0, #8
 800aa2c:	797a      	ldrb	r2, [r7, #5]
 800aa2e:	f362 230f 	bfi	r3, r2, #8, #8
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <TLSX_SupportedCurve_FreeAll>:

    return 0;
}

static void TLSX_SupportedCurve_FreeAll(SupportedCurve* list, void* heap)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b084      	sub	sp, #16
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
    SupportedCurve* curve;

    while ((curve = list)) {
 800aa48:	e00a      	b.n	800aa60 <TLSX_SupportedCurve_FreeAll+0x22>
        list = curve->next;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	607b      	str	r3, [r7, #4]
        XFREE(curve, heap, DYNAMIC_TYPE_TLSX);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	60bb      	str	r3, [r7, #8]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <TLSX_SupportedCurve_FreeAll+0x22>
 800aa5a:	68b8      	ldr	r0, [r7, #8]
 800aa5c:	f006 fd1a 	bl	8011494 <wolfSSL_Free>
    while ((curve = list)) {
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1ef      	bne.n	800aa4a <TLSX_SupportedCurve_FreeAll+0xc>
    }
    (void)heap;
}
 800aa6a:	bf00      	nop
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <TLSX_PointFormat_FreeAll>:

static void TLSX_PointFormat_FreeAll(PointFormat* list, void* heap)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	6039      	str	r1, [r7, #0]
    PointFormat* point;

    while ((point = list)) {
 800aa7c:	e00a      	b.n	800aa94 <TLSX_PointFormat_FreeAll+0x22>
        list = point->next;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	607b      	str	r3, [r7, #4]
        XFREE(point, heap, DYNAMIC_TYPE_TLSX);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	60bb      	str	r3, [r7, #8]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <TLSX_PointFormat_FreeAll+0x22>
 800aa8e:	68b8      	ldr	r0, [r7, #8]
 800aa90:	f006 fd00 	bl	8011494 <wolfSSL_Free>
    while ((point = list)) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1ef      	bne.n	800aa7e <TLSX_PointFormat_FreeAll+0xc>
    }
    (void)heap;
}
 800aa9e:	bf00      	nop
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <TLSX_KeyShare_FreeAll>:
 *
 * list  The linked list of key share entry objects.
 * heap  The heap used for allocation.
 */
static void TLSX_KeyShare_FreeAll(KeyShareEntry* list, void* heap)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b088      	sub	sp, #32
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	6039      	str	r1, [r7, #0]
    KeyShareEntry* current;

    while ((current = list) != NULL) {
 800aab0:	e03c      	b.n	800ab2c <TLSX_KeyShare_FreeAll+0x86>
        list = current->next;
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	607b      	str	r3, [r7, #4]
        if ((current->group & NAMED_DH_MASK) == 0) {
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	881b      	ldrh	r3, [r3, #0]
 800aabc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10c      	bne.n	800aade <TLSX_KeyShare_FreeAll+0x38>
            if (current->group == WOLFSSL_ECC_X25519) {
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	2b1d      	cmp	r3, #29
 800aaca:	d008      	beq.n	800aade <TLSX_KeyShare_FreeAll+0x38>
#ifdef HAVE_CURVE25519
                wc_curve25519_free((curve25519_key*)current->key);
#endif
            }
            else if (current->group == WOLFSSL_ECC_X448) {
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	881b      	ldrh	r3, [r3, #0]
 800aad0:	2b1e      	cmp	r3, #30
 800aad2:	d004      	beq.n	800aade <TLSX_KeyShare_FreeAll+0x38>
                wc_curve448_free((curve448_key*)current->key);
#endif
            }
            else {
#ifdef HAVE_ECC
                wc_ecc_free((ecc_key*)(current->key));
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	4618      	mov	r0, r3
 800aada:	f006 f899 	bl	8010c10 <wc_ecc_free>
#endif
            }
        }
        if (current->key != NULL)
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d008      	beq.n	800aaf8 <TLSX_KeyShare_FreeAll+0x52>
            XFREE(current->key, heap, DYNAMIC_TYPE_PRIVATE_KEY);
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	61bb      	str	r3, [r7, #24]
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <TLSX_KeyShare_FreeAll+0x52>
 800aaf2:	69b8      	ldr	r0, [r7, #24]
 800aaf4:	f006 fcce 	bl	8011494 <wolfSSL_Free>
        XFREE(current->pubKey, heap, DYNAMIC_TYPE_PUBLIC_KEY);
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	617b      	str	r3, [r7, #20]
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <TLSX_KeyShare_FreeAll+0x64>
 800ab04:	6978      	ldr	r0, [r7, #20]
 800ab06:	f006 fcc5 	bl	8011494 <wolfSSL_Free>
        XFREE(current->ke, heap, DYNAMIC_TYPE_PUBLIC_KEY);
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	613b      	str	r3, [r7, #16]
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d002      	beq.n	800ab1c <TLSX_KeyShare_FreeAll+0x76>
 800ab16:	6938      	ldr	r0, [r7, #16]
 800ab18:	f006 fcbc 	bl	8011494 <wolfSSL_Free>
        XFREE(current, heap, DYNAMIC_TYPE_TLSX);
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <TLSX_KeyShare_FreeAll+0x86>
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f006 fcb4 	bl	8011494 <wolfSSL_Free>
    while ((current = list) != NULL) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	61fb      	str	r3, [r7, #28]
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1bd      	bne.n	800aab2 <TLSX_KeyShare_FreeAll+0xc>
    }

    (void)heap;
}
 800ab36:	bf00      	nop
 800ab38:	3720      	adds	r7, #32
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <TLSX_FreeAll>:
    }
}

/** Releases all extensions in the provided list. */
void TLSX_FreeAll(TLSX* list, void* heap)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
    TLSX* extension;

    while ((extension = list)) {
 800ab48:	e05f      	b.n	800ac0a <TLSX_FreeAll+0xcc>
        list = extension->next;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	607b      	str	r3, [r7, #4]

        switch (extension->type) {
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	2b11      	cmp	r3, #17
 800ab56:	d041      	beq.n	800abdc <TLSX_FreeAll+0x9e>
 800ab58:	2b11      	cmp	r3, #17
 800ab5a:	dc14      	bgt.n	800ab86 <TLSX_FreeAll+0x48>
 800ab5c:	2b05      	cmp	r3, #5
 800ab5e:	d03f      	beq.n	800abe0 <TLSX_FreeAll+0xa2>
 800ab60:	2b05      	cmp	r3, #5
 800ab62:	dc05      	bgt.n	800ab70 <TLSX_FreeAll+0x32>
 800ab64:	2b03      	cmp	r3, #3
 800ab66:	d03d      	beq.n	800abe4 <TLSX_FreeAll+0xa6>
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	dc3d      	bgt.n	800abe8 <TLSX_FreeAll+0xaa>
 800ab6c:	2b01      	cmp	r3, #1
                TCA_FREE_ALL((TCA*)extension->data, heap);
                break;

            case TLSX_MAX_FRAGMENT_LENGTH:
                MFL_FREE_ALL(extension->data, heap);
                break;
 800ab6e:	e044      	b.n	800abfa <TLSX_FreeAll+0xbc>
        switch (extension->type) {
 800ab70:	2b0b      	cmp	r3, #11
 800ab72:	d025      	beq.n	800abc0 <TLSX_FreeAll+0x82>
 800ab74:	2b0b      	cmp	r3, #11
 800ab76:	dc02      	bgt.n	800ab7e <TLSX_FreeAll+0x40>
 800ab78:	2b0a      	cmp	r3, #10
 800ab7a:	d01a      	beq.n	800abb2 <TLSX_FreeAll+0x74>
 800ab7c:	e03d      	b.n	800abfa <TLSX_FreeAll+0xbc>
 800ab7e:	2b0d      	cmp	r3, #13
 800ab80:	d034      	beq.n	800abec <TLSX_FreeAll+0xae>
 800ab82:	2b10      	cmp	r3, #16
                QSH_FREE_ALL((QSHScheme*)extension->data, heap);
                break;

            case TLSX_APPLICATION_LAYER_PROTOCOL:
                ALPN_FREE_ALL((ALPN*)extension->data, heap);
                break;
 800ab84:	e039      	b.n	800abfa <TLSX_FreeAll+0xbc>
        switch (extension->type) {
 800ab86:	2b23      	cmp	r3, #35	; 0x23
 800ab88:	d032      	beq.n	800abf0 <TLSX_FreeAll+0xb2>
 800ab8a:	2b23      	cmp	r3, #35	; 0x23
 800ab8c:	dc05      	bgt.n	800ab9a <TLSX_FreeAll+0x5c>
 800ab8e:	2b17      	cmp	r3, #23
 800ab90:	d02a      	beq.n	800abe8 <TLSX_FreeAll+0xaa>
 800ab92:	2b18      	cmp	r3, #24
 800ab94:	d02e      	beq.n	800abf4 <TLSX_FreeAll+0xb6>
 800ab96:	2b16      	cmp	r3, #22
            case TLSX_SIGNATURE_ALGORITHMS:
                break;
#endif
#if defined(HAVE_ENCRYPT_THEN_MAC) && !defined(WOLFSSL_AEAD_ONLY)
            case TLSX_ENCRYPT_THEN_MAC:
                break;
 800ab98:	e02f      	b.n	800abfa <TLSX_FreeAll+0xbc>
        switch (extension->type) {
 800ab9a:	2b32      	cmp	r3, #50	; 0x32
 800ab9c:	d02c      	beq.n	800abf8 <TLSX_FreeAll+0xba>
 800ab9e:	2b32      	cmp	r3, #50	; 0x32
 800aba0:	dc01      	bgt.n	800aba6 <TLSX_FreeAll+0x68>
 800aba2:	2b2b      	cmp	r3, #43	; 0x2b
#endif
#ifdef WOLFSSL_TLS13
            case TLSX_SUPPORTED_VERSIONS:
                break;
 800aba4:	e029      	b.n	800abfa <TLSX_FreeAll+0xbc>
        switch (extension->type) {
 800aba6:	2b33      	cmp	r3, #51	; 0x33
 800aba8:	d011      	beq.n	800abce <TLSX_FreeAll+0x90>
 800abaa:	f64f 7201 	movw	r2, #65281	; 0xff01
 800abae:	4293      	cmp	r3, r2
                break;
 800abb0:	e023      	b.n	800abfa <TLSX_FreeAll+0xbc>
                EC_FREE_ALL((SupportedCurve*)extension->data, heap);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	6839      	ldr	r1, [r7, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7ff ff40 	bl	800aa3e <TLSX_SupportedCurve_FreeAll>
                break;
 800abbe:	e01c      	b.n	800abfa <TLSX_FreeAll+0xbc>
                PF_FREE_ALL((PointFormat*)extension->data, heap);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff ff53 	bl	800aa72 <TLSX_PointFormat_FreeAll>
                break;
 800abcc:	e015      	b.n	800abfa <TLSX_FreeAll+0xbc>
            case TLSX_SIGNATURE_ALGORITHMS_CERT:
                break;
    #endif

            case TLSX_KEY_SHARE:
                KS_FREE_ALL((KeyShareEntry*)extension->data, heap);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff ff66 	bl	800aaa6 <TLSX_KeyShare_FreeAll>
                break;
 800abda:	e00e      	b.n	800abfa <TLSX_FreeAll+0xbc>
                break;
 800abdc:	bf00      	nop
 800abde:	e00c      	b.n	800abfa <TLSX_FreeAll+0xbc>
                break;
 800abe0:	bf00      	nop
 800abe2:	e00a      	b.n	800abfa <TLSX_FreeAll+0xbc>
                break;
 800abe4:	bf00      	nop
 800abe6:	e008      	b.n	800abfa <TLSX_FreeAll+0xbc>
                break;
 800abe8:	bf00      	nop
 800abea:	e006      	b.n	800abfa <TLSX_FreeAll+0xbc>
                break;
 800abec:	bf00      	nop
 800abee:	e004      	b.n	800abfa <TLSX_FreeAll+0xbc>
                break;
 800abf0:	bf00      	nop
 800abf2:	e002      	b.n	800abfa <TLSX_FreeAll+0xbc>
                break;
 800abf4:	bf00      	nop
 800abf6:	e000      	b.n	800abfa <TLSX_FreeAll+0xbc>
                break;
 800abf8:	bf00      	nop
#endif
        }

        XFREE(extension, heap, DYNAMIC_TYPE_TLSX);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	60bb      	str	r3, [r7, #8]
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <TLSX_FreeAll+0xcc>
 800ac04:	68b8      	ldr	r0, [r7, #8]
 800ac06:	f006 fc45 	bl	8011494 <wolfSSL_Free>
    while ((extension = list)) {
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d19a      	bne.n	800ab4a <TLSX_FreeAll+0xc>
    }

    (void)heap;
}
 800ac14:	bf00      	nop
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <wolfTLSv1_2_client_method>:
#endif /* !NO_OLD_TLS */

#ifndef WOLFSSL_NO_TLS12
    WOLFSSL_ABI
    WOLFSSL_METHOD* wolfTLSv1_2_client_method(void)
    {
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
        return wolfTLSv1_2_client_method_ex(NULL);
 800ac20:	2000      	movs	r0, #0
 800ac22:	f000 f803 	bl	800ac2c <wolfTLSv1_2_client_method_ex>
 800ac26:	4603      	mov	r3, r0
    }
 800ac28:	4618      	mov	r0, r3
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <wolfTLSv1_2_client_method_ex>:
    WOLFSSL_METHOD* wolfTLSv1_2_client_method_ex(void* heap)
    {
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
        WOLFSSL_METHOD* method =
 800ac34:	2004      	movs	r0, #4
 800ac36:	f006 fc11 	bl	801145c <wolfSSL_Malloc>
 800ac3a:	60f8      	str	r0, [r7, #12]
                              (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                     heap, DYNAMIC_TYPE_METHOD);
        (void)heap;
        WOLFSSL_ENTER("TLSv1_2_client_method_ex");
        if (method)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d007      	beq.n	800ac52 <wolfTLSv1_2_client_method_ex+0x26>
            InitSSL_Method(method, MakeTLSv1_2());
 800ac42:	f7ff fee6 	bl	800aa12 <MakeTLSv1_2>
 800ac46:	4603      	mov	r3, r0
 800ac48:	813b      	strh	r3, [r7, #8]
 800ac4a:	68b9      	ldr	r1, [r7, #8]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7fd fe2e 	bl	80088ae <InitSSL_Method>
        return method;
 800ac52:	68fb      	ldr	r3, [r7, #12]
    }
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <ForceZero>:
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 800ac6a:	e004      	b.n	800ac76 <ForceZero+0x1a>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	60fa      	str	r2, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	1e5a      	subs	r2, r3, #1
 800ac7a:	603a      	str	r2, [r7, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1f5      	bne.n	800ac6c <ForceZero+0x10>
}
 800ac80:	bf00      	nop
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <GetLength>:
                        word32 key_e_start, word32 key_e_len,
                        byte *tsip_encRsaKeyIdx);
#endif
int GetLength(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af02      	add	r7, sp, #8
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
 800ac98:	603b      	str	r3, [r7, #0]
    return GetLength_ex(input, inOutIdx, len, maxIdx, 1);
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 f805 	bl	800acb4 <GetLength_ex>
 800acaa:	4603      	mov	r3, r0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <GetLength_ex>:


/* give option to check length value found against index. 1 to check 0 to not */
int GetLength_ex(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx, int check)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b089      	sub	sp, #36	; 0x24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	603b      	str	r3, [r7, #0]
    int     length = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	61fb      	str	r3, [r7, #28]
    word32  idx = *inOutIdx;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	61bb      	str	r3, [r7, #24]
    byte    b;

    *len = 0;    /* default length */
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]

    if ((idx + 1) > maxIdx) {   /* for first read */
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	3301      	adds	r3, #1
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d202      	bcs.n	800ace2 <GetLength_ex+0x2e>
        WOLFSSL_MSG("GetLength bad index on input");
        return BUFFER_E;
 800acdc:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ace0:	e04c      	b.n	800ad7c <GetLength_ex+0xc8>
    }

    b = input[idx++];
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	1c5a      	adds	r2, r3, #1
 800ace6:	61ba      	str	r2, [r7, #24]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4413      	add	r3, r2
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	74fb      	strb	r3, [r7, #19]
    if (b >= ASN_LONG_LENGTH) {
 800acf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	da29      	bge.n	800ad4c <GetLength_ex+0x98>
        word32 bytes = b & 0x7F;
 800acf8:	7cfb      	ldrb	r3, [r7, #19]
 800acfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acfe:	617b      	str	r3, [r7, #20]

        if ((idx + bytes) > maxIdx) {   /* for reading bytes */
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	4413      	add	r3, r2
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d202      	bcs.n	800ad12 <GetLength_ex+0x5e>
            WOLFSSL_MSG("GetLength bad long length");
            return BUFFER_E;
 800ad0c:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ad10:	e034      	b.n	800ad7c <GetLength_ex+0xc8>
        }

        if (bytes > sizeof(length)) {
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d90e      	bls.n	800ad36 <GetLength_ex+0x82>
            return ASN_PARSE_E;
 800ad18:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ad1c:	e02e      	b.n	800ad7c <GetLength_ex+0xc8>
        }
        while (bytes--) {
            b = input[idx++];
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	61ba      	str	r2, [r7, #24]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	74fb      	strb	r3, [r7, #19]
            length = (length << 8) | b;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	021a      	lsls	r2, r3, #8
 800ad30:	7cfb      	ldrb	r3, [r7, #19]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	61fb      	str	r3, [r7, #28]
        while (bytes--) {
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	1e5a      	subs	r2, r3, #1
 800ad3a:	617a      	str	r2, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1ee      	bne.n	800ad1e <GetLength_ex+0x6a>
        }
        if (length < 0) {
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	da04      	bge.n	800ad50 <GetLength_ex+0x9c>
            return ASN_PARSE_E;
 800ad46:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ad4a:	e017      	b.n	800ad7c <GetLength_ex+0xc8>
        }
    }
    else
        length = b;
 800ad4c:	7cfb      	ldrb	r3, [r7, #19]
 800ad4e:	61fb      	str	r3, [r7, #28]

    if (check && (idx + length) > maxIdx) {   /* for user of length */
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d008      	beq.n	800ad68 <GetLength_ex+0xb4>
 800ad56:	69fa      	ldr	r2, [r7, #28]
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d202      	bcs.n	800ad68 <GetLength_ex+0xb4>
        WOLFSSL_MSG("GetLength value exceeds buffer length");
        return BUFFER_E;
 800ad62:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ad66:	e009      	b.n	800ad7c <GetLength_ex+0xc8>
    }

    *inOutIdx = idx;
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	69ba      	ldr	r2, [r7, #24]
 800ad6c:	601a      	str	r2, [r3, #0]
    if (length > 0)
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dd02      	ble.n	800ad7a <GetLength_ex+0xc6>
        *len = length;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	601a      	str	r2, [r3, #0]

    return length;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3724      	adds	r7, #36	; 0x24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <GetASNTag>:
 * tag : ASN tag value found
 *
 * returns 0 on success
 */
int GetASNTag(const byte* input, word32* inOutIdx, byte* tag, word32 maxIdx)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b087      	sub	sp, #28
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	603b      	str	r3, [r7, #0]
    word32 idx;

    if (tag == NULL || inOutIdx == NULL || input == NULL) {
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d005      	beq.n	800ada8 <GetASNTag+0x20>
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <GetASNTag+0x20>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d102      	bne.n	800adae <GetASNTag+0x26>
        return BAD_FUNC_ARG;
 800ada8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800adac:	e015      	b.n	800adda <GetASNTag+0x52>
    }

    idx = *inOutIdx;
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	617b      	str	r3, [r7, #20]
    if (idx + ASN_TAG_SZ > maxIdx) {
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	3301      	adds	r3, #1
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d202      	bcs.n	800adc4 <GetASNTag+0x3c>
        WOLFSSL_MSG("Buffer too small for ASN tag");
        return BUFFER_E;
 800adbe:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800adc2:	e00a      	b.n	800adda <GetASNTag+0x52>
    }

    *tag = input[idx];
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	4413      	add	r3, r2
 800adca:	781a      	ldrb	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	701a      	strb	r2, [r3, #0]
    *inOutIdx = idx + ASN_TAG_SZ;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	601a      	str	r2, [r3, #0]
    return 0;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	371c      	adds	r7, #28
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <GetASNHeader_ex>:


static int GetASNHeader_ex(const byte* input, byte tag, word32* inOutIdx, int* len,
                        word32 maxIdx, int check)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b08a      	sub	sp, #40	; 0x28
 800adea:	af02      	add	r7, sp, #8
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	603b      	str	r3, [r7, #0]
 800adf2:	460b      	mov	r3, r1
 800adf4:	72fb      	strb	r3, [r7, #11]
    word32 idx = *inOutIdx;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	61fb      	str	r3, [r7, #28]
    byte   tagFound;
    int    length;

    if (GetASNTag(input, &idx, &tagFound, maxIdx) != 0)
 800adfc:	f107 021b 	add.w	r2, r7, #27
 800ae00:	f107 011c 	add.w	r1, r7, #28
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff ffbe 	bl	800ad88 <GetASNTag>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <GetASNHeader_ex+0x32>
        return ASN_PARSE_E;
 800ae12:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ae16:	e01d      	b.n	800ae54 <GetASNHeader_ex+0x6e>

    if (tagFound != tag)
 800ae18:	7efb      	ldrb	r3, [r7, #27]
 800ae1a:	7afa      	ldrb	r2, [r7, #11]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d002      	beq.n	800ae26 <GetASNHeader_ex+0x40>
        return ASN_PARSE_E;
 800ae20:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ae24:	e016      	b.n	800ae54 <GetASNHeader_ex+0x6e>

    if (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)
 800ae26:	f107 0214 	add.w	r2, r7, #20
 800ae2a:	f107 011c 	add.w	r1, r7, #28
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff ff3d 	bl	800acb4 <GetLength_ex>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	da02      	bge.n	800ae46 <GetASNHeader_ex+0x60>
        return ASN_PARSE_E;
 800ae40:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ae44:	e006      	b.n	800ae54 <GetASNHeader_ex+0x6e>

    *len      = length;
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
 800ae4c:	69fa      	ldr	r2, [r7, #28]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	601a      	str	r2, [r3, #0]
    return length;
 800ae52:	697b      	ldr	r3, [r7, #20]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3720      	adds	r7, #32
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <GetASNHeader>:
 *         ASN_PARSE_E when the expected tag is not found or length is invalid.
 *         Otherwise, the number of bytes in the ASN.1 data.
 */
static int GetASNHeader(const byte* input, byte tag, word32* inOutIdx, int* len,
                        word32 maxIdx)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	607a      	str	r2, [r7, #4]
 800ae66:	603b      	str	r3, [r7, #0]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	72fb      	strb	r3, [r7, #11]
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 800ae6c:	7af9      	ldrb	r1, [r7, #11]
 800ae6e:	2301      	movs	r3, #1
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7ff ffb3 	bl	800ade6 <GetASNHeader_ex>
 800ae80:	4603      	mov	r3, r0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <GetHeader>:

static int GetHeader(const byte* input, byte* tag, word32* inOutIdx, int* len,
                     word32 maxIdx, int check)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b088      	sub	sp, #32
 800ae8e:	af02      	add	r7, sp, #8
 800ae90:	60f8      	str	r0, [r7, #12]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
 800ae96:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	617b      	str	r3, [r7, #20]
    int    length;

    if ((idx + 1) > maxIdx)
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	3301      	adds	r3, #1
 800aea2:	6a3a      	ldr	r2, [r7, #32]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d202      	bcs.n	800aeae <GetHeader+0x24>
        return BUFFER_E;
 800aea8:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800aeac:	e01e      	b.n	800aeec <GetHeader+0x62>

    *tag = input[idx++];
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	1c5a      	adds	r2, r3, #1
 800aeb2:	617a      	str	r2, [r7, #20]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	781a      	ldrb	r2, [r3, #0]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	701a      	strb	r2, [r3, #0]

    if (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)
 800aebe:	f107 0210 	add.w	r2, r7, #16
 800aec2:	f107 0114 	add.w	r1, r7, #20
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f7ff fef1 	bl	800acb4 <GetLength_ex>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	da02      	bge.n	800aede <GetHeader+0x54>
        return ASN_PARSE_E;
 800aed8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800aedc:	e006      	b.n	800aeec <GetHeader+0x62>

    *len      = length;
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	601a      	str	r2, [r3, #0]
    return length;
 800aeea:	693b      	ldr	r3, [r7, #16]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <GetSequence>:

int GetSequence(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af02      	add	r7, sp, #8
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]
    return GetASNHeader(input, ASN_SEQUENCE | ASN_CONSTRUCTED, inOutIdx, len,
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	2130      	movs	r1, #48	; 0x30
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7ff ffa5 	bl	800ae5c <GetASNHeader>
 800af12:	4603      	mov	r3, r0
                        maxIdx);
}
 800af14:	4618      	mov	r0, r3
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <GetSet>:
}


int GetSet(const byte* input, word32* inOutIdx, int* len,
                        word32 maxIdx)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af02      	add	r7, sp, #8
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
    return GetASNHeader(input, ASN_SET | ASN_CONSTRUCTED, inOutIdx, len,
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	2131      	movs	r1, #49	; 0x31
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f7ff ff91 	bl	800ae5c <GetASNHeader>
 800af3a:	4603      	mov	r3, r0
                        maxIdx);
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <GetASNNull>:
 *         ASN_TAG_NULL_E when the NULL tag is not found.
 *         ASN_EXPECT_0_E when the length is not zero.
 *         Otherwise, 0 to indicate success.
 */
static int GetASNNull(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	617b      	str	r3, [r7, #20]
    byte   b;

    if ((idx + 2) > maxIdx)
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	3302      	adds	r3, #2
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d202      	bcs.n	800af66 <GetASNNull+0x22>
        return BUFFER_E;
 800af60:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800af64:	e01b      	b.n	800af9e <GetASNNull+0x5a>

    b = input[idx++];
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	617a      	str	r2, [r7, #20]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4413      	add	r3, r2
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	74fb      	strb	r3, [r7, #19]
    if (b != ASN_TAG_NULL)
 800af74:	7cfb      	ldrb	r3, [r7, #19]
 800af76:	2b05      	cmp	r3, #5
 800af78:	d002      	beq.n	800af80 <GetASNNull+0x3c>
        return ASN_TAG_NULL_E;
 800af7a:	f06f 0390 	mvn.w	r3, #144	; 0x90
 800af7e:	e00e      	b.n	800af9e <GetASNNull+0x5a>

    if (input[idx++] != 0)
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	617a      	str	r2, [r7, #20]
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	4413      	add	r3, r2
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <GetASNNull+0x52>
        return ASN_EXPECT_0_E;
 800af90:	f06f 0391 	mvn.w	r3, #145	; 0x91
 800af94:	e003      	b.n	800af9e <GetASNNull+0x5a>

    *inOutIdx = idx;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	601a      	str	r2, [r3, #0]
    return 0;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	371c      	adds	r7, #28
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <SetASNNull>:
 *
 * output  Buffer to write into.
 * returns the number of bytes added to the buffer.
 */
static int SetASNNull(byte* output)
{
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
    output[0] = ASN_TAG_NULL;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2205      	movs	r2, #5
 800afb6:	701a      	strb	r2, [r3, #0]
    output[1] = 0;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3301      	adds	r3, #1
 800afbc:	2200      	movs	r2, #0
 800afbe:	701a      	strb	r2, [r3, #0]

    return 2;
 800afc0:	2302      	movs	r3, #2
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <GetBoolean>:
 * returns BUFFER_E when there is not enough data to parse.
 *         ASN_PARSE_E when the BOOLEAN tag is not found or length is not 1.
 *         Otherwise, 0 to indicate the value was false and 1 to indicate true.
 */
static int GetBoolean(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800afce:	b480      	push	{r7}
 800afd0:	b087      	sub	sp, #28
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	617b      	str	r3, [r7, #20]
    byte   b;

    if ((idx + 3) > maxIdx)
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	3303      	adds	r3, #3
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d202      	bcs.n	800aff0 <GetBoolean+0x22>
        return BUFFER_E;
 800afea:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800afee:	e027      	b.n	800b040 <GetBoolean+0x72>

    b = input[idx++];
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	1c5a      	adds	r2, r3, #1
 800aff4:	617a      	str	r2, [r7, #20]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	4413      	add	r3, r2
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	74fb      	strb	r3, [r7, #19]
    if (b != ASN_BOOLEAN)
 800affe:	7cfb      	ldrb	r3, [r7, #19]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d002      	beq.n	800b00a <GetBoolean+0x3c>
        return ASN_PARSE_E;
 800b004:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b008:	e01a      	b.n	800b040 <GetBoolean+0x72>

    if (input[idx++] != 1)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	617a      	str	r2, [r7, #20]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	4413      	add	r3, r2
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d002      	beq.n	800b020 <GetBoolean+0x52>
        return ASN_PARSE_E;
 800b01a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b01e:	e00f      	b.n	800b040 <GetBoolean+0x72>

    b = input[idx++] != 0;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	617a      	str	r2, [r7, #20]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	4413      	add	r3, r2
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	bf14      	ite	ne
 800b030:	2301      	movne	r3, #1
 800b032:	2300      	moveq	r3, #0
 800b034:	b2db      	uxtb	r3, r3
 800b036:	74fb      	strb	r3, [r7, #19]

    *inOutIdx = idx;
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	601a      	str	r2, [r3, #0]
    return b;
 800b03e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b040:	4618      	mov	r0, r3
 800b042:	371c      	adds	r7, #28
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <GetOctetString>:
 *         invalid.
 *         Otherwise, the number of bytes in the ASN.1 data.
 */
int GetOctetString(const byte* input, word32* inOutIdx, int* len,
                          word32 maxIdx)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af02      	add	r7, sp, #8
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
    return GetASNHeader(input, ASN_OCTET_STRING, inOutIdx, len, maxIdx);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	2104      	movs	r1, #4
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7ff fef9 	bl	800ae5c <GetASNHeader>
 800b06a:	4603      	mov	r3, r0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <GetASNInt>:
 *         or invalid use of or missing leading zero.
 *         Otherwise, 0 to indicate success.
 */
static int GetASNInt(const byte* input, word32* inOutIdx, int* len,
                     word32 maxIdx)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af02      	add	r7, sp, #8
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
 800b080:	603b      	str	r3, [r7, #0]
    int    ret;

    ret = GetASNHeader(input, ASN_INTEGER, inOutIdx, len, maxIdx);
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	2102      	movs	r1, #2
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f7ff fee5 	bl	800ae5c <GetASNHeader>
 800b092:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	da01      	bge.n	800b09e <GetASNInt+0x2a>
        return ret;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	e03f      	b.n	800b11e <GetASNInt+0xaa>

    if (*len > 0) {
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dd3a      	ble.n	800b11c <GetASNInt+0xa8>

#ifndef WOLFSSL_ASN_INT_LEAD_0_ANY
        /* check for invalid padding on negative integer.
         * c.f. X.690 (ISO/IEC 8825-2:2003 (E)) 10.4.6; RFC 5280 4.1
         */
        if (*len > 1) {
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	dd12      	ble.n	800b0d4 <GetASNInt+0x60>
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2bff      	cmp	r3, #255	; 0xff
 800b0ba:	d10b      	bne.n	800b0d4 <GetASNInt+0x60>
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	b25b      	sxtb	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	da02      	bge.n	800b0d4 <GetASNInt+0x60>
                return ASN_PARSE_E;
 800b0ce:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b0d2:	e024      	b.n	800b11e <GetASNInt+0xaa>
        }
#endif

        /* remove leading zero, unless there is only one 0x00 byte */
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	4413      	add	r3, r2
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d11c      	bne.n	800b11c <GetASNInt+0xa8>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	dd18      	ble.n	800b11c <GetASNInt+0xa8>
            (*inOutIdx)++;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	601a      	str	r2, [r3, #0]
            (*len)--;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	1e5a      	subs	r2, r3, #1
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	601a      	str	r2, [r3, #0]

#ifndef WOLFSSL_ASN_INT_LEAD_0_ANY
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	dd0a      	ble.n	800b11c <GetASNInt+0xa8>
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	4413      	add	r3, r2
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	b25b      	sxtb	r3, r3
 800b112:	2b00      	cmp	r3, #0
 800b114:	db02      	blt.n	800b11c <GetASNInt+0xa8>
                return ASN_PARSE_E;
 800b116:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b11a:	e000      	b.n	800b11e <GetASNInt+0xaa>
#endif
        }
    }

    return 0;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <GetInteger7Bit>:
 * returns BUFFER_E when there is not enough data to parse.
 *         ASN_PARSE_E when the INTEGER tag is not found or length is invalid.
 *         Otherwise, the 7-bit value.
 */
static int GetInteger7Bit(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b086      	sub	sp, #24
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	60b9      	str	r1, [r7, #8]
 800b130:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	617b      	str	r3, [r7, #20]
    byte   b;

    if ((idx + 3) > maxIdx)
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	3303      	adds	r3, #3
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d202      	bcs.n	800b148 <GetInteger7Bit+0x22>
        return BUFFER_E;
 800b142:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800b146:	e029      	b.n	800b19c <GetInteger7Bit+0x76>

    if (GetASNTag(input, &idx, &b, maxIdx) != 0)
 800b148:	f107 0213 	add.w	r2, r7, #19
 800b14c:	f107 0114 	add.w	r1, r7, #20
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7ff fe18 	bl	800ad88 <GetASNTag>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d002      	beq.n	800b164 <GetInteger7Bit+0x3e>
        return ASN_PARSE_E;
 800b15e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b162:	e01b      	b.n	800b19c <GetInteger7Bit+0x76>
    if (b != ASN_INTEGER)
 800b164:	7cfb      	ldrb	r3, [r7, #19]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d002      	beq.n	800b170 <GetInteger7Bit+0x4a>
        return ASN_PARSE_E;
 800b16a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b16e:	e015      	b.n	800b19c <GetInteger7Bit+0x76>
    if (input[idx++] != 1)
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	617a      	str	r2, [r7, #20]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	4413      	add	r3, r2
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d002      	beq.n	800b186 <GetInteger7Bit+0x60>
        return ASN_PARSE_E;
 800b180:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b184:	e00a      	b.n	800b19c <GetInteger7Bit+0x76>
    b = input[idx++];
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	1c5a      	adds	r2, r3, #1
 800b18a:	617a      	str	r2, [r7, #20]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	74fb      	strb	r3, [r7, #19]

    *inOutIdx = idx;
 800b194:	697a      	ldr	r2, [r7, #20]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	601a      	str	r2, [r3, #0]
    return b;
 800b19a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <GetMyVersion>:
#endif /* !NO_RSA && HAVE_USER_RSA && WOLFSSL_CERT_GEN */

/* Windows header clash for WinCE using GetVersion */
int GetMyVersion(const byte* input, word32* inOutIdx,
                               int* version, word32 maxIdx)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	617b      	str	r3, [r7, #20]
    byte   tag;

    if ((idx + MIN_VERSION_SZ) > maxIdx)
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	3303      	adds	r3, #3
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d202      	bcs.n	800b1c8 <GetMyVersion+0x24>
        return ASN_PARSE_E;
 800b1c2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b1c6:	e02c      	b.n	800b222 <GetMyVersion+0x7e>

    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 800b1c8:	f107 0213 	add.w	r2, r7, #19
 800b1cc:	f107 0114 	add.w	r1, r7, #20
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f7ff fdd8 	bl	800ad88 <GetASNTag>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d002      	beq.n	800b1e4 <GetMyVersion+0x40>
        return ASN_PARSE_E;
 800b1de:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b1e2:	e01e      	b.n	800b222 <GetMyVersion+0x7e>

    if (tag != ASN_INTEGER)
 800b1e4:	7cfb      	ldrb	r3, [r7, #19]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d002      	beq.n	800b1f0 <GetMyVersion+0x4c>
        return ASN_PARSE_E;
 800b1ea:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b1ee:	e018      	b.n	800b222 <GetMyVersion+0x7e>

    if (input[idx++] != 0x01)
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	617a      	str	r2, [r7, #20]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d002      	beq.n	800b206 <GetMyVersion+0x62>
        return ASN_VERSION_E;
 800b200:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800b204:	e00d      	b.n	800b222 <GetMyVersion+0x7e>

    *version  = input[idx++];
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	1c5a      	adds	r2, r3, #1
 800b20a:	617a      	str	r2, [r7, #20]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	4413      	add	r3, r2
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	461a      	mov	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	601a      	str	r2, [r3, #0]

    return *version;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <GetExplicitVersion>:
#endif /* !NO_PWDBASED */

/* May not have one, not an error */
static int GetExplicitVersion(const byte* input, word32* inOutIdx, int* version,
                              word32 maxIdx)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b088      	sub	sp, #32
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	607a      	str	r2, [r7, #4]
 800b236:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	61bb      	str	r3, [r7, #24]
    byte tag;

    WOLFSSL_ENTER("GetExplicitVersion");

    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 800b23e:	f107 0217 	add.w	r2, r7, #23
 800b242:	f107 0118 	add.w	r1, r7, #24
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f7ff fd9d 	bl	800ad88 <GetASNTag>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <GetExplicitVersion+0x30>
        return ASN_PARSE_E;
 800b254:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b258:	e023      	b.n	800b2a2 <GetExplicitVersion+0x78>

    if (tag == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED)) {
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
 800b25c:	2ba0      	cmp	r3, #160	; 0xa0
 800b25e:	d11c      	bne.n	800b29a <GetExplicitVersion+0x70>
        int ret;

        *inOutIdx = ++idx;  /* skip header */
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	3301      	adds	r3, #1
 800b264:	61bb      	str	r3, [r7, #24]
 800b266:	69ba      	ldr	r2, [r7, #24]
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	601a      	str	r2, [r3, #0]
        ret = GetMyVersion(input, inOutIdx, version, maxIdx);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff ff96 	bl	800b1a4 <GetMyVersion>
 800b278:	61f8      	str	r0, [r7, #28]
        if (ret >= 0) {
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	db0a      	blt.n	800b296 <GetExplicitVersion+0x6c>
            /* check if version is expected value rfc 5280 4.1 {0, 1, 2} */
            if (*version > MAX_X509_VERSION || *version < MIN_X509_VERSION) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b03      	cmp	r3, #3
 800b286:	dc03      	bgt.n	800b290 <GetExplicitVersion+0x66>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	da02      	bge.n	800b296 <GetExplicitVersion+0x6c>
                WOLFSSL_MSG("Unexpected certificate version");
                ret = ASN_VERSION_E;
 800b290:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800b294:	61fb      	str	r3, [r7, #28]
            }
        }
        return ret;
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	e003      	b.n	800b2a2 <GetExplicitVersion+0x78>
    }

    /* go back as is */
    *version = 0;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]

    return 0;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3720      	adds	r7, #32
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <GetInt>:

int GetInt(mp_int* mpi, const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b088      	sub	sp, #32
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	607a      	str	r2, [r7, #4]
 800b2b6:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	61bb      	str	r3, [r7, #24]
    int    ret;
    int    length;

    ret = GetASNInt(input, &idx, &length, maxIdx);
 800b2be:	f107 0214 	add.w	r2, r7, #20
 800b2c2:	f107 0118 	add.w	r1, r7, #24
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	68b8      	ldr	r0, [r7, #8]
 800b2ca:	f7ff fed3 	bl	800b074 <GetASNInt>
 800b2ce:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <GetInt+0x30>
        return ret;
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	e01f      	b.n	800b31a <GetInt+0x70>

    if (mp_init(mpi) != MP_OKAY)
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f00f fdc8 	bl	801ae70 <sp_init>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <GetInt+0x42>
        return MP_INIT_E;
 800b2e6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800b2ea:	e016      	b.n	800b31a <GetInt+0x70>

    if (mp_read_unsigned_bin(mpi, (byte*)input + idx, length) != 0) {
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f010 f882 	bl	801b400 <sp_read_unsigned_bin>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d005      	beq.n	800b30e <GetInt+0x64>
        mp_clear(mpi);
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f00f fe65 	bl	801afd2 <sp_clear>
        return ASN_GETINT_E;
 800b308:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 800b30c:	e005      	b.n	800b31a <GetInt+0x70>
        mp_clear(mpi);
        return ASN_GETINT_E;
    }
#endif /* HAVE_WOLF_BIGINT */

    *inOutIdx = idx + length;
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	441a      	add	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]

    return 0;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3720      	adds	r7, #32
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <CheckBitString>:
#endif
#endif

int CheckBitString(const byte* input, word32* inOutIdx, int* len,
                          word32 maxIdx, int zeroBits, byte* unusedBits)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b088      	sub	sp, #32
 800b326:	af00      	add	r7, sp, #0
 800b328:	60f8      	str	r0, [r7, #12]
 800b32a:	60b9      	str	r1, [r7, #8]
 800b32c:	607a      	str	r2, [r7, #4]
 800b32e:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	61fb      	str	r3, [r7, #28]
    int    length;
    byte   b;

    if (GetASNTag(input, &idx, &b, maxIdx) != 0) {
 800b336:	f107 0217 	add.w	r2, r7, #23
 800b33a:	f107 011c 	add.w	r1, r7, #28
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7ff fd21 	bl	800ad88 <GetASNTag>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <CheckBitString+0x30>
        return ASN_BITSTR_E;
 800b34c:	f06f 0392 	mvn.w	r3, #146	; 0x92
 800b350:	e061      	b.n	800b416 <CheckBitString+0xf4>
    }

    if (b != ASN_BIT_STRING) {
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	2b03      	cmp	r3, #3
 800b356:	d002      	beq.n	800b35e <CheckBitString+0x3c>
        return ASN_BITSTR_E;
 800b358:	f06f 0392 	mvn.w	r3, #146	; 0x92
 800b35c:	e05b      	b.n	800b416 <CheckBitString+0xf4>
    }

    if (GetLength(input, &idx, &length, maxIdx) < 0)
 800b35e:	f107 0218 	add.w	r2, r7, #24
 800b362:	f107 011c 	add.w	r1, r7, #28
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7ff fc8f 	bl	800ac8c <GetLength>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	da02      	bge.n	800b37a <CheckBitString+0x58>
        return ASN_PARSE_E;
 800b374:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b378:	e04d      	b.n	800b416 <CheckBitString+0xf4>

    /* extra sanity check that length is greater than 0 */
    if (length <= 0) {
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dc02      	bgt.n	800b386 <CheckBitString+0x64>
        WOLFSSL_MSG("Error length was 0 in CheckBitString");
        return BUFFER_E;
 800b380:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800b384:	e047      	b.n	800b416 <CheckBitString+0xf4>
    }

    if (idx + 1 > maxIdx) {
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	3301      	adds	r3, #1
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d202      	bcs.n	800b396 <CheckBitString+0x74>
        WOLFSSL_MSG("Attempted buffer read larger than input buffer");
        return BUFFER_E;
 800b390:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800b394:	e03f      	b.n	800b416 <CheckBitString+0xf4>
    }

    b = input[idx];
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	4413      	add	r3, r2
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	75fb      	strb	r3, [r7, #23]
    if (zeroBits && b != 0x00)
 800b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d005      	beq.n	800b3b2 <CheckBitString+0x90>
 800b3a6:	7dfb      	ldrb	r3, [r7, #23]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <CheckBitString+0x90>
        return ASN_EXPECT_0_E;
 800b3ac:	f06f 0391 	mvn.w	r3, #145	; 0x91
 800b3b0:	e031      	b.n	800b416 <CheckBitString+0xf4>
    if (b >= 0x08)
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	2b07      	cmp	r3, #7
 800b3b6:	d902      	bls.n	800b3be <CheckBitString+0x9c>
        return ASN_PARSE_E;
 800b3b8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b3bc:	e02b      	b.n	800b416 <CheckBitString+0xf4>
    if (b != 0) {
 800b3be:	7dfb      	ldrb	r3, [r7, #23]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d012      	beq.n	800b3ea <CheckBitString+0xc8>
        if ((byte)(input[idx + length - 1] << (8 - b)) != 0)
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
 800b3d6:	f1c3 0308 	rsb	r3, r3, #8
 800b3da:	fa02 f303 	lsl.w	r3, r2, r3
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <CheckBitString+0xc8>
            return ASN_PARSE_E;
 800b3e4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b3e8:	e015      	b.n	800b416 <CheckBitString+0xf4>
    }
    idx++;
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	61fb      	str	r3, [r7, #28]
    length--; /* length has been checked for greater than 0 */
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	61bb      	str	r3, [r7, #24]

    *inOutIdx = idx;
 800b3f6:	69fa      	ldr	r2, [r7, #28]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	601a      	str	r2, [r3, #0]
    if (len != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d002      	beq.n	800b408 <CheckBitString+0xe6>
        *len = length;
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	601a      	str	r2, [r3, #0]
    if (unusedBits != NULL)
 800b408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d002      	beq.n	800b414 <CheckBitString+0xf2>
        *unusedBits = b;
 800b40e:	7dfa      	ldrb	r2, [r7, #23]
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	701a      	strb	r2, [r3, #0]

    return 0;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3720      	adds	r7, #32
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
	...

0800b420 <OidFromId>:
#endif


/* returns a pointer to the OID string on success and NULL on fail */
const byte* OidFromId(word32 id, word32 type, word32* oidSz)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
    const byte* oid = NULL;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]

    *oidSz = 0;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	601a      	str	r2, [r3, #0]

    switch (type) {
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b13      	cmp	r3, #19
 800b43a:	f200 82db 	bhi.w	800b9f4 <OidFromId+0x5d4>
 800b43e:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <OidFromId+0x24>)
 800b440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b444:	0800b495 	.word	0x0800b495
 800b448:	0800b4ad 	.word	0x0800b4ad
 800b44c:	0800b4d9 	.word	0x0800b4d9
 800b450:	0800b51b 	.word	0x0800b51b
 800b454:	0800b52b 	.word	0x0800b52b
 800b458:	0800b9f5 	.word	0x0800b9f5
 800b45c:	0800b63b 	.word	0x0800b63b
 800b460:	0800b897 	.word	0x0800b897
 800b464:	0800b8ad 	.word	0x0800b8ad
 800b468:	0800b8c3 	.word	0x0800b8c3
 800b46c:	0800b8d9 	.word	0x0800b8d9
 800b470:	0800b955 	.word	0x0800b955
 800b474:	0800b983 	.word	0x0800b983
 800b478:	0800b9c5 	.word	0x0800b9c5
 800b47c:	0800b96d 	.word	0x0800b96d
 800b480:	0800b9db 	.word	0x0800b9db
 800b484:	0800b9f5 	.word	0x0800b9f5
 800b488:	0800b9f5 	.word	0x0800b9f5
 800b48c:	0800b9f5 	.word	0x0800b9f5
 800b490:	0800b9f5 	.word	0x0800b9f5

        case oidHashType:
            switch (id) {
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800b49a:	d000      	beq.n	800b49e <OidFromId+0x7e>
                    oid = hashSha512hOid;
                    *oidSz = sizeof(hashSha512hOid);
                    break;
            #endif
            }
            break;
 800b49c:	e2af      	b.n	800b9fe <OidFromId+0x5de>
                    oid = hashSha256hOid;
 800b49e:	4bd2      	ldr	r3, [pc, #840]	; (800b7e8 <OidFromId+0x3c8>)
 800b4a0:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(hashSha256hOid);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2209      	movs	r2, #9
 800b4a6:	601a      	str	r2, [r3, #0]
                    break;
 800b4a8:	bf00      	nop
            break;
 800b4aa:	e2a8      	b.n	800b9fe <OidFromId+0x5de>

        case oidSigType:
            switch (id) {
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800b4b2:	d00a      	beq.n	800b4ca <OidFromId+0xaa>
 800b4b4:	f240 228f 	movw	r2, #655	; 0x28f
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d000      	beq.n	800b4be <OidFromId+0x9e>
                    oid = sigEd448Oid;
                    *oidSz = sizeof(sigEd448Oid);
                    break;
                #endif
                default:
                    break;
 800b4bc:	e00b      	b.n	800b4d6 <OidFromId+0xb6>
                    oid = sigSha256wRsaOid;
 800b4be:	4bcb      	ldr	r3, [pc, #812]	; (800b7ec <OidFromId+0x3cc>)
 800b4c0:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(sigSha256wRsaOid);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2209      	movs	r2, #9
 800b4c6:	601a      	str	r2, [r3, #0]
                    break;
 800b4c8:	e005      	b.n	800b4d6 <OidFromId+0xb6>
                    oid = sigSha256wEcdsaOid;
 800b4ca:	4bc9      	ldr	r3, [pc, #804]	; (800b7f0 <OidFromId+0x3d0>)
 800b4cc:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(sigSha256wEcdsaOid);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	601a      	str	r2, [r3, #0]
                    break;
 800b4d4:	bf00      	nop
            }
            break;
 800b4d6:	e292      	b.n	800b9fe <OidFromId+0x5de>

        case oidKeyType:
            switch (id) {
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f240 2285 	movw	r2, #645	; 0x285
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d008      	beq.n	800b4f4 <OidFromId+0xd4>
 800b4e2:	f240 2287 	movw	r2, #647	; 0x287
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d010      	beq.n	800b50c <OidFromId+0xec>
 800b4ea:	f240 2206 	movw	r2, #518	; 0x206
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d006      	beq.n	800b500 <OidFromId+0xe0>
                    oid = keyDhOid;
                    *oidSz = sizeof(keyDhOid);
                    break;
                #endif /* !NO_DH */
                default:
                    break;
 800b4f2:	e011      	b.n	800b518 <OidFromId+0xf8>
                    oid = keyRsaOid;
 800b4f4:	4bbf      	ldr	r3, [pc, #764]	; (800b7f4 <OidFromId+0x3d4>)
 800b4f6:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(keyRsaOid);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2209      	movs	r2, #9
 800b4fc:	601a      	str	r2, [r3, #0]
                    break;
 800b4fe:	e00b      	b.n	800b518 <OidFromId+0xf8>
                    oid = keyEcdsaOid;
 800b500:	4bbd      	ldr	r3, [pc, #756]	; (800b7f8 <OidFromId+0x3d8>)
 800b502:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(keyEcdsaOid);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2207      	movs	r2, #7
 800b508:	601a      	str	r2, [r3, #0]
                    break;
 800b50a:	e005      	b.n	800b518 <OidFromId+0xf8>
                    oid = keyDhOid;
 800b50c:	4bbb      	ldr	r3, [pc, #748]	; (800b7fc <OidFromId+0x3dc>)
 800b50e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(keyDhOid);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2209      	movs	r2, #9
 800b514:	601a      	str	r2, [r3, #0]
                    break;
 800b516:	bf00      	nop
            }
            break;
 800b518:	e271      	b.n	800b9fe <OidFromId+0x5de>

        #ifdef HAVE_ECC
        case oidCurveType:
            if (wc_ecc_get_oid(id, &oid, oidSz) < 0) {
 800b51a:	f107 0314 	add.w	r3, r7, #20
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	4619      	mov	r1, r3
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f005 fe82 	bl	801122c <wc_ecc_get_oid>
                WOLFSSL_MSG("ECC OID not found");
            }
            break;
 800b528:	e269      	b.n	800b9fe <OidFromId+0x5de>
        #endif /* HAVE_ECC */

        case oidBlkType:
            switch (id) {
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f5a3 73cf 	sub.w	r3, r3, #414	; 0x19e
 800b530:	2b2c      	cmp	r3, #44	; 0x2c
 800b532:	f200 8261 	bhi.w	800b9f8 <OidFromId+0x5d8>
 800b536:	a201      	add	r2, pc, #4	; (adr r2, 800b53c <OidFromId+0x11c>)
 800b538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53c:	0800b5f1 	.word	0x0800b5f1
 800b540:	0800b9f9 	.word	0x0800b9f9
 800b544:	0800b9f9 	.word	0x0800b9f9
 800b548:	0800b9f9 	.word	0x0800b9f9
 800b54c:	0800b615 	.word	0x0800b615
 800b550:	0800b9f9 	.word	0x0800b9f9
 800b554:	0800b9f9 	.word	0x0800b9f9
 800b558:	0800b9f9 	.word	0x0800b9f9
 800b55c:	0800b9f9 	.word	0x0800b9f9
 800b560:	0800b9f9 	.word	0x0800b9f9
 800b564:	0800b9f9 	.word	0x0800b9f9
 800b568:	0800b9f9 	.word	0x0800b9f9
 800b56c:	0800b9f9 	.word	0x0800b9f9
 800b570:	0800b9f9 	.word	0x0800b9f9
 800b574:	0800b9f9 	.word	0x0800b9f9
 800b578:	0800b9f9 	.word	0x0800b9f9
 800b57c:	0800b9f9 	.word	0x0800b9f9
 800b580:	0800b9f9 	.word	0x0800b9f9
 800b584:	0800b9f9 	.word	0x0800b9f9
 800b588:	0800b9f9 	.word	0x0800b9f9
 800b58c:	0800b5fd 	.word	0x0800b5fd
 800b590:	0800b9f9 	.word	0x0800b9f9
 800b594:	0800b9f9 	.word	0x0800b9f9
 800b598:	0800b9f9 	.word	0x0800b9f9
 800b59c:	0800b621 	.word	0x0800b621
 800b5a0:	0800b9f9 	.word	0x0800b9f9
 800b5a4:	0800b9f9 	.word	0x0800b9f9
 800b5a8:	0800b9f9 	.word	0x0800b9f9
 800b5ac:	0800b9f9 	.word	0x0800b9f9
 800b5b0:	0800b9f9 	.word	0x0800b9f9
 800b5b4:	0800b9f9 	.word	0x0800b9f9
 800b5b8:	0800b9f9 	.word	0x0800b9f9
 800b5bc:	0800b9f9 	.word	0x0800b9f9
 800b5c0:	0800b9f9 	.word	0x0800b9f9
 800b5c4:	0800b9f9 	.word	0x0800b9f9
 800b5c8:	0800b9f9 	.word	0x0800b9f9
 800b5cc:	0800b9f9 	.word	0x0800b9f9
 800b5d0:	0800b9f9 	.word	0x0800b9f9
 800b5d4:	0800b9f9 	.word	0x0800b9f9
 800b5d8:	0800b9f9 	.word	0x0800b9f9
 800b5dc:	0800b609 	.word	0x0800b609
 800b5e0:	0800b9f9 	.word	0x0800b9f9
 800b5e4:	0800b9f9 	.word	0x0800b9f9
 800b5e8:	0800b9f9 	.word	0x0800b9f9
 800b5ec:	0800b62d 	.word	0x0800b62d
    #ifdef HAVE_AES_CBC
        #ifdef WOLFSSL_AES_128
                case AES128CBCb:
                    oid = blkAes128CbcOid;
 800b5f0:	4b83      	ldr	r3, [pc, #524]	; (800b800 <OidFromId+0x3e0>)
 800b5f2:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes128CbcOid);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2209      	movs	r2, #9
 800b5f8:	601a      	str	r2, [r3, #0]
                    break;
 800b5fa:	e01d      	b.n	800b638 <OidFromId+0x218>
        #endif
        #ifdef WOLFSSL_AES_192
                case AES192CBCb:
                    oid = blkAes192CbcOid;
 800b5fc:	4b81      	ldr	r3, [pc, #516]	; (800b804 <OidFromId+0x3e4>)
 800b5fe:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes192CbcOid);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2209      	movs	r2, #9
 800b604:	601a      	str	r2, [r3, #0]
                    break;
 800b606:	e017      	b.n	800b638 <OidFromId+0x218>
        #endif
        #ifdef WOLFSSL_AES_256
                case AES256CBCb:
                    oid = blkAes256CbcOid;
 800b608:	4b7f      	ldr	r3, [pc, #508]	; (800b808 <OidFromId+0x3e8>)
 800b60a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes256CbcOid);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2209      	movs	r2, #9
 800b610:	601a      	str	r2, [r3, #0]
                    break;
 800b612:	e011      	b.n	800b638 <OidFromId+0x218>
        #endif
    #endif /* HAVE_AES_CBC */
    #ifdef HAVE_AESGCM
        #ifdef WOLFSSL_AES_128
                case AES128GCMb:
                    oid = blkAes128GcmOid;
 800b614:	4b7d      	ldr	r3, [pc, #500]	; (800b80c <OidFromId+0x3ec>)
 800b616:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes128GcmOid);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2209      	movs	r2, #9
 800b61c:	601a      	str	r2, [r3, #0]
                    break;
 800b61e:	e00b      	b.n	800b638 <OidFromId+0x218>
        #endif
        #ifdef WOLFSSL_AES_192
                case AES192GCMb:
                    oid = blkAes192GcmOid;
 800b620:	4b7b      	ldr	r3, [pc, #492]	; (800b810 <OidFromId+0x3f0>)
 800b622:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes192GcmOid);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2209      	movs	r2, #9
 800b628:	601a      	str	r2, [r3, #0]
                    break;
 800b62a:	e005      	b.n	800b638 <OidFromId+0x218>
        #endif
        #ifdef WOLFSSL_AES_256
                case AES256GCMb:
                    oid = blkAes256GcmOid;
 800b62c:	4b79      	ldr	r3, [pc, #484]	; (800b814 <OidFromId+0x3f4>)
 800b62e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes256GcmOid);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2209      	movs	r2, #9
 800b634:	601a      	str	r2, [r3, #0]
                    break;
 800b636:	bf00      	nop
                    oid = blkDes3CbcOid;
                    *oidSz = sizeof(blkDes3CbcOid);
                    break;
    #endif /* !NO_DES3 */
            }
            break;
 800b638:	e1de      	b.n	800b9f8 <OidFromId+0x5d8>
            }
            break;
        #endif /* HAVE_OCSP */

        case oidCertExtType:
            switch (id) {
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3b45      	subs	r3, #69	; 0x45
 800b63e:	2b63      	cmp	r3, #99	; 0x63
 800b640:	f200 81dc 	bhi.w	800b9fc <OidFromId+0x5dc>
 800b644:	a201      	add	r2, pc, #4	; (adr r2, 800b64c <OidFromId+0x22c>)
 800b646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64a:	bf00      	nop
 800b64c:	0800b835 	.word	0x0800b835
 800b650:	0800b9fd 	.word	0x0800b9fd
 800b654:	0800b9fd 	.word	0x0800b9fd
 800b658:	0800b9fd 	.word	0x0800b9fd
 800b65c:	0800b9fd 	.word	0x0800b9fd
 800b660:	0800b9fd 	.word	0x0800b9fd
 800b664:	0800b9fd 	.word	0x0800b9fd
 800b668:	0800b9fd 	.word	0x0800b9fd
 800b66c:	0800b9fd 	.word	0x0800b9fd
 800b670:	0800b9fd 	.word	0x0800b9fd
 800b674:	0800b9fd 	.word	0x0800b9fd
 800b678:	0800b9fd 	.word	0x0800b9fd
 800b67c:	0800b9fd 	.word	0x0800b9fd
 800b680:	0800b9fd 	.word	0x0800b9fd
 800b684:	0800b9fd 	.word	0x0800b9fd
 800b688:	0800b9fd 	.word	0x0800b9fd
 800b68c:	0800b9fd 	.word	0x0800b9fd
 800b690:	0800b9fd 	.word	0x0800b9fd
 800b694:	0800b9fd 	.word	0x0800b9fd
 800b698:	0800b9fd 	.word	0x0800b9fd
 800b69c:	0800b9fd 	.word	0x0800b9fd
 800b6a0:	0800b9fd 	.word	0x0800b9fd
 800b6a4:	0800b9fd 	.word	0x0800b9fd
 800b6a8:	0800b9fd 	.word	0x0800b9fd
 800b6ac:	0800b9fd 	.word	0x0800b9fd
 800b6b0:	0800b9fd 	.word	0x0800b9fd
 800b6b4:	0800b9fd 	.word	0x0800b9fd
 800b6b8:	0800b9fd 	.word	0x0800b9fd
 800b6bc:	0800b9fd 	.word	0x0800b9fd
 800b6c0:	0800b9fd 	.word	0x0800b9fd
 800b6c4:	0800b9fd 	.word	0x0800b9fd
 800b6c8:	0800b9fd 	.word	0x0800b9fd
 800b6cc:	0800b9fd 	.word	0x0800b9fd
 800b6d0:	0800b9fd 	.word	0x0800b9fd
 800b6d4:	0800b9fd 	.word	0x0800b9fd
 800b6d8:	0800b9fd 	.word	0x0800b9fd
 800b6dc:	0800b9fd 	.word	0x0800b9fd
 800b6e0:	0800b9fd 	.word	0x0800b9fd
 800b6e4:	0800b9fd 	.word	0x0800b9fd
 800b6e8:	0800b9fd 	.word	0x0800b9fd
 800b6ec:	0800b9fd 	.word	0x0800b9fd
 800b6f0:	0800b9fd 	.word	0x0800b9fd
 800b6f4:	0800b9fd 	.word	0x0800b9fd
 800b6f8:	0800b9fd 	.word	0x0800b9fd
 800b6fc:	0800b9fd 	.word	0x0800b9fd
 800b700:	0800b9fd 	.word	0x0800b9fd
 800b704:	0800b9fd 	.word	0x0800b9fd
 800b708:	0800b9fd 	.word	0x0800b9fd
 800b70c:	0800b9fd 	.word	0x0800b9fd
 800b710:	0800b9fd 	.word	0x0800b9fd
 800b714:	0800b9fd 	.word	0x0800b9fd
 800b718:	0800b9fd 	.word	0x0800b9fd
 800b71c:	0800b9fd 	.word	0x0800b9fd
 800b720:	0800b9fd 	.word	0x0800b9fd
 800b724:	0800b9fd 	.word	0x0800b9fd
 800b728:	0800b9fd 	.word	0x0800b9fd
 800b72c:	0800b9fd 	.word	0x0800b9fd
 800b730:	0800b9fd 	.word	0x0800b9fd
 800b734:	0800b9fd 	.word	0x0800b9fd
 800b738:	0800b84d 	.word	0x0800b84d
 800b73c:	0800b865 	.word	0x0800b865
 800b740:	0800b9fd 	.word	0x0800b9fd
 800b744:	0800b81d 	.word	0x0800b81d
 800b748:	0800b9fd 	.word	0x0800b9fd
 800b74c:	0800b7dd 	.word	0x0800b7dd
 800b750:	0800b9fd 	.word	0x0800b9fd
 800b754:	0800b9fd 	.word	0x0800b9fd
 800b758:	0800b9fd 	.word	0x0800b9fd
 800b75c:	0800b9fd 	.word	0x0800b9fd
 800b760:	0800b9fd 	.word	0x0800b9fd
 800b764:	0800b9fd 	.word	0x0800b9fd
 800b768:	0800b9fd 	.word	0x0800b9fd
 800b76c:	0800b9fd 	.word	0x0800b9fd
 800b770:	0800b9fd 	.word	0x0800b9fd
 800b774:	0800b9fd 	.word	0x0800b9fd
 800b778:	0800b889 	.word	0x0800b889
 800b77c:	0800b829 	.word	0x0800b829
 800b780:	0800b859 	.word	0x0800b859
 800b784:	0800b9fd 	.word	0x0800b9fd
 800b788:	0800b9fd 	.word	0x0800b9fd
 800b78c:	0800b841 	.word	0x0800b841
 800b790:	0800b9fd 	.word	0x0800b9fd
 800b794:	0800b87d 	.word	0x0800b87d
 800b798:	0800b9fd 	.word	0x0800b9fd
 800b79c:	0800b9fd 	.word	0x0800b9fd
 800b7a0:	0800b9fd 	.word	0x0800b9fd
 800b7a4:	0800b9fd 	.word	0x0800b9fd
 800b7a8:	0800b9fd 	.word	0x0800b9fd
 800b7ac:	0800b9fd 	.word	0x0800b9fd
 800b7b0:	0800b9fd 	.word	0x0800b9fd
 800b7b4:	0800b9fd 	.word	0x0800b9fd
 800b7b8:	0800b9fd 	.word	0x0800b9fd
 800b7bc:	0800b9fd 	.word	0x0800b9fd
 800b7c0:	0800b9fd 	.word	0x0800b9fd
 800b7c4:	0800b9fd 	.word	0x0800b9fd
 800b7c8:	0800b9fd 	.word	0x0800b9fd
 800b7cc:	0800b9fd 	.word	0x0800b9fd
 800b7d0:	0800b9fd 	.word	0x0800b9fd
 800b7d4:	0800b9fd 	.word	0x0800b9fd
 800b7d8:	0800b871 	.word	0x0800b871
                case BASIC_CA_OID:
                    oid = extBasicCaOid;
 800b7dc:	4b0e      	ldr	r3, [pc, #56]	; (800b818 <OidFromId+0x3f8>)
 800b7de:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extBasicCaOid);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2203      	movs	r2, #3
 800b7e4:	601a      	str	r2, [r3, #0]
                    break;
 800b7e6:	e055      	b.n	800b894 <OidFromId+0x474>
 800b7e8:	0801e498 	.word	0x0801e498
 800b7ec:	0801e4ac 	.word	0x0801e4ac
 800b7f0:	0801e4b8 	.word	0x0801e4b8
 800b7f4:	0801e4c0 	.word	0x0801e4c0
 800b7f8:	0801e4cc 	.word	0x0801e4cc
 800b7fc:	0801e4d4 	.word	0x0801e4d4
 800b800:	0801e4e0 	.word	0x0801e4e0
 800b804:	0801e4ec 	.word	0x0801e4ec
 800b808:	0801e4f8 	.word	0x0801e4f8
 800b80c:	0801e504 	.word	0x0801e504
 800b810:	0801e510 	.word	0x0801e510
 800b814:	0801e51c 	.word	0x0801e51c
 800b818:	0801e554 	.word	0x0801e554
                case ALT_NAMES_OID:
                    oid = extAltNamesOid;
 800b81c:	4b7a      	ldr	r3, [pc, #488]	; (800ba08 <OidFromId+0x5e8>)
 800b81e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAltNamesOid);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2203      	movs	r2, #3
 800b824:	601a      	str	r2, [r3, #0]
                    break;
 800b826:	e035      	b.n	800b894 <OidFromId+0x474>
                case CRL_DIST_OID:
                    oid = extCrlDistOid;
 800b828:	4b78      	ldr	r3, [pc, #480]	; (800ba0c <OidFromId+0x5ec>)
 800b82a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCrlDistOid);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2203      	movs	r2, #3
 800b830:	601a      	str	r2, [r3, #0]
                    break;
 800b832:	e02f      	b.n	800b894 <OidFromId+0x474>
                case AUTH_INFO_OID:
                    oid = extAuthInfoOid;
 800b834:	4b76      	ldr	r3, [pc, #472]	; (800ba10 <OidFromId+0x5f0>)
 800b836:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoOid);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2208      	movs	r2, #8
 800b83c:	601a      	str	r2, [r3, #0]
                    break;
 800b83e:	e029      	b.n	800b894 <OidFromId+0x474>
                case AUTH_KEY_OID:
                    oid = extAuthKeyOid;
 800b840:	4b74      	ldr	r3, [pc, #464]	; (800ba14 <OidFromId+0x5f4>)
 800b842:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthKeyOid);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2203      	movs	r2, #3
 800b848:	601a      	str	r2, [r3, #0]
                    break;
 800b84a:	e023      	b.n	800b894 <OidFromId+0x474>
                case SUBJ_KEY_OID:
                    oid = extSubjKeyOid;
 800b84c:	4b72      	ldr	r3, [pc, #456]	; (800ba18 <OidFromId+0x5f8>)
 800b84e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extSubjKeyOid);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2203      	movs	r2, #3
 800b854:	601a      	str	r2, [r3, #0]
                    break;
 800b856:	e01d      	b.n	800b894 <OidFromId+0x474>
                case CERT_POLICY_OID:
                    oid = extCertPolicyOid;
 800b858:	4b70      	ldr	r3, [pc, #448]	; (800ba1c <OidFromId+0x5fc>)
 800b85a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCertPolicyOid);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2203      	movs	r2, #3
 800b860:	601a      	str	r2, [r3, #0]
                    break;
 800b862:	e017      	b.n	800b894 <OidFromId+0x474>
                case KEY_USAGE_OID:
                    oid = extKeyUsageOid;
 800b864:	4b6e      	ldr	r3, [pc, #440]	; (800ba20 <OidFromId+0x600>)
 800b866:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extKeyUsageOid);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2203      	movs	r2, #3
 800b86c:	601a      	str	r2, [r3, #0]
                    break;
 800b86e:	e011      	b.n	800b894 <OidFromId+0x474>
                case INHIBIT_ANY_OID:
                    oid = extInhibitAnyOid;
 800b870:	4b6c      	ldr	r3, [pc, #432]	; (800ba24 <OidFromId+0x604>)
 800b872:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extInhibitAnyOid);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2203      	movs	r2, #3
 800b878:	601a      	str	r2, [r3, #0]
                    break;
 800b87a:	e00b      	b.n	800b894 <OidFromId+0x474>
                case EXT_KEY_USAGE_OID:
                    oid = extExtKeyUsageOid;
 800b87c:	4b6a      	ldr	r3, [pc, #424]	; (800ba28 <OidFromId+0x608>)
 800b87e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageOid);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2203      	movs	r2, #3
 800b884:	601a      	str	r2, [r3, #0]
                    break;
 800b886:	e005      	b.n	800b894 <OidFromId+0x474>
            #ifndef IGNORE_NAME_CONSTRAINTS
                case NAME_CONS_OID:
                    oid = extNameConsOid;
 800b888:	4b68      	ldr	r3, [pc, #416]	; (800ba2c <OidFromId+0x60c>)
 800b88a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extNameConsOid);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2203      	movs	r2, #3
 800b890:	601a      	str	r2, [r3, #0]
                    break;
 800b892:	bf00      	nop
                    oid = ocspNoCheckOid;
                    *oidSz = sizeof(ocspNoCheckOid);
                    break;
            #endif
            }
            break;
 800b894:	e0b2      	b.n	800b9fc <OidFromId+0x5dc>
            }
            #endif
            break;

        case oidCertAuthInfoType:
            switch (id) {
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b75      	cmp	r3, #117	; 0x75
 800b89a:	d000      	beq.n	800b89e <OidFromId+0x47e>
                case AIA_CA_ISSUER_OID:
                    oid = extAuthInfoCaIssuerOid;
                    *oidSz = sizeof(extAuthInfoCaIssuerOid);
                    break;
            }
            break;
 800b89c:	e0af      	b.n	800b9fe <OidFromId+0x5de>
                    oid = extAuthInfoCaIssuerOid;
 800b89e:	4b64      	ldr	r3, [pc, #400]	; (800ba30 <OidFromId+0x610>)
 800b8a0:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoCaIssuerOid);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2208      	movs	r2, #8
 800b8a6:	601a      	str	r2, [r3, #0]
                    break;
 800b8a8:	bf00      	nop
            break;
 800b8aa:	e0a8      	b.n	800b9fe <OidFromId+0x5de>

        case oidCertPolicyType:
            switch (id) {
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b92      	cmp	r3, #146	; 0x92
 800b8b0:	d000      	beq.n	800b8b4 <OidFromId+0x494>
                case CP_ANY_OID:
                    oid = extCertPolicyAnyOid;
                    *oidSz = sizeof(extCertPolicyAnyOid);
                    break;
            }
            break;
 800b8b2:	e0a4      	b.n	800b9fe <OidFromId+0x5de>
                    oid = extCertPolicyAnyOid;
 800b8b4:	4b5f      	ldr	r3, [pc, #380]	; (800ba34 <OidFromId+0x614>)
 800b8b6:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCertPolicyAnyOid);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	601a      	str	r2, [r3, #0]
                    break;
 800b8be:	bf00      	nop
            break;
 800b8c0:	e09d      	b.n	800b9fe <OidFromId+0x5de>

        case oidCertAltNameType:
            switch (id) {
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2b4f      	cmp	r3, #79	; 0x4f
 800b8c6:	d000      	beq.n	800b8ca <OidFromId+0x4aa>
                case HW_NAME_OID:
                    oid = extAltNamesHwNameOid;
                    *oidSz = sizeof(extAltNamesHwNameOid);
                    break;
            }
            break;
 800b8c8:	e099      	b.n	800b9fe <OidFromId+0x5de>
                    oid = extAltNamesHwNameOid;
 800b8ca:	4b5b      	ldr	r3, [pc, #364]	; (800ba38 <OidFromId+0x618>)
 800b8cc:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAltNamesHwNameOid);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2208      	movs	r2, #8
 800b8d2:	601a      	str	r2, [r3, #0]
                    break;
 800b8d4:	bf00      	nop
            break;
 800b8d6:	e092      	b.n	800b9fe <OidFromId+0x5de>

        case oidCertKeyUseType:
            switch (id) {
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b4a      	cmp	r3, #74	; 0x4a
 800b8dc:	d027      	beq.n	800b92e <OidFromId+0x50e>
 800b8de:	2b4a      	cmp	r3, #74	; 0x4a
 800b8e0:	d806      	bhi.n	800b8f0 <OidFromId+0x4d0>
 800b8e2:	2b48      	cmp	r3, #72	; 0x48
 800b8e4:	d017      	beq.n	800b916 <OidFromId+0x4f6>
 800b8e6:	2b48      	cmp	r3, #72	; 0x48
 800b8e8:	d81b      	bhi.n	800b922 <OidFromId+0x502>
 800b8ea:	2b47      	cmp	r3, #71	; 0x47
 800b8ec:	d00d      	beq.n	800b90a <OidFromId+0x4ea>
                case EKU_OCSP_SIGN_OID:
                    oid = extExtKeyUsageOcspSignOid;
                    *oidSz = sizeof(extExtKeyUsageOcspSignOid);
                    break;
            }
            break;
 800b8ee:	e086      	b.n	800b9fe <OidFromId+0x5de>
            switch (id) {
 800b8f0:	2b4f      	cmp	r3, #79	; 0x4f
 800b8f2:	d028      	beq.n	800b946 <OidFromId+0x526>
 800b8f4:	2b97      	cmp	r3, #151	; 0x97
 800b8f6:	d002      	beq.n	800b8fe <OidFromId+0x4de>
 800b8f8:	2b4e      	cmp	r3, #78	; 0x4e
 800b8fa:	d01e      	beq.n	800b93a <OidFromId+0x51a>
            break;
 800b8fc:	e07f      	b.n	800b9fe <OidFromId+0x5de>
                    oid = extExtKeyUsageAnyOid;
 800b8fe:	4b4f      	ldr	r3, [pc, #316]	; (800ba3c <OidFromId+0x61c>)
 800b900:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageAnyOid);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2204      	movs	r2, #4
 800b906:	601a      	str	r2, [r3, #0]
                    break;
 800b908:	e023      	b.n	800b952 <OidFromId+0x532>
                    oid = extExtKeyUsageServerAuthOid;
 800b90a:	4b4d      	ldr	r3, [pc, #308]	; (800ba40 <OidFromId+0x620>)
 800b90c:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageServerAuthOid);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2208      	movs	r2, #8
 800b912:	601a      	str	r2, [r3, #0]
                    break;
 800b914:	e01d      	b.n	800b952 <OidFromId+0x532>
                    oid = extExtKeyUsageClientAuthOid;
 800b916:	4b4b      	ldr	r3, [pc, #300]	; (800ba44 <OidFromId+0x624>)
 800b918:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageClientAuthOid);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2208      	movs	r2, #8
 800b91e:	601a      	str	r2, [r3, #0]
                    break;
 800b920:	e017      	b.n	800b952 <OidFromId+0x532>
                    oid = extExtKeyUsageCodeSigningOid;
 800b922:	4b49      	ldr	r3, [pc, #292]	; (800ba48 <OidFromId+0x628>)
 800b924:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageCodeSigningOid);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2208      	movs	r2, #8
 800b92a:	601a      	str	r2, [r3, #0]
                    break;
 800b92c:	e011      	b.n	800b952 <OidFromId+0x532>
                    oid = extExtKeyUsageEmailProtectOid;
 800b92e:	4b47      	ldr	r3, [pc, #284]	; (800ba4c <OidFromId+0x62c>)
 800b930:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageEmailProtectOid);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2208      	movs	r2, #8
 800b936:	601a      	str	r2, [r3, #0]
                    break;
 800b938:	e00b      	b.n	800b952 <OidFromId+0x532>
                    oid = extExtKeyUsageTimestampOid;
 800b93a:	4b45      	ldr	r3, [pc, #276]	; (800ba50 <OidFromId+0x630>)
 800b93c:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageTimestampOid);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2208      	movs	r2, #8
 800b942:	601a      	str	r2, [r3, #0]
                    break;
 800b944:	e005      	b.n	800b952 <OidFromId+0x532>
                    oid = extExtKeyUsageOcspSignOid;
 800b946:	4b43      	ldr	r3, [pc, #268]	; (800ba54 <OidFromId+0x634>)
 800b948:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageOcspSignOid);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2208      	movs	r2, #8
 800b94e:	601a      	str	r2, [r3, #0]
                    break;
 800b950:	bf00      	nop
            break;
 800b952:	e054      	b.n	800b9fe <OidFromId+0x5de>

        case oidKdfType:
            switch (id) {
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 800b95a:	d000      	beq.n	800b95e <OidFromId+0x53e>
                case PBKDF2_OID:
                    oid = pbkdf2Oid;
                    *oidSz = sizeof(pbkdf2Oid);
                    break;
            }
            break;
 800b95c:	e04f      	b.n	800b9fe <OidFromId+0x5de>
                    oid = pbkdf2Oid;
 800b95e:	4b3e      	ldr	r3, [pc, #248]	; (800ba58 <OidFromId+0x638>)
 800b960:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(pbkdf2Oid);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2209      	movs	r2, #9
 800b966:	601a      	str	r2, [r3, #0]
                    break;
 800b968:	bf00      	nop
            break;
 800b96a:	e048      	b.n	800b9fe <OidFromId+0x5de>

        case oidPBEType:
            switch (id) {
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b0d      	cmp	r3, #13
 800b970:	d000      	beq.n	800b974 <OidFromId+0x554>
                case PBES2:
                    oid = pbes2;
                    *oidSz = sizeof(pbes2);
                    break;
            }
            break;
 800b972:	e044      	b.n	800b9fe <OidFromId+0x5de>
                    oid = pbes2;
 800b974:	4b39      	ldr	r3, [pc, #228]	; (800ba5c <OidFromId+0x63c>)
 800b976:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(pbes2);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2209      	movs	r2, #9
 800b97c:	601a      	str	r2, [r3, #0]
                    break;
 800b97e:	bf00      	nop
            break;
 800b980:	e03d      	b.n	800b9fe <OidFromId+0x5de>

        case oidKeyWrapType:
            switch (id) {
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f240 12b5 	movw	r2, #437	; 0x1b5
 800b988:	4293      	cmp	r3, r2
 800b98a:	d00e      	beq.n	800b9aa <OidFromId+0x58a>
 800b98c:	f240 12c9 	movw	r2, #457	; 0x1c9
 800b990:	4293      	cmp	r3, r2
 800b992:	d010      	beq.n	800b9b6 <OidFromId+0x596>
 800b994:	f240 12a1 	movw	r2, #417	; 0x1a1
 800b998:	4293      	cmp	r3, r2
 800b99a:	d000      	beq.n	800b99e <OidFromId+0x57e>
                    oid = wrapPwriKekOid;
                    *oidSz = sizeof(wrapPwriKekOid);
                    break;
            #endif
            }
            break;
 800b99c:	e02f      	b.n	800b9fe <OidFromId+0x5de>
                    oid = wrapAes128Oid;
 800b99e:	4b30      	ldr	r3, [pc, #192]	; (800ba60 <OidFromId+0x640>)
 800b9a0:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes128Oid);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2209      	movs	r2, #9
 800b9a6:	601a      	str	r2, [r3, #0]
                    break;
 800b9a8:	e00b      	b.n	800b9c2 <OidFromId+0x5a2>
                    oid = wrapAes192Oid;
 800b9aa:	4b2e      	ldr	r3, [pc, #184]	; (800ba64 <OidFromId+0x644>)
 800b9ac:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes192Oid);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2209      	movs	r2, #9
 800b9b2:	601a      	str	r2, [r3, #0]
                    break;
 800b9b4:	e005      	b.n	800b9c2 <OidFromId+0x5a2>
                    oid = wrapAes256Oid;
 800b9b6:	4b2c      	ldr	r3, [pc, #176]	; (800ba68 <OidFromId+0x648>)
 800b9b8:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes256Oid);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2209      	movs	r2, #9
 800b9be:	601a      	str	r2, [r3, #0]
                    break;
 800b9c0:	bf00      	nop
            break;
 800b9c2:	e01c      	b.n	800b9fe <OidFromId+0x5de>

        case oidCmsKeyAgreeType:
            switch (id) {
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2bbd      	cmp	r3, #189	; 0xbd
 800b9c8:	d000      	beq.n	800b9cc <OidFromId+0x5ac>
                    oid = dhSinglePass_stdDH_sha512kdf_Oid;
                    *oidSz = sizeof(dhSinglePass_stdDH_sha512kdf_Oid);
                    break;
            #endif
            }
            break;
 800b9ca:	e018      	b.n	800b9fe <OidFromId+0x5de>
                    oid = dhSinglePass_stdDH_sha256kdf_Oid;
 800b9cc:	4b27      	ldr	r3, [pc, #156]	; (800ba6c <OidFromId+0x64c>)
 800b9ce:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(dhSinglePass_stdDH_sha256kdf_Oid);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2206      	movs	r2, #6
 800b9d4:	601a      	str	r2, [r3, #0]
                    break;
 800b9d6:	bf00      	nop
            break;
 800b9d8:	e011      	b.n	800b9fe <OidFromId+0x5de>

#ifndef NO_HMAC
        case oidHmacType:
            switch (id) {
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f240 228d 	movw	r2, #653	; 0x28d
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d000      	beq.n	800b9e6 <OidFromId+0x5c6>
                    oid = hmacSha512Oid;
                    *oidSz = sizeof(hmacSha512Oid);
                    break;
        #endif
            }
            break;
 800b9e4:	e00b      	b.n	800b9fe <OidFromId+0x5de>
                    oid = hmacSha256Oid;
 800b9e6:	4b22      	ldr	r3, [pc, #136]	; (800ba70 <OidFromId+0x650>)
 800b9e8:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(hmacSha256Oid);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2208      	movs	r2, #8
 800b9ee:	601a      	str	r2, [r3, #0]
                    break;
 800b9f0:	bf00      	nop
            break;
 800b9f2:	e004      	b.n	800b9fe <OidFromId+0x5de>
            }
            break;
#endif
        case oidIgnoreType:
        default:
            break;
 800b9f4:	bf00      	nop
 800b9f6:	e002      	b.n	800b9fe <OidFromId+0x5de>
            break;
 800b9f8:	bf00      	nop
 800b9fa:	e000      	b.n	800b9fe <OidFromId+0x5de>
            break;
 800b9fc:	bf00      	nop
    }

    return oid;
 800b9fe:	697b      	ldr	r3, [r7, #20]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	0801e558 	.word	0x0801e558
 800ba0c:	0801e55c 	.word	0x0801e55c
 800ba10:	0801e560 	.word	0x0801e560
 800ba14:	0801e568 	.word	0x0801e568
 800ba18:	0801e56c 	.word	0x0801e56c
 800ba1c:	0801e570 	.word	0x0801e570
 800ba20:	0801e574 	.word	0x0801e574
 800ba24:	0801e578 	.word	0x0801e578
 800ba28:	0801e57c 	.word	0x0801e57c
 800ba2c:	0801e580 	.word	0x0801e580
 800ba30:	0801e584 	.word	0x0801e584
 800ba34:	0801e58c 	.word	0x0801e58c
 800ba38:	0801e590 	.word	0x0801e590
 800ba3c:	0801e598 	.word	0x0801e598
 800ba40:	0801e59c 	.word	0x0801e59c
 800ba44:	0801e5a4 	.word	0x0801e5a4
 800ba48:	0801e5ac 	.word	0x0801e5ac
 800ba4c:	0801e5b4 	.word	0x0801e5b4
 800ba50:	0801e5bc 	.word	0x0801e5bc
 800ba54:	0801e5c4 	.word	0x0801e5c4
 800ba58:	0801e5cc 	.word	0x0801e5cc
 800ba5c:	0801e5d8 	.word	0x0801e5d8
 800ba60:	0801e528 	.word	0x0801e528
 800ba64:	0801e534 	.word	0x0801e534
 800ba68:	0801e540 	.word	0x0801e540
 800ba6c:	0801e54c 	.word	0x0801e54c
 800ba70:	0801e4a4 	.word	0x0801e4a4

0800ba74 <GetASNObjectId>:
 *         ASN_PARSE_E when length is invalid.
 *         Otherwise, 0 to indicate success.
 */
int GetASNObjectId(const byte* input, word32* inOutIdx, int* len,
                          word32 maxIdx)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b088      	sub	sp, #32
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	61fb      	str	r3, [r7, #28]
    int    length;
    byte   tag;

    if ((idx + 1) > maxIdx)
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d202      	bcs.n	800ba98 <GetASNObjectId+0x24>
        return BUFFER_E;
 800ba92:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ba96:	e028      	b.n	800baea <GetASNObjectId+0x76>

    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 800ba98:	f107 0217 	add.w	r2, r7, #23
 800ba9c:	f107 011c 	add.w	r1, r7, #28
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff f970 	bl	800ad88 <GetASNTag>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d002      	beq.n	800bab4 <GetASNObjectId+0x40>
        return ASN_PARSE_E;
 800baae:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bab2:	e01a      	b.n	800baea <GetASNObjectId+0x76>

    if (tag != ASN_OBJECT_ID)
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	2b06      	cmp	r3, #6
 800bab8:	d002      	beq.n	800bac0 <GetASNObjectId+0x4c>
        return ASN_OBJECT_ID_E;
 800baba:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800babe:	e014      	b.n	800baea <GetASNObjectId+0x76>

    if (GetLength(input, &idx, &length, maxIdx) < 0)
 800bac0:	f107 0218 	add.w	r2, r7, #24
 800bac4:	f107 011c 	add.w	r1, r7, #28
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f7ff f8de 	bl	800ac8c <GetLength>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	da02      	bge.n	800badc <GetASNObjectId+0x68>
        return ASN_PARSE_E;
 800bad6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bada:	e006      	b.n	800baea <GetASNObjectId+0x76>

    *len = length;
 800badc:	69ba      	ldr	r2, [r7, #24]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
 800bae2:	69fa      	ldr	r2, [r7, #28]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	601a      	str	r2, [r3, #0]
    return 0;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3720      	adds	r7, #32
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <SetObjectId>:
 * len         Length of the OBJECT_ID data.
 * output      Buffer to write into.
 * returns the number of bytes added to the buffer.
 */
int SetObjectId(int len, byte* output)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]
    int idx = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]

    if (output)
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d008      	beq.n	800bb18 <SetObjectId+0x26>
        output[idx++] = ASN_OBJECT_ID;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	60fa      	str	r2, [r7, #12]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	4413      	add	r3, r2
 800bb12:	2206      	movs	r2, #6
 800bb14:	701a      	strb	r2, [r3, #0]
 800bb16:	e002      	b.n	800bb1e <SetObjectId+0x2c>
    else
        idx++;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	60fb      	str	r3, [r7, #12]
    idx += SetLength(len, output ? output + idx : NULL);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <SetObjectId+0x3c>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	e000      	b.n	800bb30 <SetObjectId+0x3e>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	4619      	mov	r1, r3
 800bb32:	f001 fb38 	bl	800d1a6 <SetLength>
 800bb36:	4602      	mov	r2, r0
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	60fb      	str	r3, [r7, #12]

    return idx;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <GetObjectId>:

int GetObjectId(const byte* input, word32* inOutIdx, word32* oid,
                                  word32 oidType, word32 maxIdx)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08c      	sub	sp, #48	; 0x30
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]
    int    ret = 0, length;
 800bb56:	2300      	movs	r3, #0
 800bb58:	62bb      	str	r3, [r7, #40]	; 0x28
    word32 idx = *inOutIdx;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	61bb      	str	r3, [r7, #24]
#ifndef NO_VERIFY_OID
    word32 actualOidSz = 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte* actualOid;
#endif /* NO_VERIFY_OID */

    (void)oidType;
    WOLFSSL_ENTER("GetObjectId()");
    *oid = 0;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]

    ret = GetASNObjectId(input, &idx, &length, maxIdx);
 800bb6a:	f107 021c 	add.w	r2, r7, #28
 800bb6e:	f107 0118 	add.w	r1, r7, #24
 800bb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f7ff ff7d 	bl	800ba74 <GetASNObjectId>
 800bb7a:	62b8      	str	r0, [r7, #40]	; 0x28
    if (ret != 0)
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <GetObjectId+0x3e>
        return ret;
 800bb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb84:	e03f      	b.n	800bc06 <GetObjectId+0xbe>

#ifndef NO_VERIFY_OID
    actualOid = &input[idx];
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	627b      	str	r3, [r7, #36]	; 0x24
    if (length > 0)
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	dd0e      	ble.n	800bbb2 <GetObjectId+0x6a>
        actualOidSz = (word32)length;
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* NO_VERIFY_OID */

    while (length--) {
 800bb98:	e00b      	b.n	800bbb2 <GetObjectId+0x6a>
        /* odd HC08 compiler behavior here when input[idx++] */
        *oid += (word32)input[idx];
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	68f9      	ldr	r1, [r7, #12]
 800bba2:	440a      	add	r2, r1
 800bba4:	7812      	ldrb	r2, [r2, #0]
 800bba6:	441a      	add	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]
        idx++;
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	61bb      	str	r3, [r7, #24]
    while (length--) {
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	1e5a      	subs	r2, r3, #1
 800bbb6:	61fa      	str	r2, [r7, #28]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1ee      	bne.n	800bb9a <GetObjectId+0x52>
    }
    /* just sum it up for now */

    *inOutIdx = idx;
 800bbbc:	69ba      	ldr	r2, [r7, #24]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	601a      	str	r2, [r3, #0]

#ifndef NO_VERIFY_OID
    {
        const byte* checkOid = NULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	623b      	str	r3, [r7, #32]
        word32 checkOidSz;
    #ifdef ASN_DUMP_OID
        word32 i;
    #endif

        if (oidType != oidIgnoreType) {
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b15      	cmp	r3, #21
 800bbca:	d01b      	beq.n	800bc04 <GetObjectId+0xbc>
            checkOid = OidFromId(*oid, oidType, &checkOidSz);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f107 0214 	add.w	r2, r7, #20
 800bbd4:	6839      	ldr	r1, [r7, #0]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff fc22 	bl	800b420 <OidFromId>
 800bbdc:	6238      	str	r0, [r7, #32]
                }
            }
            #endif /* HAVE_OID_DECODING */
        #endif /* ASN_DUMP_OID */

            if (checkOid != NULL &&
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00f      	beq.n	800bc04 <GetObjectId+0xbc>
                (checkOidSz != actualOidSz ||
 800bbe4:	697b      	ldr	r3, [r7, #20]
            if (checkOid != NULL &&
 800bbe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d108      	bne.n	800bbfe <GetObjectId+0xb6>
                    XMEMCMP(actualOid, checkOid, checkOidSz) != 0)) {
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	6a39      	ldr	r1, [r7, #32]
 800bbf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbf4:	f00f fefe 	bl	801b9f4 <memcmp>
 800bbf8:	4603      	mov	r3, r0
                (checkOidSz != actualOidSz ||
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d002      	beq.n	800bc04 <GetObjectId+0xbc>
                WOLFSSL_MSG("OID Check Failed");
                return ASN_UNKNOWN_OID_E;
 800bbfe:	f06f 0393 	mvn.w	r3, #147	; 0x93
 800bc02:	e000      	b.n	800bc06 <GetObjectId+0xbe>
            }
        }
    }
#endif /* NO_VERIFY_OID */

    return ret;
 800bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3730      	adds	r7, #48	; 0x30
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <SkipObjectId>:

static int SkipObjectId(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b088      	sub	sp, #32
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	60f8      	str	r0, [r7, #12]
 800bc16:	60b9      	str	r1, [r7, #8]
 800bc18:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	61bb      	str	r3, [r7, #24]
    int    length;
    int ret;

    ret = GetASNObjectId(input, &idx, &length, maxIdx);
 800bc20:	f107 0214 	add.w	r2, r7, #20
 800bc24:	f107 0118 	add.w	r1, r7, #24
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f7ff ff22 	bl	800ba74 <GetASNObjectId>
 800bc30:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <SkipObjectId+0x2e>
        return ret;
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	e007      	b.n	800bc4c <SkipObjectId+0x3e>

    idx += length;
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	4413      	add	r3, r2
 800bc42:	61bb      	str	r3, [r7, #24]
    *inOutIdx = idx;
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	601a      	str	r2, [r3, #0]

    return 0;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3720      	adds	r7, #32
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <GetAlgoId>:

int GetAlgoId(const byte* input, word32* inOutIdx, word32* oid,
                     word32 oidType, word32 maxIdx)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08c      	sub	sp, #48	; 0x30
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	603b      	str	r3, [r7, #0]
    int    length;
    word32 idx = *inOutIdx;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	61fb      	str	r3, [r7, #28]
    int    ret;
    *oid = 0;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]

    WOLFSSL_ENTER("GetAlgoId");

    if (GetSequence(input, &idx, &length, maxIdx) < 0)
 800bc6e:	f107 0220 	add.w	r2, r7, #32
 800bc72:	f107 011c 	add.w	r1, r7, #28
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f7ff f93b 	bl	800aef4 <GetSequence>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	da02      	bge.n	800bc8a <GetAlgoId+0x36>
        return ASN_PARSE_E;
 800bc84:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bc88:	e033      	b.n	800bcf2 <GetAlgoId+0x9e>

    if (GetObjectId(input, &idx, oid, oidType, maxIdx) < 0)
 800bc8a:	f107 011c 	add.w	r1, r7, #28
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f7ff ff56 	bl	800bb48 <GetObjectId>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da02      	bge.n	800bca8 <GetAlgoId+0x54>
        return ASN_OBJECT_ID_E;
 800bca2:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800bca6:	e024      	b.n	800bcf2 <GetAlgoId+0x9e>

    /* could have NULL tag and 0 terminator, but may not */
    if (idx < maxIdx) {
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d91c      	bls.n	800bcea <GetAlgoId+0x96>
        word32 localIdx = idx; /*use localIdx to not advance when checking tag*/
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	61bb      	str	r3, [r7, #24]
        byte   tag;

        if (GetASNTag(input, &localIdx, &tag, maxIdx) == 0) {
 800bcb4:	f107 0217 	add.w	r2, r7, #23
 800bcb8:	f107 0118 	add.w	r1, r7, #24
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff f862 	bl	800ad88 <GetASNTag>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d10f      	bne.n	800bcea <GetAlgoId+0x96>
            if (tag == ASN_TAG_NULL) {
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	2b05      	cmp	r3, #5
 800bcce:	d10c      	bne.n	800bcea <GetAlgoId+0x96>
                ret = GetASNNull(input, &idx, maxIdx);
 800bcd0:	f107 031c 	add.w	r3, r7, #28
 800bcd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f7ff f933 	bl	800af44 <GetASNNull>
 800bcde:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != 0)
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <GetAlgoId+0x96>
                    return ret;
 800bce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce8:	e003      	b.n	800bcf2 <GetAlgoId+0x9e>
            }
        }
    }

    *inOutIdx = idx;
 800bcea:	69fa      	ldr	r2, [r7, #28]
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	601a      	str	r2, [r3, #0]

    return 0;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3728      	adds	r7, #40	; 0x28
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <wc_RsaPrivateKeyDecode>:
#ifndef NO_RSA

#ifndef HAVE_USER_RSA
int wc_RsaPrivateKeyDecode(const byte* input, word32* inOutIdx, RsaKey* key,
                        word32 inSz)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b086      	sub	sp, #24
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	60f8      	str	r0, [r7, #12]
 800bd02:	60b9      	str	r1, [r7, #8]
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	603b      	str	r3, [r7, #0]
    int version, length;

    if (inOutIdx == NULL || input == NULL || key == NULL) {
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d005      	beq.n	800bd1a <wc_RsaPrivateKeyDecode+0x20>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d002      	beq.n	800bd1a <wc_RsaPrivateKeyDecode+0x20>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d102      	bne.n	800bd20 <wc_RsaPrivateKeyDecode+0x26>
        return BAD_FUNC_ARG;
 800bd1a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800bd1e:	e07e      	b.n	800be1e <wc_RsaPrivateKeyDecode+0x124>
    }
    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800bd20:	f107 0210 	add.w	r2, r7, #16
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f7ff f8e3 	bl	800aef4 <GetSequence>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	da02      	bge.n	800bd3a <wc_RsaPrivateKeyDecode+0x40>
        return ASN_PARSE_E;
 800bd34:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bd38:	e071      	b.n	800be1e <wc_RsaPrivateKeyDecode+0x124>

    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 800bd3a:	f107 0214 	add.w	r2, r7, #20
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	68b9      	ldr	r1, [r7, #8]
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f7ff fa2e 	bl	800b1a4 <GetMyVersion>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	da02      	bge.n	800bd54 <wc_RsaPrivateKeyDecode+0x5a>
        return ASN_PARSE_E;
 800bd4e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bd52:	e064      	b.n	800be1e <wc_RsaPrivateKeyDecode+0x124>

    key->type = RSA_PRIVATE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 800bd5a:	3308      	adds	r3, #8
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	601a      	str	r2, [r3, #0]

    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	68f9      	ldr	r1, [r7, #12]
 800bd68:	f7ff fa9f 	bl	800b2aa <GetInt>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	db2b      	blt.n	800bdca <wc_RsaPrivateKeyDecode+0xd0>
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	68f9      	ldr	r1, [r7, #12]
 800bd7e:	f7ff fa94 	bl	800b2aa <GetInt>
 800bd82:	4603      	mov	r3, r0
    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	db20      	blt.n	800bdca <wc_RsaPrivateKeyDecode+0xd0>
#ifndef WOLFSSL_RSA_PUBLIC_ONLY
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f503 60c3 	add.w	r0, r3, #1560	; 0x618
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	68f9      	ldr	r1, [r7, #12]
 800bd94:	f7ff fa89 	bl	800b2aa <GetInt>
 800bd98:	4603      	mov	r3, r0
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	db15      	blt.n	800bdca <wc_RsaPrivateKeyDecode+0xd0>
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f603 1024 	addw	r0, r3, #2340	; 0x924
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	68f9      	ldr	r1, [r7, #12]
 800bdaa:	f7ff fa7e 	bl	800b2aa <GetInt>
 800bdae:	4603      	mov	r3, r0
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	db0a      	blt.n	800bdca <wc_RsaPrivateKeyDecode+0xd0>
        GetInt(&key->q,  input, inOutIdx, inSz) < 0)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f503 6043 	add.w	r0, r3, #3120	; 0xc30
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	68f9      	ldr	r1, [r7, #12]
 800bdc0:	f7ff fa73 	bl	800b2aa <GetInt>
 800bdc4:	4603      	mov	r3, r0
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	da02      	bge.n	800bdd0 <wc_RsaPrivateKeyDecode+0xd6>
        SkipInt(input, inOutIdx, inSz) < 0 ||
        SkipInt(input, inOutIdx, inSz) < 0 ||
        SkipInt(input, inOutIdx, inSz) < 0 )

#endif
            return ASN_RSA_KEY_E;
 800bdca:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 800bdce:	e026      	b.n	800be1e <wc_RsaPrivateKeyDecode+0x124>
#if (defined(WOLFSSL_KEY_GEN) || defined(OPENSSL_EXTRA) || !defined(RSA_LOW_MEM)) \
    && !defined(WOLFSSL_RSA_PUBLIC_ONLY)
    if (GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f603 703c 	addw	r0, r3, #3900	; 0xf3c
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	68f9      	ldr	r1, [r7, #12]
 800bddc:	f7ff fa65 	bl	800b2aa <GetInt>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	db17      	blt.n	800be16 <wc_RsaPrivateKeyDecode+0x11c>
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f503 5092 	add.w	r0, r3, #4672	; 0x1240
 800bdec:	3008      	adds	r0, #8
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	68f9      	ldr	r1, [r7, #12]
 800bdf4:	f7ff fa59 	bl	800b2aa <GetInt>
 800bdf8:	4603      	mov	r3, r0
    if (GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	db0b      	blt.n	800be16 <wc_RsaPrivateKeyDecode+0x11c>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f503 50aa 	add.w	r0, r3, #5440	; 0x1540
 800be04:	3014      	adds	r0, #20
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	68f9      	ldr	r1, [r7, #12]
 800be0c:	f7ff fa4d 	bl	800b2aa <GetInt>
 800be10:	4603      	mov	r3, r0
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
 800be12:	2b00      	cmp	r3, #0
 800be14:	da02      	bge.n	800be1c <wc_RsaPrivateKeyDecode+0x122>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
 800be16:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 800be1a:	e000      	b.n	800be1e <wc_RsaPrivateKeyDecode+0x124>
    if (wc_InitRsaHw(key) != 0) {
        return BAD_STATE_E;
    }
#endif

    return 0;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <ToTraditionalInline_ex>:

/* Remove PKCS8 header, place inOutIdx at beginning of traditional,
 * return traditional length on success, negative on error */
int ToTraditionalInline_ex(const byte* input, word32* inOutIdx, word32 sz,
                           word32* algId)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b08c      	sub	sp, #48	; 0x30
 800be2a:	af02      	add	r7, sp, #8
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	607a      	str	r2, [r7, #4]
 800be32:	603b      	str	r3, [r7, #0]
    word32 idx;
    int    version, length;
    int    ret;
    byte   tag;

    if (input == NULL || inOutIdx == NULL)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <ToTraditionalInline_ex+0x1a>
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d102      	bne.n	800be46 <ToTraditionalInline_ex+0x20>
        return BAD_FUNC_ARG;
 800be40:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800be44:	e065      	b.n	800bf12 <ToTraditionalInline_ex+0xec>

    idx = *inOutIdx;
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	623b      	str	r3, [r7, #32]

    if (GetSequence(input, &idx, &length, sz) < 0)
 800be4c:	f107 0218 	add.w	r2, r7, #24
 800be50:	f107 0120 	add.w	r1, r7, #32
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f7ff f84c 	bl	800aef4 <GetSequence>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	da02      	bge.n	800be68 <ToTraditionalInline_ex+0x42>
        return ASN_PARSE_E;
 800be62:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800be66:	e054      	b.n	800bf12 <ToTraditionalInline_ex+0xec>

    if (GetMyVersion(input, &idx, &version, sz) < 0)
 800be68:	f107 021c 	add.w	r2, r7, #28
 800be6c:	f107 0120 	add.w	r1, r7, #32
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f7ff f996 	bl	800b1a4 <GetMyVersion>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	da02      	bge.n	800be84 <ToTraditionalInline_ex+0x5e>
        return ASN_PARSE_E;
 800be7e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800be82:	e046      	b.n	800bf12 <ToTraditionalInline_ex+0xec>

    if (GetAlgoId(input, &idx, algId, oidKeyType, sz) < 0)
 800be84:	f107 0120 	add.w	r1, r7, #32
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	2302      	movs	r3, #2
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff fedf 	bl	800bc54 <GetAlgoId>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	da02      	bge.n	800bea2 <ToTraditionalInline_ex+0x7c>
        return ASN_PARSE_E;
 800be9c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bea0:	e037      	b.n	800bf12 <ToTraditionalInline_ex+0xec>

    if (GetASNTag(input, &idx, &tag, sz) < 0)
 800bea2:	f107 0217 	add.w	r2, r7, #23
 800bea6:	f107 0120 	add.w	r1, r7, #32
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7fe ff6b 	bl	800ad88 <GetASNTag>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	da02      	bge.n	800bebe <ToTraditionalInline_ex+0x98>
        return ASN_PARSE_E;
 800beb8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bebc:	e029      	b.n	800bf12 <ToTraditionalInline_ex+0xec>
    idx = idx - 1; /* reset idx after finding tag */
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	3b01      	subs	r3, #1
 800bec2:	623b      	str	r3, [r7, #32]

    if (tag == ASN_OBJECT_ID) {
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	2b06      	cmp	r3, #6
 800bec8:	d10c      	bne.n	800bee4 <ToTraditionalInline_ex+0xbe>
        if (SkipObjectId(input, &idx, sz) < 0)
 800beca:	f107 0320 	add.w	r3, r7, #32
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	4619      	mov	r1, r3
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7ff fe9b 	bl	800bc0e <SkipObjectId>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	da02      	bge.n	800bee4 <ToTraditionalInline_ex+0xbe>
            return ASN_PARSE_E;
 800bede:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bee2:	e016      	b.n	800bf12 <ToTraditionalInline_ex+0xec>
    }

    ret = GetOctetString(input, &idx, &length, sz);
 800bee4:	f107 0218 	add.w	r2, r7, #24
 800bee8:	f107 0120 	add.w	r1, r7, #32
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7ff f8ac 	bl	800b04c <GetOctetString>
 800bef4:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret < 0) {
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	2b00      	cmp	r3, #0
 800befa:	da06      	bge.n	800bf0a <ToTraditionalInline_ex+0xe4>
        if (ret == BUFFER_E)
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	f113 0f84 	cmn.w	r3, #132	; 0x84
 800bf02:	d102      	bne.n	800bf0a <ToTraditionalInline_ex+0xe4>
            return ASN_PARSE_E;
 800bf04:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bf08:	e003      	b.n	800bf12 <ToTraditionalInline_ex+0xec>
        /* Some private keys don't expect an octet string */
        WOLFSSL_MSG("Couldn't find Octet string");
    }

    *inOutIdx = idx;
 800bf0a:	6a3a      	ldr	r2, [r7, #32]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	601a      	str	r2, [r3, #0]

    return length;
 800bf10:	69bb      	ldr	r3, [r7, #24]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3728      	adds	r7, #40	; 0x28
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <ToTraditional_ex>:
    return ToTraditionalInline_ex(input, inOutIdx, sz, &oid);
}

/* Remove PKCS8 header, move beginning of traditional to beginning of input */
int ToTraditional_ex(byte* input, word32 sz, word32* algId)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b086      	sub	sp, #24
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	607a      	str	r2, [r7, #4]
    word32 inOutIdx = 0;
 800bf26:	2300      	movs	r3, #0
 800bf28:	613b      	str	r3, [r7, #16]
    int    length;

    if (input == NULL)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d102      	bne.n	800bf36 <ToTraditional_ex+0x1c>
        return BAD_FUNC_ARG;
 800bf30:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800bf34:	e01e      	b.n	800bf74 <ToTraditional_ex+0x5a>

    length = ToTraditionalInline_ex(input, &inOutIdx, sz, algId);
 800bf36:	f107 0110 	add.w	r1, r7, #16
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f7ff ff71 	bl	800be26 <ToTraditionalInline_ex>
 800bf44:	6178      	str	r0, [r7, #20]
    if (length < 0)
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	da01      	bge.n	800bf50 <ToTraditional_ex+0x36>
        return length;
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	e011      	b.n	800bf74 <ToTraditional_ex+0x5a>

    if (length + inOutIdx > sz)
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	4413      	add	r3, r2
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d202      	bcs.n	800bf62 <ToTraditional_ex+0x48>
        return BUFFER_E;
 800bf5c:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800bf60:	e008      	b.n	800bf74 <ToTraditional_ex+0x5a>

    XMEMMOVE(input, input + inOutIdx, length);
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	4413      	add	r3, r2
 800bf68:	697a      	ldr	r2, [r7, #20]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f00f fd5b 	bl	801ba28 <memmove>

    return length;
 800bf72:	697b      	ldr	r3, [r7, #20]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <wc_RsaPublicKeyDecode_ex>:
}
#endif /* WOLFSSL_RENESAS_TSIP */

int wc_RsaPublicKeyDecode_ex(const byte* input, word32* inOutIdx, word32 inSz,
    const byte** n, word32* nSz, const byte** e, word32* eSz)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b08a      	sub	sp, #40	; 0x28
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
 800bf88:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	61fb      	str	r3, [r7, #28]
    int length = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61bb      	str	r3, [r7, #24]
#if defined(OPENSSL_EXTRA) || defined(RSA_DECODE_EXTRA)
    word32 localIdx;
    byte   tag;
#endif

    if (input == NULL || inOutIdx == NULL)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d002      	beq.n	800bf9e <wc_RsaPublicKeyDecode_ex+0x22>
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d102      	bne.n	800bfa4 <wc_RsaPublicKeyDecode_ex+0x28>
        return BAD_FUNC_ARG;
 800bf9e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800bfa2:	e0c5      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800bfa4:	f107 0218 	add.w	r2, r7, #24
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f7fe ffa1 	bl	800aef4 <GetSequence>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	da02      	bge.n	800bfbe <wc_RsaPublicKeyDecode_ex+0x42>
        return ASN_PARSE_E;
 800bfb8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bfbc:	e0b8      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>

#if defined(OPENSSL_EXTRA) || defined(RSA_DECODE_EXTRA)
    localIdx = *inOutIdx;
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	617b      	str	r3, [r7, #20]
    if (GetASNTag(input, &localIdx, &tag, inSz) < 0)
 800bfc4:	f107 0213 	add.w	r2, r7, #19
 800bfc8:	f107 0114 	add.w	r1, r7, #20
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f7fe feda 	bl	800ad88 <GetASNTag>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	da02      	bge.n	800bfe0 <wc_RsaPublicKeyDecode_ex+0x64>
        return BUFFER_E;
 800bfda:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800bfde:	e0a7      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>

    if (tag != ASN_INTEGER) {
 800bfe0:	7cfb      	ldrb	r3, [r7, #19]
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d05b      	beq.n	800c09e <wc_RsaPublicKeyDecode_ex+0x122>
        /* not from decoded cert, will have algo id, skip past */
        if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800bfe6:	f107 0218 	add.w	r2, r7, #24
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68b9      	ldr	r1, [r7, #8]
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f7fe ff80 	bl	800aef4 <GetSequence>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	da02      	bge.n	800c000 <wc_RsaPublicKeyDecode_ex+0x84>
            return ASN_PARSE_E;
 800bffa:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800bffe:	e097      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>

        if (SkipObjectId(input, inOutIdx, inSz) < 0)
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	68b9      	ldr	r1, [r7, #8]
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f7ff fe02 	bl	800bc0e <SkipObjectId>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	da02      	bge.n	800c016 <wc_RsaPublicKeyDecode_ex+0x9a>
            return ASN_PARSE_E;
 800c010:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c014:	e08c      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>

        /* Option NULL ASN.1 tag */
        if (*inOutIdx  >= inSz) {
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d802      	bhi.n	800c026 <wc_RsaPublicKeyDecode_ex+0xaa>
            return BUFFER_E;
 800c020:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800c024:	e084      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>
        }

        localIdx = *inOutIdx;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	617b      	str	r3, [r7, #20]
        if (GetASNTag(input, &localIdx, &tag, inSz) < 0)
 800c02c:	f107 0213 	add.w	r2, r7, #19
 800c030:	f107 0114 	add.w	r1, r7, #20
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7fe fea6 	bl	800ad88 <GetASNTag>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	da02      	bge.n	800c048 <wc_RsaPublicKeyDecode_ex+0xcc>
            return ASN_PARSE_E;
 800c042:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c046:	e073      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>

        if (tag == ASN_TAG_NULL) {
 800c048:	7cfb      	ldrb	r3, [r7, #19]
 800c04a:	2b05      	cmp	r3, #5
 800c04c:	d10a      	bne.n	800c064 <wc_RsaPublicKeyDecode_ex+0xe8>
            ret = GetASNNull(input, inOutIdx, inSz);
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f7fe ff76 	bl	800af44 <GetASNNull>
 800c058:	61f8      	str	r0, [r7, #28]
            if (ret != 0)
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <wc_RsaPublicKeyDecode_ex+0xe8>
                return ret;
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	e065      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>
        }

        /* should have bit tag length and seq next */
        ret = CheckBitString(input, inOutIdx, NULL, inSz, 1, NULL);
 800c064:	2300      	movs	r3, #0
 800c066:	9301      	str	r3, [sp, #4]
 800c068:	2301      	movs	r3, #1
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f7ff f955 	bl	800b322 <CheckBitString>
 800c078:	61f8      	str	r0, [r7, #28]
        if (ret != 0)
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d001      	beq.n	800c084 <wc_RsaPublicKeyDecode_ex+0x108>
            return ret;
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	e055      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>

        if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800c084:	f107 0218 	add.w	r2, r7, #24
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	68b9      	ldr	r1, [r7, #8]
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f7fe ff31 	bl	800aef4 <GetSequence>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	da02      	bge.n	800c09e <wc_RsaPublicKeyDecode_ex+0x122>
            return ASN_PARSE_E;
 800c098:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c09c:	e048      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>
    }
#endif /* OPENSSL_EXTRA */

    /* Get modulus */
    ret = GetASNInt(input, inOutIdx, &length, inSz);
 800c09e:	f107 0218 	add.w	r2, r7, #24
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	68b9      	ldr	r1, [r7, #8]
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f7fe ffe4 	bl	800b074 <GetASNInt>
 800c0ac:	61f8      	str	r0, [r7, #28]
    if (ret < 0) {
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	da02      	bge.n	800c0ba <wc_RsaPublicKeyDecode_ex+0x13e>
        return ASN_RSA_KEY_E;
 800c0b4:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 800c0b8:	e03a      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>
    }
    if (nSz)
 800c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d003      	beq.n	800c0c8 <wc_RsaPublicKeyDecode_ex+0x14c>
        *nSz = length;
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	601a      	str	r2, [r3, #0]
    if (n)
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d005      	beq.n	800c0da <wc_RsaPublicKeyDecode_ex+0x15e>
        *n = &input[*inOutIdx];
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	441a      	add	r2, r3
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	601a      	str	r2, [r3, #0]
    *inOutIdx += length;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	441a      	add	r2, r3
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	601a      	str	r2, [r3, #0]

    /* Get exponent */
    ret = GetASNInt(input, inOutIdx, &length, inSz);
 800c0e6:	f107 0218 	add.w	r2, r7, #24
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	68b9      	ldr	r1, [r7, #8]
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f7fe ffc0 	bl	800b074 <GetASNInt>
 800c0f4:	61f8      	str	r0, [r7, #28]
    if (ret < 0) {
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	da02      	bge.n	800c102 <wc_RsaPublicKeyDecode_ex+0x186>
        return ASN_RSA_KEY_E;
 800c0fc:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 800c100:	e016      	b.n	800c130 <wc_RsaPublicKeyDecode_ex+0x1b4>
    }
    if (eSz)
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	2b00      	cmp	r3, #0
 800c106:	d003      	beq.n	800c110 <wc_RsaPublicKeyDecode_ex+0x194>
        *eSz = length;
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	461a      	mov	r2, r3
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	601a      	str	r2, [r3, #0]
    if (e)
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	2b00      	cmp	r3, #0
 800c114:	d005      	beq.n	800c122 <wc_RsaPublicKeyDecode_ex+0x1a6>
        *e = &input[*inOutIdx];
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	441a      	add	r2, r3
 800c11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c120:	601a      	str	r2, [r3, #0]
    *inOutIdx += length;
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	69ba      	ldr	r2, [r7, #24]
 800c128:	441a      	add	r2, r3
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	601a      	str	r2, [r3, #0]

    return ret;
 800c12e:	69fb      	ldr	r3, [r7, #28]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3720      	adds	r7, #32
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <wc_RsaPublicKeyDecode>:

int wc_RsaPublicKeyDecode(const byte* input, word32* inOutIdx, RsaKey* key,
                       word32 inSz)
{
 800c138:	b590      	push	{r4, r7, lr}
 800c13a:	b08f      	sub	sp, #60	; 0x3c
 800c13c:	af04      	add	r7, sp, #16
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
 800c144:	603b      	str	r3, [r7, #0]
    int ret;
    const byte *n = NULL, *e = NULL;
 800c146:	2300      	movs	r3, #0
 800c148:	623b      	str	r3, [r7, #32]
 800c14a:	2300      	movs	r3, #0
 800c14c:	61fb      	str	r3, [r7, #28]
    word32 nSz = 0, eSz = 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	61bb      	str	r3, [r7, #24]
 800c152:	2300      	movs	r3, #0
 800c154:	617b      	str	r3, [r7, #20]

    if (key == NULL)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d102      	bne.n	800c162 <wc_RsaPublicKeyDecode+0x2a>
        return BAD_FUNC_ARG;
 800c15c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800c160:	e01f      	b.n	800c1a2 <wc_RsaPublicKeyDecode+0x6a>

    ret = wc_RsaPublicKeyDecode_ex(input, inOutIdx, inSz, &n, &nSz, &e, &eSz);
 800c162:	f107 0220 	add.w	r2, r7, #32
 800c166:	f107 0314 	add.w	r3, r7, #20
 800c16a:	9302      	str	r3, [sp, #8]
 800c16c:	f107 031c 	add.w	r3, r7, #28
 800c170:	9301      	str	r3, [sp, #4]
 800c172:	f107 0318 	add.w	r3, r7, #24
 800c176:	9300      	str	r3, [sp, #0]
 800c178:	4613      	mov	r3, r2
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f7ff fefc 	bl	800bf7c <wc_RsaPublicKeyDecode_ex>
 800c184:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret == 0) {
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d109      	bne.n	800c1a0 <wc_RsaPublicKeyDecode+0x68>
        ret = wc_RsaPublicKeyDecodeRaw(n, nSz, e, eSz, key);
 800c18c:	6a38      	ldr	r0, [r7, #32]
 800c18e:	69b9      	ldr	r1, [r7, #24]
 800c190:	69fa      	ldr	r2, [r7, #28]
 800c192:	697c      	ldr	r4, [r7, #20]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	4623      	mov	r3, r4
 800c19a:	f000 f806 	bl	800c1aa <wc_RsaPublicKeyDecodeRaw>
 800c19e:	6278      	str	r0, [r7, #36]	; 0x24
    }

    return ret;
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	372c      	adds	r7, #44	; 0x2c
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd90      	pop	{r4, r7, pc}

0800c1aa <wc_RsaPublicKeyDecodeRaw>:

/* import RSA public key elements (n, e) into RsaKey structure (key) */
int wc_RsaPublicKeyDecodeRaw(const byte* n, word32 nSz, const byte* e,
                             word32 eSz, RsaKey* key)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b084      	sub	sp, #16
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	60f8      	str	r0, [r7, #12]
 800c1b2:	60b9      	str	r1, [r7, #8]
 800c1b4:	607a      	str	r2, [r7, #4]
 800c1b6:	603b      	str	r3, [r7, #0]
    if (n == NULL || e == NULL || key == NULL)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d005      	beq.n	800c1ca <wc_RsaPublicKeyDecodeRaw+0x20>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <wc_RsaPublicKeyDecodeRaw+0x20>
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d102      	bne.n	800c1d0 <wc_RsaPublicKeyDecodeRaw+0x26>
        return BAD_FUNC_ARG;
 800c1ca:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800c1ce:	e048      	b.n	800c262 <wc_RsaPublicKeyDecodeRaw+0xb8>

    key->type = RSA_PUBLIC;
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	2200      	movs	r2, #0
 800c1da:	601a      	str	r2, [r3, #0]

    if (mp_init(&key->n) != MP_OKAY)
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f00e fe46 	bl	801ae70 <sp_init>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <wc_RsaPublicKeyDecodeRaw+0x46>
        return MP_INIT_E;
 800c1ea:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800c1ee:	e038      	b.n	800c262 <wc_RsaPublicKeyDecodeRaw+0xb8>

    if (mp_read_unsigned_bin(&key->n, n, nSz) != 0) {
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	68f9      	ldr	r1, [r7, #12]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f00f f902 	bl	801b400 <sp_read_unsigned_bin>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d006      	beq.n	800c210 <wc_RsaPublicKeyDecodeRaw+0x66>
        mp_clear(&key->n);
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	4618      	mov	r0, r3
 800c206:	f00e fee4 	bl	801afd2 <sp_clear>
        return ASN_GETINT_E;
 800c20a:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 800c20e:	e028      	b.n	800c262 <wc_RsaPublicKeyDecodeRaw+0xb8>
        mp_clear(&key->n);
        return ASN_GETINT_E;
    }
#endif /* HAVE_WOLF_BIGINT */

    if (mp_init(&key->e) != MP_OKAY) {
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800c216:	4618      	mov	r0, r3
 800c218:	f00e fe2a 	bl	801ae70 <sp_init>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d006      	beq.n	800c230 <wc_RsaPublicKeyDecodeRaw+0x86>
        mp_clear(&key->n);
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	4618      	mov	r0, r3
 800c226:	f00e fed4 	bl	801afd2 <sp_clear>
        return MP_INIT_E;
 800c22a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800c22e:	e018      	b.n	800c262 <wc_RsaPublicKeyDecodeRaw+0xb8>
    }

    if (mp_read_unsigned_bin(&key->e, e, eSz) != 0) {
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	6879      	ldr	r1, [r7, #4]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f00f f8e0 	bl	801b400 <sp_read_unsigned_bin>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00c      	beq.n	800c260 <wc_RsaPublicKeyDecodeRaw+0xb6>
        mp_clear(&key->n);
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	4618      	mov	r0, r3
 800c24a:	f00e fec2 	bl	801afd2 <sp_clear>
        mp_clear(&key->e);
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800c254:	4618      	mov	r0, r3
 800c256:	f00e febc 	bl	801afd2 <sp_clear>
        return ASN_GETINT_E;
 800c25a:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 800c25e:	e000      	b.n	800c262 <wc_RsaPublicKeyDecodeRaw+0xb8>
    if (wc_InitRsaHw(key) != 0) {
        return BAD_STATE_E;
    }
#endif

    return 0;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <InitDecodedCert>:

#endif /* NO_DSA */

void InitDecodedCert(DecodedCert* cert,
                     const byte* source, word32 inSz, void* heap)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
 800c276:	603b      	str	r3, [r7, #0]
    if (cert != NULL) {
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d02a      	beq.n	800c2d4 <InitDecodedCert+0x6a>
        XMEMSET(cert, 0, sizeof(DecodedCert));
 800c27e:	f44f 725f 	mov.w	r2, #892	; 0x37c
 800c282:	2100      	movs	r1, #0
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f00f fbe8 	bl	801ba5a <memset>

        cert->subjectCNEnc    = CTC_UTF8;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	220c      	movs	r2, #12
 800c28e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        cert->issuer[0]       = '\0';
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        cert->subject[0]      = '\0';
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
        cert->source          = source;  /* don't own */
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
        cert->maxIdx          = inSz;    /* can't go over this index */
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        cert->heap            = heap;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
        cert->maxPathLen      = WOLFSSL_MAX_PATH_LEN;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	227f      	movs	r2, #127	; 0x7f
 800c2be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
        cert->subjectOEnc     = CTC_UTF8;
        cert->subjectOUEnc    = CTC_UTF8;
    #endif /* WOLFSSL_CERT_GEN */

    #ifndef NO_CERTS
        InitSignatureCtx(&cert->sigCtx, heap, INVALID_DEVID);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800c2c8:	f06f 0201 	mvn.w	r2, #1
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f001 f8f0 	bl	800d4b4 <InitSignatureCtx>
    #endif
    }
}
 800c2d4:	bf00      	nop
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <FreeAltNames>:


void FreeAltNames(DNS_entry* altNames, void* heap)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
    (void)heap;

    while (altNames) {
 800c2e6:	e015      	b.n	800c314 <FreeAltNames+0x38>
        DNS_entry* tmp = altNames->next;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	617b      	str	r3, [r7, #20]

        XFREE(altNames->name, heap, DYNAMIC_TYPE_ALTNAME);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	613b      	str	r3, [r7, #16]
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d002      	beq.n	800c300 <FreeAltNames+0x24>
 800c2fa:	6938      	ldr	r0, [r7, #16]
 800c2fc:	f005 f8ca 	bl	8011494 <wolfSSL_Free>
        XFREE(altNames,       heap, DYNAMIC_TYPE_ALTNAME);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <FreeAltNames+0x34>
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f005 f8c2 	bl	8011494 <wolfSSL_Free>
        altNames = tmp;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	607b      	str	r3, [r7, #4]
    while (altNames) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1e6      	bne.n	800c2e8 <FreeAltNames+0xc>
    }
}
 800c31a:	bf00      	nop
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <FreeNameSubtrees>:

#ifndef IGNORE_NAME_CONSTRAINTS

void FreeNameSubtrees(Base_entry* names, void* heap)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b086      	sub	sp, #24
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	6039      	str	r1, [r7, #0]
    (void)heap;

    while (names) {
 800c32c:	e015      	b.n	800c35a <FreeNameSubtrees+0x38>
        Base_entry* tmp = names->next;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	617b      	str	r3, [r7, #20]

        XFREE(names->name, heap, DYNAMIC_TYPE_ALTNAME);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	613b      	str	r3, [r7, #16]
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d002      	beq.n	800c346 <FreeNameSubtrees+0x24>
 800c340:	6938      	ldr	r0, [r7, #16]
 800c342:	f005 f8a7 	bl	8011494 <wolfSSL_Free>
        XFREE(names,       heap, DYNAMIC_TYPE_ALTNAME);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	60fb      	str	r3, [r7, #12]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <FreeNameSubtrees+0x34>
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f005 f89f 	bl	8011494 <wolfSSL_Free>
        names = tmp;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	607b      	str	r3, [r7, #4]
    while (names) {
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e6      	bne.n	800c32e <FreeNameSubtrees+0xc>
    }
}
 800c360:	bf00      	nop
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <FreeDecodedCert>:

#endif /* IGNORE_NAME_CONSTRAINTS */

void FreeDecodedCert(DecodedCert* cert)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
    if (cert == NULL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d06d      	beq.n	800c452 <FreeDecodedCert+0xea>
        return;
    if (cert->subjectCNStored == 1)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b00      	cmp	r3, #0
 800c384:	d008      	beq.n	800c398 <FreeDecodedCert+0x30>
        XFREE(cert->subjectCN, cert->heap, DYNAMIC_TYPE_SUBJECT_CN);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <FreeDecodedCert+0x30>
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f005 f87e 	bl	8011494 <wolfSSL_Free>
    if (cert->pubKeyStored == 1)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d108      	bne.n	800c3b2 <FreeDecodedCert+0x4a>
        XFREE((void*)cert->publicKey, cert->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	60bb      	str	r3, [r7, #8]
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d002      	beq.n	800c3b2 <FreeDecodedCert+0x4a>
 800c3ac:	68b8      	ldr	r0, [r7, #8]
 800c3ae:	f005 f871 	bl	8011494 <wolfSSL_Free>
    if (cert->weOwnAltNames && cert->altNames)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800c3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00c      	beq.n	800c3dc <FreeDecodedCert+0x74>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d008      	beq.n	800c3dc <FreeDecodedCert+0x74>
        FreeAltNames(cert->altNames, cert->heap);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	f7ff ff80 	bl	800c2dc <FreeAltNames>
#ifndef IGNORE_NAME_CONSTRAINTS
    if (cert->altEmailNames)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d008      	beq.n	800c3f6 <FreeDecodedCert+0x8e>
        FreeAltNames(cert->altEmailNames, cert->heap);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	f7ff ff73 	bl	800c2dc <FreeAltNames>
    if (cert->altDirNames)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d008      	beq.n	800c410 <FreeDecodedCert+0xa8>
        FreeAltNames(cert->altDirNames, cert->heap);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f7ff ff66 	bl	800c2dc <FreeAltNames>
    if (cert->permittedNames)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c414:	2b00      	cmp	r3, #0
 800c416:	d008      	beq.n	800c42a <FreeDecodedCert+0xc2>
        FreeNameSubtrees(cert->permittedNames, cert->heap);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c422:	4619      	mov	r1, r3
 800c424:	4610      	mov	r0, r2
 800c426:	f7ff ff7c 	bl	800c322 <FreeNameSubtrees>
    if (cert->excludedNames)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d008      	beq.n	800c444 <FreeDecodedCert+0xdc>
        FreeNameSubtrees(cert->excludedNames, cert->heap);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c43c:	4619      	mov	r1, r3
 800c43e:	4610      	mov	r0, r2
 800c440:	f7ff ff6f 	bl	800c322 <FreeNameSubtrees>
#ifdef WOLFSSL_RENESAS_TSIP_TLS
    if (cert->tsip_encRsaKeyIdx != NULL)
        XFREE(cert->tsip_encRsaKeyIdx, cert->heap, DYNAMIC_TYPE_RSA);
#endif
#ifndef NO_CERTS
    FreeSignatureCtx(&cert->sigCtx);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800c44a:	4618      	mov	r0, r3
 800c44c:	f001 f84a 	bl	800d4e4 <FreeSignatureCtx>
 800c450:	e000      	b.n	800c454 <FreeDecodedCert+0xec>
        return;
 800c452:	bf00      	nop
#endif
}
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <GetCertHeader>:

static int GetCertHeader(DecodedCert* cert)
{
 800c45a:	b590      	push	{r4, r7, lr}
 800c45c:	b087      	sub	sp, #28
 800c45e:	af02      	add	r7, sp, #8
 800c460:	6078      	str	r0, [r7, #4]
    int ret = 0, len;
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]

    if (GetSequence(cert->source, &cert->srcIdx, &len, cert->maxIdx) < 0)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c478:	f107 0208 	add.w	r2, r7, #8
 800c47c:	f7fe fd3a 	bl	800aef4 <GetSequence>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	da02      	bge.n	800c48c <GetCertHeader+0x32>
        return ASN_PARSE_E;
 800c486:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c48a:	e05c      	b.n	800c546 <GetCertHeader+0xec>

    /* Reset the max index for the size indicated in the outer wrapper. */
    cert->maxIdx = len + cert->srcIdx;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	441a      	add	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    cert->certBegin = cert->srcIdx;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	60da      	str	r2, [r3, #12]

    if (GetSequence(cert->source, &cert->srcIdx, &len, cert->maxIdx) < 0)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4b8:	f107 0208 	add.w	r2, r7, #8
 800c4bc:	f7fe fd1a 	bl	800aef4 <GetSequence>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	da02      	bge.n	800c4cc <GetCertHeader+0x72>
        return ASN_PARSE_E;
 800c4c6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c4ca:	e03c      	b.n	800c546 <GetCertHeader+0xec>

    cert->sigIndex = len + cert->srcIdx;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	441a      	add	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	611a      	str	r2, [r3, #16]
    if (cert->sigIndex > cert->maxIdx)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	691a      	ldr	r2, [r3, #16]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d902      	bls.n	800c4ee <GetCertHeader+0x94>
        return ASN_PARSE_E;
 800c4e8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c4ec:	e02b      	b.n	800c546 <GetCertHeader+0xec>

    if (GetExplicitVersion(cert->source, &cert->srcIdx, &cert->version,
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f103 0220 	add.w	r2, r3, #32
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	f7fe fe91 	bl	800b22a <GetExplicitVersion>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	da02      	bge.n	800c514 <GetCertHeader+0xba>
                                                            cert->sigIndex) < 0)
        return ASN_PARSE_E;
 800c50e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c512:	e018      	b.n	800c546 <GetCertHeader+0xec>

    if (GetSerialNumber(cert->source, &cert->srcIdx, cert->serial,
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	691b      	ldr	r3, [r3, #16]
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	4623      	mov	r3, r4
 800c534:	f003 f81c 	bl	800f570 <GetSerialNumber>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	da02      	bge.n	800c544 <GetCertHeader+0xea>
                                           &cert->serialSz, cert->sigIndex) < 0)
        return ASN_PARSE_E;
 800c53e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c542:	e000      	b.n	800c546 <GetCertHeader+0xec>

    return ret;
 800c544:	68fb      	ldr	r3, [r7, #12]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd90      	pop	{r4, r7, pc}

0800c54e <StoreRsaKey>:

#if !defined(NO_RSA)
/* Store Rsa Key, may save later, Dsa could use in future */
static int StoreRsaKey(DecodedCert* cert, word32 bitStringEnd)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b084      	sub	sp, #16
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
 800c556:	6039      	str	r1, [r7, #0]
    int    length;
    word32 recvd = cert->srcIdx;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c55e:	60fb      	str	r3, [r7, #12]

    if (GetSequence(cert->source, &cert->srcIdx, &length, bitStringEnd) < 0)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c56c:	f107 0208 	add.w	r2, r7, #8
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	f7fe fcbf 	bl	800aef4 <GetSequence>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	da02      	bge.n	800c582 <StoreRsaKey+0x34>
        return ASN_PARSE_E;
 800c57c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c580:	e02d      	b.n	800c5de <StoreRsaKey+0x90>

    recvd = cert->srcIdx - recvd;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	60fb      	str	r3, [r7, #12]
    length += recvd;
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	461a      	mov	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	4413      	add	r3, r2
 800c596:	60bb      	str	r3, [r7, #8]

    while (recvd--)
 800c598:	e006      	b.n	800c5a8 <StoreRsaKey+0x5a>
       cert->srcIdx--;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5a0:	1e5a      	subs	r2, r3, #1
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    while (recvd--)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	1e5a      	subs	r2, r3, #1
 800c5ac:	60fa      	str	r2, [r7, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1f3      	bne.n	800c59a <StoreRsaKey+0x4c>
#if defined(WOLFSSL_RENESAS_TSIP)
    cert->sigCtx.pubkey_n_start = cert->sigCtx.pubkey_e_start = cert->srcIdx;
#endif
    cert->pubKeySize = length;
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	605a      	str	r2, [r3, #4]
    cert->publicKey = cert->source + cert->srcIdx;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5c6:	441a      	add	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	601a      	str	r2, [r3, #0]
    cert->srcIdx += length;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	441a      	add	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

    return 0;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <CheckCurve>:

#ifdef HAVE_ECC

    /* return 0 on success if the ECC curve oid sum is supported */
    static int CheckCurve(word32 oid)
    {
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
        int ret = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	60fb      	str	r3, [r7, #12]
        word32 oidSz = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60bb      	str	r3, [r7, #8]

        ret = wc_ecc_get_oid(oid, NULL, &oidSz);
 800c5f6:	f107 0308 	add.w	r3, r7, #8
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f004 fe14 	bl	801122c <wc_ecc_get_oid>
 800c604:	60f8      	str	r0, [r7, #12]
        if (ret < 0 || oidSz == 0) {
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	db02      	blt.n	800c612 <CheckCurve+0x2c>
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d102      	bne.n	800c618 <CheckCurve+0x32>
            WOLFSSL_MSG("CheckCurve not found");
            ret = ALGO_ID_E;
 800c612:	f06f 0384 	mvn.w	r3, #132	; 0x84
 800c616:	60fb      	str	r3, [r7, #12]
        }

        return ret;
 800c618:	68fb      	ldr	r3, [r7, #12]
    }
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <GetKey>:

#endif /* HAVE_ECC */

static int GetKey(DecodedCert* cert)
{
 800c622:	b590      	push	{r4, r7, lr}
 800c624:	b08f      	sub	sp, #60	; 0x3c
 800c626:	af02      	add	r7, sp, #8
 800c628:	6078      	str	r0, [r7, #4]
    int length;
#ifndef NO_DSA
    int tmpLen;
#endif
#if defined(HAVE_ECC) || defined(HAVE_NTRU) || !defined(NO_DSA)
    int tmpIdx = cert->srcIdx;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c630:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    if (GetSequence(cert->source, &cert->srcIdx, &length, cert->maxIdx) < 0)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c644:	f107 0218 	add.w	r2, r7, #24
 800c648:	f7fe fc54 	bl	800aef4 <GetSequence>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	da02      	bge.n	800c658 <GetKey+0x36>
        return ASN_PARSE_E;
 800c652:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c656:	e0cc      	b.n	800c7f2 <GetKey+0x1d0>

#ifndef NO_DSA
    tmpLen = length + 4;
#endif

    if (GetAlgoId(cert->source, &cert->srcIdx,
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f103 021c 	add.w	r2, r3, #28
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	2302      	movs	r3, #2
 800c674:	f7ff faee 	bl	800bc54 <GetAlgoId>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	da02      	bge.n	800c684 <GetKey+0x62>
                  &cert->keyOID, oidKeyType, cert->maxIdx) < 0)
        return ASN_PARSE_E;
 800c67e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c682:	e0b6      	b.n	800c7f2 <GetKey+0x1d0>

    switch (cert->keyOID) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	69db      	ldr	r3, [r3, #28]
 800c688:	f240 2206 	movw	r2, #518	; 0x206
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d027      	beq.n	800c6e0 <GetKey+0xbe>
 800c690:	f240 2285 	movw	r2, #645	; 0x285
 800c694:	4293      	cmp	r3, r2
 800c696:	f040 80aa 	bne.w	800c7ee <GetKey+0x1cc>
   #ifndef NO_RSA
        case RSAk:
        {
            int ret;

            ret = CheckBitString(cert->source, &cert->srcIdx, &length,
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 4294 	ldr.w	r4, [r3, #660]	; 0x294
 800c6ac:	f107 0218 	add.w	r2, r7, #24
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	9301      	str	r3, [sp, #4]
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	4623      	mov	r3, r4
 800c6ba:	f7fe fe32 	bl	800b322 <CheckBitString>
 800c6be:	62b8      	str	r0, [r7, #40]	; 0x28
                                 cert->maxIdx, 1, NULL);
            if (ret != 0)
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d001      	beq.n	800c6ca <GetKey+0xa8>
                return ret;
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	e093      	b.n	800c7f2 <GetKey+0x1d0>
                        cert->subjectKeyHash);
                if (ret != 0)
                    return ret;
            #endif

            return StoreRsaKey(cert, cert->srcIdx + length);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7ff ff39 	bl	800c54e <StoreRsaKey>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	e088      	b.n	800c7f2 <GetKey+0x1d0>
    #ifdef HAVE_ECC
        case ECDSAk:
        {
            int ret;
            byte seq[5];
            int pubLen = length + 1 + SetLength(length, seq);
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	f107 0310 	add.w	r3, r7, #16
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	f000 fd5b 	bl	800d1a6 <SetLength>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	627b      	str	r3, [r7, #36]	; 0x24
            word32 localIdx;
            byte* publicKey;
            byte  tag;

            localIdx = cert->srcIdx;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c700:	60fb      	str	r3, [r7, #12]
            if (GetASNTag(cert->source, &localIdx, &tag, cert->maxIdx) < 0)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c70e:	f107 020b 	add.w	r2, r7, #11
 800c712:	f107 010c 	add.w	r1, r7, #12
 800c716:	f7fe fb37 	bl	800ad88 <GetASNTag>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	da02      	bge.n	800c726 <GetKey+0x104>
                return ASN_PARSE_E;
 800c720:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c724:	e065      	b.n	800c7f2 <GetKey+0x1d0>

            if (tag != (ASN_SEQUENCE | ASN_CONSTRUCTED)) {
 800c726:	7afb      	ldrb	r3, [r7, #11]
 800c728:	2b30      	cmp	r3, #48	; 0x30
 800c72a:	d039      	beq.n	800c7a0 <GetKey+0x17e>
                if (GetObjectId(cert->source, &cert->srcIdx,
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f503 7249 	add.w	r2, r3, #804	; 0x324
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c744:	9300      	str	r3, [sp, #0]
 800c746:	2303      	movs	r3, #3
 800c748:	f7ff f9fe 	bl	800bb48 <GetObjectId>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	da02      	bge.n	800c758 <GetKey+0x136>
                            &cert->pkCurveOID, oidCurveType, cert->maxIdx) < 0)
                    return ASN_PARSE_E;
 800c752:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c756:	e04c      	b.n	800c7f2 <GetKey+0x1d0>

                if (CheckCurve(cert->pkCurveOID) < 0)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff ff41 	bl	800c5e6 <CheckCurve>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	da02      	bge.n	800c770 <GetKey+0x14e>
                    return ECC_CURVE_OID_E;
 800c76a:	f06f 03ab 	mvn.w	r3, #171	; 0xab
 800c76e:	e040      	b.n	800c7f2 <GetKey+0x1d0>

                /* key header */
                ret = CheckBitString(cert->source, &cert->srcIdx, &length,
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 4294 	ldr.w	r4, [r3, #660]	; 0x294
 800c782:	f107 0218 	add.w	r2, r7, #24
 800c786:	2300      	movs	r3, #0
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	2301      	movs	r3, #1
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	4623      	mov	r3, r4
 800c790:	f7fe fdc7 	bl	800b322 <CheckBitString>
 800c794:	6238      	str	r0, [r7, #32]
                                                         cert->maxIdx, 1, NULL);
                if (ret != 0)
 800c796:	6a3b      	ldr	r3, [r7, #32]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <GetKey+0x17e>
                    return ret;
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	e028      	b.n	800c7f2 <GetKey+0x1d0>
                if (ret != 0)
                    return ret;
            #endif
            }

            publicKey = (byte*)XMALLOC(pubLen, cert->heap,
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f004 fe5a 	bl	801145c <wolfSSL_Malloc>
 800c7a8:	61f8      	str	r0, [r7, #28]
                                       DYNAMIC_TYPE_PUBLIC_KEY);
            if (publicKey == NULL)
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d102      	bne.n	800c7b6 <GetKey+0x194>
                return MEMORY_E;
 800c7b0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800c7b4:	e01d      	b.n	800c7f2 <GetKey+0x1d0>
            XMEMCPY(publicKey, &cert->source[tmpIdx], pubLen);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800c7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7be:	4413      	add	r3, r2
 800c7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	69f8      	ldr	r0, [r7, #28]
 800c7c6:	f00f f924 	bl	801ba12 <memcpy>
            cert->publicKey = publicKey;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	69fa      	ldr	r2, [r7, #28]
 800c7ce:	601a      	str	r2, [r3, #0]
            cert->pubKeyStored = 1;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	609a      	str	r2, [r3, #8]
            cert->pubKeySize   = pubLen;
 800c7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	605a      	str	r2, [r3, #4]

            cert->srcIdx = tmpIdx + pubLen;
 800c7dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	4413      	add	r3, r2
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

            return 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	e001      	b.n	800c7f2 <GetKey+0x1d0>
            return 0;
        }
    #endif /* NO_DSA */
        default:
            WOLFSSL_MSG("Unknown or not compiled in key OID");
            return ASN_UNKNOWN_OID_E;
 800c7ee:	f06f 0393 	mvn.w	r3, #147	; 0x93
    }
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3734      	adds	r7, #52	; 0x34
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd90      	pop	{r4, r7, pc}

0800c7fa <CalcHashId>:
}
#endif

/* Routine for calculating hashId */
int CalcHashId(const byte* data, word32 len, byte* hash)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b086      	sub	sp, #24
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	60f8      	str	r0, [r7, #12]
 800c802:	60b9      	str	r1, [r7, #8]
 800c804:	607a      	str	r2, [r7, #4]
    int ret;

#if defined(NO_SHA) && !defined(NO_SHA256)
    ret = wc_Sha256Hash(data, len, hash);
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	68b9      	ldr	r1, [r7, #8]
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	f004 fdea 	bl	80113e4 <wc_Sha256Hash>
 800c810:	6178      	str	r0, [r7, #20]
    ret = wc_ShaHash(data, len, hash);
#else
    ret = NOT_COMPILED_IN;
#endif

    return ret;
 800c812:	697b      	ldr	r3, [r7, #20]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3718      	adds	r7, #24
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <GetName>:

/* process NAME, either issuer or subject
 * returns 0 on success and negative values on fail */
int GetName(DecodedCert* cert, int nameType, int maxIdx)
{
 800c81c:	b5b0      	push	{r4, r5, r7, lr}
 800c81e:	b098      	sub	sp, #96	; 0x60
 800c820:	af02      	add	r7, sp, #8
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
    int    length;  /* length of all distinguished names */
    int    dummy;
    int    ret;
    char*  full;
    byte*  hash;
    word32 idx, localIdx = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	627b      	str	r3, [r7, #36]	; 0x24
    WOLFSSL_X509_NAME* dName;
#endif /* OPENSSL_EXTRA */

    WOLFSSL_MSG("Getting Cert Name");

    if (nameType == ISSUER) {
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d106      	bne.n	800c840 <GetName+0x24>
        full = cert->issuer;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3385      	adds	r3, #133	; 0x85
 800c836:	657b      	str	r3, [r7, #84]	; 0x54
        hash = cert->issuerHash;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3358      	adds	r3, #88	; 0x58
 800c83c:	653b      	str	r3, [r7, #80]	; 0x50
 800c83e:	e006      	b.n	800c84e <GetName+0x32>
    }
    else {
        full = cert->subject;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f203 1385 	addw	r3, r3, #389	; 0x185
 800c846:	657b      	str	r3, [r7, #84]	; 0x54
        hash = cert->subjectHash;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	3338      	adds	r3, #56	; 0x38
 800c84c:	653b      	str	r3, [r7, #80]	; 0x50
    }

    if (cert->srcIdx >= (word32)maxIdx) {
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	429a      	cmp	r2, r3
 800c858:	d302      	bcc.n	800c860 <GetName+0x44>
        return BUFFER_E;
 800c85a:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800c85e:	e251      	b.n	800cd04 <GetName+0x4e8>
    }

    localIdx = cert->srcIdx;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c866:	627b      	str	r3, [r7, #36]	; 0x24
    if (GetASNTag(cert->source, &localIdx, &tag, maxIdx) < 0) {
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800c874:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800c878:	f7fe fa86 	bl	800ad88 <GetASNTag>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	da02      	bge.n	800c888 <GetName+0x6c>
        return ASN_PARSE_E;
 800c882:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c886:	e23d      	b.n	800cd04 <GetName+0x4e8>
    }

    if (tag == ASN_OBJECT_ID) {
 800c888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c88c:	2b06      	cmp	r3, #6
 800c88e:	d10f      	bne.n	800c8b0 <GetName+0x94>
        WOLFSSL_MSG("Trying optional prefix...");

        if (SkipObjectId(cert->source, &cert->srcIdx, maxIdx) < 0)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	f7ff f9b5 	bl	800bc0e <SkipObjectId>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	da02      	bge.n	800c8b0 <GetName+0x94>
            return ASN_PARSE_E;
 800c8aa:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c8ae:	e229      	b.n	800cd04 <GetName+0x4e8>
    }

    /* For OCSP, RFC2560 section 4.1.1 states the issuer hash should be
     * calculated over the entire DER encoding of the Name field, including
     * the tag and length. */
    idx = cert->srcIdx;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c8b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (GetSequence(cert->source, &cert->srcIdx, &length, maxIdx) < 0)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c8ca:	f7fe fb13 	bl	800aef4 <GetSequence>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	da02      	bge.n	800c8da <GetName+0xbe>
        return ASN_PARSE_E;
 800c8d4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c8d8:	e214      	b.n	800cd04 <GetName+0x4e8>

    ret = CalcHashId(&cert->source[idx], length + cert->srcIdx - idx, hash);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800c8e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e2:	18d0      	adds	r0, r2, r3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c8ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8ec:	441a      	add	r2, r3
 800c8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f7ff ff80 	bl	800c7fa <CalcHashId>
 800c8fa:	63b8      	str	r0, [r7, #56]	; 0x38
    if (ret != 0)
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <GetName+0xea>
        return ret;
 800c902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c904:	e1fe      	b.n	800cd04 <GetName+0x4e8>

    length += cert->srcIdx;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c90e:	4413      	add	r3, r2
 800c910:	62fb      	str	r3, [r7, #44]	; 0x2c
    idx = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	64fb      	str	r3, [r7, #76]	; 0x4c
        cert->issuerRaw = &cert->source[cert->srcIdx];
        cert->issuerRawLen = length - cert->srcIdx;
    }
#endif
#ifndef IGNORE_NAME_CONSTRAINTS
    if (nameType == SUBJECT) {
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	f040 81e4 	bne.w	800cce6 <GetName+0x4ca>
        cert->subjectRaw = &cert->source[cert->srcIdx];
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c92a:	441a      	add	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
        cert->subjectRawLen = length - cert->srcIdx;
 800c932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c934:	461a      	mov	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	461a      	mov	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
    if (dName == NULL) {
        return MEMORY_E;
    }
#endif /* OPENSSL_EXTRA */

    while (cert->srcIdx < (word32)length) {
 800c946:	e1ce      	b.n	800cce6 <GetName+0x4ca>
        byte        b       = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        byte        joint[3];
        byte        tooBig  = FALSE;
 800c94e:	2300      	movs	r3, #0
 800c950:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        int         oidSz;
        const char* copy    = NULL;
 800c954:	2300      	movs	r3, #0
 800c956:	647b      	str	r3, [r7, #68]	; 0x44
        int         copyLen = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	643b      	str	r3, [r7, #64]	; 0x40
        int         strLen  = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	617b      	str	r3, [r7, #20]
        byte        id      = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                && !defined(WOLFCRYPT_ONLY)
         int        nid = NID_undef;
         int        enc;
    #endif /* OPENSSL_EXTRA */

        if (GetSet(cert->source, &cert->srcIdx, &dummy, maxIdx) < 0) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c978:	f7fe fad0 	bl	800af1c <GetSet>
            WOLFSSL_MSG("Cert name lacks set header, trying sequence");
        }

        if (GetSequence(cert->source, &cert->srcIdx, &dummy, maxIdx) <= 0) {
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c98e:	f7fe fab1 	bl	800aef4 <GetSequence>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	dc02      	bgt.n	800c99e <GetName+0x182>
        #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
            wolfSSL_X509_NAME_free(dName);
        #endif /* OPENSSL_EXTRA */
            return ASN_PARSE_E;
 800c998:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c99c:	e1b2      	b.n	800cd04 <GetName+0x4e8>
        }

        ret = GetASNObjectId(cert->source, &cert->srcIdx, &oidSz, maxIdx);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f107 0218 	add.w	r2, r7, #24
 800c9b0:	f7ff f860 	bl	800ba74 <GetASNObjectId>
 800c9b4:	63b8      	str	r0, [r7, #56]	; 0x38
        if (ret != 0) {
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <GetName+0x1a4>
        #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
            wolfSSL_X509_NAME_free(dName);
        #endif /* OPENSSL_EXTRA */
            return ret;
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	e1a1      	b.n	800cd04 <GetName+0x4e8>
        }

        /* make sure there is room for joint */
        if ((cert->srcIdx + sizeof(joint)) > (word32)maxIdx) {
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c9c6:	1cda      	adds	r2, r3, #3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d902      	bls.n	800c9d4 <GetName+0x1b8>
        #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
            wolfSSL_X509_NAME_free(dName);
        #endif /* OPENSSL_EXTRA */
            return ASN_PARSE_E;
 800c9ce:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800c9d2:	e197      	b.n	800cd04 <GetName+0x4e8>
        }

        XMEMCPY(joint, &cert->source[cert->srcIdx], sizeof(joint));
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c9e0:	441a      	add	r2, r3
 800c9e2:	f107 031c 	add.w	r3, r7, #28
 800c9e6:	8811      	ldrh	r1, [r2, #0]
 800c9e8:	7892      	ldrb	r2, [r2, #2]
 800c9ea:	8019      	strh	r1, [r3, #0]
 800c9ec:	709a      	strb	r2, [r3, #2]

        /* v1 name types */
        if (joint[0] == 0x55 && joint[1] == 0x04) {
 800c9ee:	7f3b      	ldrb	r3, [r7, #28]
 800c9f0:	2b55      	cmp	r3, #85	; 0x55
 800c9f2:	f040 8083 	bne.w	800cafc <GetName+0x2e0>
 800c9f6:	7f7b      	ldrb	r3, [r7, #29]
 800c9f8:	2b04      	cmp	r3, #4
 800c9fa:	d17f      	bne.n	800cafc <GetName+0x2e0>
            cert->srcIdx += 3;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca02:	1cda      	adds	r2, r3, #3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            id = joint[2];
 800ca0a:	7fbb      	ldrb	r3, [r7, #30]
 800ca0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (GetHeader(cert->source, &b, &cert->srcIdx, &strLen,
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f503 7424 	add.w	r4, r3, #656	; 0x290
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f107 0514 	add.w	r5, r7, #20
 800ca22:	f107 0122 	add.w	r1, r7, #34	; 0x22
 800ca26:	2201      	movs	r2, #1
 800ca28:	9201      	str	r2, [sp, #4]
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	462b      	mov	r3, r5
 800ca2e:	4622      	mov	r2, r4
 800ca30:	f7fe fa2b 	bl	800ae8a <GetHeader>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	da02      	bge.n	800ca40 <GetName+0x224>
                          maxIdx, 1) < 0) {
            #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
                wolfSSL_X509_NAME_free(dName);
            #endif /* OPENSSL_EXTRA */
                return ASN_PARSE_E;
 800ca3a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ca3e:	e161      	b.n	800cd04 <GetName+0x4e8>
            }

            if (id == ASN_COMMON_NAME) {
 800ca40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca44:	2b03      	cmp	r3, #3
 800ca46:	d119      	bne.n	800ca7c <GetName+0x260>
                if (nameType == SUBJECT) {
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d111      	bne.n	800ca72 <GetName+0x256>
                    cert->subjectCN = (char *)&cert->source[cert->srcIdx];
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca5a:	441a      	add	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	67da      	str	r2, [r3, #124]	; 0x7c
                    cert->subjectCNLen = strLen;
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    cert->subjectCNEnc = b;
 800ca68:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                }

                copy = WOLFSSL_COMMON_NAME;
 800ca72:	4ba6      	ldr	r3, [pc, #664]	; (800cd0c <GetName+0x4f0>)
 800ca74:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_COMMON_NAME) - 1;
 800ca76:	2304      	movs	r3, #4
 800ca78:	643b      	str	r3, [r7, #64]	; 0x40
            if (id == ASN_COMMON_NAME) {
 800ca7a:	e0f8      	b.n	800cc6e <GetName+0x452>
            #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) \
                && !defined(WOLFCRYPT_ONLY)
                nid = NID_commonName;
            #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_SUR_NAME) {
 800ca7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	d104      	bne.n	800ca8e <GetName+0x272>
                copy = WOLFSSL_SUR_NAME;
 800ca84:	4ba2      	ldr	r3, [pc, #648]	; (800cd10 <GetName+0x4f4>)
 800ca86:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_SUR_NAME) - 1;
 800ca88:	2304      	movs	r3, #4
 800ca8a:	643b      	str	r3, [r7, #64]	; 0x40
            if (id == ASN_COMMON_NAME) {
 800ca8c:	e0ef      	b.n	800cc6e <GetName+0x452>
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_surname;
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_COUNTRY_NAME) {
 800ca8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca92:	2b06      	cmp	r3, #6
 800ca94:	d104      	bne.n	800caa0 <GetName+0x284>
                copy = WOLFSSL_COUNTRY_NAME;
 800ca96:	4b9f      	ldr	r3, [pc, #636]	; (800cd14 <GetName+0x4f8>)
 800ca98:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_COUNTRY_NAME) - 1;
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	643b      	str	r3, [r7, #64]	; 0x40
            if (id == ASN_COMMON_NAME) {
 800ca9e:	e0e6      	b.n	800cc6e <GetName+0x452>
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_countryName;
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_LOCALITY_NAME) {
 800caa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800caa4:	2b07      	cmp	r3, #7
 800caa6:	d104      	bne.n	800cab2 <GetName+0x296>
                copy = WOLFSSL_LOCALITY_NAME;
 800caa8:	4b9b      	ldr	r3, [pc, #620]	; (800cd18 <GetName+0x4fc>)
 800caaa:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_LOCALITY_NAME) - 1;
 800caac:	2303      	movs	r3, #3
 800caae:	643b      	str	r3, [r7, #64]	; 0x40
            if (id == ASN_COMMON_NAME) {
 800cab0:	e0dd      	b.n	800cc6e <GetName+0x452>
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_localityName;
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_STATE_NAME) {
 800cab2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cab6:	2b08      	cmp	r3, #8
 800cab8:	d104      	bne.n	800cac4 <GetName+0x2a8>
                copy = WOLFSSL_STATE_NAME;
 800caba:	4b98      	ldr	r3, [pc, #608]	; (800cd1c <GetName+0x500>)
 800cabc:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_STATE_NAME) - 1;
 800cabe:	2304      	movs	r3, #4
 800cac0:	643b      	str	r3, [r7, #64]	; 0x40
            if (id == ASN_COMMON_NAME) {
 800cac2:	e0d4      	b.n	800cc6e <GetName+0x452>
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_stateOrProvinceName;
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_ORG_NAME) {
 800cac4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cac8:	2b0a      	cmp	r3, #10
 800caca:	d104      	bne.n	800cad6 <GetName+0x2ba>
                copy = WOLFSSL_ORG_NAME;
 800cacc:	4b94      	ldr	r3, [pc, #592]	; (800cd20 <GetName+0x504>)
 800cace:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_ORG_NAME) - 1;
 800cad0:	2303      	movs	r3, #3
 800cad2:	643b      	str	r3, [r7, #64]	; 0x40
            if (id == ASN_COMMON_NAME) {
 800cad4:	e0cb      	b.n	800cc6e <GetName+0x452>
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_organizationName;
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_ORGUNIT_NAME) {
 800cad6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cada:	2b0b      	cmp	r3, #11
 800cadc:	d104      	bne.n	800cae8 <GetName+0x2cc>
                copy = WOLFSSL_ORGUNIT_NAME;
 800cade:	4b91      	ldr	r3, [pc, #580]	; (800cd24 <GetName+0x508>)
 800cae0:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_ORGUNIT_NAME) - 1;
 800cae2:	2304      	movs	r3, #4
 800cae4:	643b      	str	r3, [r7, #64]	; 0x40
            if (id == ASN_COMMON_NAME) {
 800cae6:	e0c2      	b.n	800cc6e <GetName+0x452>
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                    nid = NID_organizationalUnitName;
                #endif /* OPENSSL_EXTRA */
            }
            else if (id == ASN_SERIAL_NUMBER) {
 800cae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800caec:	2b05      	cmp	r3, #5
 800caee:	f040 80be 	bne.w	800cc6e <GetName+0x452>
                copy = WOLFSSL_SERIAL_NUMBER;
 800caf2:	4b8d      	ldr	r3, [pc, #564]	; (800cd28 <GetName+0x50c>)
 800caf4:	647b      	str	r3, [r7, #68]	; 0x44
                copyLen = sizeof(WOLFSSL_SERIAL_NUMBER) - 1;
 800caf6:	230e      	movs	r3, #14
 800caf8:	643b      	str	r3, [r7, #64]	; 0x40
            if (id == ASN_COMMON_NAME) {
 800cafa:	e0b8      	b.n	800cc6e <GetName+0x452>
            }
        }
    #endif /* WOLFSSL_CERT_EXT */
        else {
            /* skip */
            byte email = FALSE;
 800cafc:	2300      	movs	r3, #0
 800cafe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            byte pilot = FALSE;
 800cb02:	2300      	movs	r3, #0
 800cb04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

            if (joint[0] == 0x2a && joint[1] == 0x86) {  /* email id hdr */
 800cb08:	7f3b      	ldrb	r3, [r7, #28]
 800cb0a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb0c:	d108      	bne.n	800cb20 <GetName+0x304>
 800cb0e:	7f7b      	ldrb	r3, [r7, #29]
 800cb10:	2b86      	cmp	r3, #134	; 0x86
 800cb12:	d105      	bne.n	800cb20 <GetName+0x304>
                id = ASN_EMAIL_NAME;
 800cb14:	2398      	movs	r3, #152	; 0x98
 800cb16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                email = TRUE;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            }

            if (joint[0] == 0x9  && joint[1] == 0x92) { /* uid id hdr */
 800cb20:	7f3b      	ldrb	r3, [r7, #28]
 800cb22:	2b09      	cmp	r3, #9
 800cb24:	d112      	bne.n	800cb4c <GetName+0x330>
 800cb26:	7f7b      	ldrb	r3, [r7, #29]
 800cb28:	2b92      	cmp	r3, #146	; 0x92
 800cb2a:	d10f      	bne.n	800cb4c <GetName+0x330>
                /* last value of OID is the type of pilot attribute */
                id    = cert->source[cert->srcIdx + oidSz - 1];
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb38:	69b9      	ldr	r1, [r7, #24]
 800cb3a:	440b      	add	r3, r1
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	4413      	add	r3, r2
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                pilot = TRUE;
 800cb46:	2301      	movs	r3, #1
 800cb48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            }

            cert->srcIdx += oidSz + 1;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	4413      	add	r3, r2
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

            if (GetLength(cert->source, &cert->srcIdx, &strLen, maxIdx) < 0) {
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f107 0214 	add.w	r2, r7, #20
 800cb70:	f7fe f88c 	bl	800ac8c <GetLength>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	da02      	bge.n	800cb80 <GetName+0x364>
            #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)) && \
            !defined(WOLFCRYPT_ONLY)
                wolfSSL_X509_NAME_free(dName);
            #endif /* OPENSSL_EXTRA */
                return ASN_PARSE_E;
 800cb7a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800cb7e:	e0c1      	b.n	800cd04 <GetName+0x4e8>
            }

            if (strLen > (int)(ASN_NAME_MAX - idx)) {
 800cb80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb82:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800cb86:	461a      	mov	r2, r3
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	da02      	bge.n	800cb94 <GetName+0x378>
                WOLFSSL_MSG("ASN name too big, skipping");
                tooBig = TRUE;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }

            if (email) {
 800cb94:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d050      	beq.n	800cc3e <GetName+0x422>
                copyLen = sizeof(WOLFSSL_EMAIL_ADDR) - 1;
 800cb9c:	230e      	movs	r3, #14
 800cb9e:	643b      	str	r3, [r7, #64]	; 0x40
                if ((copyLen + strLen) > (int)(ASN_NAME_MAX - idx)) {
 800cba0:	697a      	ldr	r2, [r7, #20]
 800cba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cba4:	4413      	add	r3, r2
 800cba6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cba8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800cbac:	4293      	cmp	r3, r2
 800cbae:	dd03      	ble.n	800cbb8 <GetName+0x39c>
                    WOLFSSL_MSG("ASN name too big, skipping");
                    tooBig = TRUE;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800cbb6:	e001      	b.n	800cbbc <GetName+0x3a0>
                }
                else {
                    copy = WOLFSSL_EMAIL_ADDR;
 800cbb8:	4b5c      	ldr	r3, [pc, #368]	; (800cd2c <GetName+0x510>)
 800cbba:	647b      	str	r3, [r7, #68]	; 0x44
                #endif /* OPENSSL_EXTRA */
                #ifndef IGNORE_NAME_CONSTRAINTS
                    {
                        DNS_entry* emailName;

                        emailName = (DNS_entry*)XMALLOC(sizeof(DNS_entry),
 800cbbc:	2010      	movs	r0, #16
 800cbbe:	f004 fc4d 	bl	801145c <wolfSSL_Malloc>
 800cbc2:	6378      	str	r0, [r7, #52]	; 0x34
                                              cert->heap, DYNAMIC_TYPE_ALTNAME);
                        if (emailName == NULL) {
 800cbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d102      	bne.n	800cbd0 <GetName+0x3b4>
                        #if (defined(OPENSSL_EXTRA) || \
                                defined(OPENSSL_EXTRA_X509_SMALL)) && \
                                !defined(WOLFCRYPT_ONLY)
                            wolfSSL_X509_NAME_free(dName);
                        #endif /* OPENSSL_EXTRA */
                            return MEMORY_E;
 800cbca:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800cbce:	e099      	b.n	800cd04 <GetName+0x4e8>
                        }
                        emailName->type = 0;
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	605a      	str	r2, [r3, #4]
                        emailName->name = (char*)XMALLOC(strLen + 1,
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f004 fc3e 	bl	801145c <wolfSSL_Malloc>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe4:	60da      	str	r2, [r3, #12]
                                              cert->heap, DYNAMIC_TYPE_ALTNAME);
                        if (emailName->name == NULL) {
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10a      	bne.n	800cc04 <GetName+0x3e8>
                            WOLFSSL_MSG("\tOut of Memory");
                            XFREE(emailName, cert->heap, DYNAMIC_TYPE_ALTNAME);
 800cbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf0:	633b      	str	r3, [r7, #48]	; 0x30
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d002      	beq.n	800cbfe <GetName+0x3e2>
 800cbf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbfa:	f004 fc4b 	bl	8011494 <wolfSSL_Free>
                        #if (defined(OPENSSL_EXTRA) || \
                                defined(OPENSSL_EXTRA_X509_SMALL)) && \
                                !defined(WOLFCRYPT_ONLY)
                            wolfSSL_X509_NAME_free(dName);
                        #endif /* OPENSSL_EXTRA */
                            return MEMORY_E;
 800cbfe:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800cc02:	e07f      	b.n	800cd04 <GetName+0x4e8>
                        }
                        emailName->len = strLen;
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	609a      	str	r2, [r3, #8]
                        XMEMCPY(emailName->name, &cert->source[cert->srcIdx],
 800cc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0c:	68d8      	ldr	r0, [r3, #12]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cc1a:	4413      	add	r3, r2
 800cc1c:	697a      	ldr	r2, [r7, #20]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	f00e fef7 	bl	801ba12 <memcpy>
                                                                        strLen);
                        emailName->name[strLen] = '\0';
 800cc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	701a      	strb	r2, [r3, #0]

                        emailName->next = cert->altEmailNames;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc36:	601a      	str	r2, [r3, #0]
                        cert->altEmailNames = emailName;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc3c:	629a      	str	r2, [r3, #40]	; 0x28
                    }
                #endif /* IGNORE_NAME_CONSTRAINTS */
            }

            if (pilot) {
 800cc3e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d015      	beq.n	800cc72 <GetName+0x456>
                switch (id) {
 800cc46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d002      	beq.n	800cc54 <GetName+0x438>
 800cc4e:	2b19      	cmp	r3, #25
 800cc50:	d005      	beq.n	800cc5e <GetName+0x442>
 800cc52:	e009      	b.n	800cc68 <GetName+0x44c>
                    case ASN_USER_ID:
                        copy = WOLFSSL_USER_ID;
 800cc54:	4b36      	ldr	r3, [pc, #216]	; (800cd30 <GetName+0x514>)
 800cc56:	647b      	str	r3, [r7, #68]	; 0x44
                        copyLen = sizeof(WOLFSSL_USER_ID) - 1;
 800cc58:	2305      	movs	r3, #5
 800cc5a:	643b      	str	r3, [r7, #64]	; 0x40
                    #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                        nid = NID_userId;
                    #endif /* OPENSSL_EXTRA */
                        break;
 800cc5c:	e00a      	b.n	800cc74 <GetName+0x458>

                    case ASN_DOMAIN_COMPONENT:
                        copy = WOLFSSL_DOMAIN_COMPONENT;
 800cc5e:	4b35      	ldr	r3, [pc, #212]	; (800cd34 <GetName+0x518>)
 800cc60:	647b      	str	r3, [r7, #68]	; 0x44
                        copyLen = sizeof(WOLFSSL_DOMAIN_COMPONENT) - 1;
 800cc62:	2304      	movs	r3, #4
 800cc64:	643b      	str	r3, [r7, #64]	; 0x40
                    #if (defined(OPENSSL_EXTRA) || \
                        defined(OPENSSL_EXTRA_X509_SMALL)) \
                        && !defined(WOLFCRYPT_ONLY)
                        nid = NID_domainComponent;
                    #endif /* OPENSSL_EXTRA */
                        break;
 800cc66:	e005      	b.n	800cc74 <GetName+0x458>
                    #if (defined(OPENSSL_EXTRA) || \
                                defined(OPENSSL_EXTRA_X509_SMALL)) && \
                                !defined(WOLFCRYPT_ONLY)
                        wolfSSL_X509_NAME_free(dName);
                    #endif /* OPENSSL_EXTRA */
                        return ASN_PARSE_E;
 800cc68:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800cc6c:	e04a      	b.n	800cd04 <GetName+0x4e8>
            if (id == ASN_COMMON_NAME) {
 800cc6e:	bf00      	nop
 800cc70:	e000      	b.n	800cc74 <GetName+0x458>
                }
            }
 800cc72:	bf00      	nop
        }
        if ((copyLen + strLen) > (int)(ASN_NAME_MAX - idx))
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc78:	4413      	add	r3, r2
 800cc7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc7c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800cc80:	4293      	cmp	r3, r2
 800cc82:	dd02      	ble.n	800cc8a <GetName+0x46e>
        {
            WOLFSSL_MSG("ASN Name too big, skipping");
            tooBig = TRUE;
 800cc84:	2301      	movs	r3, #1
 800cc86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
        if ((copy != NULL) && !tooBig) {
 800cc8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d022      	beq.n	800ccd6 <GetName+0x4ba>
 800cc90:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d11e      	bne.n	800ccd6 <GetName+0x4ba>
            XMEMCPY(&full[idx], copy, copyLen);
 800cc98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc9c:	4413      	add	r3, r2
 800cc9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cca0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cca2:	4618      	mov	r0, r3
 800cca4:	f00e feb5 	bl	801ba12 <memcpy>
            idx += copyLen;
 800cca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccac:	4413      	add	r3, r2
 800ccae:	64fb      	str	r3, [r7, #76]	; 0x4c
            XMEMCPY(&full[idx], &cert->source[cert->srcIdx], strLen);
 800ccb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccb4:	18d0      	adds	r0, r2, r3
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccc2:	4413      	add	r3, r2
 800ccc4:	697a      	ldr	r2, [r7, #20]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	f00e fea3 	bl	801ba12 <memcpy>
            idx += strLen;
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccd2:	4413      	add	r3, r2
 800ccd4:	64fb      	str	r3, [r7, #76]	; 0x4c
                wolfSSL_X509_NAME_free(dName);
                return ASN_PARSE_E;
            }
        }
        #endif /* OPENSSL_EXTRA */
        cert->srcIdx += strLen;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccdc:	697a      	ldr	r2, [r7, #20]
 800ccde:	441a      	add	r2, r3
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    while (cert->srcIdx < (word32)length) {
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	f4ff ae2a 	bcc.w	800c948 <GetName+0x12c>
    }
    full[idx++] = 0;
 800ccf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf6:	1c5a      	adds	r2, r3, #1
 800ccf8:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ccfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccfc:	4413      	add	r3, r2
 800ccfe:	2200      	movs	r2, #0
 800cd00:	701a      	strb	r2, [r3, #0]
    }
    else {
        cert->subjectName = dName;
    }
#endif
    return 0;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3758      	adds	r7, #88	; 0x58
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd0c:	0801dcbc 	.word	0x0801dcbc
 800cd10:	0801dcc4 	.word	0x0801dcc4
 800cd14:	0801dccc 	.word	0x0801dccc
 800cd18:	0801dcd0 	.word	0x0801dcd0
 800cd1c:	0801dcd4 	.word	0x0801dcd4
 800cd20:	0801dcdc 	.word	0x0801dcdc
 800cd24:	0801dce0 	.word	0x0801dce0
 800cd28:	0801dce8 	.word	0x0801dce8
 800cd2c:	0801dcf8 	.word	0x0801dcf8
 800cd30:	0801dd08 	.word	0x0801dd08
 800cd34:	0801dd10 	.word	0x0801dd10

0800cd38 <GetDateInfo>:


/* Get date buffer, format and length. Returns 0=success or error */
static int GetDateInfo(const byte* source, word32* idx, const byte** pDate,
                        byte* pFormat, int* pLength, word32 maxIdx)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b086      	sub	sp, #24
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
 800cd44:	603b      	str	r3, [r7, #0]
    int length;
    byte format;

    if (source == NULL || idx == NULL)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d002      	beq.n	800cd52 <GetDateInfo+0x1a>
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d102      	bne.n	800cd58 <GetDateInfo+0x20>
        return BAD_FUNC_ARG;
 800cd52:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800cd56:	e04e      	b.n	800cdf6 <GetDateInfo+0xbe>

    /* get ASN format header */
    if (*idx+1 > maxIdx)
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d202      	bcs.n	800cd6a <GetDateInfo+0x32>
        return BUFFER_E;
 800cd64:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800cd68:	e045      	b.n	800cdf6 <GetDateInfo+0xbe>
    format = source[*idx];
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	4413      	add	r3, r2
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	75fb      	strb	r3, [r7, #23]
    *idx += 1;
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	601a      	str	r2, [r3, #0]
    if (format != ASN_UTC_TIME && format != ASN_GENERALIZED_TIME)
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
 800cd82:	2b17      	cmp	r3, #23
 800cd84:	d005      	beq.n	800cd92 <GetDateInfo+0x5a>
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	2b18      	cmp	r3, #24
 800cd8a:	d002      	beq.n	800cd92 <GetDateInfo+0x5a>
        return ASN_TIME_E;
 800cd8c:	f06f 0398 	mvn.w	r3, #152	; 0x98
 800cd90:	e031      	b.n	800cdf6 <GetDateInfo+0xbe>

    /* get length */
    if (GetLength(source, idx, &length, maxIdx) < 0)
 800cd92:	f107 0210 	add.w	r2, r7, #16
 800cd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd98:	68b9      	ldr	r1, [r7, #8]
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f7fd ff76 	bl	800ac8c <GetLength>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	da02      	bge.n	800cdac <GetDateInfo+0x74>
        return ASN_PARSE_E;
 800cda6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800cdaa:	e024      	b.n	800cdf6 <GetDateInfo+0xbe>
    if (length > MAX_DATE_SIZE || length < MIN_DATE_SIZE)
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	2b20      	cmp	r3, #32
 800cdb0:	dc02      	bgt.n	800cdb8 <GetDateInfo+0x80>
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	2b0b      	cmp	r3, #11
 800cdb6:	dc02      	bgt.n	800cdbe <GetDateInfo+0x86>
        return ASN_DATE_SZ_E;
 800cdb8:	f06f 0394 	mvn.w	r3, #148	; 0x94
 800cdbc:	e01b      	b.n	800cdf6 <GetDateInfo+0xbe>

    /* return format, date and length */
    if (pFormat)
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <GetDateInfo+0x92>
        *pFormat = format;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	7dfa      	ldrb	r2, [r7, #23]
 800cdc8:	701a      	strb	r2, [r3, #0]
    if (pDate)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d005      	beq.n	800cddc <GetDateInfo+0xa4>
        *pDate = &source[*idx];
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	441a      	add	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	601a      	str	r2, [r3, #0]
    if (pLength)
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d002      	beq.n	800cde8 <GetDateInfo+0xb0>
        *pLength = length;
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	601a      	str	r2, [r3, #0]

    *idx += length;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	693a      	ldr	r2, [r7, #16]
 800cdee:	441a      	add	r2, r3
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	601a      	str	r2, [r3, #0]

    return 0;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3718      	adds	r7, #24
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <GetDate>:

static int GetDate(DecodedCert* cert, int dateType, int verify, int maxIdx)
{
 800cdfe:	b590      	push	{r4, r7, lr}
 800ce00:	b095      	sub	sp, #84	; 0x54
 800ce02:	af02      	add	r7, sp, #8
 800ce04:	60f8      	str	r0, [r7, #12]
 800ce06:	60b9      	str	r1, [r7, #8]
 800ce08:	607a      	str	r2, [r7, #4]
 800ce0a:	603b      	str	r3, [r7, #0]
    int    ret, length;
    const byte *datePtr = NULL;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	63bb      	str	r3, [r7, #56]	; 0x38
    byte   date[MAX_DATE_SIZE];
    byte   format;
    word32 startIdx = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	647b      	str	r3, [r7, #68]	; 0x44

    if (dateType == BEFORE)
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d10a      	bne.n	800ce30 <GetDate+0x32>
        cert->beforeDate = &cert->source[cert->srcIdx];
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce26:	441a      	add	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 800ce2e:	e009      	b.n	800ce44 <GetDate+0x46>
    else
        cert->afterDate = &cert->source[cert->srcIdx];
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce3c:	441a      	add	r2, r3
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
    startIdx = cert->srcIdx;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce4a:	647b      	str	r3, [r7, #68]	; 0x44

    ret = GetDateInfo(cert->source, &cert->srcIdx, &datePtr, &format,
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	f107 0417 	add.w	r4, r7, #23
 800ce5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ce62:	9301      	str	r3, [sp, #4]
 800ce64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	4623      	mov	r3, r4
 800ce6c:	f7ff ff64 	bl	800cd38 <GetDateInfo>
 800ce70:	6438      	str	r0, [r7, #64]	; 0x40
                      &length, maxIdx);
    if (ret < 0)
 800ce72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	da01      	bge.n	800ce7c <GetDate+0x7e>
        return ret;
 800ce78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce7a:	e025      	b.n	800cec8 <GetDate+0xca>

    XMEMSET(date, 0, MAX_DATE_SIZE);
 800ce7c:	f107 0318 	add.w	r3, r7, #24
 800ce80:	2220      	movs	r2, #32
 800ce82:	2100      	movs	r1, #0
 800ce84:	4618      	mov	r0, r3
 800ce86:	f00e fde8 	bl	801ba5a <memset>
    XMEMCPY(date, datePtr, length);
 800ce8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce8e:	461a      	mov	r2, r3
 800ce90:	f107 0318 	add.w	r3, r7, #24
 800ce94:	4618      	mov	r0, r3
 800ce96:	f00e fdbc 	bl	801ba12 <memcpy>

    if (dateType == BEFORE)
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d109      	bne.n	800ceb4 <GetDate+0xb6>
        cert->beforeDateLen = cert->srcIdx - startIdx;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 800cea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	461a      	mov	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 800ceb2:	e008      	b.n	800cec6 <GetDate+0xc8>
    else
        cert->afterDateLen  = cert->srcIdx - startIdx;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 800ceba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	461a      	mov	r2, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
    }
#else
    (void)verify;
#endif

    return 0;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	374c      	adds	r7, #76	; 0x4c
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}

0800ced0 <GetValidity>:

static int GetValidity(DecodedCert* cert, int verify, int maxIdx)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
    int length;
    int badDate = 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	617b      	str	r3, [r7, #20]

    if (GetSequence(cert->source, &cert->srcIdx, &length, maxIdx) < 0)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f107 0210 	add.w	r2, r7, #16
 800cef2:	f7fd ffff 	bl	800aef4 <GetSequence>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	da02      	bge.n	800cf02 <GetValidity+0x32>
        return ASN_PARSE_E;
 800cefc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800cf00:	e023      	b.n	800cf4a <GetValidity+0x7a>

    maxIdx = cert->srcIdx + length;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf08:	693a      	ldr	r2, [r7, #16]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	607b      	str	r3, [r7, #4]

    if (GetDate(cert, BEFORE, verify, maxIdx) < 0)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	2100      	movs	r1, #0
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f7ff ff72 	bl	800cdfe <GetDate>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	da02      	bge.n	800cf26 <GetValidity+0x56>
        badDate = ASN_BEFORE_DATE_E; /* continue parsing */
 800cf20:	f06f 0395 	mvn.w	r3, #149	; 0x95
 800cf24:	617b      	str	r3, [r7, #20]

    if (GetDate(cert, AFTER, verify, maxIdx) < 0)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f7ff ff66 	bl	800cdfe <GetDate>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	da02      	bge.n	800cf3e <GetValidity+0x6e>
        return ASN_AFTER_DATE_E;
 800cf38:	f06f 0396 	mvn.w	r3, #150	; 0x96
 800cf3c:	e005      	b.n	800cf4a <GetValidity+0x7a>

    if (badDate != 0)
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <GetValidity+0x78>
        return badDate;
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	e000      	b.n	800cf4a <GetValidity+0x7a>

    return 0;
 800cf48:	2300      	movs	r3, #0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3718      	adds	r7, #24
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <wc_GetPubX509>:
 * if cert date is invalid then badDate gets set to error value, otherwise is 0
 *
 * returns a negative value on fail case
 */
int wc_GetPubX509(DecodedCert* cert, int verify, int* badDate)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b088      	sub	sp, #32
 800cf56:	af02      	add	r7, sp, #8
 800cf58:	60f8      	str	r0, [r7, #12]
 800cf5a:	60b9      	str	r1, [r7, #8]
 800cf5c:	607a      	str	r2, [r7, #4]
    int ret;

    if (cert == NULL || badDate == NULL)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <wc_GetPubX509+0x18>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d102      	bne.n	800cf70 <wc_GetPubX509+0x1e>
        return BAD_FUNC_ARG;
 800cf6a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800cf6e:	e049      	b.n	800d004 <wc_GetPubX509+0xb2>

    *badDate = 0;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]
    if ( (ret = GetCertHeader(cert)) < 0)
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7ff fa6f 	bl	800c45a <GetCertHeader>
 800cf7c:	6178      	str	r0, [r7, #20]
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	da01      	bge.n	800cf88 <wc_GetPubX509+0x36>
        return ret;
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	e03d      	b.n	800d004 <wc_GetPubX509+0xb2>
#ifdef WOLFSSL_CERT_REQ
    if (!cert->isCSR) {
#endif
        /* Using the sigIndex as the upper bound because that's where the
         * actual certificate data ends. */
        if ( (ret = GetAlgoId(cert->source, &cert->srcIdx, &cert->signatureOID,
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f103 0218 	add.w	r2, r3, #24
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	691b      	ldr	r3, [r3, #16]
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	f7fe fe57 	bl	800bc54 <GetAlgoId>
 800cfa6:	6178      	str	r0, [r7, #20]
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	da01      	bge.n	800cfb2 <wc_GetPubX509+0x60>
                              oidSigType, cert->sigIndex)) < 0)
            return ret;
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	e028      	b.n	800d004 <wc_GetPubX509+0xb2>

        WOLFSSL_MSG("Got Algo ID");

        if ( (ret = GetName(cert, ISSUER, cert->sigIndex)) < 0)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	2100      	movs	r1, #0
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f7ff fc2e 	bl	800c81c <GetName>
 800cfc0:	6178      	str	r0, [r7, #20]
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	da01      	bge.n	800cfcc <wc_GetPubX509+0x7a>
            return ret;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	e01b      	b.n	800d004 <wc_GetPubX509+0xb2>

        if ( (ret = GetValidity(cert, verify, cert->sigIndex)) < 0)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	68b9      	ldr	r1, [r7, #8]
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f7ff ff7b 	bl	800ced0 <GetValidity>
 800cfda:	6178      	str	r0, [r7, #20]
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	da02      	bge.n	800cfe8 <wc_GetPubX509+0x96>
            *badDate = ret;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	601a      	str	r2, [r3, #0]
#ifdef WOLFSSL_CERT_REQ
    }
#endif

    if ( (ret = GetName(cert, SUBJECT, cert->sigIndex)) < 0)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	461a      	mov	r2, r3
 800cfee:	2101      	movs	r1, #1
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f7ff fc13 	bl	800c81c <GetName>
 800cff6:	6178      	str	r0, [r7, #20]
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	da01      	bge.n	800d002 <wc_GetPubX509+0xb0>
        return ret;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	e000      	b.n	800d004 <wc_GetPubX509+0xb2>

    WOLFSSL_MSG("Got Subject Name");
    return ret;
 800d002:	697b      	ldr	r3, [r7, #20]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3718      	adds	r7, #24
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <DecodeToKey>:

int DecodeToKey(DecodedCert* cert, int verify)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
    int badDate = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	60bb      	str	r3, [r7, #8]
    int ret;

    if ( (ret = wc_GetPubX509(cert, verify, &badDate)) < 0)
 800d01a:	f107 0308 	add.w	r3, r7, #8
 800d01e:	461a      	mov	r2, r3
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7ff ff95 	bl	800cf52 <wc_GetPubX509>
 800d028:	60f8      	str	r0, [r7, #12]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	da01      	bge.n	800d034 <DecodeToKey+0x28>
        return ret;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	e024      	b.n	800d07e <DecodeToKey+0x72>

    /* Determine if self signed */
    cert->selfSigned = XMEMCMP(cert->issuerHash,
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	3338      	adds	r3, #56	; 0x38
 800d03e:	2220      	movs	r2, #32
 800d040:	4619      	mov	r1, r3
 800d042:	f00e fcd7 	bl	801b9f4 <memcmp>
 800d046:	4603      	mov	r3, r0
                               cert->subjectHash,
                               KEYID_SIZE) == 0 ? 1 : 0;
 800d048:	2b00      	cmp	r3, #0
 800d04a:	bf0c      	ite	eq
 800d04c:	2301      	moveq	r3, #1
 800d04e:	2300      	movne	r3, #0
 800d050:	b2d9      	uxtb	r1, r3
    cert->selfSigned = XMEMCMP(cert->issuerHash,
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	f892 3379 	ldrb.w	r3, [r2, #889]	; 0x379
 800d058:	f361 1386 	bfi	r3, r1, #6, #1
 800d05c:	f882 3379 	strb.w	r3, [r2, #889]	; 0x379

    if ( (ret = GetKey(cert)) < 0)
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fade 	bl	800c622 <GetKey>
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	da01      	bge.n	800d072 <DecodeToKey+0x66>
        return ret;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	e005      	b.n	800d07e <DecodeToKey+0x72>

    WOLFSSL_MSG("Got Key");

    if (badDate != 0)
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <DecodeToKey+0x70>
        return badDate;
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	e000      	b.n	800d07e <DecodeToKey+0x72>

    return ret;
 800d07c:	68fb      	ldr	r3, [r7, #12]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <GetSignature>:

static int GetSignature(DecodedCert* cert)
{
 800d086:	b590      	push	{r4, r7, lr}
 800d088:	b087      	sub	sp, #28
 800d08a:	af02      	add	r7, sp, #8
 800d08c:	6078      	str	r0, [r7, #4]
    int length;
    int ret;

    ret = CheckBitString(cert->source, &cert->srcIdx, &length, cert->maxIdx, 1,
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 4294 	ldr.w	r4, [r3, #660]	; 0x294
 800d0a0:	f107 0208 	add.w	r2, r7, #8
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	9300      	str	r3, [sp, #0]
 800d0ac:	4623      	mov	r3, r4
 800d0ae:	f7fe f938 	bl	800b322 <CheckBitString>
 800d0b2:	60f8      	str	r0, [r7, #12]
                         NULL);
    if (ret != 0)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d001      	beq.n	800d0be <GetSignature+0x38>
        return ret;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	e021      	b.n	800d102 <GetSignature+0x7c>

    cert->sigLength = length;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	615a      	str	r2, [r3, #20]
    cert->signature = &cert->source[cert->srcIdx];
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d0d2:	441a      	add	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	679a      	str	r2, [r3, #120]	; 0x78
    cert->srcIdx += cert->sigLength;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	441a      	add	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

    if (cert->srcIdx != cert->maxIdx)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d002      	beq.n	800d100 <GetSignature+0x7a>
        return ASN_PARSE_E;
 800d0fa:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800d0fe:	e000      	b.n	800d102 <GetSignature+0x7c>

    return 0;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3714      	adds	r7, #20
 800d106:	46bd      	mov	sp, r7
 800d108:	bd90      	pop	{r4, r7, pc}

0800d10a <SetOctetString8Bit>:

static word32 SetOctetString8Bit(word32 len, byte* output)
{
 800d10a:	b480      	push	{r7}
 800d10c:	b083      	sub	sp, #12
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	6039      	str	r1, [r7, #0]
    output[0] = ASN_OCTET_STRING;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2204      	movs	r2, #4
 800d118:	701a      	strb	r2, [r3, #0]
    output[1] = (byte)len;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	3301      	adds	r3, #1
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	b2d2      	uxtb	r2, r2
 800d122:	701a      	strb	r2, [r3, #0]
    return 2;
 800d124:	2302      	movs	r3, #2
}
 800d126:	4618      	mov	r0, r3
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <SetDigest>:

static word32 SetDigest(const byte* digest, word32 digSz, byte* output)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b086      	sub	sp, #24
 800d136:	af00      	add	r7, sp, #0
 800d138:	60f8      	str	r0, [r7, #12]
 800d13a:	60b9      	str	r1, [r7, #8]
 800d13c:	607a      	str	r2, [r7, #4]
    word32 idx = SetOctetString8Bit(digSz, output);
 800d13e:	6879      	ldr	r1, [r7, #4]
 800d140:	68b8      	ldr	r0, [r7, #8]
 800d142:	f7ff ffe2 	bl	800d10a <SetOctetString8Bit>
 800d146:	6178      	str	r0, [r7, #20]
    XMEMCPY(&output[idx], digest, digSz);
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	4413      	add	r3, r2
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	68f9      	ldr	r1, [r7, #12]
 800d152:	4618      	mov	r0, r3
 800d154:	f00e fc5d 	bl	801ba12 <memcpy>

    return idx + digSz;
 800d158:	697a      	ldr	r2, [r7, #20]
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	4413      	add	r3, r2
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3718      	adds	r7, #24
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <BytePrecision>:


static word32 BytePrecision(word32 value)
{
 800d166:	b480      	push	{r7}
 800d168:	b085      	sub	sp, #20
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
    word32 i;
    for (i = sizeof(value); i; --i)
 800d16e:	2304      	movs	r3, #4
 800d170:	60fb      	str	r3, [r7, #12]
 800d172:	e00c      	b.n	800d18e <BytePrecision+0x28>
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d17a:	3b01      	subs	r3, #1
 800d17c:	00db      	lsls	r3, r3, #3
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	fa22 f303 	lsr.w	r3, r2, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <BytePrecision+0x30>
    for (i = sizeof(value); i; --i)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	60fb      	str	r3, [r7, #12]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1ef      	bne.n	800d174 <BytePrecision+0xe>
 800d194:	e000      	b.n	800d198 <BytePrecision+0x32>
            break;
 800d196:	bf00      	nop

    return i;
 800d198:	68fb      	ldr	r3, [r7, #12]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr

0800d1a6 <SetLength>:


word32 SetLength(word32 length, byte* output)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b084      	sub	sp, #16
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	6039      	str	r1, [r7, #0]
    word32 i = 0, j;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	60fb      	str	r3, [r7, #12]

    if (length < ASN_LONG_LENGTH) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b7f      	cmp	r3, #127	; 0x7f
 800d1b8:	d80c      	bhi.n	800d1d4 <SetLength+0x2e>
        if (output)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d005      	beq.n	800d1cc <SetLength+0x26>
            output[i] = (byte)length;
 800d1c0:	683a      	ldr	r2, [r7, #0]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	b2d2      	uxtb	r2, r2
 800d1ca:	701a      	strb	r2, [r3, #0]
        i++;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	60fb      	str	r3, [r7, #12]
 800d1d2:	e02f      	b.n	800d234 <SetLength+0x8e>
    }
    else {
        if (output)
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00b      	beq.n	800d1f2 <SetLength+0x4c>
            output[i] = (byte)(BytePrecision(length) | ASN_LONG_LENGTH);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7ff ffc3 	bl	800d166 <BytePrecision>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	440b      	add	r3, r1
 800d1ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d1ee:	b2d2      	uxtb	r2, r2
 800d1f0:	701a      	strb	r2, [r3, #0]
        i++;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	60fb      	str	r3, [r7, #12]

        for (j = BytePrecision(length); j; --j) {
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f7ff ffb4 	bl	800d166 <BytePrecision>
 800d1fe:	60b8      	str	r0, [r7, #8]
 800d200:	e015      	b.n	800d22e <SetLength+0x88>
            if (output)
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00c      	beq.n	800d222 <SetLength+0x7c>
                output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d20e:	3b01      	subs	r3, #1
 800d210:	00db      	lsls	r3, r3, #3
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	fa22 f103 	lsr.w	r1, r2, r3
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4413      	add	r3, r2
 800d21e:	b2ca      	uxtb	r2, r1
 800d220:	701a      	strb	r2, [r3, #0]
            i++;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3301      	adds	r3, #1
 800d226:	60fb      	str	r3, [r7, #12]
        for (j = BytePrecision(length); j; --j) {
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	3b01      	subs	r3, #1
 800d22c:	60bb      	str	r3, [r7, #8]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1e6      	bne.n	800d202 <SetLength+0x5c>
        }
    }

    return i;
 800d234:	68fb      	ldr	r3, [r7, #12]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <SetSequence>:

word32 SetSequence(word32 len, byte* output)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b082      	sub	sp, #8
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	6039      	str	r1, [r7, #0]
    if (output)
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <SetSequence+0x16>
        output[0] = ASN_SEQUENCE | ASN_CONSTRUCTED;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	2230      	movs	r2, #48	; 0x30
 800d252:	701a      	strb	r2, [r3, #0]
    return SetLength(len, output ? output + 1 : NULL) + 1;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d002      	beq.n	800d260 <SetSequence+0x22>
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	3301      	adds	r3, #1
 800d25e:	e000      	b.n	800d262 <SetSequence+0x24>
 800d260:	2300      	movs	r3, #0
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7ff ff9e 	bl	800d1a6 <SetLength>
 800d26a:	4603      	mov	r3, r0
 800d26c:	3301      	adds	r3, #1
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <IsSigAlgoECDSA>:
#endif /* HAVE_ECC && HAVE_ECC_KEY_EXPORT */


#ifdef HAVE_ECC
static WC_INLINE int IsSigAlgoECDSA(int algoOID)
{
 800d276:	b480      	push	{r7}
 800d278:	b083      	sub	sp, #12
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
    /* ECDSA sigAlgo must not have ASN1 NULL parameters */
    if (algoOID == CTC_SHAwECDSA || algoOID == CTC_SHA256wECDSA ||
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800d284:	d00d      	beq.n	800d2a2 <IsSigAlgoECDSA+0x2c>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800d28c:	d009      	beq.n	800d2a2 <IsSigAlgoECDSA+0x2c>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f240 220d 	movw	r2, #525	; 0x20d
 800d294:	4293      	cmp	r3, r2
 800d296:	d004      	beq.n	800d2a2 <IsSigAlgoECDSA+0x2c>
        algoOID == CTC_SHA384wECDSA || algoOID == CTC_SHA512wECDSA) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f240 220e 	movw	r2, #526	; 0x20e
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d101      	bne.n	800d2a6 <IsSigAlgoECDSA+0x30>
        return 1;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e000      	b.n	800d2a8 <IsSigAlgoECDSA+0x32>
    }

    return 0;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <SetAlgoID>:
#endif

word32 SetAlgoID(int algoOID, byte* output, int type, int curveSz)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b08e      	sub	sp, #56	; 0x38
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
 800d2c0:	603b      	str	r3, [r7, #0]
    word32 tagSz, idSz, seqSz, algoSz = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	623b      	str	r3, [r7, #32]
    const  byte* algoName = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	633b      	str	r3, [r7, #48]	; 0x30
    byte   ID_Length[1 + MAX_LENGTH_SZ];
    byte   seqArray[MAX_SEQ_SZ + 1];  /* add object_id to end */
    int    length = 0;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	637b      	str	r3, [r7, #52]	; 0x34
        #endif
        #ifdef HAVE_ED448
              && algoOID != ED448k
        #endif
              ) ||
             (type == oidKeyType && algoOID == RSAk)) ? 2 : 0;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d010      	beq.n	800d2f6 <SetAlgoID+0x42>
    tagSz = (type == oidHashType ||
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d105      	bne.n	800d2e6 <SetAlgoID+0x32>
              && !IsSigAlgoECDSA(algoOID)
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7ff ffcb 	bl	800d276 <IsSigAlgoECDSA>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d007      	beq.n	800d2f6 <SetAlgoID+0x42>
              ) ||
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d106      	bne.n	800d2fa <SetAlgoID+0x46>
             (type == oidKeyType && algoOID == RSAk)) ? 2 : 0;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f240 2285 	movw	r2, #645	; 0x285
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d101      	bne.n	800d2fa <SetAlgoID+0x46>
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	e000      	b.n	800d2fc <SetAlgoID+0x48>
 800d2fa:	2300      	movs	r3, #0
    tagSz = (type == oidHashType ||
 800d2fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    algoName = OidFromId(algoOID, type, &algoSz);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	f107 0220 	add.w	r2, r7, #32
 800d306:	4618      	mov	r0, r3
 800d308:	f7fe f88a 	bl	800b420 <OidFromId>
 800d30c:	6338      	str	r0, [r7, #48]	; 0x30

    if (algoName == NULL) {
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	2b00      	cmp	r3, #0
 800d312:	d101      	bne.n	800d318 <SetAlgoID+0x64>
        WOLFSSL_MSG("Unknown Algorithm");
        return 0;
 800d314:	2300      	movs	r3, #0
 800d316:	e07b      	b.n	800d410 <SetAlgoID+0x15c>
    }

    idSz  = SetObjectId(algoSz, ID_Length);
 800d318:	6a3b      	ldr	r3, [r7, #32]
 800d31a:	461a      	mov	r2, r3
 800d31c:	f107 0318 	add.w	r3, r7, #24
 800d320:	4619      	mov	r1, r3
 800d322:	4610      	mov	r0, r2
 800d324:	f7fe fbe5 	bl	800baf2 <SetObjectId>
 800d328:	4603      	mov	r3, r0
 800d32a:	62bb      	str	r3, [r7, #40]	; 0x28
    seqSz = SetSequence(idSz + algoSz + tagSz + curveSz, seqArray);
 800d32c:	6a3a      	ldr	r2, [r7, #32]
 800d32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d330:	441a      	add	r2, r3
 800d332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d334:	441a      	add	r2, r3
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	4413      	add	r3, r2
 800d33a:	f107 0210 	add.w	r2, r7, #16
 800d33e:	4611      	mov	r1, r2
 800d340:	4618      	mov	r0, r3
 800d342:	f7ff ff7c 	bl	800d23e <SetSequence>
 800d346:	6278      	str	r0, [r7, #36]	; 0x24

    /* Copy only algo to output for DSA keys */
    if (algoOID == DSAk && output) {
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f240 2203 	movw	r2, #515	; 0x203
 800d34e:	4293      	cmp	r3, r2
 800d350:	d11f      	bne.n	800d392 <SetAlgoID+0xde>
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01c      	beq.n	800d392 <SetAlgoID+0xde>
        XMEMCPY(output, ID_Length, idSz);
 800d358:	f107 0318 	add.w	r3, r7, #24
 800d35c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d35e:	4619      	mov	r1, r3
 800d360:	68b8      	ldr	r0, [r7, #8]
 800d362:	f00e fb56 	bl	801ba12 <memcpy>
        XMEMCPY(output + idSz, algoName, algoSz);
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	4413      	add	r3, r2
 800d36c:	6a3a      	ldr	r2, [r7, #32]
 800d36e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d370:	4618      	mov	r0, r3
 800d372:	f00e fb4e 	bl	801ba12 <memcpy>
        if (tagSz == 2)
 800d376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d134      	bne.n	800d3e6 <SetAlgoID+0x132>
            SetASNNull(&output[seqSz + idSz + algoSz]);
 800d37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	441a      	add	r2, r3
 800d382:	6a3b      	ldr	r3, [r7, #32]
 800d384:	4413      	add	r3, r2
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	4413      	add	r3, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fd fe0d 	bl	800afaa <SetASNNull>
        if (tagSz == 2)
 800d390:	e029      	b.n	800d3e6 <SetAlgoID+0x132>
    }
    else if (output) {
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d026      	beq.n	800d3e6 <SetAlgoID+0x132>
        XMEMCPY(output, seqArray, seqSz);
 800d398:	f107 0310 	add.w	r3, r7, #16
 800d39c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d39e:	4619      	mov	r1, r3
 800d3a0:	68b8      	ldr	r0, [r7, #8]
 800d3a2:	f00e fb36 	bl	801ba12 <memcpy>
        XMEMCPY(output + seqSz, ID_Length, idSz);
 800d3a6:	68ba      	ldr	r2, [r7, #8]
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f107 0118 	add.w	r1, r7, #24
 800d3b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f00e fb2d 	bl	801ba12 <memcpy>
        XMEMCPY(output + seqSz + idSz, algoName, algoSz);
 800d3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3bc:	4413      	add	r3, r2
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	6a3a      	ldr	r2, [r7, #32]
 800d3c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f00e fb23 	bl	801ba12 <memcpy>
        if (tagSz == 2)
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d109      	bne.n	800d3e6 <SetAlgoID+0x132>
            SetASNNull(&output[seqSz + idSz + algoSz]);
 800d3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	441a      	add	r2, r3
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
 800d3da:	4413      	add	r3, r2
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	4413      	add	r3, r2
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fd fde2 	bl	800afaa <SetASNNull>
    }

    if (algoOID == DSAk)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f240 2203 	movw	r2, #515	; 0x203
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d106      	bne.n	800d3fe <SetAlgoID+0x14a>
        length = idSz + algoSz + tagSz;
 800d3f0:	6a3a      	ldr	r2, [r7, #32]
 800d3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f4:	441a      	add	r2, r3
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	4413      	add	r3, r2
 800d3fa:	637b      	str	r3, [r7, #52]	; 0x34
 800d3fc:	e007      	b.n	800d40e <SetAlgoID+0x15a>
    else
        length = seqSz + idSz + algoSz + tagSz;
 800d3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	441a      	add	r2, r3
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	441a      	add	r2, r3
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	4413      	add	r3, r2
 800d40c:	637b      	str	r3, [r7, #52]	; 0x34

    return length;
 800d40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d410:	4618      	mov	r0, r3
 800d412:	3738      	adds	r7, #56	; 0x38
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <wc_EncodeSignature>:


word32 wc_EncodeSignature(byte* out, const byte* digest, word32 digSz,
                          int hashOID)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b0a2      	sub	sp, #136	; 0x88
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
 800d424:	603b      	str	r3, [r7, #0]
    byte digArray[MAX_ENCODED_DIG_SZ];
    byte algoArray[MAX_ALGO_SZ];
    byte seqArray[MAX_SEQ_SZ];
    word32 encDigSz, algoSz, seqSz;

    encDigSz = SetDigest(digest, digSz, digArray);
 800d426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d42a:	461a      	mov	r2, r3
 800d42c:	6879      	ldr	r1, [r7, #4]
 800d42e:	68b8      	ldr	r0, [r7, #8]
 800d430:	f7ff fe7f 	bl	800d132 <SetDigest>
 800d434:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    algoSz   = SetAlgoID(hashOID, algoArray, oidHashType, 0);
 800d438:	f107 011c 	add.w	r1, r7, #28
 800d43c:	2300      	movs	r3, #0
 800d43e:	2200      	movs	r2, #0
 800d440:	6838      	ldr	r0, [r7, #0]
 800d442:	f7ff ff37 	bl	800d2b4 <SetAlgoID>
 800d446:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    seqSz    = SetSequence(encDigSz + algoSz, seqArray);
 800d44a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d44e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d452:	4413      	add	r3, r2
 800d454:	f107 0214 	add.w	r2, r7, #20
 800d458:	4611      	mov	r1, r2
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff feef 	bl	800d23e <SetSequence>
 800d460:	67f8      	str	r0, [r7, #124]	; 0x7c

    XMEMCPY(out, seqArray, seqSz);
 800d462:	f107 0314 	add.w	r3, r7, #20
 800d466:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d468:	4619      	mov	r1, r3
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f00e fad1 	bl	801ba12 <memcpy>
    XMEMCPY(out + seqSz, algoArray, algoSz);
 800d470:	68fa      	ldr	r2, [r7, #12]
 800d472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d474:	4413      	add	r3, r2
 800d476:	f107 011c 	add.w	r1, r7, #28
 800d47a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d47e:	4618      	mov	r0, r3
 800d480:	f00e fac7 	bl	801ba12 <memcpy>
    XMEMCPY(out + seqSz + algoSz, digArray, encDigSz);
 800d484:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d486:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d48a:	4413      	add	r3, r2
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	4413      	add	r3, r2
 800d490:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d494:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d498:	4618      	mov	r0, r3
 800d49a:	f00e faba 	bl	801ba12 <memcpy>

    return encDigSz + algoSz + seqSz;
 800d49e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d4a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4a6:	441a      	add	r2, r3
 800d4a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4aa:	4413      	add	r3, r2
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3788      	adds	r7, #136	; 0x88
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <InitSignatureCtx>:

    return ret;
}

void InitSignatureCtx(SignatureCtx* sigCtx, void* heap, int devId)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
    if (sigCtx) {
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00a      	beq.n	800d4dc <InitSignatureCtx+0x28>
        XMEMSET(sigCtx, 0, sizeof(SignatureCtx));
 800d4c6:	222c      	movs	r2, #44	; 0x2c
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f00e fac5 	bl	801ba5a <memset>
        sigCtx->devId = devId;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	619a      	str	r2, [r3, #24]
        sigCtx->heap = heap;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	601a      	str	r2, [r3, #0]
    }
}
 800d4dc:	bf00      	nop
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <FreeSignatureCtx>:

void FreeSignatureCtx(SignatureCtx* sigCtx)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
    if (sigCtx == NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d056      	beq.n	800d5a0 <FreeSignatureCtx+0xbc>
        return;

    if (sigCtx->digest) {
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00b      	beq.n	800d512 <FreeSignatureCtx+0x2e>
        XFREE(sigCtx->digest, sigCtx->heap, DYNAMIC_TYPE_DIGEST);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	617b      	str	r3, [r7, #20]
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d002      	beq.n	800d50c <FreeSignatureCtx+0x28>
 800d506:	6978      	ldr	r0, [r7, #20]
 800d508:	f003 ffc4 	bl	8011494 <wolfSSL_Free>
        sigCtx->digest = NULL;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	605a      	str	r2, [r3, #4]
    }
#if !(defined(NO_RSA) && defined(NO_DSA))
    if (sigCtx->sigCpy) {
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00b      	beq.n	800d532 <FreeSignatureCtx+0x4e>
        XFREE(sigCtx->sigCpy, sigCtx->heap, DYNAMIC_TYPE_SIGNATURE);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	613b      	str	r3, [r7, #16]
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <FreeSignatureCtx+0x48>
 800d526:	6938      	ldr	r0, [r7, #16]
 800d528:	f003 ffb4 	bl	8011494 <wolfSSL_Free>
        sigCtx->sigCpy = NULL;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	60da      	str	r2, [r3, #12]
    }
#endif
#ifndef NO_ASN_CRYPT
    if (sigCtx->key.ptr) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d02e      	beq.n	800d598 <FreeSignatureCtx+0xb4>
        switch (sigCtx->keyOID) {
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d53e:	f240 2206 	movw	r2, #518	; 0x206
 800d542:	4293      	cmp	r3, r2
 800d544:	d013      	beq.n	800d56e <FreeSignatureCtx+0x8a>
 800d546:	f240 2285 	movw	r2, #645	; 0x285
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d000      	beq.n	800d550 <FreeSignatureCtx+0x6c>
                wc_ed448_free(sigCtx->key.ed448);
                XFREE(sigCtx->key.ed448, sigCtx->heap, DYNAMIC_TYPE_ED448);
                break;
        #endif /* HAVE_ED448 */
            default:
                break;
 800d54e:	e020      	b.n	800d592 <FreeSignatureCtx+0xae>
                wc_FreeRsaKey(sigCtx->key.rsa);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	695b      	ldr	r3, [r3, #20]
 800d554:	4618      	mov	r0, r3
 800d556:	f004 fa00 	bl	801195a <wc_FreeRsaKey>
                XFREE(sigCtx->key.ptr, sigCtx->heap, DYNAMIC_TYPE_RSA);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	60fb      	str	r3, [r7, #12]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d012      	beq.n	800d58c <FreeSignatureCtx+0xa8>
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f003 ff94 	bl	8011494 <wolfSSL_Free>
                break;
 800d56c:	e00e      	b.n	800d58c <FreeSignatureCtx+0xa8>
                wc_ecc_free(sigCtx->key.ecc);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	4618      	mov	r0, r3
 800d574:	f003 fb4c 	bl	8010c10 <wc_ecc_free>
                XFREE(sigCtx->key.ecc, sigCtx->heap, DYNAMIC_TYPE_ECC);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	60bb      	str	r3, [r7, #8]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d005      	beq.n	800d590 <FreeSignatureCtx+0xac>
 800d584:	68b8      	ldr	r0, [r7, #8]
 800d586:	f003 ff85 	bl	8011494 <wolfSSL_Free>
                break;
 800d58a:	e001      	b.n	800d590 <FreeSignatureCtx+0xac>
                break;
 800d58c:	bf00      	nop
 800d58e:	e000      	b.n	800d592 <FreeSignatureCtx+0xae>
                break;
 800d590:	bf00      	nop
        } /* switch (keyOID) */
        sigCtx->key.ptr = NULL;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	615a      	str	r2, [r3, #20]
    }
#endif

    /* reset state, we are done */
    sigCtx->state = SIG_STATE_BEGIN;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	61da      	str	r2, [r3, #28]
 800d59e:	e000      	b.n	800d5a2 <FreeSignatureCtx+0xbe>
        return;
 800d5a0:	bf00      	nop
}
 800d5a2:	3718      	adds	r7, #24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <HashForSignature>:

#ifndef NO_ASN_CRYPT
static int HashForSignature(const byte* buf, word32 bufSz, word32 sigOID,
                            byte* digest, int* typeH, int* digestSz, int verify)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	617b      	str	r3, [r7, #20]

    (void)verify;

    switch (sigOID) {
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800d5c0:	d006      	beq.n	800d5d0 <HashForSignature+0x28>
 800d5c2:	f240 228f 	movw	r2, #655	; 0x28f
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d002      	beq.n	800d5d0 <HashForSignature+0x28>
 800d5ca:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800d5ce:	d110      	bne.n	800d5f2 <HashForSignature+0x4a>
    #endif
    #ifndef NO_SHA256
        case CTC_SHA256wRSA:
        case CTC_SHA256wECDSA:
        case CTC_SHA256wDSA:
            if ((ret = wc_Sha256Hash(buf, bufSz, digest)) == 0) {
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	68b9      	ldr	r1, [r7, #8]
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f003 ff05 	bl	80113e4 <wc_Sha256Hash>
 800d5da:	6178      	str	r0, [r7, #20]
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d10b      	bne.n	800d5fa <HashForSignature+0x52>
                *typeH    = SHA256h;
 800d5e2:	6a3b      	ldr	r3, [r7, #32]
 800d5e4:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800d5e8:	601a      	str	r2, [r3, #0]
                *digestSz = WC_SHA256_DIGEST_SIZE;
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	2220      	movs	r2, #32
 800d5ee:	601a      	str	r2, [r3, #0]
            }
            break;
 800d5f0:	e003      	b.n	800d5fa <HashForSignature+0x52>
             * Two dependent hashes with prefixes performed.
             */
            break;
    #endif
        default:
            ret = HASH_TYPE_E;
 800d5f2:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	e000      	b.n	800d5fc <HashForSignature+0x54>
            break;
 800d5fa:	bf00      	nop
            WOLFSSL_MSG("Hash for Signature has unsupported type");
    }

    return ret;
 800d5fc:	697b      	ldr	r3, [r7, #20]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
	...

0800d608 <ConfirmSignature>:
/* Return codes: 0=Success, Negative (see error-crypt.h), ASN_SIG_CONFIRM_E */
static int ConfirmSignature(SignatureCtx* sigCtx,
    const byte* buf, word32 bufSz,
    const byte* key, word32 keySz, word32 keyOID,
    const byte* sig, word32 sigSz, word32 sigOID, byte* rsaKeyIdx)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b090      	sub	sp, #64	; 0x40
 800d60c:	af04      	add	r7, sp, #16
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
 800d614:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifndef WOLFSSL_RENESAS_TSIP_TLS
    (void)rsaKeyIdx;
#endif
    if (sigCtx == NULL || buf == NULL || bufSz == 0 || key == NULL ||
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d011      	beq.n	800d644 <ConfirmSignature+0x3c>
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00e      	beq.n	800d644 <ConfirmSignature+0x3c>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00b      	beq.n	800d644 <ConfirmSignature+0x3c>
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d008      	beq.n	800d644 <ConfirmSignature+0x3c>
 800d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d634:	2b00      	cmp	r3, #0
 800d636:	d005      	beq.n	800d644 <ConfirmSignature+0x3c>
        keySz == 0 || sig == NULL || sigSz == 0) {
 800d638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <ConfirmSignature+0x3c>
 800d63e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d640:	2b00      	cmp	r3, #0
 800d642:	d102      	bne.n	800d64a <ConfirmSignature+0x42>
        return BAD_FUNC_ARG;
 800d644:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800d648:	e15e      	b.n	800d908 <ConfirmSignature+0x300>
    (void)sigSz;

    WOLFSSL_ENTER("ConfirmSignature");

#ifndef NO_ASN_CRYPT
    switch (sigCtx->state) {
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	69db      	ldr	r3, [r3, #28]
 800d64e:	2b04      	cmp	r3, #4
 800d650:	f200 8156 	bhi.w	800d900 <ConfirmSignature+0x2f8>
 800d654:	a201      	add	r2, pc, #4	; (adr r2, 800d65c <ConfirmSignature+0x54>)
 800d656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65a:	bf00      	nop
 800d65c:	0800d671 	.word	0x0800d671
 800d660:	0800d699 	.word	0x0800d699
 800d664:	0800d6c9 	.word	0x0800d6c9
 800d668:	0800d7e5 	.word	0x0800d7e5
 800d66c:	0800d84b 	.word	0x0800d84b
        case SIG_STATE_BEGIN:
        {
            sigCtx->keyOID = keyOID; /* must set early for cleanup */
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d674:	629a      	str	r2, [r3, #40]	; 0x28

            sigCtx->digest = (byte*)XMALLOC(WC_MAX_DIGEST_SIZE, sigCtx->heap,
 800d676:	2020      	movs	r0, #32
 800d678:	f003 fef0 	bl	801145c <wolfSSL_Malloc>
 800d67c:	4602      	mov	r2, r0
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	605a      	str	r2, [r3, #4]
                                                    DYNAMIC_TYPE_DIGEST);
            if (sigCtx->digest == NULL) {
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d103      	bne.n	800d692 <ConfirmSignature+0x8a>
                ERROR_OUT(MEMORY_E, exit_cs);
 800d68a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800d68e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d690:	e136      	b.n	800d900 <ConfirmSignature+0x2f8>
            }

            sigCtx->state = SIG_STATE_HASH;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2201      	movs	r2, #1
 800d696:	61da      	str	r2, [r3, #28]
        } /* SIG_STATE_BEGIN */
        FALL_THROUGH;

        case SIG_STATE_HASH:
        {
            ret = HashForSignature(buf, bufSz, sigOID, sigCtx->digest,
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6858      	ldr	r0, [r3, #4]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3320      	adds	r3, #32
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	3224      	adds	r2, #36	; 0x24
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	9102      	str	r1, [sp, #8]
 800d6a8:	9201      	str	r2, [sp, #4]
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6b0:	6879      	ldr	r1, [r7, #4]
 800d6b2:	68b8      	ldr	r0, [r7, #8]
 800d6b4:	f7ff ff78 	bl	800d5a8 <HashForSignature>
 800d6b8:	62f8      	str	r0, [r7, #44]	; 0x2c
                                   &sigCtx->typeH, &sigCtx->digestSz, 1);
            if (ret != 0) {
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f040 8116 	bne.w	800d8ee <ConfirmSignature+0x2e6>
                goto exit_cs;
            }

            sigCtx->state = SIG_STATE_KEY;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2202      	movs	r2, #2
 800d6c6:	61da      	str	r2, [r3, #28]
        } /* SIG_STATE_HASH */
        FALL_THROUGH;

        case SIG_STATE_KEY:
        {
            switch (keyOID) {
 800d6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ca:	f240 2206 	movw	r2, #518	; 0x206
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d04d      	beq.n	800d76e <ConfirmSignature+0x166>
 800d6d2:	f240 2285 	movw	r2, #645	; 0x285
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d178      	bne.n	800d7cc <ConfirmSignature+0x1c4>
            #ifndef NO_RSA
                case RSAk:
                {
                    word32 idx = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	61bb      	str	r3, [r7, #24]

                    sigCtx->key.rsa = (RsaKey*)XMALLOC(sizeof(RsaKey),
 800d6de:	f641 007c 	movw	r0, #6268	; 0x187c
 800d6e2:	f003 febb 	bl	801145c <wolfSSL_Malloc>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	615a      	str	r2, [r3, #20]
                                                sigCtx->heap, DYNAMIC_TYPE_RSA);
                    sigCtx->sigCpy = (byte*)XMALLOC(MAX_ENCODED_SIG_SZ,
 800d6ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d6f0:	f003 feb4 	bl	801145c <wolfSSL_Malloc>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	60da      	str	r2, [r3, #12]
                                         sigCtx->heap, DYNAMIC_TYPE_SIGNATURE);
                    if (sigCtx->key.rsa == NULL || sigCtx->sigCpy == NULL) {
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	695b      	ldr	r3, [r3, #20]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d003      	beq.n	800d70a <ConfirmSignature+0x102>
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d103      	bne.n	800d712 <ConfirmSignature+0x10a>
                        ERROR_OUT(MEMORY_E, exit_cs);
 800d70a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800d70e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d710:	e0f6      	b.n	800d900 <ConfirmSignature+0x2f8>
                    }
                    if ((ret = wc_InitRsaKey_ex(sigCtx->key.rsa, sigCtx->heap,
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6958      	ldr	r0, [r3, #20]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6819      	ldr	r1, [r3, #0]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	699b      	ldr	r3, [r3, #24]
 800d71e:	461a      	mov	r2, r3
 800d720:	f004 f89c 	bl	801185c <wc_InitRsaKey_ex>
 800d724:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f040 80e2 	bne.w	800d8f2 <ConfirmSignature+0x2ea>
                                                        sigCtx->devId)) != 0) {
                        goto exit_cs;
                    }
                    if (sigSz > MAX_ENCODED_SIG_SZ) {
 800d72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d734:	d903      	bls.n	800d73e <ConfirmSignature+0x136>
                        WOLFSSL_MSG("Verify Signature is too big");
                        ERROR_OUT(BUFFER_E, exit_cs);
 800d736:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800d73a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d73c:	e0e0      	b.n	800d900 <ConfirmSignature+0x2f8>
                    }
                    if ((ret = wc_RsaPublicKeyDecode(key, &idx, sigCtx->key.rsa,
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	695a      	ldr	r2, [r3, #20]
 800d742:	f107 0118 	add.w	r1, r7, #24
 800d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d748:	6838      	ldr	r0, [r7, #0]
 800d74a:	f7fe fcf5 	bl	800c138 <wc_RsaPublicKeyDecode>
 800d74e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d752:	2b00      	cmp	r3, #0
 800d754:	f040 80cf 	bne.w	800d8f6 <ConfirmSignature+0x2ee>
                                                                 keySz)) != 0) {
                        WOLFSSL_MSG("ASN Key decode error RSA");
                        goto exit_cs;
                    }
                    XMEMCPY(sigCtx->sigCpy, sig, sigSz);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d75e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d760:	4618      	mov	r0, r3
 800d762:	f00e f956 	bl	801ba12 <memcpy>
                    sigCtx->out = NULL;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	609a      	str	r2, [r3, #8]
 800d76c:	e033      	b.n	800d7d6 <ConfirmSignature+0x1ce>
                }
            #endif /* !NO_DSA && !HAVE_SELFTEST */
            #ifdef HAVE_ECC
                case ECDSAk:
                {
                    word32 idx = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	617b      	str	r3, [r7, #20]

                    sigCtx->verify = 0;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	611a      	str	r2, [r3, #16]
                    sigCtx->key.ecc = (ecc_key*)XMALLOC(sizeof(ecc_key),
 800d778:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800d77c:	f003 fe6e 	bl	801145c <wolfSSL_Malloc>
 800d780:	4602      	mov	r2, r0
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	615a      	str	r2, [r3, #20]
                                                sigCtx->heap, DYNAMIC_TYPE_ECC);
                    if (sigCtx->key.ecc == NULL) {
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	695b      	ldr	r3, [r3, #20]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d103      	bne.n	800d796 <ConfirmSignature+0x18e>
                        ERROR_OUT(MEMORY_E, exit_cs);
 800d78e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800d792:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d794:	e0b4      	b.n	800d900 <ConfirmSignature+0x2f8>
                    }
                    if ((ret = wc_ecc_init_ex(sigCtx->key.ecc, sigCtx->heap,
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6958      	ldr	r0, [r3, #20]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6819      	ldr	r1, [r3, #0]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	f003 f9ea 	bl	8010b7c <wc_ecc_init_ex>
 800d7a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f2c0 80a4 	blt.w	800d8fa <ConfirmSignature+0x2f2>
                                                          sigCtx->devId)) < 0) {
                        goto exit_cs;
                    }
                    ret = wc_EccPublicKeyDecode(key, &idx, sigCtx->key.ecc,
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	695a      	ldr	r2, [r3, #20]
 800d7b6:	f107 0114 	add.w	r1, r7, #20
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	6838      	ldr	r0, [r7, #0]
 800d7be:	f002 fb74 	bl	800feaa <wc_EccPublicKeyDecode>
 800d7c2:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                         keySz);
                    if (ret < 0) {
 800d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	da04      	bge.n	800d7d4 <ConfirmSignature+0x1cc>
                        WOLFSSL_MSG("ASN Key import error ECC");
                        goto exit_cs;
 800d7ca:	e099      	b.n	800d900 <ConfirmSignature+0x2f8>
                    break;
                }
            #endif
                default:
                    WOLFSSL_MSG("Verify Key type unknown");
                    ret = ASN_UNKNOWN_OID_E;
 800d7cc:	f06f 0393 	mvn.w	r3, #147	; 0x93
 800d7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800d7d2:	e000      	b.n	800d7d6 <ConfirmSignature+0x1ce>
                    break;
 800d7d4:	bf00      	nop
            } /* switch (keyOID) */

            if (ret != 0) {
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f040 8090 	bne.w	800d8fe <ConfirmSignature+0x2f6>
                goto exit_cs;
            }

            sigCtx->state = SIG_STATE_DO;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2203      	movs	r2, #3
 800d7e2:	61da      	str	r2, [r3, #28]
        } /* SIG_STATE_KEY */
        FALL_THROUGH;

        case SIG_STATE_DO:
        {
            switch (keyOID) {
 800d7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e6:	f240 2206 	movw	r2, #518	; 0x206
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d010      	beq.n	800d810 <ConfirmSignature+0x208>
 800d7ee:	f240 2285 	movw	r2, #645	; 0x285
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d000      	beq.n	800d7f8 <ConfirmSignature+0x1f0>
                                             NULL, 0);
                    break;
                }
            #endif
                default:
                    break;
 800d7f6:	e01e      	b.n	800d836 <ConfirmSignature+0x22e>
                        ret = wc_RsaSSL_VerifyInline(sigCtx->sigCpy, sigSz,
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	68d8      	ldr	r0, [r3, #12]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f103 0208 	add.w	r2, r3, #8
                                                 &sigCtx->out, sigCtx->key.rsa);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	695b      	ldr	r3, [r3, #20]
                        ret = wc_RsaSSL_VerifyInline(sigCtx->sigCpy, sigSz,
 800d806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d808:	f004 ffee 	bl	80127e8 <wc_RsaSSL_VerifyInline>
 800d80c:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800d80e:	e012      	b.n	800d836 <ConfirmSignature+0x22e>
                        ret = wc_ecc_verify_hash(sig, sigSz, sigCtx->digest,
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6859      	ldr	r1, [r3, #4]
                                            sigCtx->digestSz, &sigCtx->verify,
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ret = wc_ecc_verify_hash(sig, sigSz, sigCtx->digest,
 800d818:	4618      	mov	r0, r3
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	3310      	adds	r3, #16
                                            sigCtx->key.ecc);
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	6952      	ldr	r2, [r2, #20]
                        ret = wc_ecc_verify_hash(sig, sigSz, sigCtx->digest,
 800d822:	9201      	str	r2, [sp, #4]
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	4603      	mov	r3, r0
 800d828:	460a      	mov	r2, r1
 800d82a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d82c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d82e:	f003 fa13 	bl	8010c58 <wc_ecc_verify_hash>
 800d832:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800d834:	bf00      	nop
            if (ret == WC_PENDING_E) {
                goto exit_cs;
            }
        #endif

            if (ret < 0) {
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	2b00      	cmp	r3, #0
 800d83a:	da03      	bge.n	800d844 <ConfirmSignature+0x23c>
                /* treat all RSA errors as ASN_SIG_CONFIRM_E */
                ret = ASN_SIG_CONFIRM_E;
 800d83c:	f06f 039a 	mvn.w	r3, #154	; 0x9a
 800d840:	62fb      	str	r3, [r7, #44]	; 0x2c
                goto exit_cs;
 800d842:	e05d      	b.n	800d900 <ConfirmSignature+0x2f8>
            }

            sigCtx->state = SIG_STATE_CHECK;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2204      	movs	r2, #4
 800d848:	61da      	str	r2, [r3, #28]
        } /* SIG_STATE_DO */
        FALL_THROUGH;

        case SIG_STATE_CHECK:
        {
            switch (keyOID) {
 800d84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d84c:	f240 2206 	movw	r2, #518	; 0x206
 800d850:	4293      	cmp	r3, r2
 800d852:	d03f      	beq.n	800d8d4 <ConfirmSignature+0x2cc>
 800d854:	f240 2285 	movw	r2, #645	; 0x285
 800d858:	4293      	cmp	r3, r2
 800d85a:	d000      	beq.n	800d85e <ConfirmSignature+0x256>
                    }
                    break;
                }
            #endif /* HAVE_ED448 */
                default:
                    break;
 800d85c:	e046      	b.n	800d8ec <ConfirmSignature+0x2e4>
                    byte* encodedSig = (byte*)XMALLOC(MAX_ENCODED_SIG_SZ,
 800d85e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d862:	f003 fdfb 	bl	801145c <wolfSSL_Malloc>
 800d866:	62b8      	str	r0, [r7, #40]	; 0x28
                    if (encodedSig == NULL) {
 800d868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d103      	bne.n	800d876 <ConfirmSignature+0x26e>
                        ERROR_OUT(MEMORY_E, exit_cs);
 800d86e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800d872:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d874:	e044      	b.n	800d900 <ConfirmSignature+0x2f8>
                    verifySz = ret;
 800d876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d878:	627b      	str	r3, [r7, #36]	; 0x24
                            sigCtx->digest, sigCtx->digestSz, sigCtx->typeH);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6859      	ldr	r1, [r3, #4]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    encodedSigSz = wc_EncodeSignature(encodedSig,
 800d882:	461a      	mov	r2, r3
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6a1b      	ldr	r3, [r3, #32]
 800d888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d88a:	f7ff fdc5 	bl	800d418 <wc_EncodeSignature>
 800d88e:	4603      	mov	r3, r0
 800d890:	623b      	str	r3, [r7, #32]
                    if (encodedSigSz == verifySz && sigCtx->out != NULL &&
 800d892:	6a3a      	ldr	r2, [r7, #32]
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	429a      	cmp	r2, r3
 800d898:	d110      	bne.n	800d8bc <ConfirmSignature+0x2b4>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00c      	beq.n	800d8bc <ConfirmSignature+0x2b4>
                        XMEMCMP(sigCtx->out, encodedSig, encodedSigSz) == 0) {
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	6a3a      	ldr	r2, [r7, #32]
 800d8a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f00e f8a2 	bl	801b9f4 <memcmp>
 800d8b0:	4603      	mov	r3, r0
                    if (encodedSigSz == verifySz && sigCtx->out != NULL &&
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d102      	bne.n	800d8bc <ConfirmSignature+0x2b4>
                        ret = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8ba:	e002      	b.n	800d8c2 <ConfirmSignature+0x2ba>
                        ret = ASN_SIG_CONFIRM_E;
 800d8bc:	f06f 039a 	mvn.w	r3, #154	; 0x9a
 800d8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    XFREE(encodedSig, sigCtx->heap, DYNAMIC_TYPE_TMP_BUFFER);
 800d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c4:	61fb      	str	r3, [r7, #28]
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00e      	beq.n	800d8ea <ConfirmSignature+0x2e2>
 800d8cc:	69f8      	ldr	r0, [r7, #28]
 800d8ce:	f003 fde1 	bl	8011494 <wolfSSL_Free>
                    break;
 800d8d2:	e00a      	b.n	800d8ea <ConfirmSignature+0x2e2>
                    if (sigCtx->verify == 1) {
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d102      	bne.n	800d8e2 <ConfirmSignature+0x2da>
                        ret = 0;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800d8e0:	e004      	b.n	800d8ec <ConfirmSignature+0x2e4>
                        ret = ASN_SIG_CONFIRM_E;
 800d8e2:	f06f 039a 	mvn.w	r3, #154	; 0x9a
 800d8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800d8e8:	e000      	b.n	800d8ec <ConfirmSignature+0x2e4>
                    break;
 800d8ea:	bf00      	nop
            }  /* switch (keyOID) */

            break;
 800d8ec:	e008      	b.n	800d900 <ConfirmSignature+0x2f8>
                goto exit_cs;
 800d8ee:	bf00      	nop
 800d8f0:	e006      	b.n	800d900 <ConfirmSignature+0x2f8>
                        goto exit_cs;
 800d8f2:	bf00      	nop
 800d8f4:	e004      	b.n	800d900 <ConfirmSignature+0x2f8>
                        goto exit_cs;
 800d8f6:	bf00      	nop
 800d8f8:	e002      	b.n	800d900 <ConfirmSignature+0x2f8>
                        goto exit_cs;
 800d8fa:	bf00      	nop
 800d8fc:	e000      	b.n	800d900 <ConfirmSignature+0x2f8>
                goto exit_cs;
 800d8fe:	bf00      	nop
#ifdef WOLFSSL_ASYNC_CRYPT
    if (ret == WC_PENDING_E)
        return ret;
#endif

    FreeSignatureCtx(sigCtx);
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f7ff fdef 	bl	800d4e4 <FreeSignatureCtx>

    return ret;
 800d906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3730      	adds	r7, #48	; 0x30
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <MatchBaseName>:

#ifndef IGNORE_NAME_CONSTRAINTS

static int MatchBaseName(int type, const char* name, int nameSz,
                         const char* base, int baseSz)
{
 800d910:	b590      	push	{r4, r7, lr}
 800d912:	b089      	sub	sp, #36	; 0x24
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
 800d91c:	603b      	str	r3, [r7, #0]
    if (base == NULL || baseSz <= 0 || name == NULL || nameSz <= 0 ||
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d016      	beq.n	800d952 <MatchBaseName+0x42>
 800d924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d926:	2b00      	cmp	r3, #0
 800d928:	dd13      	ble.n	800d952 <MatchBaseName+0x42>
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d010      	beq.n	800d952 <MatchBaseName+0x42>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	dd0d      	ble.n	800d952 <MatchBaseName+0x42>
            name[0] == '.' || nameSz < baseSz ||
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	781b      	ldrb	r3, [r3, #0]
    if (base == NULL || baseSz <= 0 || name == NULL || nameSz <= 0 ||
 800d93a:	2b2e      	cmp	r3, #46	; 0x2e
 800d93c:	d009      	beq.n	800d952 <MatchBaseName+0x42>
            name[0] == '.' || nameSz < baseSz ||
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d942:	429a      	cmp	r2, r3
 800d944:	db05      	blt.n	800d952 <MatchBaseName+0x42>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d004      	beq.n	800d956 <MatchBaseName+0x46>
            (type != ASN_RFC822_TYPE && type != ASN_DNS_TYPE))
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2b02      	cmp	r3, #2
 800d950:	d001      	beq.n	800d956 <MatchBaseName+0x46>
        return 0;
 800d952:	2300      	movs	r3, #0
 800d954:	e094      	b.n	800da80 <MatchBaseName+0x170>

    /* If an email type, handle special cases where the base is only
     * a domain, or is an email address itself. */
    if (type == ASN_RFC822_TYPE) {
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d146      	bne.n	800d9ea <MatchBaseName+0xda>
        const char* p = NULL;
 800d95c:	2300      	movs	r3, #0
 800d95e:	61fb      	str	r3, [r7, #28]
        int count = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	61bb      	str	r3, [r7, #24]

        if (base[0] != '.') {
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b2e      	cmp	r3, #46	; 0x2e
 800d96a:	d018      	beq.n	800d99e <MatchBaseName+0x8e>
            p = base;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	61fb      	str	r3, [r7, #28]
            count = 0;
 800d970:	2300      	movs	r3, #0
 800d972:	61bb      	str	r3, [r7, #24]

            /* find the '@' in the base */
            while (*p != '@' && count < baseSz) {
 800d974:	e005      	b.n	800d982 <MatchBaseName+0x72>
                count++;
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	3301      	adds	r3, #1
 800d97a:	61bb      	str	r3, [r7, #24]
                p++;
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	3301      	adds	r3, #1
 800d980:	61fb      	str	r3, [r7, #28]
            while (*p != '@' && count < baseSz) {
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b40      	cmp	r3, #64	; 0x40
 800d988:	d003      	beq.n	800d992 <MatchBaseName+0x82>
 800d98a:	69ba      	ldr	r2, [r7, #24]
 800d98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98e:	429a      	cmp	r2, r3
 800d990:	dbf1      	blt.n	800d976 <MatchBaseName+0x66>
            }

            /* No '@' in base, reset p to NULL */
            if (count >= baseSz)
 800d992:	69ba      	ldr	r2, [r7, #24]
 800d994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d996:	429a      	cmp	r2, r3
 800d998:	db01      	blt.n	800d99e <MatchBaseName+0x8e>
                p = NULL;
 800d99a:	2300      	movs	r3, #0
 800d99c:	61fb      	str	r3, [r7, #28]
        }

        if (p == NULL) {
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d122      	bne.n	800d9ea <MatchBaseName+0xda>
            /* Base isn't an email address, it is a domain name,
             * wind the name forward one character past its '@'. */
            p = name;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	61fb      	str	r3, [r7, #28]
            count = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	61bb      	str	r3, [r7, #24]
            while (*p != '@' && count < baseSz) {
 800d9ac:	e005      	b.n	800d9ba <MatchBaseName+0xaa>
                count++;
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	61bb      	str	r3, [r7, #24]
                p++;
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	61fb      	str	r3, [r7, #28]
            while (*p != '@' && count < baseSz) {
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	2b40      	cmp	r3, #64	; 0x40
 800d9c0:	d003      	beq.n	800d9ca <MatchBaseName+0xba>
 800d9c2:	69ba      	ldr	r2, [r7, #24]
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	dbf1      	blt.n	800d9ae <MatchBaseName+0x9e>
            }

            if (count < baseSz && *p == '@') {
 800d9ca:	69ba      	ldr	r2, [r7, #24]
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	da0b      	bge.n	800d9ea <MatchBaseName+0xda>
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	2b40      	cmp	r3, #64	; 0x40
 800d9d8:	d107      	bne.n	800d9ea <MatchBaseName+0xda>
                name = p + 1;
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	60bb      	str	r3, [r7, #8]
                nameSz -= count + 1;
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	607b      	str	r3, [r7, #4]
            }
        }
    }

    if ((type == ASN_DNS_TYPE || type == ASN_RFC822_TYPE) && base[0] == '.') {
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d002      	beq.n	800d9f6 <MatchBaseName+0xe6>
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d140      	bne.n	800da78 <MatchBaseName+0x168>
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d9fc:	d13c      	bne.n	800da78 <MatchBaseName+0x168>
        int szAdjust = nameSz - baseSz;
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	617b      	str	r3, [r7, #20]
        name += szAdjust;
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	4413      	add	r3, r2
 800da0c:	60bb      	str	r3, [r7, #8]
        nameSz -= szAdjust;
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	607b      	str	r3, [r7, #4]
    }

    while (nameSz > 0) {
 800da16:	e02f      	b.n	800da78 <MatchBaseName+0x168>
        if (XTOLOWER((unsigned char)*name++) !=
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	60ba      	str	r2, [r7, #8]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	74fb      	strb	r3, [r7, #19]
 800da22:	f00d ffb7 	bl	801b994 <__locale_ctype_ptr>
 800da26:	4602      	mov	r2, r0
 800da28:	7cfb      	ldrb	r3, [r7, #19]
 800da2a:	3301      	adds	r3, #1
 800da2c:	4413      	add	r3, r2
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	f003 0303 	and.w	r3, r3, #3
 800da34:	2b01      	cmp	r3, #1
 800da36:	d103      	bne.n	800da40 <MatchBaseName+0x130>
 800da38:	7cfb      	ldrb	r3, [r7, #19]
 800da3a:	f103 0420 	add.w	r4, r3, #32
 800da3e:	e000      	b.n	800da42 <MatchBaseName+0x132>
 800da40:	7cfc      	ldrb	r4, [r7, #19]
                                               XTOLOWER((unsigned char)*base++))
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	1c5a      	adds	r2, r3, #1
 800da46:	603a      	str	r2, [r7, #0]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	74bb      	strb	r3, [r7, #18]
 800da4c:	f00d ffa2 	bl	801b994 <__locale_ctype_ptr>
 800da50:	4602      	mov	r2, r0
 800da52:	7cbb      	ldrb	r3, [r7, #18]
 800da54:	3301      	adds	r3, #1
 800da56:	4413      	add	r3, r2
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	f003 0303 	and.w	r3, r3, #3
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d102      	bne.n	800da68 <MatchBaseName+0x158>
 800da62:	7cbb      	ldrb	r3, [r7, #18]
 800da64:	3320      	adds	r3, #32
 800da66:	e000      	b.n	800da6a <MatchBaseName+0x15a>
 800da68:	7cbb      	ldrb	r3, [r7, #18]
        if (XTOLOWER((unsigned char)*name++) !=
 800da6a:	429c      	cmp	r4, r3
 800da6c:	d001      	beq.n	800da72 <MatchBaseName+0x162>
            return 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	e006      	b.n	800da80 <MatchBaseName+0x170>
        nameSz--;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	3b01      	subs	r3, #1
 800da76:	607b      	str	r3, [r7, #4]
    while (nameSz > 0) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	dccc      	bgt.n	800da18 <MatchBaseName+0x108>
    }

    return 1;
 800da7e:	2301      	movs	r3, #1
}
 800da80:	4618      	mov	r0, r3
 800da82:	3724      	adds	r7, #36	; 0x24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd90      	pop	{r4, r7, pc}

0800da88 <ConfirmNameConstraints>:


static int ConfirmNameConstraints(Signer* signer, DecodedCert* cert)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b092      	sub	sp, #72	; 0x48
 800da8c:	af02      	add	r7, sp, #8
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
    if (signer == NULL || cert == NULL)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <ConfirmNameConstraints+0x16>
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <ConfirmNameConstraints+0x1a>
        return 0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	e133      	b.n	800dd0a <ConfirmNameConstraints+0x282>

    /* Check against the excluded list */
    if (signer->excludedNames) {
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6a1b      	ldr	r3, [r3, #32]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d07f      	beq.n	800dbaa <ConfirmNameConstraints+0x122>
        Base_entry* base = signer->excludedNames;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a1b      	ldr	r3, [r3, #32]
 800daae:	63fb      	str	r3, [r7, #60]	; 0x3c

        while (base != NULL) {
 800dab0:	e078      	b.n	800dba4 <ConfirmNameConstraints+0x11c>
            switch (base->type) {
 800dab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab4:	7b1b      	ldrb	r3, [r3, #12]
 800dab6:	2b02      	cmp	r3, #2
 800dab8:	d004      	beq.n	800dac4 <ConfirmNameConstraints+0x3c>
 800daba:	2b04      	cmp	r3, #4
 800dabc:	d03c      	beq.n	800db38 <ConfirmNameConstraints+0xb0>
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d01d      	beq.n	800dafe <ConfirmNameConstraints+0x76>
 800dac2:	e06c      	b.n	800db9e <ConfirmNameConstraints+0x116>
                case ASN_DNS_TYPE:
                {
                    DNS_entry* name = cert->altNames;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac8:	63bb      	str	r3, [r7, #56]	; 0x38
                    while (name != NULL) {
 800daca:	e014      	b.n	800daf6 <ConfirmNameConstraints+0x6e>
                        if (MatchBaseName(ASN_DNS_TYPE,
                                          name->name, name->len,
 800dacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dace:	68d9      	ldr	r1, [r3, #12]
                        if (MatchBaseName(ASN_DNS_TYPE,
 800dad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad2:	689a      	ldr	r2, [r3, #8]
                                          base->name, base->nameSz)) {
 800dad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad6:	6858      	ldr	r0, [r3, #4]
                        if (MatchBaseName(ASN_DNS_TYPE,
 800dad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	4603      	mov	r3, r0
 800dae0:	2002      	movs	r0, #2
 800dae2:	f7ff ff15 	bl	800d910 <MatchBaseName>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <ConfirmNameConstraints+0x68>
                            return 0;
 800daec:	2300      	movs	r3, #0
 800daee:	e10c      	b.n	800dd0a <ConfirmNameConstraints+0x282>
                        }
                        name = name->next;
 800daf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	63bb      	str	r3, [r7, #56]	; 0x38
                    while (name != NULL) {
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1e7      	bne.n	800dacc <ConfirmNameConstraints+0x44>
                    }
                    break;
 800dafc:	e04f      	b.n	800db9e <ConfirmNameConstraints+0x116>
                }
                case ASN_RFC822_TYPE:
                {
                    DNS_entry* name = cert->altEmailNames;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db02:	637b      	str	r3, [r7, #52]	; 0x34
                    while (name != NULL) {
 800db04:	e014      	b.n	800db30 <ConfirmNameConstraints+0xa8>
                        if (MatchBaseName(ASN_RFC822_TYPE,
                                          name->name, name->len,
 800db06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db08:	68d9      	ldr	r1, [r3, #12]
                        if (MatchBaseName(ASN_RFC822_TYPE,
 800db0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db0c:	689a      	ldr	r2, [r3, #8]
                                          base->name, base->nameSz)) {
 800db0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db10:	6858      	ldr	r0, [r3, #4]
                        if (MatchBaseName(ASN_RFC822_TYPE,
 800db12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	4603      	mov	r3, r0
 800db1a:	2001      	movs	r0, #1
 800db1c:	f7ff fef8 	bl	800d910 <MatchBaseName>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d001      	beq.n	800db2a <ConfirmNameConstraints+0xa2>
                            return 0;
 800db26:	2300      	movs	r3, #0
 800db28:	e0ef      	b.n	800dd0a <ConfirmNameConstraints+0x282>
                        }
                        name = name->next;
 800db2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	637b      	str	r3, [r7, #52]	; 0x34
                    while (name != NULL) {
 800db30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db32:	2b00      	cmp	r3, #0
 800db34:	d1e7      	bne.n	800db06 <ConfirmNameConstraints+0x7e>
                    }
                    break;
 800db36:	e032      	b.n	800db9e <ConfirmNameConstraints+0x116>
                }
                case ASN_DIR_TYPE:
                {
                    /* allow permitted dirName smaller than actual subject */
                    if (cert->subjectRawLen >= base->nameSz &&
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800db3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	429a      	cmp	r2, r3
 800db44:	db0e      	blt.n	800db64 <ConfirmNameConstraints+0xdc>
                        XMEMCMP(cert->subjectRaw, base->name,
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	f8d3 0338 	ldr.w	r0, [r3, #824]	; 0x338
 800db4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db4e:	6859      	ldr	r1, [r3, #4]
 800db50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	461a      	mov	r2, r3
 800db56:	f00d ff4d 	bl	801b9f4 <memcmp>
 800db5a:	4603      	mov	r3, r0
                    if (cert->subjectRawLen >= base->nameSz &&
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <ConfirmNameConstraints+0xdc>
                                                        base->nameSz) == 0) {
                        return 0;
 800db60:	2300      	movs	r3, #0
 800db62:	e0d2      	b.n	800dd0a <ConfirmNameConstraints+0x282>
                       "Restrictions of the form directoryName MUST be
                        applied to the subject field .... and to any names
                        of type directoryName in the subjectAltName
                        extension"
                    */
                    if (cert->altDirNames != NULL) {
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d017      	beq.n	800db9c <ConfirmNameConstraints+0x114>
                        DNS_entry* cur = cert->altDirNames;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db70:	633b      	str	r3, [r7, #48]	; 0x30
                        while (cur != NULL) {
 800db72:	e010      	b.n	800db96 <ConfirmNameConstraints+0x10e>
                            if (XMEMCMP(cur->name, base->name, base->nameSz)
 800db74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db76:	68d8      	ldr	r0, [r3, #12]
 800db78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db7a:	6859      	ldr	r1, [r3, #4]
 800db7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	461a      	mov	r2, r3
 800db82:	f00d ff37 	bl	801b9f4 <memcmp>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d101      	bne.n	800db90 <ConfirmNameConstraints+0x108>
                                    == 0) {
                                WOLFSSL_MSG("DIR alt name constraint err");
                                return 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	e0bc      	b.n	800dd0a <ConfirmNameConstraints+0x282>
                            }
                            cur = cur->next;
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	633b      	str	r3, [r7, #48]	; 0x30
                        while (cur != NULL) {
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1eb      	bne.n	800db74 <ConfirmNameConstraints+0xec>
                        }
                    }
                    #endif /* !WOLFSSL_NO_ASN_STRICT */
                    break;
 800db9c:	bf00      	nop
                }
            }; /* switch */
            base = base->next;
 800db9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (base != NULL) {
 800dba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d183      	bne.n	800dab2 <ConfirmNameConstraints+0x2a>
        }
    }

    /* Check against the permitted list */
    if (signer->permittedNames != NULL) {
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	69db      	ldr	r3, [r3, #28]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f000 80aa 	beq.w	800dd08 <ConfirmNameConstraints+0x280>
        int needDns = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        int matchDns = 0;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	62bb      	str	r3, [r7, #40]	; 0x28
        int needEmail = 0;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
        int matchEmail = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	623b      	str	r3, [r7, #32]
        int needDir = 0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	61fb      	str	r3, [r7, #28]
        int matchDir = 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	61bb      	str	r3, [r7, #24]
        Base_entry* base = signer->permittedNames;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	69db      	ldr	r3, [r3, #28]
 800dbd0:	617b      	str	r3, [r7, #20]

        while (base != NULL) {
 800dbd2:	e081      	b.n	800dcd8 <ConfirmNameConstraints+0x250>
            switch (base->type) {
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	7b1b      	ldrb	r3, [r3, #12]
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d004      	beq.n	800dbe6 <ConfirmNameConstraints+0x15e>
 800dbdc:	2b04      	cmp	r3, #4
 800dbde:	d03e      	beq.n	800dc5e <ConfirmNameConstraints+0x1d6>
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d01e      	beq.n	800dc22 <ConfirmNameConstraints+0x19a>
 800dbe4:	e075      	b.n	800dcd2 <ConfirmNameConstraints+0x24a>
                case ASN_DNS_TYPE:
                {
                    DNS_entry* name = cert->altNames;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbea:	613b      	str	r3, [r7, #16]

                    if (name != NULL)
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d013      	beq.n	800dc1a <ConfirmNameConstraints+0x192>
                        needDns = 1;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	62fb      	str	r3, [r7, #44]	; 0x2c

                    while (name != NULL) {
 800dbf6:	e010      	b.n	800dc1a <ConfirmNameConstraints+0x192>
                        matchDns = MatchBaseName(ASN_DNS_TYPE,
                                          name->name, name->len,
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	68d9      	ldr	r1, [r3, #12]
                        matchDns = MatchBaseName(ASN_DNS_TYPE,
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	689a      	ldr	r2, [r3, #8]
                                          base->name, base->nameSz);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	6858      	ldr	r0, [r3, #4]
                        matchDns = MatchBaseName(ASN_DNS_TYPE,
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	689b      	ldr	r3, [r3, #8]
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2002      	movs	r0, #2
 800dc0e:	f7ff fe7f 	bl	800d910 <MatchBaseName>
 800dc12:	62b8      	str	r0, [r7, #40]	; 0x28
                        name = name->next;
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	613b      	str	r3, [r7, #16]
                    while (name != NULL) {
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1eb      	bne.n	800dbf8 <ConfirmNameConstraints+0x170>
                    }
                    break;
 800dc20:	e057      	b.n	800dcd2 <ConfirmNameConstraints+0x24a>
                }
                case ASN_RFC822_TYPE:
                {
                    DNS_entry* name = cert->altEmailNames;
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc26:	60fb      	str	r3, [r7, #12]

                    if (name != NULL)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d013      	beq.n	800dc56 <ConfirmNameConstraints+0x1ce>
                        needEmail = 1;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	627b      	str	r3, [r7, #36]	; 0x24

                    while (name != NULL) {
 800dc32:	e010      	b.n	800dc56 <ConfirmNameConstraints+0x1ce>
                        matchEmail = MatchBaseName(ASN_DNS_TYPE,
                                          name->name, name->len,
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	68d9      	ldr	r1, [r3, #12]
                        matchEmail = MatchBaseName(ASN_DNS_TYPE,
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	689a      	ldr	r2, [r3, #8]
                                          base->name, base->nameSz);
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	6858      	ldr	r0, [r3, #4]
                        matchEmail = MatchBaseName(ASN_DNS_TYPE,
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	4603      	mov	r3, r0
 800dc48:	2002      	movs	r0, #2
 800dc4a:	f7ff fe61 	bl	800d910 <MatchBaseName>
 800dc4e:	6238      	str	r0, [r7, #32]
                        name = name->next;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	60fb      	str	r3, [r7, #12]
                    while (name != NULL) {
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1eb      	bne.n	800dc34 <ConfirmNameConstraints+0x1ac>
                    }
                    break;
 800dc5c:	e039      	b.n	800dcd2 <ConfirmNameConstraints+0x24a>
                }
                case ASN_DIR_TYPE:
                {
                    /* allow permitted dirName smaller than actual subject */
                    needDir = 1;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	61fb      	str	r3, [r7, #28]
                    if (cert->subjectRaw != NULL &&
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d031      	beq.n	800dcd0 <ConfirmNameConstraints+0x248>
                        cert->subjectRawLen >= base->nameSz &&
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	689b      	ldr	r3, [r3, #8]
                    if (cert->subjectRaw != NULL &&
 800dc76:	429a      	cmp	r2, r3
 800dc78:	db2a      	blt.n	800dcd0 <ConfirmNameConstraints+0x248>
                        XMEMCMP(cert->subjectRaw, base->name,
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	f8d3 0338 	ldr.w	r0, [r3, #824]	; 0x338
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	6859      	ldr	r1, [r3, #4]
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	461a      	mov	r2, r3
 800dc8a:	f00d feb3 	bl	801b9f4 <memcmp>
 800dc8e:	4603      	mov	r3, r0
                        cert->subjectRawLen >= base->nameSz &&
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d11d      	bne.n	800dcd0 <ConfirmNameConstraints+0x248>
                                                        base->nameSz) == 0) {
                        matchDir = 1;
 800dc94:	2301      	movs	r3, #1
 800dc96:	61bb      	str	r3, [r7, #24]
                           "Restrictions of the form directoryName MUST be
                            applied to the subject field .... and to any names
                            of type directoryName in the subjectAltName
                            extension"
                        */
                        if (cert->altDirNames != NULL) {
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d017      	beq.n	800dcd0 <ConfirmNameConstraints+0x248>
                            DNS_entry* cur = cert->altDirNames;
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca4:	60bb      	str	r3, [r7, #8]
                            while (cur != NULL) {
 800dca6:	e010      	b.n	800dcca <ConfirmNameConstraints+0x242>
                                if (XMEMCMP(cur->name, base->name, base->nameSz)
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	68d8      	ldr	r0, [r3, #12]
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	6859      	ldr	r1, [r3, #4]
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	f00d fe9d 	bl	801b9f4 <memcmp>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <ConfirmNameConstraints+0x23c>
                                        != 0) {
                                    WOLFSSL_MSG("DIR alt name constraint err");
                                    matchDir = 0; /* did not match */
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	61bb      	str	r3, [r7, #24]
                                }
                                cur = cur->next;
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	60bb      	str	r3, [r7, #8]
                            while (cur != NULL) {
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1eb      	bne.n	800dca8 <ConfirmNameConstraints+0x220>
                            }
                        }
                        #endif /* !WOLFSSL_NO_ASN_STRICT */
                    }
                    break;
 800dcd0:	bf00      	nop
                }
            } /* switch */
            base = base->next;
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	617b      	str	r3, [r7, #20]
        while (base != NULL) {
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f47f af7a 	bne.w	800dbd4 <ConfirmNameConstraints+0x14c>
        }

        if ((needDns   && !matchDns) ||
 800dce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <ConfirmNameConstraints+0x264>
 800dce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00b      	beq.n	800dd04 <ConfirmNameConstraints+0x27c>
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <ConfirmNameConstraints+0x270>
            (needEmail && !matchEmail) ||
 800dcf2:	6a3b      	ldr	r3, [r7, #32]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <ConfirmNameConstraints+0x27c>
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d004      	beq.n	800dd08 <ConfirmNameConstraints+0x280>
            (needDir   && !matchDir)) {
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d101      	bne.n	800dd08 <ConfirmNameConstraints+0x280>
            return 0;
 800dd04:	2300      	movs	r3, #0
 800dd06:	e000      	b.n	800dd0a <ConfirmNameConstraints+0x282>
        }
    }

    return 1;
 800dd08:	2301      	movs	r3, #1
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3740      	adds	r7, #64	; 0x40
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <DecodeAltNames>:

#endif /* IGNORE_NAME_CONSTRAINTS */

static int DecodeAltNames(const byte* input, int sz, DecodedCert* cert)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b09a      	sub	sp, #104	; 0x68
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	60f8      	str	r0, [r7, #12]
 800dd1a:	60b9      	str	r1, [r7, #8]
 800dd1c:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	62bb      	str	r3, [r7, #40]	; 0x28
    int length = 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	627b      	str	r3, [r7, #36]	; 0x24

    WOLFSSL_ENTER("DecodeAltNames");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dd2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f7fd f8df 	bl	800aef4 <GetSequence>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	da02      	bge.n	800dd42 <DecodeAltNames+0x30>
        WOLFSSL_MSG("\tBad Sequence");
        return ASN_PARSE_E;
 800dd3c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dd40:	e20a      	b.n	800e158 <DecodeAltNames+0x446>
    }

    if (length == 0) {
 800dd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d102      	bne.n	800dd4e <DecodeAltNames+0x3c>
        /* RFC 5280 4.2.1.6.  Subject Alternative Name
           If the subjectAltName extension is present, the sequence MUST
           contain at least one entry. */
        return ASN_PARSE_E;
 800dd48:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dd4c:	e204      	b.n	800e158 <DecodeAltNames+0x446>
    }

    cert->weOwnAltNames = 1;
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	f892 3378 	ldrb.w	r3, [r2, #888]	; 0x378
 800dd54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd58:	f882 3378 	strb.w	r3, [r2, #888]	; 0x378

    while (length > 0) {
 800dd5c:	e1f7      	b.n	800e14e <DecodeAltNames+0x43c>
        byte b = input[idx++];
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	1c5a      	adds	r2, r3, #1
 800dd62:	62ba      	str	r2, [r7, #40]	; 0x28
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	4413      	add	r3, r2
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        length--;
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	3b01      	subs	r3, #1
 800dd72:	627b      	str	r3, [r7, #36]	; 0x24

        /* Save DNS Type names in the altNames list. */
        /* Save Other Type names in the cert's OidMap */
        if (b == (ASN_CONTEXT_SPECIFIC | ASN_DNS_TYPE)) {
 800dd74:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800dd78:	2b82      	cmp	r3, #130	; 0x82
 800dd7a:	d15b      	bne.n	800de34 <DecodeAltNames+0x122>
            DNS_entry* dnsEntry;
            int strLen;
            word32 lenStartIdx = idx;
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	637b      	str	r3, [r7, #52]	; 0x34

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	f107 0220 	add.w	r2, r7, #32
 800dd86:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f7fc ff7e 	bl	800ac8c <GetLength>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	da02      	bge.n	800dd9c <DecodeAltNames+0x8a>
                WOLFSSL_MSG("\tfail: str length");
                return ASN_PARSE_E;
 800dd96:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dd9a:	e1dd      	b.n	800e158 <DecodeAltNames+0x446>
            }
            length -= (idx - lenStartIdx);
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dda4:	4413      	add	r3, r2
 800dda6:	627b      	str	r3, [r7, #36]	; 0x24

            dnsEntry = (DNS_entry*)XMALLOC(sizeof(DNS_entry), cert->heap,
 800dda8:	2010      	movs	r0, #16
 800ddaa:	f003 fb57 	bl	801145c <wolfSSL_Malloc>
 800ddae:	6338      	str	r0, [r7, #48]	; 0x30
                                        DYNAMIC_TYPE_ALTNAME);
            if (dnsEntry == NULL) {
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d102      	bne.n	800ddbc <DecodeAltNames+0xaa>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 800ddb6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800ddba:	e1cd      	b.n	800e158 <DecodeAltNames+0x446>
            }

            dnsEntry->type = ASN_DNS_TYPE;
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbe:	2202      	movs	r2, #2
 800ddc0:	605a      	str	r2, [r3, #4]
            dnsEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
 800ddc2:	6a3b      	ldr	r3, [r7, #32]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f003 fb48 	bl	801145c <wolfSSL_Malloc>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd0:	60da      	str	r2, [r3, #12]
                                         DYNAMIC_TYPE_ALTNAME);
            if (dnsEntry->name == NULL) {
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10a      	bne.n	800ddf0 <DecodeAltNames+0xde>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(dnsEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 800ddda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <DecodeAltNames+0xd8>
 800dde4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dde6:	f003 fb55 	bl	8011494 <wolfSSL_Free>
                return MEMORY_E;
 800ddea:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800ddee:	e1b3      	b.n	800e158 <DecodeAltNames+0x446>
            }
            dnsEntry->len = strLen;
 800ddf0:	6a3a      	ldr	r2, [r7, #32]
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	609a      	str	r2, [r3, #8]
            XMEMCPY(dnsEntry->name, &input[idx], strLen);
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	68d8      	ldr	r0, [r3, #12]
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	4413      	add	r3, r2
 800de00:	6a3a      	ldr	r2, [r7, #32]
 800de02:	4619      	mov	r1, r3
 800de04:	f00d fe05 	bl	801ba12 <memcpy>
            dnsEntry->name[strLen] = '\0';
 800de08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	6a3a      	ldr	r2, [r7, #32]
 800de0e:	4413      	add	r3, r2
 800de10:	2200      	movs	r2, #0
 800de12:	701a      	strb	r2, [r3, #0]

            dnsEntry->next = cert->altNames;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1a:	601a      	str	r2, [r3, #0]
            cert->altNames = dnsEntry;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de20:	625a      	str	r2, [r3, #36]	; 0x24

            length -= strLen;
 800de22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de24:	6a3b      	ldr	r3, [r7, #32]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	627b      	str	r3, [r7, #36]	; 0x24
            idx    += strLen;
 800de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2c:	6a3a      	ldr	r2, [r7, #32]
 800de2e:	4413      	add	r3, r2
 800de30:	62bb      	str	r3, [r7, #40]	; 0x28
 800de32:	e18c      	b.n	800e14e <DecodeAltNames+0x43c>
        }
    #ifndef IGNORE_NAME_CONSTRAINTS
        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | ASN_DIR_TYPE)) {
 800de34:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800de38:	2ba4      	cmp	r3, #164	; 0xa4
 800de3a:	d169      	bne.n	800df10 <DecodeAltNames+0x1fe>
            DNS_entry* dirEntry;
            int strLen;
            word32 lenStartIdx = idx;
 800de3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3e:	643b      	str	r3, [r7, #64]	; 0x40

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	f107 021c 	add.w	r2, r7, #28
 800de46:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7fc ff1e 	bl	800ac8c <GetLength>
 800de50:	4603      	mov	r3, r0
 800de52:	2b00      	cmp	r3, #0
 800de54:	da02      	bge.n	800de5c <DecodeAltNames+0x14a>
                WOLFSSL_MSG("\tfail: str length");
                return ASN_PARSE_E;
 800de56:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800de5a:	e17d      	b.n	800e158 <DecodeAltNames+0x446>
            }

            if (GetSequence(input, &idx, &strLen, sz) < 0) {
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	f107 021c 	add.w	r2, r7, #28
 800de62:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f7fd f844 	bl	800aef4 <GetSequence>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	da02      	bge.n	800de78 <DecodeAltNames+0x166>
                WOLFSSL_MSG("\tfail: seq length");
                return ASN_PARSE_E;
 800de72:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800de76:	e16f      	b.n	800e158 <DecodeAltNames+0x446>
            }
            length -= (idx - lenStartIdx);
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de80:	4413      	add	r3, r2
 800de82:	627b      	str	r3, [r7, #36]	; 0x24

            dirEntry = (DNS_entry*)XMALLOC(sizeof(DNS_entry), cert->heap,
 800de84:	2010      	movs	r0, #16
 800de86:	f003 fae9 	bl	801145c <wolfSSL_Malloc>
 800de8a:	63f8      	str	r0, [r7, #60]	; 0x3c
                                        DYNAMIC_TYPE_ALTNAME);
            if (dirEntry == NULL) {
 800de8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d102      	bne.n	800de98 <DecodeAltNames+0x186>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 800de92:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800de96:	e15f      	b.n	800e158 <DecodeAltNames+0x446>
            }

            dirEntry->type = ASN_DIR_TYPE;
 800de98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de9a:	2204      	movs	r2, #4
 800de9c:	605a      	str	r2, [r3, #4]
            dirEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	3301      	adds	r3, #1
 800dea2:	4618      	mov	r0, r3
 800dea4:	f003 fada 	bl	801145c <wolfSSL_Malloc>
 800dea8:	4602      	mov	r2, r0
 800deaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deac:	60da      	str	r2, [r3, #12]
                                         DYNAMIC_TYPE_ALTNAME);
            if (dirEntry->name == NULL) {
 800deae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d10a      	bne.n	800decc <DecodeAltNames+0x1ba>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(dirEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 800deb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800deba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <DecodeAltNames+0x1b4>
 800dec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dec2:	f003 fae7 	bl	8011494 <wolfSSL_Free>
                return MEMORY_E;
 800dec6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800deca:	e145      	b.n	800e158 <DecodeAltNames+0x446>
            }
            dirEntry->len = strLen;
 800decc:	69fa      	ldr	r2, [r7, #28]
 800dece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded0:	609a      	str	r2, [r3, #8]
            XMEMCPY(dirEntry->name, &input[idx], strLen);
 800ded2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded4:	68d8      	ldr	r0, [r3, #12]
 800ded6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	4413      	add	r3, r2
 800dedc:	69fa      	ldr	r2, [r7, #28]
 800dede:	4619      	mov	r1, r3
 800dee0:	f00d fd97 	bl	801ba12 <memcpy>
            dirEntry->name[strLen] = '\0';
 800dee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	69fa      	ldr	r2, [r7, #28]
 800deea:	4413      	add	r3, r2
 800deec:	2200      	movs	r2, #0
 800deee:	701a      	strb	r2, [r3, #0]

            dirEntry->next = cert->altDirNames;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def6:	601a      	str	r2, [r3, #0]
            cert->altDirNames = dirEntry;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800defc:	62da      	str	r2, [r3, #44]	; 0x2c

            length -= strLen;
 800defe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	1ad3      	subs	r3, r2, r3
 800df04:	627b      	str	r3, [r7, #36]	; 0x24
            idx    += strLen;
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	69fa      	ldr	r2, [r7, #28]
 800df0a:	4413      	add	r3, r2
 800df0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800df0e:	e11e      	b.n	800e14e <DecodeAltNames+0x43c>
        }
        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_RFC822_TYPE)) {
 800df10:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800df14:	2b81      	cmp	r3, #129	; 0x81
 800df16:	d15b      	bne.n	800dfd0 <DecodeAltNames+0x2be>
            DNS_entry* emailEntry;
            int strLen;
            word32 lenStartIdx = idx;
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	64fb      	str	r3, [r7, #76]	; 0x4c

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	f107 0218 	add.w	r2, r7, #24
 800df22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f7fc feb0 	bl	800ac8c <GetLength>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	da02      	bge.n	800df38 <DecodeAltNames+0x226>
                WOLFSSL_MSG("\tfail: str length");
                return ASN_PARSE_E;
 800df32:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800df36:	e10f      	b.n	800e158 <DecodeAltNames+0x446>
            }
            length -= (idx - lenStartIdx);
 800df38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df40:	4413      	add	r3, r2
 800df42:	627b      	str	r3, [r7, #36]	; 0x24

            emailEntry = (DNS_entry*)XMALLOC(sizeof(DNS_entry), cert->heap,
 800df44:	2010      	movs	r0, #16
 800df46:	f003 fa89 	bl	801145c <wolfSSL_Malloc>
 800df4a:	64b8      	str	r0, [r7, #72]	; 0x48
                                        DYNAMIC_TYPE_ALTNAME);
            if (emailEntry == NULL) {
 800df4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d102      	bne.n	800df58 <DecodeAltNames+0x246>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 800df52:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800df56:	e0ff      	b.n	800e158 <DecodeAltNames+0x446>
            }

            emailEntry->type = ASN_RFC822_TYPE;
 800df58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df5a:	2201      	movs	r2, #1
 800df5c:	605a      	str	r2, [r3, #4]
            emailEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	3301      	adds	r3, #1
 800df62:	4618      	mov	r0, r3
 800df64:	f003 fa7a 	bl	801145c <wolfSSL_Malloc>
 800df68:	4602      	mov	r2, r0
 800df6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df6c:	60da      	str	r2, [r3, #12]
                                         DYNAMIC_TYPE_ALTNAME);
            if (emailEntry->name == NULL) {
 800df6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d10a      	bne.n	800df8c <DecodeAltNames+0x27a>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(emailEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 800df76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df78:	647b      	str	r3, [r7, #68]	; 0x44
 800df7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d002      	beq.n	800df86 <DecodeAltNames+0x274>
 800df80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800df82:	f003 fa87 	bl	8011494 <wolfSSL_Free>
                return MEMORY_E;
 800df86:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800df8a:	e0e5      	b.n	800e158 <DecodeAltNames+0x446>
            }
            emailEntry->len = strLen;
 800df8c:	69ba      	ldr	r2, [r7, #24]
 800df8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df90:	609a      	str	r2, [r3, #8]
            XMEMCPY(emailEntry->name, &input[idx], strLen);
 800df92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df94:	68d8      	ldr	r0, [r3, #12]
 800df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	4413      	add	r3, r2
 800df9c:	69ba      	ldr	r2, [r7, #24]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	f00d fd37 	bl	801ba12 <memcpy>
            emailEntry->name[strLen] = '\0';
 800dfa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	69ba      	ldr	r2, [r7, #24]
 800dfaa:	4413      	add	r3, r2
 800dfac:	2200      	movs	r2, #0
 800dfae:	701a      	strb	r2, [r3, #0]

            emailEntry->next = cert->altEmailNames;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfb6:	601a      	str	r2, [r3, #0]
            cert->altEmailNames = emailEntry;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfbc:	629a      	str	r2, [r3, #40]	; 0x28

            length -= strLen;
 800dfbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	627b      	str	r3, [r7, #36]	; 0x24
            idx    += strLen;
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	69ba      	ldr	r2, [r7, #24]
 800dfca:	4413      	add	r3, r2
 800dfcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfce:	e0be      	b.n	800e14e <DecodeAltNames+0x43c>
        }
        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_URI_TYPE)) {
 800dfd0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800dfd4:	2b86      	cmp	r3, #134	; 0x86
 800dfd6:	f040 809d 	bne.w	800e114 <DecodeAltNames+0x402>
            DNS_entry* uriEntry;
            int strLen;
            word32 lenStartIdx = idx;
 800dfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfdc:	65bb      	str	r3, [r7, #88]	; 0x58

            WOLFSSL_MSG("\tPutting URI into list but not using");
            if (GetLength(input, &idx, &strLen, sz) < 0) {
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	f107 0214 	add.w	r2, r7, #20
 800dfe4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f7fc fe4f 	bl	800ac8c <GetLength>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	da02      	bge.n	800dffa <DecodeAltNames+0x2e8>
                WOLFSSL_MSG("\tfail: str length");
                return ASN_PARSE_E;
 800dff4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800dff8:	e0ae      	b.n	800e158 <DecodeAltNames+0x446>
            }
            length -= (idx - lenStartIdx);
 800dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e002:	4413      	add	r3, r2
 800e004:	627b      	str	r3, [r7, #36]	; 0x24

            /* check that strLen at index is not past input buffer */
            if (strLen + (int)idx > sz) {
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e00a:	4413      	add	r3, r2
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	429a      	cmp	r2, r3
 800e010:	da02      	bge.n	800e018 <DecodeAltNames+0x306>
                return BUFFER_E;
 800e012:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800e016:	e09f      	b.n	800e158 <DecodeAltNames+0x446>

            {
                int i;

                /* skip past scheme (i.e http,ftp,...) finding first ':' char */
                for (i = 0; i < strLen; i++) {
 800e018:	2300      	movs	r3, #0
 800e01a:	667b      	str	r3, [r7, #100]	; 0x64
 800e01c:	e014      	b.n	800e048 <DecodeAltNames+0x336>
                    if (input[idx + i] == ':') {
 800e01e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e022:	4413      	add	r3, r2
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	4413      	add	r3, r2
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	2b3a      	cmp	r3, #58	; 0x3a
 800e02c:	d011      	beq.n	800e052 <DecodeAltNames+0x340>
                        break;
                    }
                    if (input[idx + i] == '/') {
 800e02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e032:	4413      	add	r3, r2
 800e034:	68fa      	ldr	r2, [r7, #12]
 800e036:	4413      	add	r3, r2
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b2f      	cmp	r3, #47	; 0x2f
 800e03c:	d101      	bne.n	800e042 <DecodeAltNames+0x330>
                        i = strLen; /* error, found relative path since '/' was
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	667b      	str	r3, [r7, #100]	; 0x64
                for (i = 0; i < strLen; i++) {
 800e042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e044:	3301      	adds	r3, #1
 800e046:	667b      	str	r3, [r7, #100]	; 0x64
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e04c:	429a      	cmp	r2, r3
 800e04e:	dbe6      	blt.n	800e01e <DecodeAltNames+0x30c>
 800e050:	e000      	b.n	800e054 <DecodeAltNames+0x342>
                        break;
 800e052:	bf00      	nop
                    }
                }

                /* test if no ':' char was found and test that the next two
                 * chars are // to match the pattern "://" */
                if (i >= strLen - 2 || (input[idx + i + 1] != '/' ||
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	3b02      	subs	r3, #2
 800e058:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e05a:	429a      	cmp	r2, r3
 800e05c:	da11      	bge.n	800e082 <DecodeAltNames+0x370>
 800e05e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e062:	4413      	add	r3, r2
 800e064:	3301      	adds	r3, #1
 800e066:	68fa      	ldr	r2, [r7, #12]
 800e068:	4413      	add	r3, r2
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	2b2f      	cmp	r3, #47	; 0x2f
 800e06e:	d108      	bne.n	800e082 <DecodeAltNames+0x370>
                                        input[idx + i + 2] != '/')) {
 800e070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e074:	4413      	add	r3, r2
 800e076:	3302      	adds	r3, #2
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4413      	add	r3, r2
 800e07c:	781b      	ldrb	r3, [r3, #0]
                if (i >= strLen - 2 || (input[idx + i + 1] != '/' ||
 800e07e:	2b2f      	cmp	r3, #47	; 0x2f
 800e080:	d002      	beq.n	800e088 <DecodeAltNames+0x376>
                    WOLFSSL_MSG("\tAlt Name must be absolute URI");
                    return ASN_ALT_NAME_E;
 800e082:	f06f 03a0 	mvn.w	r3, #160	; 0xa0
 800e086:	e067      	b.n	800e158 <DecodeAltNames+0x446>
                }
            }
        #endif

            uriEntry = (DNS_entry*)XMALLOC(sizeof(DNS_entry), cert->heap,
 800e088:	2010      	movs	r0, #16
 800e08a:	f003 f9e7 	bl	801145c <wolfSSL_Malloc>
 800e08e:	6578      	str	r0, [r7, #84]	; 0x54
                                        DYNAMIC_TYPE_ALTNAME);
            if (uriEntry == NULL) {
 800e090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e092:	2b00      	cmp	r3, #0
 800e094:	d102      	bne.n	800e09c <DecodeAltNames+0x38a>
                WOLFSSL_MSG("\tOut of Memory");
                return MEMORY_E;
 800e096:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800e09a:	e05d      	b.n	800e158 <DecodeAltNames+0x446>
            }

            uriEntry->type = ASN_URI_TYPE;
 800e09c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e09e:	2206      	movs	r2, #6
 800e0a0:	605a      	str	r2, [r3, #4]
            uriEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f003 f9d8 	bl	801145c <wolfSSL_Malloc>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0b0:	60da      	str	r2, [r3, #12]
                                         DYNAMIC_TYPE_ALTNAME);
            if (uriEntry->name == NULL) {
 800e0b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d10a      	bne.n	800e0d0 <DecodeAltNames+0x3be>
                WOLFSSL_MSG("\tOut of Memory");
                XFREE(uriEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 800e0ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0bc:	653b      	str	r3, [r7, #80]	; 0x50
 800e0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <DecodeAltNames+0x3b8>
 800e0c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e0c6:	f003 f9e5 	bl	8011494 <wolfSSL_Free>
                return MEMORY_E;
 800e0ca:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800e0ce:	e043      	b.n	800e158 <DecodeAltNames+0x446>
            }
            uriEntry->len = strLen;
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0d4:	609a      	str	r2, [r3, #8]
            XMEMCPY(uriEntry->name, &input[idx], strLen);
 800e0d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0d8:	68d8      	ldr	r0, [r3, #12]
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	4413      	add	r3, r2
 800e0e0:	697a      	ldr	r2, [r7, #20]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	f00d fc95 	bl	801ba12 <memcpy>
            uriEntry->name[strLen] = '\0';
 800e0e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	697a      	ldr	r2, [r7, #20]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	701a      	strb	r2, [r3, #0]

            uriEntry->next = cert->altNames;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0fa:	601a      	str	r2, [r3, #0]
            cert->altNames = uriEntry;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e100:	625a      	str	r2, [r3, #36]	; 0x24

            length -= strLen;
 800e102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	1ad3      	subs	r3, r2, r3
 800e108:	627b      	str	r3, [r7, #36]	; 0x24
            idx    += strLen;
 800e10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10c:	697a      	ldr	r2, [r7, #20]
 800e10e:	4413      	add	r3, r2
 800e110:	62bb      	str	r3, [r7, #40]	; 0x28
 800e112:	e01c      	b.n	800e14e <DecodeAltNames+0x43c>
            idx += strLen;
        }
    #endif /* WOLFSSL_SEP */
        else {
            int strLen;
            word32 lenStartIdx = idx;
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	65fb      	str	r3, [r7, #92]	; 0x5c

            WOLFSSL_MSG("\tUnsupported name type, skipping");

            if (GetLength(input, &idx, &strLen, sz) < 0) {
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	f107 0210 	add.w	r2, r7, #16
 800e11e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f7fc fdb2 	bl	800ac8c <GetLength>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	da02      	bge.n	800e134 <DecodeAltNames+0x422>
                WOLFSSL_MSG("\tfail: unsupported name length");
                return ASN_PARSE_E;
 800e12e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e132:	e011      	b.n	800e158 <DecodeAltNames+0x446>
            }
            length -= (strLen + idx - lenStartIdx);
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	461a      	mov	r2, r3
 800e138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13a:	4413      	add	r3, r2
 800e13c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e13e:	1ad3      	subs	r3, r2, r3
 800e140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e142:	4413      	add	r3, r2
 800e144:	627b      	str	r3, [r7, #36]	; 0x24
            idx += strLen;
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	693a      	ldr	r2, [r7, #16]
 800e14a:	4413      	add	r3, r2
 800e14c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (length > 0) {
 800e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e150:	2b00      	cmp	r3, #0
 800e152:	f73f ae04 	bgt.w	800dd5e <DecodeAltNames+0x4c>
        }
    }
    return 0;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3768      	adds	r7, #104	; 0x68
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <DecodeBasicCaConstraint>:

static int DecodeBasicCaConstraint(const byte* input, int sz, DecodedCert* cert)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b088      	sub	sp, #32
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 800e16c:	2300      	movs	r3, #0
 800e16e:	61bb      	str	r3, [r7, #24]
    int length = 0;
 800e170:	2300      	movs	r3, #0
 800e172:	617b      	str	r3, [r7, #20]
    int ret;

    WOLFSSL_ENTER("DecodeBasicCaConstraint");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	f107 0214 	add.w	r2, r7, #20
 800e17a:	f107 0118 	add.w	r1, r7, #24
 800e17e:	68f8      	ldr	r0, [r7, #12]
 800e180:	f7fc feb8 	bl	800aef4 <GetSequence>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	da02      	bge.n	800e190 <DecodeBasicCaConstraint+0x30>
        WOLFSSL_MSG("\tfail: bad SEQUENCE");
        return ASN_PARSE_E;
 800e18a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e18e:	e03c      	b.n	800e20a <DecodeBasicCaConstraint+0xaa>
    }

    if (length == 0)
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d101      	bne.n	800e19a <DecodeBasicCaConstraint+0x3a>
        return 0;
 800e196:	2300      	movs	r3, #0
 800e198:	e037      	b.n	800e20a <DecodeBasicCaConstraint+0xaa>

    /* If the basic ca constraint is false, this extension may be named, but
     * left empty. So, if the length is 0, just return. */

    ret = GetBoolean(input, &idx, sz);
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	f107 0318 	add.w	r3, r7, #24
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f7fc ff13 	bl	800afce <GetBoolean>
 800e1a8:	61f8      	str	r0, [r7, #28]

#ifndef WOLFSSL_X509_BASICCONS_INT
    if (ret < 0) {
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	da01      	bge.n	800e1b4 <DecodeBasicCaConstraint+0x54>
        WOLFSSL_MSG("\tfail: constraint not valid BOOLEAN");
        return ret;
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	e02a      	b.n	800e20a <DecodeBasicCaConstraint+0xaa>
    }

    cert->isCA = (byte)ret;
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	f003 0301 	and.w	r3, r3, #1
 800e1ba:	b2d9      	uxtb	r1, r3
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	f892 3378 	ldrb.w	r3, [r2, #888]	; 0x378
 800e1c2:	f361 1304 	bfi	r3, r1, #4, #1
 800e1c6:	f882 3378 	strb.w	r3, [r2, #888]	; 0x378
    } else
        cert->isCA = (byte)ret;
#endif

    /* If there isn't any more data, return. */
    if (idx >= (word32)sz) {
 800e1ca:	69ba      	ldr	r2, [r7, #24]
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d301      	bcc.n	800e1d6 <DecodeBasicCaConstraint+0x76>
        return 0;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	e019      	b.n	800e20a <DecodeBasicCaConstraint+0xaa>
    }

    ret = GetInteger7Bit(input, &idx, sz);
 800e1d6:	68ba      	ldr	r2, [r7, #8]
 800e1d8:	f107 0318 	add.w	r3, r7, #24
 800e1dc:	4619      	mov	r1, r3
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f7fc ffa1 	bl	800b126 <GetInteger7Bit>
 800e1e4:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	da01      	bge.n	800e1f0 <DecodeBasicCaConstraint+0x90>
        return ret;
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	e00c      	b.n	800e20a <DecodeBasicCaConstraint+0xaa>
    cert->pathLength = (byte)ret;
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
    cert->pathLengthSet = 1;
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	f892 3378 	ldrb.w	r3, [r2, #888]	; 0x378
 800e200:	f043 0320 	orr.w	r3, r3, #32
 800e204:	f882 3378 	strb.w	r3, [r2, #888]	; 0x378

    return 0;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3720      	adds	r7, #32
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <DecodeCrlDist>:
    /* From RFC3280 SS4.2.1.14, Distribution Point Name*/
#define GENERALNAME_URI 6
    /* From RFC3280 SS4.2.1.7, GeneralName */

static int DecodeCrlDist(const byte* input, int sz, DecodedCert* cert)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b088      	sub	sp, #32
 800e216:	af00      	add	r7, sp, #0
 800e218:	60f8      	str	r0, [r7, #12]
 800e21a:	60b9      	str	r1, [r7, #8]
 800e21c:	607a      	str	r2, [r7, #4]
    word32 idx = 0, localIdx;
 800e21e:	2300      	movs	r3, #0
 800e220:	61fb      	str	r3, [r7, #28]
    int length = 0;
 800e222:	2300      	movs	r3, #0
 800e224:	617b      	str	r3, [r7, #20]
    byte tag   = 0;
 800e226:	2300      	movs	r3, #0
 800e228:	74fb      	strb	r3, [r7, #19]

    WOLFSSL_ENTER("DecodeCrlDist");

    /* Unwrap the list of Distribution Points*/
    if (GetSequence(input, &idx, &length, sz) < 0)
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	f107 0214 	add.w	r2, r7, #20
 800e230:	f107 011c 	add.w	r1, r7, #28
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f7fc fe5d 	bl	800aef4 <GetSequence>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	da02      	bge.n	800e246 <DecodeCrlDist+0x34>
        return ASN_PARSE_E;
 800e240:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e244:	e0db      	b.n	800e3fe <DecodeCrlDist+0x1ec>

    /* Unwrap a single Distribution Point */
    if (GetSequence(input, &idx, &length, sz) < 0)
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	f107 0214 	add.w	r2, r7, #20
 800e24c:	f107 011c 	add.w	r1, r7, #28
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f7fc fe4f 	bl	800aef4 <GetSequence>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	da02      	bge.n	800e262 <DecodeCrlDist+0x50>
        return ASN_PARSE_E;
 800e25c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e260:	e0cd      	b.n	800e3fe <DecodeCrlDist+0x1ec>

    /* The Distribution Point has three explicit optional members
     *  First check for a DistributionPointName
     */
    localIdx = idx;
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	61bb      	str	r3, [r7, #24]
    if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	f107 0213 	add.w	r2, r7, #19
 800e26c:	f107 0118 	add.w	r1, r7, #24
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f7fc fd89 	bl	800ad88 <GetASNTag>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d16d      	bne.n	800e358 <DecodeCrlDist+0x146>
            tag == (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC | 0))
 800e27c:	7cfb      	ldrb	r3, [r7, #19]
    if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e27e:	2ba0      	cmp	r3, #160	; 0xa0
 800e280:	d16a      	bne.n	800e358 <DecodeCrlDist+0x146>
    {
        idx++;
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	3301      	adds	r3, #1
 800e286:	61fb      	str	r3, [r7, #28]
        if (GetLength(input, &idx, &length, sz) < 0)
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	f107 0214 	add.w	r2, r7, #20
 800e28e:	f107 011c 	add.w	r1, r7, #28
 800e292:	68f8      	ldr	r0, [r7, #12]
 800e294:	f7fc fcfa 	bl	800ac8c <GetLength>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	da02      	bge.n	800e2a4 <DecodeCrlDist+0x92>
            return ASN_PARSE_E;
 800e29e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e2a2:	e0ac      	b.n	800e3fe <DecodeCrlDist+0x1ec>

        localIdx = idx;
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	61bb      	str	r3, [r7, #24]
        if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	f107 0213 	add.w	r2, r7, #19
 800e2ae:	f107 0118 	add.w	r1, r7, #24
 800e2b2:	68f8      	ldr	r0, [r7, #12]
 800e2b4:	f7fc fd68 	bl	800ad88 <GetASNTag>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d148      	bne.n	800e350 <DecodeCrlDist+0x13e>
                tag == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED |
 800e2be:	7cfb      	ldrb	r3, [r7, #19]
        if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e2c0:	2ba0      	cmp	r3, #160	; 0xa0
 800e2c2:	d145      	bne.n	800e350 <DecodeCrlDist+0x13e>
                    CRLDP_FULL_NAME))
        {
            idx++;
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	61fb      	str	r3, [r7, #28]
            if (GetLength(input, &idx, &length, sz) < 0)
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	f107 0214 	add.w	r2, r7, #20
 800e2d0:	f107 011c 	add.w	r1, r7, #28
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f7fc fcd9 	bl	800ac8c <GetLength>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	da02      	bge.n	800e2e6 <DecodeCrlDist+0xd4>
                return ASN_PARSE_E;
 800e2e0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e2e4:	e08b      	b.n	800e3fe <DecodeCrlDist+0x1ec>

            localIdx = idx;
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	61bb      	str	r3, [r7, #24]
            if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f107 0213 	add.w	r2, r7, #19
 800e2f0:	f107 0118 	add.w	r1, r7, #24
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f7fc fd47 	bl	800ad88 <GetASNTag>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d122      	bne.n	800e346 <DecodeCrlDist+0x134>
                    tag == (ASN_CONTEXT_SPECIFIC | GENERALNAME_URI))
 800e300:	7cfb      	ldrb	r3, [r7, #19]
            if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e302:	2b86      	cmp	r3, #134	; 0x86
 800e304:	d11f      	bne.n	800e346 <DecodeCrlDist+0x134>
            {
                idx++;
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	3301      	adds	r3, #1
 800e30a:	61fb      	str	r3, [r7, #28]
                if (GetLength(input, &idx, &length, sz) < 0)
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	f107 0214 	add.w	r2, r7, #20
 800e312:	f107 011c 	add.w	r1, r7, #28
 800e316:	68f8      	ldr	r0, [r7, #12]
 800e318:	f7fc fcb8 	bl	800ac8c <GetLength>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	da02      	bge.n	800e328 <DecodeCrlDist+0x116>
                    return ASN_PARSE_E;
 800e322:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e326:	e06a      	b.n	800e3fe <DecodeCrlDist+0x1ec>

                cert->extCrlInfoSz = length;
 800e328:	697a      	ldr	r2, [r7, #20]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
                cert->extCrlInfo = input + idx;
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	68fa      	ldr	r2, [r7, #12]
 800e334:	441a      	add	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                idx += length;
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	697a      	ldr	r2, [r7, #20]
 800e340:	4413      	add	r3, r2
 800e342:	61fb      	str	r3, [r7, #28]
            if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e344:	e008      	b.n	800e358 <DecodeCrlDist+0x146>
            }
            else
                /* This isn't a URI, skip it. */
                idx += length;
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	697a      	ldr	r2, [r7, #20]
 800e34a:	4413      	add	r3, r2
 800e34c:	61fb      	str	r3, [r7, #28]
            if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e34e:	e003      	b.n	800e358 <DecodeCrlDist+0x146>
        }
        else {
            /* This isn't a FULLNAME, skip it. */
            idx += length;
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	4413      	add	r3, r2
 800e356:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Check for reasonFlags */
    localIdx = idx;
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	61bb      	str	r3, [r7, #24]
    if (idx < (word32)sz &&
 800e35c:	69fa      	ldr	r2, [r7, #28]
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	429a      	cmp	r2, r3
 800e362:	d222      	bcs.n	800e3aa <DecodeCrlDist+0x198>
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	f107 0213 	add.w	r2, r7, #19
 800e36a:	f107 0118 	add.w	r1, r7, #24
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f7fc fd0a 	bl	800ad88 <GetASNTag>
 800e374:	4603      	mov	r3, r0
    if (idx < (word32)sz &&
 800e376:	2b00      	cmp	r3, #0
 800e378:	d117      	bne.n	800e3aa <DecodeCrlDist+0x198>
        tag == (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC | 1))
 800e37a:	7cfb      	ldrb	r3, [r7, #19]
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e37c:	2ba1      	cmp	r3, #161	; 0xa1
 800e37e:	d114      	bne.n	800e3aa <DecodeCrlDist+0x198>
    {
        idx++;
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	3301      	adds	r3, #1
 800e384:	61fb      	str	r3, [r7, #28]
        if (GetLength(input, &idx, &length, sz) < 0)
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	f107 0214 	add.w	r2, r7, #20
 800e38c:	f107 011c 	add.w	r1, r7, #28
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	f7fc fc7b 	bl	800ac8c <GetLength>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	da02      	bge.n	800e3a2 <DecodeCrlDist+0x190>
            return ASN_PARSE_E;
 800e39c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e3a0:	e02d      	b.n	800e3fe <DecodeCrlDist+0x1ec>
        idx += length;
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	697a      	ldr	r2, [r7, #20]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	61fb      	str	r3, [r7, #28]
    }

    /* Check for cRLIssuer */
    localIdx = idx;
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	61bb      	str	r3, [r7, #24]
    if (idx < (word32)sz &&
 800e3ae:	69fa      	ldr	r2, [r7, #28]
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d222      	bcs.n	800e3fc <DecodeCrlDist+0x1ea>
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	f107 0213 	add.w	r2, r7, #19
 800e3bc:	f107 0118 	add.w	r1, r7, #24
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f7fc fce1 	bl	800ad88 <GetASNTag>
 800e3c6:	4603      	mov	r3, r0
    if (idx < (word32)sz &&
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d117      	bne.n	800e3fc <DecodeCrlDist+0x1ea>
        tag == (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC | 2))
 800e3cc:	7cfb      	ldrb	r3, [r7, #19]
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 800e3ce:	2ba2      	cmp	r3, #162	; 0xa2
 800e3d0:	d114      	bne.n	800e3fc <DecodeCrlDist+0x1ea>
    {
        idx++;
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	61fb      	str	r3, [r7, #28]
        if (GetLength(input, &idx, &length, sz) < 0)
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	f107 0214 	add.w	r2, r7, #20
 800e3de:	f107 011c 	add.w	r1, r7, #28
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f7fc fc52 	bl	800ac8c <GetLength>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	da02      	bge.n	800e3f4 <DecodeCrlDist+0x1e2>
            return ASN_PARSE_E;
 800e3ee:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e3f2:	e004      	b.n	800e3fe <DecodeCrlDist+0x1ec>
        idx += length;
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	61fb      	str	r3, [r7, #28]
    {
        WOLFSSL_MSG("\tThere are more CRL Distribution Point records, "
                   "but we only use the first one.");
    }

    return 0;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3720      	adds	r7, #32
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <DecodeAuthInfo>:
static int DecodeAuthInfo(const byte* input, int sz, DecodedCert* cert)
/*
 *  Read Authority Information Access records. If there are
 *  any issues, return without saving the record.
 */
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b08c      	sub	sp, #48	; 0x30
 800e40a:	af02      	add	r7, sp, #8
 800e40c:	60f8      	str	r0, [r7, #12]
 800e40e:	60b9      	str	r1, [r7, #8]
 800e410:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 800e412:	2300      	movs	r3, #0
 800e414:	623b      	str	r3, [r7, #32]
    int length = 0;
 800e416:	2300      	movs	r3, #0
 800e418:	61fb      	str	r3, [r7, #28]
    int count  = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	627b      	str	r3, [r7, #36]	; 0x24
    byte b = 0;
 800e41e:	2300      	movs	r3, #0
 800e420:	76fb      	strb	r3, [r7, #27]
    word32 oid;

    WOLFSSL_ENTER("DecodeAuthInfo");

    /* Unwrap the list of AIAs */
    if (GetSequence(input, &idx, &length, sz) < 0)
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	f107 021c 	add.w	r2, r7, #28
 800e428:	f107 0120 	add.w	r1, r7, #32
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f7fc fd61 	bl	800aef4 <GetSequence>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	da56      	bge.n	800e4e6 <DecodeAuthInfo+0xe0>
        return ASN_PARSE_E;
 800e438:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e43c:	e05b      	b.n	800e4f6 <DecodeAuthInfo+0xf0>

    while ((idx < (word32)sz) && (count < MAX_AIA_SZ)) {
        /* Unwrap a single AIA */
        if (GetSequence(input, &idx, &length, sz) < 0)
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	f107 021c 	add.w	r2, r7, #28
 800e444:	f107 0120 	add.w	r1, r7, #32
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f7fc fd53 	bl	800aef4 <GetSequence>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	da02      	bge.n	800e45a <DecodeAuthInfo+0x54>
            return ASN_PARSE_E;
 800e454:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e458:	e04d      	b.n	800e4f6 <DecodeAuthInfo+0xf0>

        oid = 0;
 800e45a:	2300      	movs	r3, #0
 800e45c:	617b      	str	r3, [r7, #20]
        if (GetObjectId(input, &idx, &oid, oidCertAuthInfoType, sz) < 0)
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	f107 0214 	add.w	r2, r7, #20
 800e464:	f107 0120 	add.w	r1, r7, #32
 800e468:	9300      	str	r3, [sp, #0]
 800e46a:	2307      	movs	r3, #7
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f7fd fb6b 	bl	800bb48 <GetObjectId>
 800e472:	4603      	mov	r3, r0
 800e474:	2b00      	cmp	r3, #0
 800e476:	da02      	bge.n	800e47e <DecodeAuthInfo+0x78>
            return ASN_PARSE_E;
 800e478:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e47c:	e03b      	b.n	800e4f6 <DecodeAuthInfo+0xf0>

        /* Only supporting URIs right now. */
        if (GetASNTag(input, &idx, &b, sz) < 0)
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	f107 021b 	add.w	r2, r7, #27
 800e484:	f107 0120 	add.w	r1, r7, #32
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7fc fc7d 	bl	800ad88 <GetASNTag>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	da02      	bge.n	800e49a <DecodeAuthInfo+0x94>
            return ASN_PARSE_E;
 800e494:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e498:	e02d      	b.n	800e4f6 <DecodeAuthInfo+0xf0>

        if (GetLength(input, &idx, &length, sz) < 0)
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	f107 021c 	add.w	r2, r7, #28
 800e4a0:	f107 0120 	add.w	r1, r7, #32
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f7fc fbf1 	bl	800ac8c <GetLength>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	da02      	bge.n	800e4b6 <DecodeAuthInfo+0xb0>
            return ASN_PARSE_E;
 800e4b0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e4b4:	e01f      	b.n	800e4f6 <DecodeAuthInfo+0xf0>

        /* Set ocsp entry */
        if (b == (ASN_CONTEXT_SPECIFIC | GENERALNAME_URI) &&
 800e4b6:	7efb      	ldrb	r3, [r7, #27]
 800e4b8:	2b86      	cmp	r3, #134	; 0x86
 800e4ba:	d110      	bne.n	800e4de <DecodeAuthInfo+0xd8>
            oid == AIA_OCSP_OID)
 800e4bc:	697b      	ldr	r3, [r7, #20]
        if (b == (ASN_CONTEXT_SPECIFIC | GENERALNAME_URI) &&
 800e4be:	2b74      	cmp	r3, #116	; 0x74
 800e4c0:	d10d      	bne.n	800e4de <DecodeAuthInfo+0xd8>
        {
            cert->extAuthInfoSz = length;
 800e4c2:	69fa      	ldr	r2, [r7, #28]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
            cert->extAuthInfo = input + idx;
 800e4ca:	6a3b      	ldr	r3, [r7, #32]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	441a      	add	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
            count++;
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	3301      	adds	r3, #1
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
        #if !defined(OPENSSL_ALL) || !defined(WOLFSSL_QT)
            break;
 800e4dc:	e00a      	b.n	800e4f4 <DecodeAuthInfo+0xee>
            cert->extAuthInfoCaIssuerSz = length;
            cert->extAuthInfoCaIssuer = input + idx;
            count++;
        }
        #endif
        idx += length;
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	69fa      	ldr	r2, [r7, #28]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	623b      	str	r3, [r7, #32]
    while ((idx < (word32)sz) && (count < MAX_AIA_SZ)) {
 800e4e6:	6a3a      	ldr	r2, [r7, #32]
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d202      	bcs.n	800e4f4 <DecodeAuthInfo+0xee>
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	dda4      	ble.n	800e43e <DecodeAuthInfo+0x38>
    }

    return 0;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3728      	adds	r7, #40	; 0x28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <DecodeAuthKeyId>:


static int DecodeAuthKeyId(const byte* input, int sz, DecodedCert* cert)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b088      	sub	sp, #32
 800e502:	af00      	add	r7, sp, #0
 800e504:	60f8      	str	r0, [r7, #12]
 800e506:	60b9      	str	r1, [r7, #8]
 800e508:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	61bb      	str	r3, [r7, #24]
    int length = 0, ret = 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	617b      	str	r3, [r7, #20]
 800e512:	2300      	movs	r3, #0
 800e514:	61fb      	str	r3, [r7, #28]
    byte tag;

    WOLFSSL_ENTER("DecodeAuthKeyId");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	f107 0214 	add.w	r2, r7, #20
 800e51c:	f107 0118 	add.w	r1, r7, #24
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f7fc fce7 	bl	800aef4 <GetSequence>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	da02      	bge.n	800e532 <DecodeAuthKeyId+0x34>
        WOLFSSL_MSG("\tfail: should be a SEQUENCE\n");
        return ASN_PARSE_E;
 800e52c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e530:	e042      	b.n	800e5b8 <DecodeAuthKeyId+0xba>
    }

    if (GetASNTag(input, &idx, &tag, sz) < 0) {
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	f107 0213 	add.w	r2, r7, #19
 800e538:	f107 0118 	add.w	r1, r7, #24
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f7fc fc23 	bl	800ad88 <GetASNTag>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	da02      	bge.n	800e54e <DecodeAuthKeyId+0x50>
        return ASN_PARSE_E;
 800e548:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e54c:	e034      	b.n	800e5b8 <DecodeAuthKeyId+0xba>
    }

    if (tag != (ASN_CONTEXT_SPECIFIC | 0)) {
 800e54e:	7cfb      	ldrb	r3, [r7, #19]
 800e550:	2b80      	cmp	r3, #128	; 0x80
 800e552:	d008      	beq.n	800e566 <DecodeAuthKeyId+0x68>
        WOLFSSL_MSG("\tinfo: OPTIONAL item 0, not available\n");
        cert->extAuthKeyIdSet = 0;
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	f892 3378 	ldrb.w	r3, [r2, #888]	; 0x378
 800e55a:	f36f 0382 	bfc	r3, #2, #1
 800e55e:	f882 3378 	strb.w	r3, [r2, #888]	; 0x378
        return 0;
 800e562:	2300      	movs	r3, #0
 800e564:	e028      	b.n	800e5b8 <DecodeAuthKeyId+0xba>
    }

    if (GetLength(input, &idx, &length, sz) <= 0) {
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	f107 0214 	add.w	r2, r7, #20
 800e56c:	f107 0118 	add.w	r1, r7, #24
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f7fc fb8b 	bl	800ac8c <GetLength>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	dc02      	bgt.n	800e582 <DecodeAuthKeyId+0x84>
        WOLFSSL_MSG("\tfail: extension data length");
        return ASN_PARSE_E;
 800e57c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e580:	e01a      	b.n	800e5b8 <DecodeAuthKeyId+0xba>
#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
    cert->extAuthKeyIdSrc = &input[idx];
    cert->extAuthKeyIdSz = length;
#endif /* OPENSSL_EXTRA */

    if (length == KEYID_SIZE) {
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	2b20      	cmp	r3, #32
 800e586:	d10a      	bne.n	800e59e <DecodeAuthKeyId+0xa0>
        XMEMCPY(cert->extAuthKeyId, input + idx, length);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	68fa      	ldr	r2, [r7, #12]
 800e592:	4413      	add	r3, r2
 800e594:	697a      	ldr	r2, [r7, #20]
 800e596:	4619      	mov	r1, r3
 800e598:	f00d fa3b 	bl	801ba12 <memcpy>
 800e59c:	e00b      	b.n	800e5b6 <DecodeAuthKeyId+0xb8>
    }
    else
        ret = CalcHashId(input + idx, length, cert->extAuthKeyId);
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	18d0      	adds	r0, r2, r3
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	f7fe f923 	bl	800c7fa <CalcHashId>
 800e5b4:	61f8      	str	r0, [r7, #28]

    return ret;
 800e5b6:	69fb      	ldr	r3, [r7, #28]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3720      	adds	r7, #32
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <DecodeSubjKeyId>:


static int DecodeSubjKeyId(const byte* input, int sz, DecodedCert* cert)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	61bb      	str	r3, [r7, #24]
    int length = 0, ret = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	617b      	str	r3, [r7, #20]
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	61fb      	str	r3, [r7, #28]

    WOLFSSL_ENTER("DecodeSubjKeyId");

    if (sz <= 0)
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	dc02      	bgt.n	800e5e4 <DecodeSubjKeyId+0x24>
        return ASN_PARSE_E;
 800e5de:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e5e2:	e028      	b.n	800e636 <DecodeSubjKeyId+0x76>

    ret = GetOctetString(input, &idx, &length, sz);
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	f107 0214 	add.w	r2, r7, #20
 800e5ea:	f107 0118 	add.w	r1, r7, #24
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f7fc fd2c 	bl	800b04c <GetOctetString>
 800e5f4:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	da01      	bge.n	800e600 <DecodeSubjKeyId+0x40>
        return ret;
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	e01a      	b.n	800e636 <DecodeSubjKeyId+0x76>
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        cert->extSubjKeyIdSrc = &input[idx];
        cert->extSubjKeyIdSz = length;
    #endif /* OPENSSL_EXTRA */

    if (length == KEYID_SIZE) {
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	2b20      	cmp	r3, #32
 800e604:	d10a      	bne.n	800e61c <DecodeSubjKeyId+0x5c>
        XMEMCPY(cert->extSubjKeyId, input + idx, length);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	68fa      	ldr	r2, [r7, #12]
 800e610:	4413      	add	r3, r2
 800e612:	697a      	ldr	r2, [r7, #20]
 800e614:	4619      	mov	r1, r3
 800e616:	f00d f9fc 	bl	801ba12 <memcpy>
 800e61a:	e00b      	b.n	800e634 <DecodeSubjKeyId+0x74>
    }
    else
        ret = CalcHashId(input + idx, length, cert->extSubjKeyId);
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	18d0      	adds	r0, r2, r3
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	4619      	mov	r1, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800e62c:	461a      	mov	r2, r3
 800e62e:	f7fe f8e4 	bl	800c7fa <CalcHashId>
 800e632:	61f8      	str	r0, [r7, #28]

    return ret;
 800e634:	69fb      	ldr	r3, [r7, #28]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3720      	adds	r7, #32
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <DecodeKeyUsage>:


static int DecodeKeyUsage(const byte* input, int sz, DecodedCert* cert)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b08a      	sub	sp, #40	; 0x28
 800e642:	af02      	add	r7, sp, #8
 800e644:	60f8      	str	r0, [r7, #12]
 800e646:	60b9      	str	r1, [r7, #8]
 800e648:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	61bb      	str	r3, [r7, #24]
    int length;
    int ret;
    WOLFSSL_ENTER("DecodeKeyUsage");

    ret = CheckBitString(input, &idx, &length, sz, 0, NULL);
 800e64e:	68b8      	ldr	r0, [r7, #8]
 800e650:	f107 0214 	add.w	r2, r7, #20
 800e654:	f107 0118 	add.w	r1, r7, #24
 800e658:	2300      	movs	r3, #0
 800e65a:	9301      	str	r3, [sp, #4]
 800e65c:	2300      	movs	r3, #0
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	4603      	mov	r3, r0
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f7fc fe5d 	bl	800b322 <CheckBitString>
 800e668:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d001      	beq.n	800e674 <DecodeKeyUsage+0x36>
        return ret;
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	e01b      	b.n	800e6ac <DecodeKeyUsage+0x6e>

    cert->extKeyUsage = (word16)(input[idx]);
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	4413      	add	r3, r2
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8a3 231e 	strh.w	r2, [r3, #798]	; 0x31e
    if (length == 2)
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	2b02      	cmp	r3, #2
 800e688:	d10f      	bne.n	800e6aa <DecodeKeyUsage+0x6c>
        cert->extKeyUsage |= (word16)(input[idx+1] << 8);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8b3 231e 	ldrh.w	r2, [r3, #798]	; 0x31e
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	3301      	adds	r3, #1
 800e694:	68f9      	ldr	r1, [r7, #12]
 800e696:	440b      	add	r3, r1
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	021b      	lsls	r3, r3, #8
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8a3 231e 	strh.w	r2, [r3, #798]	; 0x31e

    return 0;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3720      	adds	r7, #32
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <DecodeExtKeyUsage>:


static int DecodeExtKeyUsage(const byte* input, int sz, DecodedCert* cert)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	; 0x28
 800e6b8:	af02      	add	r7, sp, #8
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
    word32 idx = 0, oid;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	61bb      	str	r3, [r7, #24]
    int length, ret;

    WOLFSSL_MSG("DecodeExtKeyUsage");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	f107 0210 	add.w	r2, r7, #16
 800e6ca:	f107 0118 	add.w	r1, r7, #24
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f7fc fc10 	bl	800aef4 <GetSequence>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	da70      	bge.n	800e7bc <DecodeExtKeyUsage+0x108>
        WOLFSSL_MSG("\tfail: should be a SEQUENCE");
        return ASN_PARSE_E;
 800e6da:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e6de:	e072      	b.n	800e7c6 <DecodeExtKeyUsage+0x112>
    cert->extExtKeyUsageSrc = input + idx;
    cert->extExtKeyUsageSz = length;
#endif

    while (idx < (word32)sz) {
        ret = GetObjectId(input, &idx, &oid, oidCertKeyUseType, sz);
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	f107 0214 	add.w	r2, r7, #20
 800e6e6:	f107 0118 	add.w	r1, r7, #24
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	230a      	movs	r3, #10
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f7fd fa2a 	bl	800bb48 <GetObjectId>
 800e6f4:	61f8      	str	r0, [r7, #28]
        if (ret == ASN_UNKNOWN_OID_E)
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	f113 0f94 	cmn.w	r3, #148	; 0x94
 800e6fc:	d100      	bne.n	800e700 <DecodeExtKeyUsage+0x4c>
            continue;
 800e6fe:	e05d      	b.n	800e7bc <DecodeExtKeyUsage+0x108>
        else if (ret < 0)
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	2b00      	cmp	r3, #0
 800e704:	da01      	bge.n	800e70a <DecodeExtKeyUsage+0x56>
            return ret;
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	e05d      	b.n	800e7c6 <DecodeExtKeyUsage+0x112>

        switch (oid) {
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2b4a      	cmp	r3, #74	; 0x4a
 800e70e:	d037      	beq.n	800e780 <DecodeExtKeyUsage+0xcc>
 800e710:	2b4a      	cmp	r3, #74	; 0x4a
 800e712:	d806      	bhi.n	800e722 <DecodeExtKeyUsage+0x6e>
 800e714:	2b48      	cmp	r3, #72	; 0x48
 800e716:	d01f      	beq.n	800e758 <DecodeExtKeyUsage+0xa4>
 800e718:	2b48      	cmp	r3, #72	; 0x48
 800e71a:	d827      	bhi.n	800e76c <DecodeExtKeyUsage+0xb8>
 800e71c:	2b47      	cmp	r3, #71	; 0x47
 800e71e:	d011      	beq.n	800e744 <DecodeExtKeyUsage+0x90>
 800e720:	e04c      	b.n	800e7bc <DecodeExtKeyUsage+0x108>
 800e722:	2b4f      	cmp	r3, #79	; 0x4f
 800e724:	d040      	beq.n	800e7a8 <DecodeExtKeyUsage+0xf4>
 800e726:	2b97      	cmp	r3, #151	; 0x97
 800e728:	d002      	beq.n	800e730 <DecodeExtKeyUsage+0x7c>
 800e72a:	2b4e      	cmp	r3, #78	; 0x4e
 800e72c:	d032      	beq.n	800e794 <DecodeExtKeyUsage+0xe0>
 800e72e:	e045      	b.n	800e7bc <DecodeExtKeyUsage+0x108>
            case EKU_ANY_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_ANY;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e736:	f043 0301 	orr.w	r3, r3, #1
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
                break;
 800e742:	e03b      	b.n	800e7bc <DecodeExtKeyUsage+0x108>
            case EKU_SERVER_AUTH_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_SERVER_AUTH;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e74a:	f043 0302 	orr.w	r3, r3, #2
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
                break;
 800e756:	e031      	b.n	800e7bc <DecodeExtKeyUsage+0x108>
            case EKU_CLIENT_AUTH_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_CLIENT_AUTH;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e75e:	f043 0304 	orr.w	r3, r3, #4
 800e762:	b2da      	uxtb	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
                break;
 800e76a:	e027      	b.n	800e7bc <DecodeExtKeyUsage+0x108>
            case EKU_CODESIGNING_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_CODESIGN;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e772:	f043 0308 	orr.w	r3, r3, #8
 800e776:	b2da      	uxtb	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
                break;
 800e77e:	e01d      	b.n	800e7bc <DecodeExtKeyUsage+0x108>
            case EKU_EMAILPROTECT_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_EMAILPROT;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e786:	f043 0310 	orr.w	r3, r3, #16
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
                break;
 800e792:	e013      	b.n	800e7bc <DecodeExtKeyUsage+0x108>
            case EKU_TIMESTAMP_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_TIMESTAMP;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e79a:	f043 0320 	orr.w	r3, r3, #32
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
                break;
 800e7a6:	e009      	b.n	800e7bc <DecodeExtKeyUsage+0x108>
            case EKU_OCSP_SIGN_OID:
                cert->extExtKeyUsage |= EXTKEYUSE_OCSP_SIGN;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
                break;
 800e7ba:	bf00      	nop
    while (idx < (word32)sz) {
 800e7bc:	69ba      	ldr	r2, [r7, #24]
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d38d      	bcc.n	800e6e0 <DecodeExtKeyUsage+0x2c>
    #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
        cert->extExtKeyUsageCount++;
    #endif
    }

    return 0;
 800e7c4:	2300      	movs	r3, #0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3720      	adds	r7, #32
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <DecodeSubtree>:

#ifndef IGNORE_NAME_CONSTRAINTS
#define ASN_TYPE_MASK 0xF
static int DecodeSubtree(const byte* input, int sz,
                         Base_entry** head, void* heap)
{
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b08c      	sub	sp, #48	; 0x30
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	60f8      	str	r0, [r7, #12]
 800e7d6:	60b9      	str	r1, [r7, #8]
 800e7d8:	607a      	str	r2, [r7, #4]
 800e7da:	603b      	str	r3, [r7, #0]
    word32 idx = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	623b      	str	r3, [r7, #32]

    (void)heap;

    while (idx < (word32)sz) {
 800e7e0:	e086      	b.n	800e8f0 <DecodeSubtree+0x122>
        int seqLength, strLength;
        word32 nameIdx;
        byte b, bType;

        if (GetSequence(input, &idx, &seqLength, sz) < 0) {
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	f107 021c 	add.w	r2, r7, #28
 800e7e8:	f107 0120 	add.w	r1, r7, #32
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f7fc fb81 	bl	800aef4 <GetSequence>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	da02      	bge.n	800e7fe <DecodeSubtree+0x30>
            WOLFSSL_MSG("\tfail: should be a SEQUENCE");
            return ASN_PARSE_E;
 800e7f8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e7fc:	e07e      	b.n	800e8fc <DecodeSubtree+0x12e>
        }
        nameIdx = idx;
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	617b      	str	r3, [r7, #20]
        b = input[nameIdx++];
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	1c5a      	adds	r2, r3, #1
 800e806:	617a      	str	r2, [r7, #20]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	4413      	add	r3, r2
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if (GetLength(input, &nameIdx, &strLength, sz) <= 0) {
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	f107 0218 	add.w	r2, r7, #24
 800e818:	f107 0114 	add.w	r1, r7, #20
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f7fc fa35 	bl	800ac8c <GetLength>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	dc02      	bgt.n	800e82e <DecodeSubtree+0x60>
            WOLFSSL_MSG("\tinvalid length");
            return ASN_PARSE_E;
 800e828:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e82c:	e066      	b.n	800e8fc <DecodeSubtree+0x12e>
        }

        /* Get type, LSB 4-bits */
        bType = (b & ASN_TYPE_MASK);
 800e82e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e832:	f003 030f 	and.w	r3, r3, #15
 800e836:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if (bType == ASN_DNS_TYPE || bType == ASN_RFC822_TYPE ||
 800e83a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e83e:	2b02      	cmp	r3, #2
 800e840:	d007      	beq.n	800e852 <DecodeSubtree+0x84>
 800e842:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e846:	2b01      	cmp	r3, #1
 800e848:	d003      	beq.n	800e852 <DecodeSubtree+0x84>
 800e84a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e84e:	2b04      	cmp	r3, #4
 800e850:	d14a      	bne.n	800e8e8 <DecodeSubtree+0x11a>
                                                        bType == ASN_DIR_TYPE) {
            Base_entry* entry;

            /* if constructed has leading sequence */
            if (b & ASN_CONSTRUCTED) {
 800e852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e856:	f003 0320 	and.w	r3, r3, #32
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00d      	beq.n	800e87a <DecodeSubtree+0xac>
                if (GetSequence(input, &nameIdx, &strLength, sz) < 0) {
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	f107 0218 	add.w	r2, r7, #24
 800e864:	f107 0114 	add.w	r1, r7, #20
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f7fc fb43 	bl	800aef4 <GetSequence>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	da02      	bge.n	800e87a <DecodeSubtree+0xac>
                    WOLFSSL_MSG("\tfail: constructed be a SEQUENCE");
                    return ASN_PARSE_E;
 800e874:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e878:	e040      	b.n	800e8fc <DecodeSubtree+0x12e>
                }
            }

            entry = (Base_entry*)XMALLOC(sizeof(Base_entry), heap,
 800e87a:	2010      	movs	r0, #16
 800e87c:	f002 fdee 	bl	801145c <wolfSSL_Malloc>
 800e880:	62b8      	str	r0, [r7, #40]	; 0x28
                                                          DYNAMIC_TYPE_ALTNAME);
            if (entry == NULL) {
 800e882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e884:	2b00      	cmp	r3, #0
 800e886:	d102      	bne.n	800e88e <DecodeSubtree+0xc0>
                WOLFSSL_MSG("allocate error");
                return MEMORY_E;
 800e888:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800e88c:	e036      	b.n	800e8fc <DecodeSubtree+0x12e>
            }

            entry->name = (char*)XMALLOC(strLength, heap, DYNAMIC_TYPE_ALTNAME);
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	4618      	mov	r0, r3
 800e892:	f002 fde3 	bl	801145c <wolfSSL_Malloc>
 800e896:	4602      	mov	r2, r0
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	605a      	str	r2, [r3, #4]
            if (entry->name == NULL) {
 800e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d10a      	bne.n	800e8ba <DecodeSubtree+0xec>
                WOLFSSL_MSG("allocate error");
                XFREE(entry, heap, DYNAMIC_TYPE_ALTNAME);
 800e8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a6:	627b      	str	r3, [r7, #36]	; 0x24
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <DecodeSubtree+0xe6>
 800e8ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8b0:	f002 fdf0 	bl	8011494 <wolfSSL_Free>
                return MEMORY_E;
 800e8b4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800e8b8:	e020      	b.n	800e8fc <DecodeSubtree+0x12e>
            }

            XMEMCPY(entry->name, &input[nameIdx], strLength);
 800e8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8bc:	6858      	ldr	r0, [r3, #4]
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	69ba      	ldr	r2, [r7, #24]
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	f00d f8a3 	bl	801ba12 <memcpy>
            entry->nameSz = strLength;
 800e8cc:	69ba      	ldr	r2, [r7, #24]
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	609a      	str	r2, [r3, #8]
            entry->type = bType;
 800e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e8d8:	731a      	strb	r2, [r3, #12]

            entry->next = *head;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	601a      	str	r2, [r3, #0]
            *head = entry;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8e6:	601a      	str	r2, [r3, #0]
        }

        idx += seqLength;
 800e8e8:	6a3b      	ldr	r3, [r7, #32]
 800e8ea:	69fa      	ldr	r2, [r7, #28]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	623b      	str	r3, [r7, #32]
    while (idx < (word32)sz) {
 800e8f0:	6a3a      	ldr	r2, [r7, #32]
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	f4ff af74 	bcc.w	800e7e2 <DecodeSubtree+0x14>
    }

    return 0;
 800e8fa:	2300      	movs	r3, #0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3730      	adds	r7, #48	; 0x30
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <DecodeNameConstraints>:


static int DecodeNameConstraints(const byte* input, int sz, DecodedCert* cert)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b088      	sub	sp, #32
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	607a      	str	r2, [r7, #4]
    word32 idx = 0;
 800e910:	2300      	movs	r3, #0
 800e912:	617b      	str	r3, [r7, #20]
    int length = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	613b      	str	r3, [r7, #16]

    WOLFSSL_ENTER("DecodeNameConstraints");

    if (GetSequence(input, &idx, &length, sz) < 0) {
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	f107 0210 	add.w	r2, r7, #16
 800e91e:	f107 0114 	add.w	r1, r7, #20
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	f7fc fae6 	bl	800aef4 <GetSequence>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	da3e      	bge.n	800e9ac <DecodeNameConstraints+0xa8>
        WOLFSSL_MSG("\tfail: should be a SEQUENCE");
        return ASN_PARSE_E;
 800e92e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e932:	e040      	b.n	800e9b6 <DecodeNameConstraints+0xb2>
    }

    while (idx < (word32)sz) {
        byte b = input[idx++];
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	1c5a      	adds	r2, r3, #1
 800e938:	617a      	str	r2, [r7, #20]
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	4413      	add	r3, r2
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	76fb      	strb	r3, [r7, #27]
        Base_entry** subtree = NULL;
 800e942:	2300      	movs	r3, #0
 800e944:	61fb      	str	r3, [r7, #28]

        if (GetLength(input, &idx, &length, sz) <= 0) {
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	f107 0210 	add.w	r2, r7, #16
 800e94c:	f107 0114 	add.w	r1, r7, #20
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f7fc f99b 	bl	800ac8c <GetLength>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	dc02      	bgt.n	800e962 <DecodeNameConstraints+0x5e>
            WOLFSSL_MSG("\tinvalid length");
            return ASN_PARSE_E;
 800e95c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e960:	e029      	b.n	800e9b6 <DecodeNameConstraints+0xb2>
        }

        if (b == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | 0))
 800e962:	7efb      	ldrb	r3, [r7, #27]
 800e964:	2ba0      	cmp	r3, #160	; 0xa0
 800e966:	d103      	bne.n	800e970 <DecodeNameConstraints+0x6c>
            subtree = &cert->permittedNames;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	3330      	adds	r3, #48	; 0x30
 800e96c:	61fb      	str	r3, [r7, #28]
 800e96e:	e009      	b.n	800e984 <DecodeNameConstraints+0x80>
        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | 1))
 800e970:	7efb      	ldrb	r3, [r7, #27]
 800e972:	2ba1      	cmp	r3, #161	; 0xa1
 800e974:	d103      	bne.n	800e97e <DecodeNameConstraints+0x7a>
            subtree = &cert->excludedNames;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	3334      	adds	r3, #52	; 0x34
 800e97a:	61fb      	str	r3, [r7, #28]
 800e97c:	e002      	b.n	800e984 <DecodeNameConstraints+0x80>
        else {
            WOLFSSL_MSG("\tinvalid subtree");
            return ASN_PARSE_E;
 800e97e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e982:	e018      	b.n	800e9b6 <DecodeNameConstraints+0xb2>
        }

        if (DecodeSubtree(input + idx, length, subtree, cert->heap) < 0) {
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	18d0      	adds	r0, r2, r3
 800e98a:	6939      	ldr	r1, [r7, #16]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e992:	69fa      	ldr	r2, [r7, #28]
 800e994:	f7ff ff1b 	bl	800e7ce <DecodeSubtree>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	da02      	bge.n	800e9a4 <DecodeNameConstraints+0xa0>
            WOLFSSL_MSG("\terror parsing subtree");
            return ASN_PARSE_E;
 800e99e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800e9a2:	e008      	b.n	800e9b6 <DecodeNameConstraints+0xb2>
        }

        idx += length;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	693a      	ldr	r2, [r7, #16]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	617b      	str	r3, [r7, #20]
    while (idx < (word32)sz) {
 800e9ac:	697a      	ldr	r2, [r7, #20]
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d3bf      	bcc.n	800e934 <DecodeNameConstraints+0x30>
    }

    return 0;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3720      	adds	r7, #32
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <DecodeCertExtensions>:
static int DecodeCertExtensions(DecodedCert* cert)
/*
 *  Processing the Certificate Extensions. This does not modify the current
 *  index. It is works starting with the recorded extensions pointer.
 */
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b08e      	sub	sp, #56	; 0x38
 800e9c2:	af02      	add	r7, sp, #8
 800e9c4:	6078      	str	r0, [r7, #4]
    int ret = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	62bb      	str	r3, [r7, #40]	; 0x28
    word32 idx = 0;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	61fb      	str	r3, [r7, #28]
    int sz = cert->extensionsSz;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e9d4:	627b      	str	r3, [r7, #36]	; 0x24
    const byte* input = cert->extensions;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9dc:	623b      	str	r3, [r7, #32]
    int length;
    word32 oid;
    byte critical = 0;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    byte criticalFail = 0;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    byte tag = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	74fb      	strb	r3, [r7, #19]

    WOLFSSL_ENTER("DecodeCertExtensions");

    if (input == NULL || sz == 0)
 800e9ee:	6a3b      	ldr	r3, [r7, #32]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d002      	beq.n	800e9fa <DecodeCertExtensions+0x3c>
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d102      	bne.n	800ea00 <DecodeCertExtensions+0x42>
        return BAD_FUNC_ARG;
 800e9fa:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800e9fe:	e257      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>

#ifdef WOLFSSL_CERT_REQ
    if (!cert->isCSR)
#endif
    { /* Not included in CSR */
        if (GetASNTag(input, &idx, &tag, sz) < 0) {
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea02:	f107 0213 	add.w	r2, r7, #19
 800ea06:	f107 011c 	add.w	r1, r7, #28
 800ea0a:	6a38      	ldr	r0, [r7, #32]
 800ea0c:	f7fc f9bc 	bl	800ad88 <GetASNTag>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	da02      	bge.n	800ea1c <DecodeCertExtensions+0x5e>
            return ASN_PARSE_E;
 800ea16:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ea1a:	e249      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
        }

        if (tag != ASN_EXTENSIONS) {
 800ea1c:	7cfb      	ldrb	r3, [r7, #19]
 800ea1e:	2ba3      	cmp	r3, #163	; 0xa3
 800ea20:	d002      	beq.n	800ea28 <DecodeCertExtensions+0x6a>
            WOLFSSL_MSG("\tfail: should be an EXTENSIONS");
            return ASN_PARSE_E;
 800ea22:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ea26:	e243      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
        }

        if (GetLength(input, &idx, &length, sz) < 0) {
 800ea28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2a:	f107 0218 	add.w	r2, r7, #24
 800ea2e:	f107 011c 	add.w	r1, r7, #28
 800ea32:	6a38      	ldr	r0, [r7, #32]
 800ea34:	f7fc f92a 	bl	800ac8c <GetLength>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	da02      	bge.n	800ea44 <DecodeCertExtensions+0x86>
            WOLFSSL_MSG("\tfail: invalid length");
            return ASN_PARSE_E;
 800ea3e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ea42:	e235      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
        }
    }

    if (GetSequence(input, &idx, &length, sz) < 0) {
 800ea44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea46:	f107 0218 	add.w	r2, r7, #24
 800ea4a:	f107 011c 	add.w	r1, r7, #28
 800ea4e:	6a38      	ldr	r0, [r7, #32]
 800ea50:	f7fc fa50 	bl	800aef4 <GetSequence>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f280 821d 	bge.w	800ee96 <DecodeCertExtensions+0x4d8>
        WOLFSSL_MSG("\tfail: should be a SEQUENCE (1)");
        return ASN_PARSE_E;
 800ea5c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ea60:	e226      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
    }

    while (idx < (word32)sz) {
        word32 localIdx;

        if (GetSequence(input, &idx, &length, sz) < 0) {
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	f107 0218 	add.w	r2, r7, #24
 800ea68:	f107 011c 	add.w	r1, r7, #28
 800ea6c:	6a38      	ldr	r0, [r7, #32]
 800ea6e:	f7fc fa41 	bl	800aef4 <GetSequence>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	da02      	bge.n	800ea7e <DecodeCertExtensions+0xc0>
            WOLFSSL_MSG("\tfail: should be a SEQUENCE");
            return ASN_PARSE_E;
 800ea78:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ea7c:	e218      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
        }

        oid = 0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	617b      	str	r3, [r7, #20]
        if ((ret = GetObjectId(input, &idx, &oid, oidCertExtType, sz)) < 0) {
 800ea82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea84:	f107 0214 	add.w	r2, r7, #20
 800ea88:	f107 011c 	add.w	r1, r7, #28
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	2306      	movs	r3, #6
 800ea90:	6a38      	ldr	r0, [r7, #32]
 800ea92:	f7fd f859 	bl	800bb48 <GetObjectId>
 800ea96:	62b8      	str	r0, [r7, #40]	; 0x28
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	da01      	bge.n	800eaa2 <DecodeCertExtensions+0xe4>
            WOLFSSL_MSG("\tfail: OBJECT ID");
            return ret;
 800ea9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa0:	e206      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
        }

        /* check for critical flag */
        critical = 0;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if ((idx + 1) > (word32)sz) {
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	1c5a      	adds	r2, r3, #1
 800eaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d902      	bls.n	800eab8 <DecodeCertExtensions+0xfa>
            WOLFSSL_MSG("\tfail: malformed buffer");
            return BUFFER_E;
 800eab2:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800eab6:	e1fb      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
        }

        localIdx = idx;
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	60fb      	str	r3, [r7, #12]
        if (GetASNTag(input, &localIdx, &tag, sz) == 0) {
 800eabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabe:	f107 0213 	add.w	r2, r7, #19
 800eac2:	f107 010c 	add.w	r1, r7, #12
 800eac6:	6a38      	ldr	r0, [r7, #32]
 800eac8:	f7fc f95e 	bl	800ad88 <GetASNTag>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d112      	bne.n	800eaf8 <DecodeCertExtensions+0x13a>
            if (tag == ASN_BOOLEAN) {
 800ead2:	7cfb      	ldrb	r3, [r7, #19]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d10f      	bne.n	800eaf8 <DecodeCertExtensions+0x13a>
                ret = GetBoolean(input, &idx, sz);
 800ead8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eada:	f107 031c 	add.w	r3, r7, #28
 800eade:	4619      	mov	r1, r3
 800eae0:	6a38      	ldr	r0, [r7, #32]
 800eae2:	f7fc fa74 	bl	800afce <GetBoolean>
 800eae6:	62b8      	str	r0, [r7, #40]	; 0x28
                if (ret < 0) {
 800eae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	da01      	bge.n	800eaf2 <DecodeCertExtensions+0x134>
                    WOLFSSL_MSG("\tfail: critical boolean");
                    return ret;
 800eaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf0:	e1de      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                }

                critical = (byte)ret;
 800eaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        /* process the extension based on the OID */
        ret = GetOctetString(input, &idx, &length, sz);
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	f107 0218 	add.w	r2, r7, #24
 800eafe:	f107 011c 	add.w	r1, r7, #28
 800eb02:	6a38      	ldr	r0, [r7, #32]
 800eb04:	f7fc faa2 	bl	800b04c <GetOctetString>
 800eb08:	62b8      	str	r0, [r7, #40]	; 0x28
        if (ret < 0) {
 800eb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	da01      	bge.n	800eb14 <DecodeCertExtensions+0x156>
            WOLFSSL_MSG("\tfail: bad OCTET STRING");
            return ret;
 800eb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb12:	e1cd      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
        }

        switch (oid) {
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	2b90      	cmp	r3, #144	; 0x90
 800eb18:	f000 8146 	beq.w	800eda8 <DecodeCertExtensions+0x3ea>
 800eb1c:	2b90      	cmp	r3, #144	; 0x90
 800eb1e:	d80f      	bhi.n	800eb40 <DecodeCertExtensions+0x182>
 800eb20:	2b81      	cmp	r3, #129	; 0x81
 800eb22:	f000 80fe 	beq.w	800ed22 <DecodeCertExtensions+0x364>
 800eb26:	2b81      	cmp	r3, #129	; 0x81
 800eb28:	d805      	bhi.n	800eb36 <DecodeCertExtensions+0x178>
 800eb2a:	2b45      	cmp	r3, #69	; 0x45
 800eb2c:	d063      	beq.n	800ebf6 <DecodeCertExtensions+0x238>
 800eb2e:	2b80      	cmp	r3, #128	; 0x80
 800eb30:	f000 80ce 	beq.w	800ecd0 <DecodeCertExtensions+0x312>
 800eb34:	e18c      	b.n	800ee50 <DecodeCertExtensions+0x492>
 800eb36:	2b83      	cmp	r3, #131	; 0x83
 800eb38:	d07f      	beq.n	800ec3a <DecodeCertExtensions+0x27c>
 800eb3a:	2b85      	cmp	r3, #133	; 0x85
 800eb3c:	d017      	beq.n	800eb6e <DecodeCertExtensions+0x1b0>
 800eb3e:	e187      	b.n	800ee50 <DecodeCertExtensions+0x492>
 800eb40:	2b95      	cmp	r3, #149	; 0x95
 800eb42:	f000 809c 	beq.w	800ec7e <DecodeCertExtensions+0x2c0>
 800eb46:	2b95      	cmp	r3, #149	; 0x95
 800eb48:	d805      	bhi.n	800eb56 <DecodeCertExtensions+0x198>
 800eb4a:	2b91      	cmp	r3, #145	; 0x91
 800eb4c:	d031      	beq.n	800ebb2 <DecodeCertExtensions+0x1f4>
 800eb4e:	2b92      	cmp	r3, #146	; 0x92
 800eb50:	f000 8186 	beq.w	800ee60 <DecodeCertExtensions+0x4a2>
 800eb54:	e17c      	b.n	800ee50 <DecodeCertExtensions+0x492>
 800eb56:	2ba8      	cmp	r3, #168	; 0xa8
 800eb58:	f000 8152 	beq.w	800ee00 <DecodeCertExtensions+0x442>
 800eb5c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800eb60:	4293      	cmp	r3, r2
 800eb62:	f000 8160 	beq.w	800ee26 <DecodeCertExtensions+0x468>
 800eb66:	2b97      	cmp	r3, #151	; 0x97
 800eb68:	f000 80fd 	beq.w	800ed66 <DecodeCertExtensions+0x3a8>
 800eb6c:	e170      	b.n	800ee50 <DecodeCertExtensions+0x492>
            case BASIC_CA_OID:
                VERIFY_AND_SET_OID(cert->extBasicConstSet);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 800eb74:	f003 0308 	and.w	r3, r3, #8
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d113      	bne.n	800eba6 <DecodeCertExtensions+0x1e8>
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	f892 3379 	ldrb.w	r3, [r2, #889]	; 0x379
 800eb84:	f043 0308 	orr.w	r3, r3, #8
 800eb88:	f882 3379 	strb.w	r3, [r2, #889]	; 0x379
                #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
                    cert->extBasicConstCrit = critical;
                #endif
                if (DecodeBasicCaConstraint(&input[idx], length, cert) < 0)
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	6a3a      	ldr	r2, [r7, #32]
 800eb90:	4413      	add	r3, r2
 800eb92:	69b9      	ldr	r1, [r7, #24]
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff fae2 	bl	800e160 <DecodeBasicCaConstraint>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f280 8160 	bge.w	800ee64 <DecodeCertExtensions+0x4a6>
 800eba4:	e002      	b.n	800ebac <DecodeCertExtensions+0x1ee>
                VERIFY_AND_SET_OID(cert->extBasicConstSet);
 800eba6:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800ebaa:	e181      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    return ASN_PARSE_E;
 800ebac:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ebb0:	e17e      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                break;

            case CRL_DIST_OID:
                VERIFY_AND_SET_OID(cert->extCRLdistSet);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 800ebb8:	f003 0302 	and.w	r3, r3, #2
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d113      	bne.n	800ebea <DecodeCertExtensions+0x22c>
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	f892 3379 	ldrb.w	r3, [r2, #889]	; 0x379
 800ebc8:	f043 0302 	orr.w	r3, r3, #2
 800ebcc:	f882 3379 	strb.w	r3, [r2, #889]	; 0x379
                #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
                    cert->extCRLdistCrit = critical;
                #endif
                if (DecodeCrlDist(&input[idx], length, cert) < 0)
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	6a3a      	ldr	r2, [r7, #32]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	69b9      	ldr	r1, [r7, #24]
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7ff fb19 	bl	800e212 <DecodeCrlDist>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f280 8140 	bge.w	800ee68 <DecodeCertExtensions+0x4aa>
 800ebe8:	e002      	b.n	800ebf0 <DecodeCertExtensions+0x232>
                VERIFY_AND_SET_OID(cert->extCRLdistSet);
 800ebea:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800ebee:	e15f      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    return ASN_PARSE_E;
 800ebf0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ebf4:	e15c      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                break;

            case AUTH_INFO_OID:
                VERIFY_AND_SET_OID(cert->extAuthInfoSet);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 800ebfc:	f003 0304 	and.w	r3, r3, #4
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d113      	bne.n	800ec2e <DecodeCertExtensions+0x270>
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	f892 3379 	ldrb.w	r3, [r2, #889]	; 0x379
 800ec0c:	f043 0304 	orr.w	r3, r3, #4
 800ec10:	f882 3379 	strb.w	r3, [r2, #889]	; 0x379
                #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
                    cert->extAuthInfoCrit = critical;
                #endif
                if (DecodeAuthInfo(&input[idx], length, cert) < 0)
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	6a3a      	ldr	r2, [r7, #32]
 800ec18:	4413      	add	r3, r2
 800ec1a:	69b9      	ldr	r1, [r7, #24]
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7ff fbf1 	bl	800e406 <DecodeAuthInfo>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	f280 8120 	bge.w	800ee6c <DecodeCertExtensions+0x4ae>
 800ec2c:	e002      	b.n	800ec34 <DecodeCertExtensions+0x276>
                VERIFY_AND_SET_OID(cert->extAuthInfoSet);
 800ec2e:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800ec32:	e13d      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    return ASN_PARSE_E;
 800ec34:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ec38:	e13a      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                break;

            case ALT_NAMES_OID:
                VERIFY_AND_SET_OID(cert->extSubjAltNameSet);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 800ec40:	f003 0310 	and.w	r3, r3, #16
 800ec44:	b2db      	uxtb	r3, r3
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d114      	bne.n	800ec74 <DecodeCertExtensions+0x2b6>
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	f892 3379 	ldrb.w	r3, [r2, #889]	; 0x379
 800ec50:	f043 0310 	orr.w	r3, r3, #16
 800ec54:	f882 3379 	strb.w	r3, [r2, #889]	; 0x379
                #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
                    cert->extSubjAltNameCrit = critical;
                #endif
                ret = DecodeAltNames(&input[idx], length, cert);
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	6a3a      	ldr	r2, [r7, #32]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	69b9      	ldr	r1, [r7, #24]
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7ff f855 	bl	800dd12 <DecodeAltNames>
 800ec68:	62b8      	str	r0, [r7, #40]	; 0x28
                if (ret < 0)
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f280 80ff 	bge.w	800ee70 <DecodeCertExtensions+0x4b2>
 800ec72:	e002      	b.n	800ec7a <DecodeCertExtensions+0x2bc>
                VERIFY_AND_SET_OID(cert->extSubjAltNameSet);
 800ec74:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800ec78:	e11a      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    return ret;
 800ec7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7c:	e118      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                break;

            case AUTH_KEY_OID:
                VERIFY_AND_SET_OID(cert->extAuthKeyIdSet);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800ec84:	f003 0304 	and.w	r3, r3, #4
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d10b      	bne.n	800eca6 <DecodeCertExtensions+0x2e8>
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	f892 3378 	ldrb.w	r3, [r2, #888]	; 0x378
 800ec94:	f043 0304 	orr.w	r3, r3, #4
 800ec98:	f882 3378 	strb.w	r3, [r2, #888]	; 0x378
                #ifndef WOLFSSL_ALLOW_CRIT_SKID
                    /* This check is added due to RFC 5280 section 4.2.1.1
                     * stating that conforming CA's must mark this extension
                     * as non-critical. When parsing extensions check that
                     * certificate was made in compliance with this. */
                    if (critical) {
 800ec9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d006      	beq.n	800ecb2 <DecodeCertExtensions+0x2f4>
 800eca4:	e002      	b.n	800ecac <DecodeCertExtensions+0x2ee>
                VERIFY_AND_SET_OID(cert->extAuthKeyIdSet);
 800eca6:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800ecaa:	e101      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                        WOLFSSL_MSG("Critical Auth Key ID is not allowed");
                        WOLFSSL_MSG("Use macro WOLFSSL_ALLOW_CRIT_SKID if wanted");
                        return ASN_CRIT_EXT_E;
 800ecac:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 800ecb0:	e0fe      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    }
                #endif
                if (DecodeAuthKeyId(&input[idx], length, cert) < 0)
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	6a3a      	ldr	r2, [r7, #32]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	69b9      	ldr	r1, [r7, #24]
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7ff fc1e 	bl	800e4fe <DecodeAuthKeyId>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f280 80d5 	bge.w	800ee74 <DecodeCertExtensions+0x4b6>
                    return ASN_PARSE_E;
 800ecca:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ecce:	e0ef      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                break;

            case SUBJ_KEY_OID:
                VERIFY_AND_SET_OID(cert->extSubjKeyIdSet);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800ecd6:	f003 0302 	and.w	r3, r3, #2
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10b      	bne.n	800ecf8 <DecodeCertExtensions+0x33a>
 800ece0:	687a      	ldr	r2, [r7, #4]
 800ece2:	f892 3378 	ldrb.w	r3, [r2, #888]	; 0x378
 800ece6:	f043 0302 	orr.w	r3, r3, #2
 800ecea:	f882 3378 	strb.w	r3, [r2, #888]	; 0x378
                #ifndef WOLFSSL_ALLOW_CRIT_SKID
                    /* This check is added due to RFC 5280 section 4.2.1.2
                     * stating that conforming CA's must mark this extension
                     * as non-critical. When parsing extensions check that
                     * certificate was made in compliance with this. */
                    if (critical) {
 800ecee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d006      	beq.n	800ed04 <DecodeCertExtensions+0x346>
 800ecf6:	e002      	b.n	800ecfe <DecodeCertExtensions+0x340>
                VERIFY_AND_SET_OID(cert->extSubjKeyIdSet);
 800ecf8:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800ecfc:	e0d8      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                        WOLFSSL_MSG("Critical Subject Key ID is not allowed");
                        WOLFSSL_MSG("Use macro WOLFSSL_ALLOW_CRIT_SKID if wanted");
                        return ASN_CRIT_EXT_E;
 800ecfe:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 800ed02:	e0d5      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    }
                #endif

                if (DecodeSubjKeyId(&input[idx], length, cert) < 0)
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	6a3a      	ldr	r2, [r7, #32]
 800ed08:	4413      	add	r3, r2
 800ed0a:	69b9      	ldr	r1, [r7, #24]
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7ff fc56 	bl	800e5c0 <DecodeSubjKeyId>
 800ed14:	4603      	mov	r3, r0
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f280 80ae 	bge.w	800ee78 <DecodeCertExtensions+0x4ba>
                    return ASN_PARSE_E;
 800ed1c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ed20:	e0c6      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    WOLFSSL_MSG("Certificate Policy extension not supported yet.");
                #endif
                break;

            case KEY_USAGE_OID:
                VERIFY_AND_SET_OID(cert->extKeyUsageSet);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800ed28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d113      	bne.n	800ed5a <DecodeCertExtensions+0x39c>
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	f892 3378 	ldrb.w	r3, [r2, #888]	; 0x378
 800ed38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed3c:	f882 3378 	strb.w	r3, [r2, #888]	; 0x378
                #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
                    cert->extKeyUsageCrit = critical;
                #endif
                if (DecodeKeyUsage(&input[idx], length, cert) < 0)
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	6a3a      	ldr	r2, [r7, #32]
 800ed44:	4413      	add	r3, r2
 800ed46:	69b9      	ldr	r1, [r7, #24]
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff fc77 	bl	800e63e <DecodeKeyUsage>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f280 8092 	bge.w	800ee7c <DecodeCertExtensions+0x4be>
 800ed58:	e002      	b.n	800ed60 <DecodeCertExtensions+0x3a2>
                VERIFY_AND_SET_OID(cert->extKeyUsageSet);
 800ed5a:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800ed5e:	e0a7      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    return ASN_PARSE_E;
 800ed60:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ed64:	e0a4      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                break;

            case EXT_KEY_USAGE_OID:
                VERIFY_AND_SET_OID(cert->extExtKeyUsageSet);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 800ed6c:	f003 0301 	and.w	r3, r3, #1
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d112      	bne.n	800ed9c <DecodeCertExtensions+0x3de>
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	f892 3379 	ldrb.w	r3, [r2, #889]	; 0x379
 800ed7c:	f043 0301 	orr.w	r3, r3, #1
 800ed80:	f882 3379 	strb.w	r3, [r2, #889]	; 0x379
                #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
                    cert->extExtKeyUsageCrit = critical;
                #endif
                if (DecodeExtKeyUsage(&input[idx], length, cert) < 0)
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	6a3a      	ldr	r2, [r7, #32]
 800ed88:	4413      	add	r3, r2
 800ed8a:	69b9      	ldr	r1, [r7, #24]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7ff fc90 	bl	800e6b4 <DecodeExtKeyUsage>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	da72      	bge.n	800ee80 <DecodeCertExtensions+0x4c2>
 800ed9a:	e002      	b.n	800eda2 <DecodeCertExtensions+0x3e4>
                VERIFY_AND_SET_OID(cert->extExtKeyUsageSet);
 800ed9c:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800eda0:	e086      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    return ASN_PARSE_E;
 800eda2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800eda6:	e083      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
            case NAME_CONS_OID:
            #ifndef WOLFSSL_NO_ASN_STRICT
                /* Verify RFC 5280 Sec 4.2.1.10 rule:
                    "The name constraints extension,
                    which MUST be used only in a CA certificate" */
                if (!cert->isCA) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800edae:	f003 0310 	and.w	r3, r3, #16
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d102      	bne.n	800edbe <DecodeCertExtensions+0x400>
                    WOLFSSL_MSG("Name constraints allowed only for CA certs");
                    return ASN_NAME_INVALID_E;
 800edb8:	f06f 03c5 	mvn.w	r3, #197	; 0xc5
 800edbc:	e078      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                }
            #endif
                VERIFY_AND_SET_OID(cert->extNameConstraintSet);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800edc4:	f003 0308 	and.w	r3, r3, #8
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d112      	bne.n	800edf4 <DecodeCertExtensions+0x436>
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	f892 3378 	ldrb.w	r3, [r2, #888]	; 0x378
 800edd4:	f043 0308 	orr.w	r3, r3, #8
 800edd8:	f882 3378 	strb.w	r3, [r2, #888]	; 0x378
                #if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
                    cert->extNameConstraintCrit = critical;
                #endif
                if (DecodeNameConstraints(&input[idx], length, cert) < 0)
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	6a3a      	ldr	r2, [r7, #32]
 800ede0:	4413      	add	r3, r2
 800ede2:	69b9      	ldr	r1, [r7, #24]
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7ff fd8c 	bl	800e904 <DecodeNameConstraints>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	da48      	bge.n	800ee84 <DecodeCertExtensions+0x4c6>
 800edf2:	e002      	b.n	800edfa <DecodeCertExtensions+0x43c>
                VERIFY_AND_SET_OID(cert->extNameConstraintSet);
 800edf4:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800edf8:	e05a      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                    return ASN_PARSE_E;
 800edfa:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800edfe:	e057      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
                break;
            #endif /* IGNORE_NAME_CONSTRAINTS */

            case INHIBIT_ANY_OID:
                VERIFY_AND_SET_OID(cert->inhibitAnyOidSet);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 800ee06:	f003 0320 	and.w	r3, r3, #32
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d107      	bne.n	800ee20 <DecodeCertExtensions+0x462>
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	f892 3379 	ldrb.w	r3, [r2, #889]	; 0x379
 800ee16:	f043 0320 	orr.w	r3, r3, #32
 800ee1a:	f882 3379 	strb.w	r3, [r2, #889]	; 0x379
                WOLFSSL_MSG("Inhibit anyPolicy extension not supported yet.");
                break;
 800ee1e:	e036      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                VERIFY_AND_SET_OID(cert->inhibitAnyOidSet);
 800ee20:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 800ee24:	e044      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>

       #ifndef IGNORE_NETSCAPE_CERT_TYPE
            case NETSCAPE_CT_OID:
                WOLFSSL_MSG("Netscape certificate type extension not supported "
                            "yet.");
                if (CheckBitString(input, &idx, &length, idx + length, 0,
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	69ba      	ldr	r2, [r7, #24]
 800ee2a:	1898      	adds	r0, r3, r2
 800ee2c:	f107 0218 	add.w	r2, r7, #24
 800ee30:	f107 011c 	add.w	r1, r7, #28
 800ee34:	2300      	movs	r3, #0
 800ee36:	9301      	str	r3, [sp, #4]
 800ee38:	2300      	movs	r3, #0
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	6a38      	ldr	r0, [r7, #32]
 800ee40:	f7fc fa6f 	bl	800b322 <CheckBitString>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	da1e      	bge.n	800ee88 <DecodeCertExtensions+0x4ca>
                                                                    NULL) < 0) {
                    return ASN_PARSE_E;
 800ee4a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ee4e:	e02f      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
            #ifndef WOLFSSL_NO_ASN_STRICT
                /* While it is a failure to not support critical extensions,
                 * still parse the certificate ignoring the unsupported
                 * extension to allow caller to accept it with the verify
                 * callback. */
                if (critical)
 800ee50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d019      	beq.n	800ee8c <DecodeCertExtensions+0x4ce>
                    criticalFail = 1;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            #endif
            break;
 800ee5e:	e015      	b.n	800ee8c <DecodeCertExtensions+0x4ce>
                break;
 800ee60:	bf00      	nop
 800ee62:	e014      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee64:	bf00      	nop
 800ee66:	e012      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee68:	bf00      	nop
 800ee6a:	e010      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee6c:	bf00      	nop
 800ee6e:	e00e      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee70:	bf00      	nop
 800ee72:	e00c      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee74:	bf00      	nop
 800ee76:	e00a      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee78:	bf00      	nop
 800ee7a:	e008      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee7c:	bf00      	nop
 800ee7e:	e006      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee80:	bf00      	nop
 800ee82:	e004      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee84:	bf00      	nop
 800ee86:	e002      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
                break;
 800ee88:	bf00      	nop
 800ee8a:	e000      	b.n	800ee8e <DecodeCertExtensions+0x4d0>
            break;
 800ee8c:	bf00      	nop
        }
        idx += length;
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	69ba      	ldr	r2, [r7, #24]
 800ee92:	4413      	add	r3, r2
 800ee94:	61fb      	str	r3, [r7, #28]
    while (idx < (word32)sz) {
 800ee96:	69fa      	ldr	r2, [r7, #28]
 800ee98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	f4ff ade1 	bcc.w	800ea62 <DecodeCertExtensions+0xa4>
    }

    return criticalFail ? ASN_CRIT_EXT_E : 0;
 800eea0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <DecodeCertExtensions+0x4f0>
 800eea8:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 800eeac:	e000      	b.n	800eeb0 <DecodeCertExtensions+0x4f2>
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3730      	adds	r7, #48	; 0x30
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <ParseCert>:

int ParseCert(DecodedCert* cert, int type, int verify, void* cm)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b086      	sub	sp, #24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
 800eec4:	603b      	str	r3, [r7, #0]
    int   ret;
    char* ptr;

    ret = ParseCertRelative(cert, type, verify, cm);
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	68b9      	ldr	r1, [r7, #8]
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f000 f861 	bl	800ef94 <ParseCertRelative>
 800eed2:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	da01      	bge.n	800eede <ParseCert+0x26>
        return ret;
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	e056      	b.n	800ef8c <ParseCert+0xd4>

    if (cert->subjectCNLen > 0) {
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	dd28      	ble.n	800ef3a <ParseCert+0x82>
        ptr = (char*) XMALLOC(cert->subjectCNLen + 1, cert->heap,
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eeee:	3301      	adds	r3, #1
 800eef0:	4618      	mov	r0, r3
 800eef2:	f002 fab3 	bl	801145c <wolfSSL_Malloc>
 800eef6:	6138      	str	r0, [r7, #16]
                              DYNAMIC_TYPE_SUBJECT_CN);
        if (ptr == NULL)
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d102      	bne.n	800ef04 <ParseCert+0x4c>
            return MEMORY_E;
 800eefe:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800ef02:	e043      	b.n	800ef8c <ParseCert+0xd4>
        XMEMCPY(ptr, cert->subjectCN, cert->subjectCNLen);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef0e:	461a      	mov	r2, r3
 800ef10:	6938      	ldr	r0, [r7, #16]
 800ef12:	f00c fd7e 	bl	801ba12 <memcpy>
        ptr[cert->subjectCNLen] = '\0';
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	4413      	add	r3, r2
 800ef22:	2200      	movs	r2, #0
 800ef24:	701a      	strb	r2, [r3, #0]
        cert->subjectCN = ptr;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	693a      	ldr	r2, [r7, #16]
 800ef2a:	67da      	str	r2, [r3, #124]	; 0x7c
        cert->subjectCNStored = 1;
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	f892 3378 	ldrb.w	r3, [r2, #888]	; 0x378
 800ef32:	f043 0301 	orr.w	r3, r3, #1
 800ef36:	f882 3378 	strb.w	r3, [r2, #888]	; 0x378
    }

    if (cert->keyOID == RSAk &&
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	69db      	ldr	r3, [r3, #28]
 800ef3e:	f240 2285 	movw	r2, #645	; 0x285
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d121      	bne.n	800ef8a <ParseCert+0xd2>
                          cert->publicKey != NULL  && cert->pubKeySize > 0) {
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
    if (cert->keyOID == RSAk &&
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d01d      	beq.n	800ef8a <ParseCert+0xd2>
                          cert->publicKey != NULL  && cert->pubKeySize > 0) {
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d019      	beq.n	800ef8a <ParseCert+0xd2>
        ptr = (char*) XMALLOC(cert->pubKeySize, cert->heap,
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f002 fa7e 	bl	801145c <wolfSSL_Malloc>
 800ef60:	6138      	str	r0, [r7, #16]
                              DYNAMIC_TYPE_PUBLIC_KEY);
        if (ptr == NULL)
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d102      	bne.n	800ef6e <ParseCert+0xb6>
            return MEMORY_E;
 800ef68:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800ef6c:	e00e      	b.n	800ef8c <ParseCert+0xd4>
        XMEMCPY(ptr, cert->publicKey, cert->pubKeySize);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6819      	ldr	r1, [r3, #0]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	461a      	mov	r2, r3
 800ef78:	6938      	ldr	r0, [r7, #16]
 800ef7a:	f00c fd4a 	bl	801ba12 <memcpy>
        cert->publicKey = (byte *)ptr;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	693a      	ldr	r2, [r7, #16]
 800ef82:	601a      	str	r2, [r3, #0]
        cert->pubKeyStored = 1;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2201      	movs	r2, #1
 800ef88:	609a      	str	r2, [r3, #8]
    }

    return ret;
 800ef8a:	697b      	ldr	r3, [r7, #20]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3718      	adds	r7, #24
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <ParseCertRelative>:
}
#endif /* WOLFSSL_SMALL_CERT_VERIFY */
#endif /* WOLFSSL_SMALL_CERT_VERIFY || OPENSSL_EXTRA */

int ParseCertRelative(DecodedCert* cert, int type, int verify, void* cm)
{
 800ef94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef96:	b093      	sub	sp, #76	; 0x4c
 800ef98:	af06      	add	r7, sp, #24
 800ef9a:	6178      	str	r0, [r7, #20]
 800ef9c:	6139      	str	r1, [r7, #16]
 800ef9e:	60fa      	str	r2, [r7, #12]
 800efa0:	60bb      	str	r3, [r7, #8]
    int    ret = 0;
 800efa2:	2300      	movs	r3, #0
 800efa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    int    checkPathLen = 0;
 800efa6:	2300      	movs	r3, #0
 800efa8:	62bb      	str	r3, [r7, #40]	; 0x28
    int    decrementMaxPathLen = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	627b      	str	r3, [r7, #36]	; 0x24
    word32 confirmOID = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	61fb      	str	r3, [r7, #28]
    byte*  tsip_encRsaKeyIdx;
#ifdef WOLFSSL_CERT_REQ
    int    len = 0;
#endif

    if (cert == NULL) {
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d102      	bne.n	800efbe <ParseCertRelative+0x2a>
        return BAD_FUNC_ARG;
 800efb8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800efbc:	e25b      	b.n	800f476 <ParseCertRelative+0x4e2>
#ifdef WOLFSSL_CERT_REQ
    if (type == CERTREQ_TYPE)
        cert->isCSR = 1;
#endif

    if (cert->sigCtx.state == SIG_STATE_BEGIN) {
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f040 81d5 	bne.w	800f374 <ParseCertRelative+0x3e0>
        cert->badDate = 0;
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	2200      	movs	r2, #0
 800efce:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
        cert->criticalExt = 0;
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
        if ((ret = DecodeToKey(cert, verify)) < 0) {
 800efda:	68f9      	ldr	r1, [r7, #12]
 800efdc:	6978      	ldr	r0, [r7, #20]
 800efde:	f7fe f815 	bl	800d00c <DecodeToKey>
 800efe2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800efe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	da0e      	bge.n	800f008 <ParseCertRelative+0x74>
            if (ret == ASN_BEFORE_DATE_E || ret == ASN_AFTER_DATE_E)
 800efea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efec:	f113 0f96 	cmn.w	r3, #150	; 0x96
 800eff0:	d003      	beq.n	800effa <ParseCertRelative+0x66>
 800eff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff4:	f113 0f97 	cmn.w	r3, #151	; 0x97
 800eff8:	d104      	bne.n	800f004 <ParseCertRelative+0x70>
                cert->badDate = ret;
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800effe:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 800f002:	e001      	b.n	800f008 <ParseCertRelative+0x74>
            else
                return ret;
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	e236      	b.n	800f476 <ParseCertRelative+0x4e2>
                }
            }
        }
#endif

        if (cert->srcIdx < cert->sigIndex) {
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	429a      	cmp	r2, r3
 800f014:	d237      	bcs.n	800f086 <ParseCertRelative+0xf2>
        #ifndef ALLOW_V1_EXTENSIONS
            if (cert->version < 2) {
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	6a1b      	ldr	r3, [r3, #32]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	dc02      	bgt.n	800f024 <ParseCertRelative+0x90>
                WOLFSSL_MSG("\tv1 and v2 certs not allowed extensions");
                return ASN_VERSION_E;
 800f01e:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800f022:	e228      	b.n	800f476 <ParseCertRelative+0x4e2>
            }
        #endif

            /* save extensions */
            cert->extensions    = &cert->source[cert->srcIdx];
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f030:	441a      	add	r2, r3
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
            cert->extensionsSz  = cert->sigIndex - cert->srcIdx;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	691a      	ldr	r2, [r3, #16]
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	461a      	mov	r2, r3
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
            cert->extensionsIdx = cert->srcIdx;   /* for potential later use */
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

            if ((ret = DecodeCertExtensions(cert)) < 0) {
 800f058:	6978      	ldr	r0, [r7, #20]
 800f05a:	f7ff fcb0 	bl	800e9be <DecodeCertExtensions>
 800f05e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	2b00      	cmp	r3, #0
 800f064:	da0a      	bge.n	800f07c <ParseCertRelative+0xe8>
                if (ret == ASN_CRIT_EXT_E)
 800f066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f068:	f113 0fa0 	cmn.w	r3, #160	; 0xa0
 800f06c:	d104      	bne.n	800f078 <ParseCertRelative+0xe4>
                    cert->criticalExt = ret;
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f072:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 800f076:	e001      	b.n	800f07c <ParseCertRelative+0xe8>
                else
                    return ret;
 800f078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07a:	e1fc      	b.n	800f476 <ParseCertRelative+0x4e2>
            /* trust for the lifetime of the responder's cert*/
            if (cert->ocspNoCheckSet && verify == VERIFY_OCSP)
                verify = NO_VERIFY;
        #endif
            /* advance past extensions */
            cert->srcIdx = cert->sigIndex;
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	691a      	ldr	r2, [r3, #16]
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
        }

        if ((ret = GetAlgoId(cert->source, &cert->srcIdx,
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f503 7124 	add.w	r1, r3, #656	; 0x290
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f098:	f107 021c 	add.w	r2, r7, #28
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	2301      	movs	r3, #1
 800f0a0:	f7fc fdd8 	bl	800bc54 <GetAlgoId>
 800f0a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	da01      	bge.n	800f0b0 <ParseCertRelative+0x11c>
                !cert->isCSR ? &confirmOID : &cert->signatureOID,
#else
                &confirmOID,
#endif
                oidSigType, cert->maxIdx)) < 0)
            return ret;
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	e1e2      	b.n	800f476 <ParseCertRelative+0x4e2>

        if ((ret = GetSignature(cert)) < 0)
 800f0b0:	6978      	ldr	r0, [r7, #20]
 800f0b2:	f7fd ffe8 	bl	800d086 <GetSignature>
 800f0b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	da01      	bge.n	800f0c2 <ParseCertRelative+0x12e>
            return ret;
 800f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c0:	e1d9      	b.n	800f476 <ParseCertRelative+0x4e2>

        if (confirmOID != cert->signatureOID
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	699a      	ldr	r2, [r3, #24]
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d002      	beq.n	800f0d2 <ParseCertRelative+0x13e>
#ifdef WOLFSSL_CERT_REQ
                && !cert->isCSR
#endif
                )
            return ASN_SIG_OID_E;
 800f0cc:	f06f 0397 	mvn.w	r3, #151	; 0x97
 800f0d0:	e1d1      	b.n	800f476 <ParseCertRelative+0x4e2>

    #ifndef NO_SKID
        if (cert->extSubjKeyIdSet == 0 && cert->publicKey != NULL &&
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800f0d8:	f003 0302 	and.w	r3, r3, #2
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d117      	bne.n	800f112 <ParseCertRelative+0x17e>
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d013      	beq.n	800f112 <ParseCertRelative+0x17e>
                                                         cert->pubKeySize > 0) {
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	685b      	ldr	r3, [r3, #4]
        if (cert->extSubjKeyIdSet == 0 && cert->publicKey != NULL &&
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d00f      	beq.n	800f112 <ParseCertRelative+0x17e>
            ret = CalcHashId(cert->publicKey, cert->pubKeySize,
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	6818      	ldr	r0, [r3, #0]
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	6859      	ldr	r1, [r3, #4]
                                                            cert->extSubjKeyId);
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
            ret = CalcHashId(cert->publicKey, cert->pubKeySize,
 800f100:	461a      	mov	r2, r3
 800f102:	f7fd fb7a 	bl	800c7fa <CalcHashId>
 800f106:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (ret != 0)
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <ParseCertRelative+0x17e>
                return ret;
 800f10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f110:	e1b1      	b.n	800f476 <ParseCertRelative+0x4e2>
        }
    #endif /* !NO_SKID */

        if (!cert->selfSigned || (verify != NO_VERIFY && type != CA_TYPE &&
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 800f118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d008      	beq.n	800f134 <ParseCertRelative+0x1a0>
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d06e      	beq.n	800f206 <ParseCertRelative+0x272>
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	2b05      	cmp	r3, #5
 800f12c:	d06b      	beq.n	800f206 <ParseCertRelative+0x272>
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	2b0f      	cmp	r3, #15
 800f132:	d068      	beq.n	800f206 <ParseCertRelative+0x272>
                                                   type != TRUSTED_PEER_TYPE)) {
            cert->ca = NULL;
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	2200      	movs	r2, #0
 800f138:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    #ifndef NO_SKID
            if (cert->extAuthKeyIdSet) {
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800f142:	f003 0304 	and.w	r3, r3, #4
 800f146:	b2db      	uxtb	r3, r3
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00a      	beq.n	800f162 <ParseCertRelative+0x1ce>
                cert->ca = GetCA(cm, cert->extAuthKeyId);
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800f152:	4619      	mov	r1, r3
 800f154:	68b8      	ldr	r0, [r7, #8]
 800f156:	f7fa fa24 	bl	80095a2 <GetCA>
 800f15a:	4602      	mov	r2, r0
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
            }
            if (cert->ca == NULL && cert->extSubjKeyIdSet
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d115      	bne.n	800f198 <ParseCertRelative+0x204>
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800f172:	f003 0302 	and.w	r3, r3, #2
 800f176:	b2db      	uxtb	r3, r3
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d00d      	beq.n	800f198 <ParseCertRelative+0x204>
                                 && verify != VERIFY_OCSP) {
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2b03      	cmp	r3, #3
 800f180:	d00a      	beq.n	800f198 <ParseCertRelative+0x204>
                cert->ca = GetCA(cm, cert->extSubjKeyId);
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800f188:	4619      	mov	r1, r3
 800f18a:	68b8      	ldr	r0, [r7, #8]
 800f18c:	f7fa fa09 	bl	80095a2 <GetCA>
 800f190:	4602      	mov	r2, r0
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
            }
            if (cert->ca != NULL && XMEMCMP(cert->issuerHash,
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d011      	beq.n	800f1c6 <ParseCertRelative+0x232>
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f1ae:	3324      	adds	r3, #36	; 0x24
 800f1b0:	2220      	movs	r2, #32
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	f00c fc1e 	bl	801b9f4 <memcmp>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d003      	beq.n	800f1c6 <ParseCertRelative+0x232>
                                  cert->ca->subjectNameHash, KEYID_SIZE) != 0) {
                cert->ca = NULL;
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
            }
            if (cert->ca == NULL) {
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d11a      	bne.n	800f206 <ParseCertRelative+0x272>
                cert->ca = GetCAByName(cm, cert->issuerHash);
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	3358      	adds	r3, #88	; 0x58
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	68b8      	ldr	r0, [r7, #8]
 800f1d8:	f7fa fa28 	bl	800962c <GetCAByName>
 800f1dc:	4602      	mov	r2, r0
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                /* If AKID is available then this CA doesn't have the public
                 * key required */
                if (cert->ca && cert->extAuthKeyIdSet) {
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00b      	beq.n	800f206 <ParseCertRelative+0x272>
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800f1f4:	f003 0304 	and.w	r3, r3, #4
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d003      	beq.n	800f206 <ParseCertRelative+0x272>
                    WOLFSSL_MSG("CA SKID doesn't match AKID");
                    cert->ca = NULL;
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	2200      	movs	r2, #0
 800f202:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
            if (cert->ca) {
                WOLFSSL_MSG("CA found");
            }
        }

        if (cert->selfSigned) {
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 800f20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f210:	b2db      	uxtb	r3, r3
 800f212:	2b00      	cmp	r3, #0
 800f214:	d004      	beq.n	800f220 <ParseCertRelative+0x28c>
            cert->maxPathLen = WOLFSSL_MAX_PATH_LEN;
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	227f      	movs	r2, #127	; 0x7f
 800f21a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 800f21e:	e0a9      	b.n	800f374 <ParseCertRelative+0x3e0>
             * 4) Is maxPathLen > 0?
             *      Yes - Reduce by 1
             *      No  - ERROR
             */

            if (cert->ca && cert->pathLengthSet) {
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f226:	2b00      	cmp	r3, #0
 800f228:	d076      	beq.n	800f318 <ParseCertRelative+0x384>
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800f230:	f003 0320 	and.w	r3, r3, #32
 800f234:	b2db      	uxtb	r3, r3
 800f236:	2b00      	cmp	r3, #0
 800f238:	d06e      	beq.n	800f318 <ParseCertRelative+0x384>
                cert->maxPathLen = cert->pathLength;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
                if (cert->isCA) {
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800f24c:	f003 0310 	and.w	r3, r3, #16
 800f250:	b2db      	uxtb	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	d016      	beq.n	800f284 <ParseCertRelative+0x2f0>
                    WOLFSSL_MSG("\tCA boolean set");
                    if (cert->extKeyUsageSet) {
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800f25c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f260:	b2db      	uxtb	r3, r3
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00c      	beq.n	800f280 <ParseCertRelative+0x2ec>
                         WOLFSSL_MSG("\tExtension Key Usage Set");
                         if ((cert->extKeyUsage & KEYUSE_KEY_CERT_SIGN) != 0) {
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f8b3 331e 	ldrh.w	r3, [r3, #798]	; 0x31e
 800f26c:	f003 0304 	and.w	r3, r3, #4
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <ParseCertRelative+0x2e6>
                            checkPathLen = 1;
 800f274:	2301      	movs	r3, #1
 800f276:	62bb      	str	r3, [r7, #40]	; 0x28
 800f278:	e004      	b.n	800f284 <ParseCertRelative+0x2f0>
                         } else {
                            decrementMaxPathLen = 1;
 800f27a:	2301      	movs	r3, #1
 800f27c:	627b      	str	r3, [r7, #36]	; 0x24
 800f27e:	e001      	b.n	800f284 <ParseCertRelative+0x2f0>
                         }
                    } else {
                        checkPathLen = 1;
 800f280:	2301      	movs	r3, #1
 800f282:	62bb      	str	r3, [r7, #40]	; 0x28
                    } /* !cert->ca check */
                } /* cert is not a CA (assuming entity cert) */

                if (checkPathLen && cert->pathLengthSet) {
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	2b00      	cmp	r3, #0
 800f288:	d019      	beq.n	800f2be <ParseCertRelative+0x32a>
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800f290:	f003 0320 	and.w	r3, r3, #32
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d011      	beq.n	800f2be <ParseCertRelative+0x32a>
                    if (cert->pathLength < cert->ca->maxPathLen) {
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f2a6:	7a9b      	ldrb	r3, [r3, #10]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d206      	bcs.n	800f2ba <ParseCertRelative+0x326>
                        WOLFSSL_MSG("\tmaxPathLen status: set to pathLength");
                        cert->maxPathLen = cert->pathLength;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	f893 231c 	ldrb.w	r2, [r3, #796]	; 0x31c
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 800f2b8:	e001      	b.n	800f2be <ParseCertRelative+0x32a>
                    } else {
                        decrementMaxPathLen = 1;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }

                if (decrementMaxPathLen && cert->ca->maxPathLen > 0) {
 800f2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d010      	beq.n	800f2e6 <ParseCertRelative+0x352>
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f2ca:	7a9b      	ldrb	r3, [r3, #10]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00a      	beq.n	800f2e6 <ParseCertRelative+0x352>
                    WOLFSSL_MSG("\tmaxPathLen status: reduce by 1");
                    cert->maxPathLen = cert->ca->maxPathLen - 1;
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f2d6:	7a9b      	ldrb	r3, [r3, #10]
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	b2da      	uxtb	r2, r3
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
                    if (verify != NO_VERIFY && type != CA_TYPE &&
 800f2e2:	bf00      	nop
                if (decrementMaxPathLen && cert->ca->maxPathLen > 0) {
 800f2e4:	e045      	b.n	800f372 <ParseCertRelative+0x3de>
                                                    type != TRUSTED_PEER_TYPE) {
                        WOLFSSL_MSG("\tmaxPathLen status: OK");
                    }
                } else if (decrementMaxPathLen && cert->ca->maxPathLen == 0) {
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d042      	beq.n	800f372 <ParseCertRelative+0x3de>
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f2f2:	7a9b      	ldrb	r3, [r3, #10]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d13c      	bne.n	800f372 <ParseCertRelative+0x3de>
                    cert->maxPathLen = 0;
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
                    if (verify != NO_VERIFY && type != CA_TYPE &&
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d035      	beq.n	800f372 <ParseCertRelative+0x3de>
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	2b05      	cmp	r3, #5
 800f30a:	d032      	beq.n	800f372 <ParseCertRelative+0x3de>
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	2b0f      	cmp	r3, #15
 800f310:	d02f      	beq.n	800f372 <ParseCertRelative+0x3de>
                                                    type != TRUSTED_PEER_TYPE) {
                        WOLFSSL_MSG("\tNon-entity cert, maxPathLen is 0");
                        WOLFSSL_MSG("\tmaxPathLen status: ERROR");
                        return ASN_PATHLEN_INV_E;
 800f312:	f06f 03ed 	mvn.w	r3, #237	; 0xed
 800f316:	e0ae      	b.n	800f476 <ParseCertRelative+0x4e2>
                    }
                }
            } else if (cert->ca && cert->isCA) {
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d028      	beq.n	800f374 <ParseCertRelative+0x3e0>
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800f328:	f003 0310 	and.w	r3, r3, #16
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d020      	beq.n	800f374 <ParseCertRelative+0x3e0>
                /* case where cert->pathLength extension is not set */
                if (cert->ca->maxPathLen > 0) {
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f338:	7a9b      	ldrb	r3, [r3, #10]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d009      	beq.n	800f352 <ParseCertRelative+0x3be>
                    cert->maxPathLen = cert->ca->maxPathLen - 1;
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f344:	7a9b      	ldrb	r3, [r3, #10]
 800f346:	3b01      	subs	r3, #1
 800f348:	b2da      	uxtb	r2, r3
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 800f350:	e010      	b.n	800f374 <ParseCertRelative+0x3e0>
                } else {
                    cert->maxPathLen = 0;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2200      	movs	r2, #0
 800f356:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
                    if (verify != NO_VERIFY && type != CA_TYPE &&
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d009      	beq.n	800f374 <ParseCertRelative+0x3e0>
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	2b05      	cmp	r3, #5
 800f364:	d006      	beq.n	800f374 <ParseCertRelative+0x3e0>
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	2b0f      	cmp	r3, #15
 800f36a:	d003      	beq.n	800f374 <ParseCertRelative+0x3e0>
                                                    type != TRUSTED_PEER_TYPE) {
                        WOLFSSL_MSG("\tNon-entity cert, maxPathLen is 0");
                        WOLFSSL_MSG("\tmaxPathLen status: ERROR");
                        return ASN_PATHLEN_INV_E;
 800f36c:	f06f 03ed 	mvn.w	r3, #237	; 0xed
 800f370:	e081      	b.n	800f476 <ParseCertRelative+0x4e2>
                if (decrementMaxPathLen && cert->ca->maxPathLen > 0) {
 800f372:	bf00      	nop
        cert->tsip_encRsaKeyIdx = NULL;
    }

    tsip_encRsaKeyIdx = cert->tsip_encRsaKeyIdx;
#else
    tsip_encRsaKeyIdx = NULL;
 800f374:	2300      	movs	r3, #0
 800f376:	623b      	str	r3, [r7, #32]
#endif

    if (verify != NO_VERIFY && type != CA_TYPE && type != TRUSTED_PEER_TYPE) {
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d065      	beq.n	800f44a <ParseCertRelative+0x4b6>
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	2b05      	cmp	r3, #5
 800f382:	d062      	beq.n	800f44a <ParseCertRelative+0x4b6>
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	2b0f      	cmp	r3, #15
 800f388:	d05f      	beq.n	800f44a <ParseCertRelative+0x4b6>
        if (cert->ca) {
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f390:	2b00      	cmp	r3, #0
 800f392:	d057      	beq.n	800f444 <ParseCertRelative+0x4b0>
            if (verify == VERIFY || verify == VERIFY_OCSP ||
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2b01      	cmp	r3, #1
 800f398:	d005      	beq.n	800f3a6 <ParseCertRelative+0x412>
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2b03      	cmp	r3, #3
 800f39e:	d002      	beq.n	800f3a6 <ParseCertRelative+0x412>
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2b05      	cmp	r3, #5
 800f3a4:	d135      	bne.n	800f412 <ParseCertRelative+0x47e>
                                                 verify == VERIFY_SKIP_DATE) {
                /* try to confirm/verify signature */
                if ((ret = ConfirmSignature(&cert->sigCtx,
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	f503 7651 	add.w	r6, r3, #836	; 0x344
                        cert->source + cert->certBegin,
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	68db      	ldr	r3, [r3, #12]
                if ((ret = ConfirmSignature(&cert->sigCtx,
 800f3b6:	eb02 0c03 	add.w	ip, r2, r3
                        cert->sigIndex - cert->certBegin,
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	691a      	ldr	r2, [r3, #16]
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	68db      	ldr	r3, [r3, #12]
                if ((ret = ConfirmSignature(&cert->sigCtx,
 800f3c2:	eba2 0e03 	sub.w	lr, r2, r3
                        cert->ca->publicKey, cert->ca->pubKeySize,
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
                if ((ret = ConfirmSignature(&cert->sigCtx,
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	607b      	str	r3, [r7, #4]
                        cert->ca->publicKey, cert->ca->pubKeySize,
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
                if ((ret = ConfirmSignature(&cert->sigCtx,
 800f3d6:	681b      	ldr	r3, [r3, #0]
                        cert->ca->keyOID, cert->signature,
 800f3d8:	697a      	ldr	r2, [r7, #20]
 800f3da:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
                if ((ret = ConfirmSignature(&cert->sigCtx,
 800f3de:	6852      	ldr	r2, [r2, #4]
 800f3e0:	6979      	ldr	r1, [r7, #20]
 800f3e2:	6f89      	ldr	r1, [r1, #120]	; 0x78
 800f3e4:	6978      	ldr	r0, [r7, #20]
 800f3e6:	6940      	ldr	r0, [r0, #20]
 800f3e8:	697c      	ldr	r4, [r7, #20]
 800f3ea:	69a4      	ldr	r4, [r4, #24]
 800f3ec:	6a3d      	ldr	r5, [r7, #32]
 800f3ee:	9505      	str	r5, [sp, #20]
 800f3f0:	9404      	str	r4, [sp, #16]
 800f3f2:	9003      	str	r0, [sp, #12]
 800f3f4:	9102      	str	r1, [sp, #8]
 800f3f6:	9201      	str	r2, [sp, #4]
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4672      	mov	r2, lr
 800f3fe:	4661      	mov	r1, ip
 800f400:	4630      	mov	r0, r6
 800f402:	f7fe f901 	bl	800d608 <ConfirmSignature>
 800f406:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d001      	beq.n	800f412 <ParseCertRelative+0x47e>
                        cert->sigLength, cert->signatureOID,
                        tsip_encRsaKeyIdx)) != 0) {
                    if (ret != 0 && ret != WC_PENDING_E) {
                        WOLFSSL_MSG("Confirm signature failed");
                    }
                    return ret;
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	e031      	b.n	800f476 <ParseCertRelative+0x4e2>
                }
            }
        #ifndef IGNORE_NAME_CONSTRAINTS
            if (verify == VERIFY || verify == VERIFY_OCSP ||
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d008      	beq.n	800f42a <ParseCertRelative+0x496>
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2b03      	cmp	r3, #3
 800f41c:	d005      	beq.n	800f42a <ParseCertRelative+0x496>
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2b04      	cmp	r3, #4
 800f422:	d002      	beq.n	800f42a <ParseCertRelative+0x496>
                        verify == VERIFY_NAME || verify == VERIFY_SKIP_DATE) {
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2b05      	cmp	r3, #5
 800f428:	d10f      	bne.n	800f44a <ParseCertRelative+0x4b6>
                /* check that this cert's name is permitted by the signer's
                 * name constraints */
                if (!ConfirmNameConstraints(cert->ca, cert)) {
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f430:	6979      	ldr	r1, [r7, #20]
 800f432:	4618      	mov	r0, r3
 800f434:	f7fe fb28 	bl	800da88 <ConfirmNameConstraints>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d105      	bne.n	800f44a <ParseCertRelative+0x4b6>
                    WOLFSSL_MSG("Confirm name constraint failed");
                    return ASN_NAME_INVALID_E;
 800f43e:	f06f 03c5 	mvn.w	r3, #197	; 0xc5
 800f442:	e018      	b.n	800f476 <ParseCertRelative+0x4e2>
        #endif /* IGNORE_NAME_CONSTRAINTS */
        }
        else {
            /* no signer */
            WOLFSSL_MSG("No CA signer to verify with");
            return ASN_NO_SIGNER_E;
 800f444:	f06f 03bb 	mvn.w	r3, #187	; 0xbb
 800f448:	e015      	b.n	800f476 <ParseCertRelative+0x4e2>

#if defined(WOLFSSL_NO_TRUSTED_CERTS_VERIFY) && !defined(NO_SKID)
exit_pcr:
#endif

    if (cert->badDate != 0) {
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 800f450:	2b00      	cmp	r3, #0
 800f452:	d006      	beq.n	800f462 <ParseCertRelative+0x4ce>
        if (verify != VERIFY_SKIP_DATE) {
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2b05      	cmp	r3, #5
 800f458:	d003      	beq.n	800f462 <ParseCertRelative+0x4ce>
            return cert->badDate;
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 800f460:	e009      	b.n	800f476 <ParseCertRelative+0x4e2>
        }
        WOLFSSL_MSG("Date error: Verify option is skipping");
    }

    if (cert->criticalExt != 0)
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d003      	beq.n	800f474 <ParseCertRelative+0x4e0>
        return cert->criticalExt;
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800f472:	e000      	b.n	800f476 <ParseCertRelative+0x4e2>

    return ret;
 800f474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f476:	4618      	mov	r0, r3
 800f478:	3734      	adds	r7, #52	; 0x34
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f47e <MakeSigner>:

/* Create and init an new signer */
Signer* MakeSigner(void* heap)
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b084      	sub	sp, #16
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
    Signer* signer = (Signer*) XMALLOC(sizeof(Signer), heap,
 800f486:	2068      	movs	r0, #104	; 0x68
 800f488:	f001 ffe8 	bl	801145c <wolfSSL_Malloc>
 800f48c:	60f8      	str	r0, [r7, #12]
                                       DYNAMIC_TYPE_SIGNER);
    if (signer) {
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d004      	beq.n	800f49e <MakeSigner+0x20>
        XMEMSET(signer, 0, sizeof(Signer));
 800f494:	2268      	movs	r2, #104	; 0x68
 800f496:	2100      	movs	r1, #0
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f00c fade 	bl	801ba5a <memset>
    }
    (void)heap;

    return signer;
 800f49e:	68fb      	ldr	r3, [r7, #12]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <FreeSigner>:


/* Free an individual signer */
void FreeSigner(Signer* signer, void* heap)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
    XFREE(signer->name, heap, DYNAMIC_TYPE_SUBJECT_CN);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	699b      	ldr	r3, [r3, #24]
 800f4b6:	617b      	str	r3, [r7, #20]
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d002      	beq.n	800f4c4 <FreeSigner+0x1c>
 800f4be:	6978      	ldr	r0, [r7, #20]
 800f4c0:	f001 ffe8 	bl	8011494 <wolfSSL_Free>
    XFREE((void*)signer->publicKey, heap, DYNAMIC_TYPE_PUBLIC_KEY);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	613b      	str	r3, [r7, #16]
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d002      	beq.n	800f4d6 <FreeSigner+0x2e>
 800f4d0:	6938      	ldr	r0, [r7, #16]
 800f4d2:	f001 ffdf 	bl	8011494 <wolfSSL_Free>
#ifndef IGNORE_NAME_CONSTRAINTS
    if (signer->permittedNames)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	69db      	ldr	r3, [r3, #28]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d005      	beq.n	800f4ea <FreeSigner+0x42>
        FreeNameSubtrees(signer->permittedNames, heap);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	69db      	ldr	r3, [r3, #28]
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fc ff1c 	bl	800c322 <FreeNameSubtrees>
    if (signer->excludedNames)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6a1b      	ldr	r3, [r3, #32]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d005      	beq.n	800f4fe <FreeSigner+0x56>
        FreeNameSubtrees(signer->excludedNames, heap);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a1b      	ldr	r3, [r3, #32]
 800f4f6:	6839      	ldr	r1, [r7, #0]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fc ff12 	bl	800c322 <FreeNameSubtrees>
#endif
#ifdef WOLFSSL_SIGNER_DER_CERT
    FreeDer(&signer->derCert);
#endif
    XFREE(signer, heap, DYNAMIC_TYPE_SIGNER);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	60fb      	str	r3, [r7, #12]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d002      	beq.n	800f50e <FreeSigner+0x66>
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f001 ffc3 	bl	8011494 <wolfSSL_Free>

    (void)heap;
}
 800f50e:	bf00      	nop
 800f510:	3718      	adds	r7, #24
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <FreeSignerTable>:


/* Free the whole singer table with number of rows */
void FreeSignerTable(Signer** table, int rows, void* heap)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b088      	sub	sp, #32
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	60f8      	str	r0, [r7, #12]
 800f51e:	60b9      	str	r1, [r7, #8]
 800f520:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < rows; i++) {
 800f522:	2300      	movs	r3, #0
 800f524:	61fb      	str	r3, [r7, #28]
 800f526:	e01b      	b.n	800f560 <FreeSignerTable+0x4a>
        Signer* signer = table[i];
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	4413      	add	r3, r2
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	61bb      	str	r3, [r7, #24]
        while (signer) {
 800f534:	e008      	b.n	800f548 <FreeSignerTable+0x32>
            Signer* next = signer->next;
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f53a:	617b      	str	r3, [r7, #20]
            FreeSigner(signer, heap);
 800f53c:	6879      	ldr	r1, [r7, #4]
 800f53e:	69b8      	ldr	r0, [r7, #24]
 800f540:	f7ff ffb2 	bl	800f4a8 <FreeSigner>
            signer = next;
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	61bb      	str	r3, [r7, #24]
        while (signer) {
 800f548:	69bb      	ldr	r3, [r7, #24]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d1f3      	bne.n	800f536 <FreeSignerTable+0x20>
        }
        table[i] = NULL;
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	4413      	add	r3, r2
 800f556:	2200      	movs	r2, #0
 800f558:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rows; i++) {
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	3301      	adds	r3, #1
 800f55e:	61fb      	str	r3, [r7, #28]
 800f560:	69fa      	ldr	r2, [r7, #28]
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	429a      	cmp	r2, r3
 800f566:	dbdf      	blt.n	800f528 <FreeSignerTable+0x12>
    }
}
 800f568:	bf00      	nop
 800f56a:	3720      	adds	r7, #32
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <GetSerialNumber>:

#endif /* !NO_CERTS */

int GetSerialNumber(const byte* input, word32* inOutIdx,
    byte* serial, int* serialSz, word32 maxIdx)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
 800f57c:	603b      	str	r3, [r7, #0]
    int result = 0;
 800f57e:	2300      	movs	r3, #0
 800f580:	617b      	str	r3, [r7, #20]
    int ret;

    WOLFSSL_ENTER("GetSerialNumber");

    if (serial == NULL || input == NULL || serialSz == NULL) {
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d005      	beq.n	800f594 <GetSerialNumber+0x24>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d002      	beq.n	800f594 <GetSerialNumber+0x24>
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d102      	bne.n	800f59a <GetSerialNumber+0x2a>
        return BAD_FUNC_ARG;
 800f594:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800f598:	e02d      	b.n	800f5f6 <GetSerialNumber+0x86>
    }

    /* First byte is ASN type */
    if ((*inOutIdx+1) > maxIdx) {
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	6a3a      	ldr	r2, [r7, #32]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d202      	bcs.n	800f5ac <GetSerialNumber+0x3c>
        WOLFSSL_MSG("Bad idx first");
        return BUFFER_E;
 800f5a6:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800f5aa:	e024      	b.n	800f5f6 <GetSerialNumber+0x86>
    }

    ret = GetASNInt(input, inOutIdx, serialSz, maxIdx);
 800f5ac:	6a3b      	ldr	r3, [r7, #32]
 800f5ae:	683a      	ldr	r2, [r7, #0]
 800f5b0:	68b9      	ldr	r1, [r7, #8]
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f7fb fd5e 	bl	800b074 <GetASNInt>
 800f5b8:	6138      	str	r0, [r7, #16]
    if (ret != 0)
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d001      	beq.n	800f5c4 <GetSerialNumber+0x54>
        return ret;
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	e018      	b.n	800f5f6 <GetSerialNumber+0x86>

    if (*serialSz > EXTERNAL_SERIAL_SIZE) {
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b20      	cmp	r3, #32
 800f5ca:	dd02      	ble.n	800f5d2 <GetSerialNumber+0x62>
        WOLFSSL_MSG("Serial size bad");
        return ASN_PARSE_E;
 800f5cc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800f5d0:	e011      	b.n	800f5f6 <GetSerialNumber+0x86>
    }

    /* return serial */
    XMEMCPY(serial, &input[*inOutIdx], *serialSz);
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	18d1      	adds	r1, r2, r3
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	461a      	mov	r2, r3
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f00c fa16 	bl	801ba12 <memcpy>
    *inOutIdx += *serialSz;
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	6812      	ldr	r2, [r2, #0]
 800f5ee:	441a      	add	r2, r3
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	601a      	str	r2, [r3, #0]

    return result;
 800f5f4:	697b      	ldr	r3, [r7, #20]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3718      	adds	r7, #24
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
	...

0800f600 <AllocDer>:

#ifndef NO_CERTS

int AllocDer(DerBuffer** pDer, word32 length, int type, void* heap)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b088      	sub	sp, #32
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
 800f60c:	603b      	str	r3, [r7, #0]
    int ret = BAD_FUNC_ARG;
 800f60e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800f612:	61fb      	str	r3, [r7, #28]
    if (pDer) {
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d062      	beq.n	800f6e0 <AllocDer+0xe0>
        int dynType = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	61bb      	str	r3, [r7, #24]
        DerBuffer* der;

        /* Determine dynamic type */
        switch (type) {
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2b0b      	cmp	r3, #11
 800f622:	d82d      	bhi.n	800f680 <AllocDer+0x80>
 800f624:	a201      	add	r2, pc, #4	; (adr r2, 800f62c <AllocDer+0x2c>)
 800f626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f62a:	bf00      	nop
 800f62c:	0800f663 	.word	0x0800f663
 800f630:	0800f681 	.word	0x0800f681
 800f634:	0800f681 	.word	0x0800f681
 800f638:	0800f681 	.word	0x0800f681
 800f63c:	0800f669 	.word	0x0800f669
 800f640:	0800f65d 	.word	0x0800f65d
 800f644:	0800f681 	.word	0x0800f681
 800f648:	0800f681 	.word	0x0800f681
 800f64c:	0800f681 	.word	0x0800f681
 800f650:	0800f66f 	.word	0x0800f66f
 800f654:	0800f675 	.word	0x0800f675
 800f658:	0800f67b 	.word	0x0800f67b
            case CA_TYPE:   dynType = DYNAMIC_TYPE_CA;   break;
 800f65c:	2301      	movs	r3, #1
 800f65e:	61bb      	str	r3, [r7, #24]
 800f660:	e011      	b.n	800f686 <AllocDer+0x86>
            case CERT_TYPE: dynType = DYNAMIC_TYPE_CERT; break;
 800f662:	2302      	movs	r3, #2
 800f664:	61bb      	str	r3, [r7, #24]
 800f666:	e00e      	b.n	800f686 <AllocDer+0x86>
            case CRL_TYPE:  dynType = DYNAMIC_TYPE_CRL;  break;
 800f668:	2316      	movs	r3, #22
 800f66a:	61bb      	str	r3, [r7, #24]
 800f66c:	e00b      	b.n	800f686 <AllocDer+0x86>
            case DSA_TYPE:  dynType = DYNAMIC_TYPE_DSA;  break;
 800f66e:	2315      	movs	r3, #21
 800f670:	61bb      	str	r3, [r7, #24]
 800f672:	e008      	b.n	800f686 <AllocDer+0x86>
            case ECC_TYPE:  dynType = DYNAMIC_TYPE_ECC;  break;
 800f674:	2325      	movs	r3, #37	; 0x25
 800f676:	61bb      	str	r3, [r7, #24]
 800f678:	e005      	b.n	800f686 <AllocDer+0x86>
            case RSA_TYPE:  dynType = DYNAMIC_TYPE_RSA;  break;
 800f67a:	230a      	movs	r3, #10
 800f67c:	61bb      	str	r3, [r7, #24]
 800f67e:	e002      	b.n	800f686 <AllocDer+0x86>
            default:        dynType = DYNAMIC_TYPE_KEY;  break;
 800f680:	2303      	movs	r3, #3
 800f682:	61bb      	str	r3, [r7, #24]
 800f684:	bf00      	nop
        }

        /* Setup new buffer */
        *pDer = (DerBuffer*)XMALLOC(sizeof(DerBuffer) + length, heap, dynType);
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	3314      	adds	r3, #20
 800f68a:	4618      	mov	r0, r3
 800f68c:	f001 fee6 	bl	801145c <wolfSSL_Malloc>
 800f690:	4602      	mov	r2, r0
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	601a      	str	r2, [r3, #0]
        if (*pDer == NULL) {
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d102      	bne.n	800f6a4 <AllocDer+0xa4>
            return MEMORY_E;
 800f69e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800f6a2:	e01e      	b.n	800f6e2 <AllocDer+0xe2>
        }
        XMEMSET(*pDer, 0, sizeof(DerBuffer) + length);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6818      	ldr	r0, [r3, #0]
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	3314      	adds	r3, #20
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	2100      	movs	r1, #0
 800f6b0:	f00c f9d3 	bl	801ba5a <memset>

        der = *pDer;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	617b      	str	r3, [r7, #20]
        der->type = type;
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	60da      	str	r2, [r3, #12]
        der->dynType = dynType; /* Cache this for FreeDer */
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	69ba      	ldr	r2, [r7, #24]
 800f6c4:	611a      	str	r2, [r3, #16]
        der->heap = heap;
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	683a      	ldr	r2, [r7, #0]
 800f6ca:	605a      	str	r2, [r3, #4]
        der->buffer = (byte*)der + sizeof(DerBuffer);
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	f103 0214 	add.w	r2, r3, #20
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	601a      	str	r2, [r3, #0]
        der->length = length;
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	68ba      	ldr	r2, [r7, #8]
 800f6da:	609a      	str	r2, [r3, #8]
        ret = 0; /* Success */
 800f6dc:	2300      	movs	r3, #0
 800f6de:	61fb      	str	r3, [r7, #28]
    }
    return ret;
 800f6e0:	69fb      	ldr	r3, [r7, #28]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3720      	adds	r7, #32
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop

0800f6ec <FreeDer>:

void FreeDer(DerBuffer** pDer)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
    if (pDer && *pDer)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d023      	beq.n	800f742 <FreeDer+0x56>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d01f      	beq.n	800f742 <FreeDer+0x56>
    {
        DerBuffer* der = (DerBuffer*)*pDer;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	60fb      	str	r3, [r7, #12]

        /* ForceZero private keys */
        if (der->type == PRIVATEKEY_TYPE) {
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d107      	bne.n	800f720 <FreeDer+0x34>
            ForceZero(der->buffer, der->length);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	4619      	mov	r1, r3
 800f71a:	4610      	mov	r0, r2
 800f71c:	f7fb fa9e 	bl	800ac5c <ForceZero>
        }
        der->buffer = NULL;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2200      	movs	r2, #0
 800f724:	601a      	str	r2, [r3, #0]
        der->length = 0;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2200      	movs	r2, #0
 800f72a:	609a      	str	r2, [r3, #8]
        XFREE(der, der->heap, der->dynType);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	60bb      	str	r3, [r7, #8]
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d002      	beq.n	800f73c <FreeDer+0x50>
 800f736:	68b8      	ldr	r0, [r7, #8]
 800f738:	f001 feac 	bl	8011494 <wolfSSL_Free>

        *pDer = NULL;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	601a      	str	r2, [r3, #0]
    }
}
 800f742:	bf00      	nop
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}

0800f74a <SkipEndOfLineChars>:

const int pem_struct_min_sz = XSTR_SIZEOF("-----BEGIN X509 CRL-----"
                                             "-----END X509 CRL-----");

static WC_INLINE char* SkipEndOfLineChars(char* line, const char* endOfLine)
{
 800f74a:	b480      	push	{r7}
 800f74c:	b083      	sub	sp, #12
 800f74e:	af00      	add	r7, sp, #0
 800f750:	6078      	str	r0, [r7, #4]
 800f752:	6039      	str	r1, [r7, #0]
    /* eat end of line characters */
    while (line < endOfLine &&
 800f754:	e002      	b.n	800f75c <SkipEndOfLineChars+0x12>
              (line[0] == '\r' || line[0] == '\n')) {
        line++;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	3301      	adds	r3, #1
 800f75a:	607b      	str	r3, [r7, #4]
    while (line < endOfLine &&
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	429a      	cmp	r2, r3
 800f762:	d207      	bcs.n	800f774 <SkipEndOfLineChars+0x2a>
              (line[0] == '\r' || line[0] == '\n')) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	781b      	ldrb	r3, [r3, #0]
    while (line < endOfLine &&
 800f768:	2b0d      	cmp	r3, #13
 800f76a:	d0f4      	beq.n	800f756 <SkipEndOfLineChars+0xc>
              (line[0] == '\r' || line[0] == '\n')) {
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	2b0a      	cmp	r3, #10
 800f772:	d0f0      	beq.n	800f756 <SkipEndOfLineChars+0xc>
    }
    return line;
 800f774:	687b      	ldr	r3, [r7, #4]
}
 800f776:	4618      	mov	r0, r3
 800f778:	370c      	adds	r7, #12
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
	...

0800f784 <wc_PemGetHeaderFooter>:

int wc_PemGetHeaderFooter(int type, const char** header, const char** footer)
{
 800f784:	b480      	push	{r7}
 800f786:	b087      	sub	sp, #28
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
    int ret = BAD_FUNC_ARG;
 800f790:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800f794:	617b      	str	r3, [r7, #20]

    switch (type) {
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2b17      	cmp	r3, #23
 800f79a:	f200 80ab 	bhi.w	800f8f4 <wc_PemGetHeaderFooter+0x170>
 800f79e:	a201      	add	r2, pc, #4	; (adr r2, 800f7a4 <wc_PemGetHeaderFooter+0x20>)
 800f7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a4:	0800f805 	.word	0x0800f805
 800f7a8:	0800f87d 	.word	0x0800f87d
 800f7ac:	0800f841 	.word	0x0800f841
 800f7b0:	0800f8f5 	.word	0x0800f8f5
 800f7b4:	0800f823 	.word	0x0800f823
 800f7b8:	0800f805 	.word	0x0800f805
 800f7bc:	0800f85f 	.word	0x0800f85f
 800f7c0:	0800f8f5 	.word	0x0800f8f5
 800f7c4:	0800f8f5 	.word	0x0800f8f5
 800f7c8:	0800f8f5 	.word	0x0800f8f5
 800f7cc:	0800f85f 	.word	0x0800f85f
 800f7d0:	0800f87d 	.word	0x0800f87d
 800f7d4:	0800f89b 	.word	0x0800f89b
 800f7d8:	0800f8f5 	.word	0x0800f8f5
 800f7dc:	0800f89b 	.word	0x0800f89b
 800f7e0:	0800f805 	.word	0x0800f805
 800f7e4:	0800f8f5 	.word	0x0800f8f5
 800f7e8:	0800f8f5 	.word	0x0800f8f5
 800f7ec:	0800f8f5 	.word	0x0800f8f5
 800f7f0:	0800f8f5 	.word	0x0800f8f5
 800f7f4:	0800f8b9 	.word	0x0800f8b9
 800f7f8:	0800f8d7 	.word	0x0800f8d7
 800f7fc:	0800f8f5 	.word	0x0800f8f5
 800f800:	0800f8b9 	.word	0x0800f8b9
        case CA_TYPE:       /* same as below */
        case TRUSTED_PEER_TYPE:
        case CERT_TYPE:
            if (header) *header = BEGIN_CERT;
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d002      	beq.n	800f810 <wc_PemGetHeaderFooter+0x8c>
 800f80a:	4a3e      	ldr	r2, [pc, #248]	; (800f904 <wc_PemGetHeaderFooter+0x180>)
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_CERT;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d002      	beq.n	800f81c <wc_PemGetHeaderFooter+0x98>
 800f816:	4a3c      	ldr	r2, [pc, #240]	; (800f908 <wc_PemGetHeaderFooter+0x184>)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	601a      	str	r2, [r3, #0]
            ret = 0;
 800f81c:	2300      	movs	r3, #0
 800f81e:	617b      	str	r3, [r7, #20]
            break;
 800f820:	e069      	b.n	800f8f6 <wc_PemGetHeaderFooter+0x172>

        case CRL_TYPE:
            if (header) *header = BEGIN_X509_CRL;
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d002      	beq.n	800f82e <wc_PemGetHeaderFooter+0xaa>
 800f828:	4a38      	ldr	r2, [pc, #224]	; (800f90c <wc_PemGetHeaderFooter+0x188>)
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_X509_CRL;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d002      	beq.n	800f83a <wc_PemGetHeaderFooter+0xb6>
 800f834:	4a36      	ldr	r2, [pc, #216]	; (800f910 <wc_PemGetHeaderFooter+0x18c>)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	601a      	str	r2, [r3, #0]
            ret = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	617b      	str	r3, [r7, #20]
            break;
 800f83e:	e05a      	b.n	800f8f6 <wc_PemGetHeaderFooter+0x172>
    #ifndef NO_DH
        case DH_PARAM_TYPE:
            if (header) *header = BEGIN_DH_PARAM;
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d002      	beq.n	800f84c <wc_PemGetHeaderFooter+0xc8>
 800f846:	4a33      	ldr	r2, [pc, #204]	; (800f914 <wc_PemGetHeaderFooter+0x190>)
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_DH_PARAM;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d002      	beq.n	800f858 <wc_PemGetHeaderFooter+0xd4>
 800f852:	4a31      	ldr	r2, [pc, #196]	; (800f918 <wc_PemGetHeaderFooter+0x194>)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	601a      	str	r2, [r3, #0]
            ret = 0;
 800f858:	2300      	movs	r3, #0
 800f85a:	617b      	str	r3, [r7, #20]
            break;
 800f85c:	e04b      	b.n	800f8f6 <wc_PemGetHeaderFooter+0x172>
            break;
    #endif
    #ifdef HAVE_ECC
        case ECC_TYPE:
        case ECC_PRIVATEKEY_TYPE:
            if (header) *header = BEGIN_EC_PRIV;
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d002      	beq.n	800f86a <wc_PemGetHeaderFooter+0xe6>
 800f864:	4a2d      	ldr	r2, [pc, #180]	; (800f91c <wc_PemGetHeaderFooter+0x198>)
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_EC_PRIV;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <wc_PemGetHeaderFooter+0xf2>
 800f870:	4a2b      	ldr	r2, [pc, #172]	; (800f920 <wc_PemGetHeaderFooter+0x19c>)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	601a      	str	r2, [r3, #0]
            ret = 0;
 800f876:	2300      	movs	r3, #0
 800f878:	617b      	str	r3, [r7, #20]
            break;
 800f87a:	e03c      	b.n	800f8f6 <wc_PemGetHeaderFooter+0x172>
    #endif
        case RSA_TYPE:
        case PRIVATEKEY_TYPE:
            if (header) *header = BEGIN_RSA_PRIV;
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d002      	beq.n	800f888 <wc_PemGetHeaderFooter+0x104>
 800f882:	4a28      	ldr	r2, [pc, #160]	; (800f924 <wc_PemGetHeaderFooter+0x1a0>)
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_RSA_PRIV;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d002      	beq.n	800f894 <wc_PemGetHeaderFooter+0x110>
 800f88e:	4a26      	ldr	r2, [pc, #152]	; (800f928 <wc_PemGetHeaderFooter+0x1a4>)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	601a      	str	r2, [r3, #0]
            ret = 0;
 800f894:	2300      	movs	r3, #0
 800f896:	617b      	str	r3, [r7, #20]
            break;
 800f898:	e02d      	b.n	800f8f6 <wc_PemGetHeaderFooter+0x172>
            ret = 0;
            break;
    #endif
        case PUBLICKEY_TYPE:
        case ECC_PUBLICKEY_TYPE:
            if (header) *header = BEGIN_PUB_KEY;
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <wc_PemGetHeaderFooter+0x122>
 800f8a0:	4a22      	ldr	r2, [pc, #136]	; (800f92c <wc_PemGetHeaderFooter+0x1a8>)
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_PUB_KEY;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d002      	beq.n	800f8b2 <wc_PemGetHeaderFooter+0x12e>
 800f8ac:	4a20      	ldr	r2, [pc, #128]	; (800f930 <wc_PemGetHeaderFooter+0x1ac>)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	601a      	str	r2, [r3, #0]
            ret = 0;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	617b      	str	r3, [r7, #20]
            break;
 800f8b6:	e01e      	b.n	800f8f6 <wc_PemGetHeaderFooter+0x172>
    #ifndef NO_DH
        case DH_PRIVATEKEY_TYPE:
    #endif
        case PKCS8_PRIVATEKEY_TYPE:
            if (header) *header = BEGIN_PRIV_KEY;
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d002      	beq.n	800f8c4 <wc_PemGetHeaderFooter+0x140>
 800f8be:	4a1d      	ldr	r2, [pc, #116]	; (800f934 <wc_PemGetHeaderFooter+0x1b0>)
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_PRIV_KEY;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d002      	beq.n	800f8d0 <wc_PemGetHeaderFooter+0x14c>
 800f8ca:	4a1b      	ldr	r2, [pc, #108]	; (800f938 <wc_PemGetHeaderFooter+0x1b4>)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	601a      	str	r2, [r3, #0]
            ret = 0;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	617b      	str	r3, [r7, #20]
            break;
 800f8d4:	e00f      	b.n	800f8f6 <wc_PemGetHeaderFooter+0x172>
        case PKCS8_ENC_PRIVATEKEY_TYPE:
            if (header) *header = BEGIN_ENC_PRIV_KEY;
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d002      	beq.n	800f8e2 <wc_PemGetHeaderFooter+0x15e>
 800f8dc:	4a17      	ldr	r2, [pc, #92]	; (800f93c <wc_PemGetHeaderFooter+0x1b8>)
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	601a      	str	r2, [r3, #0]
            if (footer) *footer = END_ENC_PRIV_KEY;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <wc_PemGetHeaderFooter+0x16a>
 800f8e8:	4a15      	ldr	r2, [pc, #84]	; (800f940 <wc_PemGetHeaderFooter+0x1bc>)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	601a      	str	r2, [r3, #0]
            ret = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	617b      	str	r3, [r7, #20]
            break;
 800f8f2:	e000      	b.n	800f8f6 <wc_PemGetHeaderFooter+0x172>
        default:
            break;
 800f8f4:	bf00      	nop
    }
    return ret;
 800f8f6:	697b      	ldr	r3, [r7, #20]
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	371c      	adds	r7, #28
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr
 800f904:	0801dd18 	.word	0x0801dd18
 800f908:	0801dd34 	.word	0x0801dd34
 800f90c:	0801dd8c 	.word	0x0801dd8c
 800f910:	0801dda8 	.word	0x0801dda8
 800f914:	0801dd50 	.word	0x0801dd50
 800f918:	0801dd70 	.word	0x0801dd70
 800f91c:	0801de84 	.word	0x0801de84
 800f920:	0801dea4 	.word	0x0801dea4
 800f924:	0801ddc0 	.word	0x0801ddc0
 800f928:	0801dde0 	.word	0x0801dde0
 800f92c:	0801df04 	.word	0x0801df04
 800f930:	0801df20 	.word	0x0801df20
 800f934:	0801de00 	.word	0x0801de00
 800f938:	0801de1c 	.word	0x0801de1c
 800f93c:	0801de38 	.word	0x0801de38
 800f940:	0801de60 	.word	0x0801de60

0800f944 <PemToDer>:

/* Remove PEM header/footer, convert to ASN1, store any encrypted data
   info->consumed tracks of PEM bytes consumed in case multiple parts */
int PemToDer(const unsigned char* buff, long longSz, int type,
              DerBuffer** pDer, void* heap, EncryptedInfo* info, int* keyFormat)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b090      	sub	sp, #64	; 0x40
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]
 800f950:	603b      	str	r3, [r7, #0]
    const char* header      = NULL;
 800f952:	2300      	movs	r3, #0
 800f954:	61bb      	str	r3, [r7, #24]
    const char* footer      = NULL;
 800f956:	2300      	movs	r3, #0
 800f958:	617b      	str	r3, [r7, #20]
    char*       headerEnd;
    char*       footerEnd;
    char*       consumedEnd;
    char*       bufferEnd   = (char*)(buff + longSz);
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	68fa      	ldr	r2, [r7, #12]
 800f95e:	4413      	add	r3, r2
 800f960:	63bb      	str	r3, [r7, #56]	; 0x38
    long        neededSz;
    int         ret         = 0;
 800f962:	2300      	movs	r3, #0
 800f964:	637b      	str	r3, [r7, #52]	; 0x34
    int         sz          = (int)longSz;
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	633b      	str	r3, [r7, #48]	; 0x30
    int         encrypted_key = 0;
 800f96a:	2300      	movs	r3, #0
 800f96c:	62fb      	str	r3, [r7, #44]	; 0x2c
    DerBuffer*  der;
#if defined(HAVE_PKCS8) || defined(WOLFSSL_ENCRYPTED_KEYS)
    word32      algId = 0;
 800f96e:	2300      	movs	r3, #0
 800f970:	613b      	str	r3, [r7, #16]
#endif

    WOLFSSL_ENTER("PemToDer");

    /* get PEM header and footer based on type */
    ret = wc_PemGetHeaderFooter(type, &header, &footer);
 800f972:	f107 0214 	add.w	r2, r7, #20
 800f976:	f107 0318 	add.w	r3, r7, #24
 800f97a:	4619      	mov	r1, r3
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f7ff ff01 	bl	800f784 <wc_PemGetHeaderFooter>
 800f982:	6378      	str	r0, [r7, #52]	; 0x34
    if (ret != 0)
 800f984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f986:	2b00      	cmp	r3, #0
 800f988:	d001      	beq.n	800f98e <PemToDer+0x4a>
        return ret;
 800f98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98c:	e0e2      	b.n	800fb54 <PemToDer+0x210>

    /* map header if not found for type */
    for (;;) {
        headerEnd = XSTRNSTR((char*)buff, header, sz);
 800f98e:	69bb      	ldr	r3, [r7, #24]
 800f990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f992:	4619      	mov	r1, r3
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f00b ff45 	bl	801b824 <mystrnstr>
 800f99a:	62b8      	str	r0, [r7, #40]	; 0x28

        if (headerEnd) {
 800f99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d126      	bne.n	800f9f0 <PemToDer+0xac>
            break;
        } else
        if (type == PRIVATEKEY_TYPE) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d125      	bne.n	800f9f4 <PemToDer+0xb0>
            if (header == BEGIN_RSA_PRIV) {
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	4a6c      	ldr	r2, [pc, #432]	; (800fb5c <PemToDer+0x218>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d104      	bne.n	800f9ba <PemToDer+0x76>
                header =  BEGIN_PRIV_KEY;       footer = END_PRIV_KEY;
 800f9b0:	4b6b      	ldr	r3, [pc, #428]	; (800fb60 <PemToDer+0x21c>)
 800f9b2:	61bb      	str	r3, [r7, #24]
 800f9b4:	4b6b      	ldr	r3, [pc, #428]	; (800fb64 <PemToDer+0x220>)
 800f9b6:	617b      	str	r3, [r7, #20]
 800f9b8:	e7e9      	b.n	800f98e <PemToDer+0x4a>
            } else
            if (header == BEGIN_PRIV_KEY) {
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	4a68      	ldr	r2, [pc, #416]	; (800fb60 <PemToDer+0x21c>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d104      	bne.n	800f9cc <PemToDer+0x88>
                header =  BEGIN_ENC_PRIV_KEY;   footer = END_ENC_PRIV_KEY;
 800f9c2:	4b69      	ldr	r3, [pc, #420]	; (800fb68 <PemToDer+0x224>)
 800f9c4:	61bb      	str	r3, [r7, #24]
 800f9c6:	4b69      	ldr	r3, [pc, #420]	; (800fb6c <PemToDer+0x228>)
 800f9c8:	617b      	str	r3, [r7, #20]
 800f9ca:	e7e0      	b.n	800f98e <PemToDer+0x4a>
            } else
    #ifdef HAVE_ECC
            if (header == BEGIN_ENC_PRIV_KEY) {
 800f9cc:	69bb      	ldr	r3, [r7, #24]
 800f9ce:	4a66      	ldr	r2, [pc, #408]	; (800fb68 <PemToDer+0x224>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d104      	bne.n	800f9de <PemToDer+0x9a>
                header =  BEGIN_EC_PRIV;        footer = END_EC_PRIV;
 800f9d4:	4b66      	ldr	r3, [pc, #408]	; (800fb70 <PemToDer+0x22c>)
 800f9d6:	61bb      	str	r3, [r7, #24]
 800f9d8:	4b66      	ldr	r3, [pc, #408]	; (800fb74 <PemToDer+0x230>)
 800f9da:	617b      	str	r3, [r7, #20]
 800f9dc:	e7d7      	b.n	800f98e <PemToDer+0x4a>
            } else
            if (header == BEGIN_EC_PRIV) {
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	4a63      	ldr	r2, [pc, #396]	; (800fb70 <PemToDer+0x22c>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d108      	bne.n	800f9f8 <PemToDer+0xb4>
                header =  BEGIN_DSA_PRIV;       footer = END_DSA_PRIV;
 800f9e6:	4b64      	ldr	r3, [pc, #400]	; (800fb78 <PemToDer+0x234>)
 800f9e8:	61bb      	str	r3, [r7, #24]
 800f9ea:	4b64      	ldr	r3, [pc, #400]	; (800fb7c <PemToDer+0x238>)
 800f9ec:	617b      	str	r3, [r7, #20]
        headerEnd = XSTRNSTR((char*)buff, header, sz);
 800f9ee:	e7ce      	b.n	800f98e <PemToDer+0x4a>
            break;
 800f9f0:	bf00      	nop
 800f9f2:	e002      	b.n	800f9fa <PemToDer+0xb6>
        if ((type == CRL_TYPE) && (header != BEGIN_X509_CRL)) {
            header =  BEGIN_X509_CRL;           footer = END_X509_CRL;
        } else
#endif
        {
            break;
 800f9f4:	bf00      	nop
 800f9f6:	e000      	b.n	800f9fa <PemToDer+0xb6>
                break;
 800f9f8:	bf00      	nop
        }
    }

    if (!headerEnd) {
 800f9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d102      	bne.n	800fa06 <PemToDer+0xc2>
            WOLFSSL_MSG("Couldn't find PEM header");
            return ASN_NO_PEM_HEADER;
        }
#else
        WOLFSSL_MSG("Couldn't find PEM header");
        return ASN_NO_PEM_HEADER;
 800fa00:	f06f 03a1 	mvn.w	r3, #161	; 0xa1
 800fa04:	e0a6      	b.n	800fb54 <PemToDer+0x210>
#endif
    } else {
        headerEnd += XSTRLEN(header);
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7f0 fbf9 	bl	8000200 <strlen>
 800fa0e:	4602      	mov	r2, r0
 800fa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa12:	4413      	add	r3, r2
 800fa14:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* eat end of line characters */
    headerEnd = SkipEndOfLineChars(headerEnd, bufferEnd);
 800fa16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa1a:	f7ff fe96 	bl	800f74a <SkipEndOfLineChars>
 800fa1e:	62b8      	str	r0, [r7, #40]	; 0x28

    if (type == PRIVATEKEY_TYPE) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d10a      	bne.n	800fa3c <PemToDer+0xf8>
        /* keyFormat is Key_Sum enum */
        if (keyFormat) {
 800fa26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d007      	beq.n	800fa3c <PemToDer+0xf8>
        #ifdef HAVE_ECC
            if (header == BEGIN_EC_PRIV)
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	4a50      	ldr	r2, [pc, #320]	; (800fb70 <PemToDer+0x22c>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d103      	bne.n	800fa3c <PemToDer+0xf8>
                *keyFormat = ECDSAk;
 800fa34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa36:	f240 2206 	movw	r2, #518	; 0x206
 800fa3a:	601a      	str	r2, [r3, #0]
            encrypted_key = 1;
    }
#endif /* WOLFSSL_ENCRYPTED_KEYS */

    /* find footer */
    footerEnd = XSTRNSTR(headerEnd, footer, (unsigned int)((char*)buff + sz - headerEnd));
 800fa3c:	6979      	ldr	r1, [r7, #20]
 800fa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	4413      	add	r3, r2
 800fa44:	461a      	mov	r2, r3
 800fa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa4e:	f00b fee9 	bl	801b824 <mystrnstr>
 800fa52:	6278      	str	r0, [r7, #36]	; 0x24
    if (!footerEnd) {
 800fa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d108      	bne.n	800fa6c <PemToDer+0x128>
        if (info)
 800fa5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d002      	beq.n	800fa66 <PemToDer+0x122>
            info->consumed = longSz; /* No more certs if no footer */
 800fa60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa62:	68ba      	ldr	r2, [r7, #8]
 800fa64:	609a      	str	r2, [r3, #8]
        return BUFFER_E;
 800fa66:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800fa6a:	e073      	b.n	800fb54 <PemToDer+0x210>
    }

    consumedEnd = footerEnd + XSTRLEN(footer);
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7f0 fbc6 	bl	8000200 <strlen>
 800fa74:	4602      	mov	r2, r0
 800fa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa78:	4413      	add	r3, r2
 800fa7a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (consumedEnd < bufferEnd) { /* handle no end of line on last line */
 800fa7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d20f      	bcs.n	800faa4 <PemToDer+0x160>
        /* eat end of line characters */
        consumedEnd = SkipEndOfLineChars(consumedEnd, bufferEnd);
 800fa84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa88:	f7ff fe5f 	bl	800f74a <SkipEndOfLineChars>
 800fa8c:	63f8      	str	r0, [r7, #60]	; 0x3c
        /* skip possible null term */
        if (consumedEnd < bufferEnd && consumedEnd[0] == '\0')
 800fa8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d206      	bcs.n	800faa4 <PemToDer+0x160>
 800fa96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d102      	bne.n	800faa4 <PemToDer+0x160>
            consumedEnd++;
 800fa9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faa0:	3301      	adds	r3, #1
 800faa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (info)
 800faa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d004      	beq.n	800fab4 <PemToDer+0x170>
        info->consumed = (long)(consumedEnd - (char*)buff);
 800faaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	1ad2      	subs	r2, r2, r3
 800fab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fab2:	609a      	str	r2, [r3, #8]

    /* set up der buffer */
    neededSz = (long)(footerEnd - headerEnd);
 800fab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	623b      	str	r3, [r7, #32]
    if (neededSz > sz || neededSz <= 0)
 800fabc:	6a3a      	ldr	r2, [r7, #32]
 800fabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac0:	429a      	cmp	r2, r3
 800fac2:	dc02      	bgt.n	800faca <PemToDer+0x186>
 800fac4:	6a3b      	ldr	r3, [r7, #32]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	dc02      	bgt.n	800fad0 <PemToDer+0x18c>
        return BUFFER_E;
 800faca:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800face:	e041      	b.n	800fb54 <PemToDer+0x210>

    ret = AllocDer(pDer, (word32)neededSz, type, heap);
 800fad0:	6a39      	ldr	r1, [r7, #32]
 800fad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	6838      	ldr	r0, [r7, #0]
 800fad8:	f7ff fd92 	bl	800f600 <AllocDer>
 800fadc:	6378      	str	r0, [r7, #52]	; 0x34
    if (ret < 0) {
 800fade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	da01      	bge.n	800fae8 <PemToDer+0x1a4>
        return ret;
 800fae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae6:	e035      	b.n	800fb54 <PemToDer+0x210>
    }
    der = *pDer;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	61fb      	str	r3, [r7, #28]

    if (Base64_Decode((byte*)headerEnd, (word32)neededSz,
 800faee:	6a39      	ldr	r1, [r7, #32]
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	3308      	adds	r3, #8
 800faf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fafa:	f000 fbb8 	bl	801026e <Base64_Decode>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	da02      	bge.n	800fb0a <PemToDer+0x1c6>
                      der->buffer, &der->length) < 0)
        return BUFFER_E;
 800fb04:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800fb08:	e024      	b.n	800fb54 <PemToDer+0x210>

    if ((header == BEGIN_PRIV_KEY
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	4a14      	ldr	r2, [pc, #80]	; (800fb60 <PemToDer+0x21c>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d003      	beq.n	800fb1a <PemToDer+0x1d6>
#ifdef OPENSSL_EXTRA
         || header == beginBuf
#endif
#ifdef HAVE_ECC
         || header == BEGIN_EC_PRIV
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	4a16      	ldr	r2, [pc, #88]	; (800fb70 <PemToDer+0x22c>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d11b      	bne.n	800fb52 <PemToDer+0x20e>
#endif
        ) && !encrypted_key)
 800fb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d118      	bne.n	800fb52 <PemToDer+0x20e>
    {
    #ifdef HAVE_PKCS8
        /* pkcs8 key, convert and adjust length */
        if ((ret = ToTraditional_ex(der->buffer, der->length, &algId)) > 0) {
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	6818      	ldr	r0, [r3, #0]
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	f107 0210 	add.w	r2, r7, #16
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	f7fc f9f4 	bl	800bf1a <ToTraditional_ex>
 800fb32:	6378      	str	r0, [r7, #52]	; 0x34
 800fb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	dd09      	ble.n	800fb4e <PemToDer+0x20a>
            der->length = ret;
 800fb3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	609a      	str	r2, [r3, #8]
            if (keyFormat) {
 800fb40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d003      	beq.n	800fb4e <PemToDer+0x20a>
                *keyFormat = algId;
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	461a      	mov	r2, r3
 800fb4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb4c:	601a      	str	r2, [r3, #0]
        else {
            /* ignore failure here and assume key is not pkcs8 wrapped */
        }
    #endif

        return 0;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	e000      	b.n	800fb54 <PemToDer+0x210>
        XFREE(password, heap, DYNAMIC_TYPE_STRING);
    #endif
    }
#endif /* WOLFSSL_ENCRYPTED_KEYS */

    return ret;
 800fb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3740      	adds	r7, #64	; 0x40
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	0801ddc0 	.word	0x0801ddc0
 800fb60:	0801de00 	.word	0x0801de00
 800fb64:	0801de1c 	.word	0x0801de1c
 800fb68:	0801de38 	.word	0x0801de38
 800fb6c:	0801de60 	.word	0x0801de60
 800fb70:	0801de84 	.word	0x0801de84
 800fb74:	0801dea4 	.word	0x0801dea4
 800fb78:	0801dec4 	.word	0x0801dec4
 800fb7c:	0801dee4 	.word	0x0801dee4

0800fb80 <DecodeECC_DSA_Sig>:
    return ret;
}


int DecodeECC_DSA_Sig(const byte* sig, word32 sigLen, mp_int* r, mp_int* s)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b086      	sub	sp, #24
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	607a      	str	r2, [r7, #4]
 800fb8c:	603b      	str	r3, [r7, #0]
    word32 idx = 0;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	617b      	str	r3, [r7, #20]
    int    len = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	613b      	str	r3, [r7, #16]

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 800fb96:	f107 0210 	add.w	r2, r7, #16
 800fb9a:	f107 0114 	add.w	r1, r7, #20
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f7fb f9a7 	bl	800aef4 <GetSequence>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	da02      	bge.n	800fbb2 <DecodeECC_DSA_Sig+0x32>
        return ASN_ECC_KEY_E;
 800fbac:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 800fbb0:	e026      	b.n	800fc00 <DecodeECC_DSA_Sig+0x80>
    }

#ifndef NO_STRICT_ECDSA_LEN
    /* enable strict length checking for signature */
    if (sigLen != idx + (word32)len) {
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	693a      	ldr	r2, [r7, #16]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	68ba      	ldr	r2, [r7, #8]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d002      	beq.n	800fbc4 <DecodeECC_DSA_Sig+0x44>
        return ASN_ECC_KEY_E;
 800fbbe:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 800fbc2:	e01d      	b.n	800fc00 <DecodeECC_DSA_Sig+0x80>
    if ((word32)len > (sigLen - idx)) {
        return ASN_ECC_KEY_E;
    }
#endif

    if (GetInt(r, sig, &idx, sigLen) < 0) {
 800fbc4:	f107 0214 	add.w	r2, r7, #20
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	68f9      	ldr	r1, [r7, #12]
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7fb fb6c 	bl	800b2aa <GetInt>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	da02      	bge.n	800fbde <DecodeECC_DSA_Sig+0x5e>
        return ASN_ECC_KEY_E;
 800fbd8:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 800fbdc:	e010      	b.n	800fc00 <DecodeECC_DSA_Sig+0x80>
    }

    if (GetInt(s, sig, &idx, sigLen) < 0) {
 800fbde:	f107 0214 	add.w	r2, r7, #20
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	68f9      	ldr	r1, [r7, #12]
 800fbe6:	6838      	ldr	r0, [r7, #0]
 800fbe8:	f7fb fb5f 	bl	800b2aa <GetInt>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	da05      	bge.n	800fbfe <DecodeECC_DSA_Sig+0x7e>
        mp_clear(r);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f00b f9ed 	bl	801afd2 <sp_clear>
        return ASN_ECC_KEY_E;
 800fbf8:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 800fbfc:	e000      	b.n	800fc00 <DecodeECC_DSA_Sig+0x80>
    }

    return 0;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3718      	adds	r7, #24
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <wc_EccPrivateKeyDecode>:


int wc_EccPrivateKeyDecode(const byte* input, word32* inOutIdx, ecc_key* key,
                        word32 inSz)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b094      	sub	sp, #80	; 0x50
 800fc0c:	af02      	add	r7, sp, #8
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]
 800fc14:	603b      	str	r3, [r7, #0]
    word32 oidSum;
    int    version, length;
    int    privSz, pubSz = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	647b      	str	r3, [r7, #68]	; 0x44
    byte   b;
    int    ret = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	643b      	str	r3, [r7, #64]	; 0x40
    int    curve_id = ECC_CURVE_DEF;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef WOLFSSL_SMALL_STACK
    byte* priv;
    byte* pub = NULL;
 800fc22:	2300      	movs	r3, #0
 800fc24:	63bb      	str	r3, [r7, #56]	; 0x38
#else
    byte priv[ECC_MAXSIZE+1];
    byte pub[2*(ECC_MAXSIZE+1)]; /* public key has two parts plus header */
#endif
    byte* pubData = NULL;
 800fc26:	2300      	movs	r3, #0
 800fc28:	637b      	str	r3, [r7, #52]	; 0x34

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d008      	beq.n	800fc42 <wc_EccPrivateKeyDecode+0x3a>
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d005      	beq.n	800fc42 <wc_EccPrivateKeyDecode+0x3a>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d002      	beq.n	800fc42 <wc_EccPrivateKeyDecode+0x3a>
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d102      	bne.n	800fc48 <wc_EccPrivateKeyDecode+0x40>
        return BAD_FUNC_ARG;
 800fc42:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800fc46:	e12c      	b.n	800fea2 <wc_EccPrivateKeyDecode+0x29a>

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800fc48:	f107 0214 	add.w	r2, r7, #20
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	68b9      	ldr	r1, [r7, #8]
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f7fb f94f 	bl	800aef4 <GetSequence>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	da02      	bge.n	800fc62 <wc_EccPrivateKeyDecode+0x5a>
        return ASN_PARSE_E;
 800fc5c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fc60:	e11f      	b.n	800fea2 <wc_EccPrivateKeyDecode+0x29a>

    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 800fc62:	f107 0218 	add.w	r2, r7, #24
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	68b9      	ldr	r1, [r7, #8]
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f7fb fa9a 	bl	800b1a4 <GetMyVersion>
 800fc70:	4603      	mov	r3, r0
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	da02      	bge.n	800fc7c <wc_EccPrivateKeyDecode+0x74>
        return ASN_PARSE_E;
 800fc76:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fc7a:	e112      	b.n	800fea2 <wc_EccPrivateKeyDecode+0x29a>

    if (*inOutIdx >= inSz)
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	683a      	ldr	r2, [r7, #0]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d802      	bhi.n	800fc8c <wc_EccPrivateKeyDecode+0x84>
        return ASN_PARSE_E;
 800fc86:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fc8a:	e10a      	b.n	800fea2 <wc_EccPrivateKeyDecode+0x29a>

    b = input[*inOutIdx];
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	4413      	add	r3, r2
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    *inOutIdx += 1;
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	601a      	str	r2, [r3, #0]

    /* priv type */
    if (b != 4 && b != 6 && b != 7)
 800fca4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fca8:	2b04      	cmp	r3, #4
 800fcaa:	d00a      	beq.n	800fcc2 <wc_EccPrivateKeyDecode+0xba>
 800fcac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fcb0:	2b06      	cmp	r3, #6
 800fcb2:	d006      	beq.n	800fcc2 <wc_EccPrivateKeyDecode+0xba>
 800fcb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fcb8:	2b07      	cmp	r3, #7
 800fcba:	d002      	beq.n	800fcc2 <wc_EccPrivateKeyDecode+0xba>
        return ASN_PARSE_E;
 800fcbc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fcc0:	e0ef      	b.n	800fea2 <wc_EccPrivateKeyDecode+0x29a>

    if (GetLength(input, inOutIdx, &length, inSz) < 0)
 800fcc2:	f107 0214 	add.w	r2, r7, #20
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	68b9      	ldr	r1, [r7, #8]
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f7fa ffde 	bl	800ac8c <GetLength>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	da02      	bge.n	800fcdc <wc_EccPrivateKeyDecode+0xd4>
        return ASN_PARSE_E;
 800fcd6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fcda:	e0e2      	b.n	800fea2 <wc_EccPrivateKeyDecode+0x29a>
    privSz = length;
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (privSz > ECC_MAXSIZE)
 800fce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce2:	2b42      	cmp	r3, #66	; 0x42
 800fce4:	dd02      	ble.n	800fcec <wc_EccPrivateKeyDecode+0xe4>
        return BUFFER_E;
 800fce6:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800fcea:	e0da      	b.n	800fea2 <wc_EccPrivateKeyDecode+0x29a>

#ifdef WOLFSSL_SMALL_STACK
    priv = (byte*)XMALLOC(privSz, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 800fcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f001 fbb4 	bl	801145c <wolfSSL_Malloc>
 800fcf4:	62b8      	str	r0, [r7, #40]	; 0x28
    if (priv == NULL)
 800fcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d102      	bne.n	800fd02 <wc_EccPrivateKeyDecode+0xfa>
        return MEMORY_E;
 800fcfc:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800fd00:	e0cf      	b.n	800fea2 <wc_EccPrivateKeyDecode+0x29a>
#endif

    /* priv key */
    XMEMCPY(priv, &input[*inOutIdx], privSz);
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	68fa      	ldr	r2, [r7, #12]
 800fd08:	4413      	add	r3, r2
 800fd0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd10:	f00b fe7f 	bl	801ba12 <memcpy>
    *inOutIdx += length;
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	697a      	ldr	r2, [r7, #20]
 800fd1a:	441a      	add	r2, r3
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	601a      	str	r2, [r3, #0]

    if ((*inOutIdx + 1) < inSz) {
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	3301      	adds	r3, #1
 800fd26:	683a      	ldr	r2, [r7, #0]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d93a      	bls.n	800fda2 <wc_EccPrivateKeyDecode+0x19a>
        /* prefix 0, may have */
        b = input[*inOutIdx];
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	4413      	add	r3, r2
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (b == ECC_PREFIX_0) {
 800fd3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fd3e:	2ba0      	cmp	r3, #160	; 0xa0
 800fd40:	d12f      	bne.n	800fda2 <wc_EccPrivateKeyDecode+0x19a>
            *inOutIdx += 1;
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	1c5a      	adds	r2, r3, #1
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	601a      	str	r2, [r3, #0]

            if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 800fd4c:	f107 0214 	add.w	r2, r7, #20
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	68b9      	ldr	r1, [r7, #8]
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f7fa ff99 	bl	800ac8c <GetLength>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	dc03      	bgt.n	800fd68 <wc_EccPrivateKeyDecode+0x160>
                ret = ASN_PARSE_E;
 800fd60:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fd64:	643b      	str	r3, [r7, #64]	; 0x40
 800fd66:	e01c      	b.n	800fda2 <wc_EccPrivateKeyDecode+0x19a>
            else {
                ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType,
 800fd68:	f107 021c 	add.w	r2, r7, #28
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	2315      	movs	r3, #21
 800fd72:	68b9      	ldr	r1, [r7, #8]
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f7fb fee7 	bl	800bb48 <GetObjectId>
 800fd7a:	6438      	str	r0, [r7, #64]	; 0x40
                                  inSz);
                if (ret == 0) {
 800fd7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d10f      	bne.n	800fda2 <wc_EccPrivateKeyDecode+0x19a>
                    if ((ret = CheckCurve(oidSum)) < 0)
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fc fc2e 	bl	800c5e6 <CheckCurve>
 800fd8a:	6438      	str	r0, [r7, #64]	; 0x40
 800fd8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	da03      	bge.n	800fd9a <wc_EccPrivateKeyDecode+0x192>
                        ret = ECC_CURVE_OID_E;
 800fd92:	f06f 03ab 	mvn.w	r3, #171	; 0xab
 800fd96:	643b      	str	r3, [r7, #64]	; 0x40
 800fd98:	e003      	b.n	800fda2 <wc_EccPrivateKeyDecode+0x19a>
                    else {
                        curve_id = ret;
 800fd9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ret = 0;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }
        }
    }

    if (ret == 0 && (*inOutIdx + 1) < inSz) {
 800fda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d15c      	bne.n	800fe62 <wc_EccPrivateKeyDecode+0x25a>
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	3301      	adds	r3, #1
 800fdae:	683a      	ldr	r2, [r7, #0]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d956      	bls.n	800fe62 <wc_EccPrivateKeyDecode+0x25a>
        /* prefix 1 */
        b = input[*inOutIdx];
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	68fa      	ldr	r2, [r7, #12]
 800fdba:	4413      	add	r3, r2
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        *inOutIdx += 1;
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	1c5a      	adds	r2, r3, #1
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	601a      	str	r2, [r3, #0]

        if (b != ECC_PREFIX_1) {
 800fdcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fdd0:	2ba1      	cmp	r3, #161	; 0xa1
 800fdd2:	d003      	beq.n	800fddc <wc_EccPrivateKeyDecode+0x1d4>
            ret = ASN_ECC_KEY_E;
 800fdd4:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 800fdd8:	643b      	str	r3, [r7, #64]	; 0x40
 800fdda:	e042      	b.n	800fe62 <wc_EccPrivateKeyDecode+0x25a>
        }
        else if (GetLength(input, inOutIdx, &length, inSz) <= 0) {
 800fddc:	f107 0214 	add.w	r2, r7, #20
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	68b9      	ldr	r1, [r7, #8]
 800fde4:	68f8      	ldr	r0, [r7, #12]
 800fde6:	f7fa ff51 	bl	800ac8c <GetLength>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	dc03      	bgt.n	800fdf8 <wc_EccPrivateKeyDecode+0x1f0>
            ret = ASN_PARSE_E;
 800fdf0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fdf4:	643b      	str	r3, [r7, #64]	; 0x40
 800fdf6:	e034      	b.n	800fe62 <wc_EccPrivateKeyDecode+0x25a>
        }
        else {
            /* key header */
            ret = CheckBitString(input, inOutIdx, &length, inSz, 0, NULL);
 800fdf8:	f107 0214 	add.w	r2, r7, #20
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	2300      	movs	r3, #0
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	68b9      	ldr	r1, [r7, #8]
 800fe08:	68f8      	ldr	r0, [r7, #12]
 800fe0a:	f7fb fa8a 	bl	800b322 <CheckBitString>
 800fe0e:	6438      	str	r0, [r7, #64]	; 0x40
            if (ret == 0) {
 800fe10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d125      	bne.n	800fe62 <wc_EccPrivateKeyDecode+0x25a>
                /* pub key */
                pubSz = length;
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	647b      	str	r3, [r7, #68]	; 0x44
                if (pubSz > 2*(ECC_MAXSIZE+1))
 800fe1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe1c:	2b86      	cmp	r3, #134	; 0x86
 800fe1e:	dd03      	ble.n	800fe28 <wc_EccPrivateKeyDecode+0x220>
                    ret = BUFFER_E;
 800fe20:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800fe24:	643b      	str	r3, [r7, #64]	; 0x40
 800fe26:	e01c      	b.n	800fe62 <wc_EccPrivateKeyDecode+0x25a>
                else {
            #ifdef WOLFSSL_SMALL_STACK
                    pub = (byte*)XMALLOC(pubSz, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 800fe28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f001 fb16 	bl	801145c <wolfSSL_Malloc>
 800fe30:	63b8      	str	r0, [r7, #56]	; 0x38
                    if (pub == NULL)
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d103      	bne.n	800fe40 <wc_EccPrivateKeyDecode+0x238>
                        ret = MEMORY_E;
 800fe38:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800fe3c:	643b      	str	r3, [r7, #64]	; 0x40
 800fe3e:	e010      	b.n	800fe62 <wc_EccPrivateKeyDecode+0x25a>
                    else
            #endif
                    {
                        XMEMCPY(pub, &input[*inOutIdx], pubSz);
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	68fa      	ldr	r2, [r7, #12]
 800fe46:	4413      	add	r3, r2
 800fe48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe4e:	f00b fde0 	bl	801ba12 <memcpy>
                        *inOutIdx += length;
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	441a      	add	r2, r3
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	601a      	str	r2, [r3, #0]
                        pubData = pub;
 800fe5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe60:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }
        }
    }

    if (ret == 0) {
 800fe62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d10b      	bne.n	800fe80 <wc_EccPrivateKeyDecode+0x278>
        ret = wc_ecc_import_private_key_ex(priv, privSz, pubData, pubSz, key,
 800fe68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	4613      	mov	r3, r2
 800fe76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe7a:	f001 f979 	bl	8011170 <wc_ecc_import_private_key_ex>
 800fe7e:	6438      	str	r0, [r7, #64]	; 0x40
                                                                      curve_id);
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(priv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	627b      	str	r3, [r7, #36]	; 0x24
 800fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d002      	beq.n	800fe90 <wc_EccPrivateKeyDecode+0x288>
 800fe8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe8c:	f001 fb02 	bl	8011494 <wolfSSL_Free>
    XFREE(pub,  key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 800fe90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe92:	623b      	str	r3, [r7, #32]
 800fe94:	6a3b      	ldr	r3, [r7, #32]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <wc_EccPrivateKeyDecode+0x298>
 800fe9a:	6a38      	ldr	r0, [r7, #32]
 800fe9c:	f001 fafa 	bl	8011494 <wolfSSL_Free>
#endif

    return ret;
 800fea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3748      	adds	r7, #72	; 0x48
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}

0800feaa <wc_EccPublicKeyDecode>:
}
#endif /* WOLFSSL_CUSTOM_CURVES */

int wc_EccPublicKeyDecode(const byte* input, word32* inOutIdx,
                          ecc_key* key, word32 inSz)
{
 800feaa:	b580      	push	{r7, lr}
 800feac:	b08e      	sub	sp, #56	; 0x38
 800feae:	af02      	add	r7, sp, #8
 800feb0:	60f8      	str	r0, [r7, #12]
 800feb2:	60b9      	str	r1, [r7, #8]
 800feb4:	607a      	str	r2, [r7, #4]
 800feb6:	603b      	str	r3, [r7, #0]
    int    ret;
    int    version, length;
    int    curve_id = ECC_CURVE_DEF;
 800feb8:	2300      	movs	r3, #0
 800feba:	62bb      	str	r3, [r7, #40]	; 0x28
    word32 oidSum, localIdx;
    byte   tag, isPrivFormat = 0;
 800febc:	2300      	movs	r3, #0
 800febe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d008      	beq.n	800feda <wc_EccPublicKeyDecode+0x30>
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d005      	beq.n	800feda <wc_EccPublicKeyDecode+0x30>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <wc_EccPublicKeyDecode+0x30>
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d102      	bne.n	800fee0 <wc_EccPublicKeyDecode+0x36>
        return BAD_FUNC_ARG;
 800feda:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800fede:	e119      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800fee0:	f107 021c 	add.w	r2, r7, #28
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	68b9      	ldr	r1, [r7, #8]
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f7fb f803 	bl	800aef4 <GetSequence>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	da02      	bge.n	800fefa <wc_EccPublicKeyDecode+0x50>
        return ASN_PARSE_E;
 800fef4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800fef8:	e10c      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>

    /* Check if ECC private key is being used and skip private portion */
    if (GetMyVersion(input, inOutIdx, &version, inSz) >= 0) {
 800fefa:	f107 0220 	add.w	r2, r7, #32
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	68b9      	ldr	r1, [r7, #8]
 800ff02:	68f8      	ldr	r0, [r7, #12]
 800ff04:	f7fb f94e 	bl	800b1a4 <GetMyVersion>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	db60      	blt.n	800ffd0 <wc_EccPublicKeyDecode+0x126>
        isPrivFormat = 1;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        /* Type private key */
        if (*inOutIdx >= inSz)
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	683a      	ldr	r2, [r7, #0]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d802      	bhi.n	800ff24 <wc_EccPublicKeyDecode+0x7a>
            return ASN_PARSE_E;
 800ff1e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ff22:	e0f7      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
        tag = input[*inOutIdx];
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	74fb      	strb	r3, [r7, #19]
        *inOutIdx += 1;
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	1c5a      	adds	r2, r3, #1
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	601a      	str	r2, [r3, #0]
        if (tag != 4 && tag != 6 && tag != 7)
 800ff3a:	7cfb      	ldrb	r3, [r7, #19]
 800ff3c:	2b04      	cmp	r3, #4
 800ff3e:	d008      	beq.n	800ff52 <wc_EccPublicKeyDecode+0xa8>
 800ff40:	7cfb      	ldrb	r3, [r7, #19]
 800ff42:	2b06      	cmp	r3, #6
 800ff44:	d005      	beq.n	800ff52 <wc_EccPublicKeyDecode+0xa8>
 800ff46:	7cfb      	ldrb	r3, [r7, #19]
 800ff48:	2b07      	cmp	r3, #7
 800ff4a:	d002      	beq.n	800ff52 <wc_EccPublicKeyDecode+0xa8>
            return ASN_PARSE_E;
 800ff4c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ff50:	e0e0      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>

        /* Skip Private Key */
        if (GetLength(input, inOutIdx, &length, inSz) < 0)
 800ff52:	f107 021c 	add.w	r2, r7, #28
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	68b9      	ldr	r1, [r7, #8]
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f7fa fe96 	bl	800ac8c <GetLength>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	da02      	bge.n	800ff6c <wc_EccPublicKeyDecode+0xc2>
            return ASN_PARSE_E;
 800ff66:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ff6a:	e0d3      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
        if (length > ECC_MAXSIZE)
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	2b42      	cmp	r3, #66	; 0x42
 800ff70:	dd02      	ble.n	800ff78 <wc_EccPublicKeyDecode+0xce>
            return BUFFER_E;
 800ff72:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ff76:	e0cd      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
        *inOutIdx += length;
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	69fa      	ldr	r2, [r7, #28]
 800ff7e:	441a      	add	r2, r3
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	601a      	str	r2, [r3, #0]

        /* Private Curve Header */
        if (*inOutIdx >= inSz)
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	683a      	ldr	r2, [r7, #0]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d802      	bhi.n	800ff94 <wc_EccPublicKeyDecode+0xea>
            return ASN_PARSE_E;
 800ff8e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ff92:	e0bf      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
        tag = input[*inOutIdx];
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	4413      	add	r3, r2
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	74fb      	strb	r3, [r7, #19]
        *inOutIdx += 1;
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	1c5a      	adds	r2, r3, #1
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	601a      	str	r2, [r3, #0]
        if (tag != ECC_PREFIX_0)
 800ffaa:	7cfb      	ldrb	r3, [r7, #19]
 800ffac:	2ba0      	cmp	r3, #160	; 0xa0
 800ffae:	d002      	beq.n	800ffb6 <wc_EccPublicKeyDecode+0x10c>
            return ASN_ECC_KEY_E;
 800ffb0:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 800ffb4:	e0ae      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
        if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 800ffb6:	f107 021c 	add.w	r2, r7, #28
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	68b9      	ldr	r1, [r7, #8]
 800ffbe:	68f8      	ldr	r0, [r7, #12]
 800ffc0:	f7fa fe64 	bl	800ac8c <GetLength>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	dc1a      	bgt.n	8010000 <wc_EccPublicKeyDecode+0x156>
            return ASN_PARSE_E;
 800ffca:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ffce:	e0a1      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
    }
    /* Standard ECC public key */
    else {
        if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 800ffd0:	f107 021c 	add.w	r2, r7, #28
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	68b9      	ldr	r1, [r7, #8]
 800ffd8:	68f8      	ldr	r0, [r7, #12]
 800ffda:	f7fa ff8b 	bl	800aef4 <GetSequence>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	da02      	bge.n	800ffea <wc_EccPublicKeyDecode+0x140>
            return ASN_PARSE_E;
 800ffe4:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ffe8:	e094      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>

        ret = SkipObjectId(input, inOutIdx, inSz);
 800ffea:	683a      	ldr	r2, [r7, #0]
 800ffec:	68b9      	ldr	r1, [r7, #8]
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	f7fb fe0d 	bl	800bc0e <SkipObjectId>
 800fff4:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != 0)
 800fff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d001      	beq.n	8010000 <wc_EccPublicKeyDecode+0x156>
            return ret;
 800fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffe:	e089      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
    }

    if (*inOutIdx >= inSz) {
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	429a      	cmp	r2, r3
 8010008:	d802      	bhi.n	8010010 <wc_EccPublicKeyDecode+0x166>
        return BUFFER_E;
 801000a:	f06f 0383 	mvn.w	r3, #131	; 0x83
 801000e:	e081      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
    }

    localIdx = *inOutIdx;
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	617b      	str	r3, [r7, #20]
    if (GetASNTag(input, &localIdx, &tag, inSz) == 0 &&
 8010016:	f107 0213 	add.w	r2, r7, #19
 801001a:	f107 0114 	add.w	r1, r7, #20
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	68f8      	ldr	r0, [r7, #12]
 8010022:	f7fa feb1 	bl	800ad88 <GetASNTag>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d105      	bne.n	8010038 <wc_EccPublicKeyDecode+0x18e>
            tag == (ASN_SEQUENCE | ASN_CONSTRUCTED)) {
 801002c:	7cfb      	ldrb	r3, [r7, #19]
    if (GetASNTag(input, &localIdx, &tag, inSz) == 0 &&
 801002e:	2b30      	cmp	r3, #48	; 0x30
 8010030:	d102      	bne.n	8010038 <wc_EccPublicKeyDecode+0x18e>
            wc_ecc_free_curve(curve, key->heap);

        if (ret < 0)
            return ret;
#else
        return ASN_PARSE_E;
 8010032:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8010036:	e06d      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
#endif /* WOLFSSL_CUSTOM_CURVES */
    }
    else {
        /* ecc params information */
        ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType, inSz);
 8010038:	f107 0218 	add.w	r2, r7, #24
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	9300      	str	r3, [sp, #0]
 8010040:	2315      	movs	r3, #21
 8010042:	68b9      	ldr	r1, [r7, #8]
 8010044:	68f8      	ldr	r0, [r7, #12]
 8010046:	f7fb fd7f 	bl	800bb48 <GetObjectId>
 801004a:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != 0)
 801004c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <wc_EccPublicKeyDecode+0x1ac>
            return ret;
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	e05e      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>

        /* get curve id */
        if ((ret = CheckCurve(oidSum)) < 0)
 8010056:	69bb      	ldr	r3, [r7, #24]
 8010058:	4618      	mov	r0, r3
 801005a:	f7fc fac4 	bl	800c5e6 <CheckCurve>
 801005e:	6278      	str	r0, [r7, #36]	; 0x24
 8010060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010062:	2b00      	cmp	r3, #0
 8010064:	da02      	bge.n	801006c <wc_EccPublicKeyDecode+0x1c2>
            return ECC_CURVE_OID_E;
 8010066:	f06f 03ab 	mvn.w	r3, #171	; 0xab
 801006a:	e053      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
        else {
            curve_id = ret;
 801006c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006e:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }

    if (isPrivFormat) {
 8010070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010074:	2b00      	cmp	r3, #0
 8010076:	d025      	beq.n	80100c4 <wc_EccPublicKeyDecode+0x21a>
        /* Public Curve Header - skip */
        if (*inOutIdx >= inSz)
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	683a      	ldr	r2, [r7, #0]
 801007e:	429a      	cmp	r2, r3
 8010080:	d802      	bhi.n	8010088 <wc_EccPublicKeyDecode+0x1de>
            return ASN_PARSE_E;
 8010082:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8010086:	e045      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
        tag = input[*inOutIdx];
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	68fa      	ldr	r2, [r7, #12]
 801008e:	4413      	add	r3, r2
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	74fb      	strb	r3, [r7, #19]
        *inOutIdx += 1;
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	1c5a      	adds	r2, r3, #1
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	601a      	str	r2, [r3, #0]
        if (tag != ECC_PREFIX_1)
 801009e:	7cfb      	ldrb	r3, [r7, #19]
 80100a0:	2ba1      	cmp	r3, #161	; 0xa1
 80100a2:	d002      	beq.n	80100aa <wc_EccPublicKeyDecode+0x200>
            return ASN_ECC_KEY_E;
 80100a4:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 80100a8:	e034      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
        if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 80100aa:	f107 021c 	add.w	r2, r7, #28
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	68b9      	ldr	r1, [r7, #8]
 80100b2:	68f8      	ldr	r0, [r7, #12]
 80100b4:	f7fa fdea 	bl	800ac8c <GetLength>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	dc02      	bgt.n	80100c4 <wc_EccPublicKeyDecode+0x21a>
            return ASN_PARSE_E;
 80100be:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80100c2:	e027      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
    }

    /* key header */
    ret = CheckBitString(input, inOutIdx, &length, inSz, 1, NULL);
 80100c4:	f107 021c 	add.w	r2, r7, #28
 80100c8:	2300      	movs	r3, #0
 80100ca:	9301      	str	r3, [sp, #4]
 80100cc:	2301      	movs	r3, #1
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	68b9      	ldr	r1, [r7, #8]
 80100d4:	68f8      	ldr	r0, [r7, #12]
 80100d6:	f7fb f924 	bl	800b322 <CheckBitString>
 80100da:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0)
 80100dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d001      	beq.n	80100e6 <wc_EccPublicKeyDecode+0x23c>
        return ret;
 80100e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e4:	e016      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>

    /* This is the raw point data compressed or uncompressed. */
    if (wc_ecc_import_x963_ex(input + *inOutIdx, length, key,
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	68fa      	ldr	r2, [r7, #12]
 80100ec:	18d0      	adds	r0, r2, r3
 80100ee:	69fb      	ldr	r3, [r7, #28]
 80100f0:	4619      	mov	r1, r3
 80100f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f4:	687a      	ldr	r2, [r7, #4]
 80100f6:	f000 ff85 	bl	8011004 <wc_ecc_import_x963_ex>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <wc_EccPublicKeyDecode+0x25c>
                                                            curve_id) != 0) {
        return ASN_ECC_KEY_E;
 8010100:	f06f 03aa 	mvn.w	r3, #170	; 0xaa
 8010104:	e006      	b.n	8010114 <wc_EccPublicKeyDecode+0x26a>
    }

    *inOutIdx += length;
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	69fa      	ldr	r2, [r7, #28]
 801010c:	441a      	add	r2, r3
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	601a      	str	r2, [r3, #0]

    return 0;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3730      	adds	r7, #48	; 0x30
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <ctMaskLTE>:
    return (byte)((((word32)b - a - 1) >> 31) - 1);
}

/* Constant time - mask set when a <= b. */
WC_STATIC WC_INLINE byte ctMaskLTE(int a, int b)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
    return (byte)((((word32)b - a    ) >> 31) - 1);
 8010126:	683a      	ldr	r2, [r7, #0]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	1ad3      	subs	r3, r2, r3
 801012c:	0fdb      	lsrs	r3, r3, #31
 801012e:	b2db      	uxtb	r3, r3
 8010130:	3b01      	subs	r3, #1
 8010132:	b2db      	uxtb	r3, r3
}
 8010134:	4618      	mov	r0, r3
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr

08010140 <Base64_Char2Val>:
/* 0x78: x y z           */    49,  50,  51
                            };
#define BASE64DECODE_SZ    (byte)(sizeof(base64Decode))

static WC_INLINE byte Base64_Char2Val(byte c)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	71fb      	strb	r3, [r7, #7]
     * 64 bytes in a cache line - first line has 64, second has 16
     */
    byte v;
    byte mask;

    c -= BASE64_MIN;
 801014a:	79fb      	ldrb	r3, [r7, #7]
 801014c:	3b2b      	subs	r3, #43	; 0x2b
 801014e:	71fb      	strb	r3, [r7, #7]
    mask = ctMaskLTE(c, 0x3f);
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	213f      	movs	r1, #63	; 0x3f
 8010154:	4618      	mov	r0, r3
 8010156:	f7ff ffe1 	bl	801011c <ctMaskLTE>
 801015a:	4603      	mov	r3, r0
 801015c:	73fb      	strb	r3, [r7, #15]
    /* Load a value from the first cache line and use when mask set. */
    v  = base64Decode[ c & 0x3f        ] &   mask ;
 801015e:	79fb      	ldrb	r3, [r7, #7]
 8010160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010164:	4a0e      	ldr	r2, [pc, #56]	; (80101a0 <Base64_Char2Val+0x60>)
 8010166:	5cd2      	ldrb	r2, [r2, r3]
 8010168:	7bfb      	ldrb	r3, [r7, #15]
 801016a:	4013      	ands	r3, r2
 801016c:	73bb      	strb	r3, [r7, #14]
    /* Load a value from the second cache line and use when mask not set. */
    v |= base64Decode[(c & 0x0f) | 0x40] & (~mask);
 801016e:	79fb      	ldrb	r3, [r7, #7]
 8010170:	f003 030f 	and.w	r3, r3, #15
 8010174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010178:	4a09      	ldr	r2, [pc, #36]	; (80101a0 <Base64_Char2Val+0x60>)
 801017a:	5cd3      	ldrb	r3, [r2, r3]
 801017c:	b25a      	sxtb	r2, r3
 801017e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010182:	43db      	mvns	r3, r3
 8010184:	b25b      	sxtb	r3, r3
 8010186:	4013      	ands	r3, r2
 8010188:	b25a      	sxtb	r2, r3
 801018a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801018e:	4313      	orrs	r3, r2
 8010190:	b25b      	sxtb	r3, r3
 8010192:	73bb      	strb	r3, [r7, #14]

    return v;
 8010194:	7bbb      	ldrb	r3, [r7, #14]
#else
    return base64Decode[c - BASE64_MIN];
#endif
}
 8010196:	4618      	mov	r0, r3
 8010198:	3710      	adds	r7, #16
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	0801e5e4 	.word	0x0801e5e4

080101a4 <Base64_SkipNewline>:
#endif

static WC_INLINE int Base64_SkipNewline(const byte* in, word32 *inLen, word32 *outJ)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b089      	sub	sp, #36	; 0x24
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	607a      	str	r2, [r7, #4]
    word32 len = *inLen;
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	61fb      	str	r3, [r7, #28]
    word32 j = *outJ;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	61bb      	str	r3, [r7, #24]
    if (len && (in[j] == ' ' || in[j] == '\r' || in[j] == '\n')) {
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d042      	beq.n	8010248 <Base64_SkipNewline+0xa4>
 80101c2:	68fa      	ldr	r2, [r7, #12]
 80101c4:	69bb      	ldr	r3, [r7, #24]
 80101c6:	4413      	add	r3, r2
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	2b20      	cmp	r3, #32
 80101cc:	d00b      	beq.n	80101e6 <Base64_SkipNewline+0x42>
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	4413      	add	r3, r2
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	2b0d      	cmp	r3, #13
 80101d8:	d005      	beq.n	80101e6 <Base64_SkipNewline+0x42>
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	4413      	add	r3, r2
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	2b0a      	cmp	r3, #10
 80101e4:	d130      	bne.n	8010248 <Base64_SkipNewline+0xa4>
        byte endLine = in[j++];
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	1c5a      	adds	r2, r3, #1
 80101ea:	61ba      	str	r2, [r7, #24]
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	4413      	add	r3, r2
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	75fb      	strb	r3, [r7, #23]
        len--;
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	61fb      	str	r3, [r7, #28]
        while (len && endLine == ' ') {   /* allow trailing whitespace */
 80101fa:	e009      	b.n	8010210 <Base64_SkipNewline+0x6c>
            endLine = in[j++];
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	1c5a      	adds	r2, r3, #1
 8010200:	61ba      	str	r2, [r7, #24]
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	4413      	add	r3, r2
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	75fb      	strb	r3, [r7, #23]
            len--;
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	3b01      	subs	r3, #1
 801020e:	61fb      	str	r3, [r7, #28]
        while (len && endLine == ' ') {   /* allow trailing whitespace */
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d002      	beq.n	801021c <Base64_SkipNewline+0x78>
 8010216:	7dfb      	ldrb	r3, [r7, #23]
 8010218:	2b20      	cmp	r3, #32
 801021a:	d0ef      	beq.n	80101fc <Base64_SkipNewline+0x58>
        }
        if (endLine == '\r') {
 801021c:	7dfb      	ldrb	r3, [r7, #23]
 801021e:	2b0d      	cmp	r3, #13
 8010220:	d10c      	bne.n	801023c <Base64_SkipNewline+0x98>
            if (len) {
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d009      	beq.n	801023c <Base64_SkipNewline+0x98>
                endLine = in[j++];
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	1c5a      	adds	r2, r3, #1
 801022c:	61ba      	str	r2, [r7, #24]
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	4413      	add	r3, r2
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	75fb      	strb	r3, [r7, #23]
                len--;
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	3b01      	subs	r3, #1
 801023a:	61fb      	str	r3, [r7, #28]
            }
        }
        if (endLine != '\n') {
 801023c:	7dfb      	ldrb	r3, [r7, #23]
 801023e:	2b0a      	cmp	r3, #10
 8010240:	d002      	beq.n	8010248 <Base64_SkipNewline+0xa4>
            WOLFSSL_MSG("Bad end of line in Base64 Decode");
            return ASN_INPUT_E;
 8010242:	f06f 0399 	mvn.w	r3, #153	; 0x99
 8010246:	e00c      	b.n	8010262 <Base64_SkipNewline+0xbe>
        }
    }
    if (!len) {
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d102      	bne.n	8010254 <Base64_SkipNewline+0xb0>
        return BUFFER_E;
 801024e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8010252:	e006      	b.n	8010262 <Base64_SkipNewline+0xbe>
    }
    *inLen = len;
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	69fa      	ldr	r2, [r7, #28]
 8010258:	601a      	str	r2, [r3, #0]
    *outJ = j;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	69ba      	ldr	r2, [r7, #24]
 801025e:	601a      	str	r2, [r3, #0]
    return 0;
 8010260:	2300      	movs	r3, #0
}
 8010262:	4618      	mov	r0, r3
 8010264:	3724      	adds	r7, #36	; 0x24
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr

0801026e <Base64_Decode>:

int Base64_Decode(const byte* in, word32 inLen, byte* out, word32* outLen)
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b08e      	sub	sp, #56	; 0x38
 8010272:	af00      	add	r7, sp, #0
 8010274:	60f8      	str	r0, [r7, #12]
 8010276:	60b9      	str	r1, [r7, #8]
 8010278:	607a      	str	r2, [r7, #4]
 801027a:	603b      	str	r3, [r7, #0]
    word32 i = 0;
 801027c:	2300      	movs	r3, #0
 801027e:	637b      	str	r3, [r7, #52]	; 0x34
    word32 j = 0;
 8010280:	2300      	movs	r3, #0
 8010282:	617b      	str	r3, [r7, #20]
    word32 plainSz = inLen - ((inLen + (BASE64_LINE_SZ - 1)) / BASE64_LINE_SZ );
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	333f      	adds	r3, #63	; 0x3f
 801028a:	099b      	lsrs	r3, r3, #6
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	62bb      	str	r3, [r7, #40]	; 0x28
    int ret;
#ifndef BASE64_NO_TABLE
    const byte maxIdx = BASE64DECODE_SZ + BASE64_MIN - 1;
 8010290:	237a      	movs	r3, #122	; 0x7a
 8010292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif

    plainSz = (plainSz * 3 + 3) / 4;
 8010296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010298:	1c5a      	adds	r2, r3, #1
 801029a:	4613      	mov	r3, r2
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	4413      	add	r3, r2
 80102a0:	089b      	lsrs	r3, r3, #2
 80102a2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (plainSz > *outLen) return BAD_FUNC_ARG;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102aa:	429a      	cmp	r2, r3
 80102ac:	f240 8129 	bls.w	8010502 <Base64_Decode+0x294>
 80102b0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80102b4:	e140      	b.n	8010538 <Base64_Decode+0x2ca>

    while (inLen > 3) {
        int pad3 = 0;
 80102b6:	2300      	movs	r3, #0
 80102b8:	633b      	str	r3, [r7, #48]	; 0x30
        int pad4 = 0;
 80102ba:	2300      	movs	r3, #0
 80102bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        byte b1, b2, b3;
        byte e1, e2, e3, e4;

        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 80102be:	f107 0214 	add.w	r2, r7, #20
 80102c2:	f107 0308 	add.w	r3, r7, #8
 80102c6:	4619      	mov	r1, r3
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f7ff ff6b 	bl	80101a4 <Base64_SkipNewline>
 80102ce:	6238      	str	r0, [r7, #32]
 80102d0:	6a3b      	ldr	r3, [r7, #32]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d006      	beq.n	80102e4 <Base64_Decode+0x76>
            if (ret == BUFFER_E) {
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	f113 0f84 	cmn.w	r3, #132	; 0x84
 80102dc:	f000 8116 	beq.w	801050c <Base64_Decode+0x29e>
                /* Running out of buffer here is not an error */
                break;
            }
            return ret;
 80102e0:	6a3b      	ldr	r3, [r7, #32]
 80102e2:	e129      	b.n	8010538 <Base64_Decode+0x2ca>
        }
        e1 = in[j++];
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	1c5a      	adds	r2, r3, #1
 80102e8:	617a      	str	r2, [r7, #20]
 80102ea:	68fa      	ldr	r2, [r7, #12]
 80102ec:	4413      	add	r3, r2
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	77fb      	strb	r3, [r7, #31]
        if (e1 == '\0') {
 80102f2:	7ffb      	ldrb	r3, [r7, #31]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f000 810b 	beq.w	8010510 <Base64_Decode+0x2a2>
            break;
        }
        inLen--;
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	3b01      	subs	r3, #1
 80102fe:	60bb      	str	r3, [r7, #8]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 8010300:	f107 0214 	add.w	r2, r7, #20
 8010304:	f107 0308 	add.w	r3, r7, #8
 8010308:	4619      	mov	r1, r3
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	f7ff ff4a 	bl	80101a4 <Base64_SkipNewline>
 8010310:	6238      	str	r0, [r7, #32]
 8010312:	6a3b      	ldr	r3, [r7, #32]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d001      	beq.n	801031c <Base64_Decode+0xae>
            return ret;
 8010318:	6a3b      	ldr	r3, [r7, #32]
 801031a:	e10d      	b.n	8010538 <Base64_Decode+0x2ca>
        }
        e2 = in[j++];
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	1c5a      	adds	r2, r3, #1
 8010320:	617a      	str	r2, [r7, #20]
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	4413      	add	r3, r2
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	77bb      	strb	r3, [r7, #30]
        inLen--;
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	3b01      	subs	r3, #1
 801032e:	60bb      	str	r3, [r7, #8]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 8010330:	f107 0214 	add.w	r2, r7, #20
 8010334:	f107 0308 	add.w	r3, r7, #8
 8010338:	4619      	mov	r1, r3
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f7ff ff32 	bl	80101a4 <Base64_SkipNewline>
 8010340:	6238      	str	r0, [r7, #32]
 8010342:	6a3b      	ldr	r3, [r7, #32]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <Base64_Decode+0xde>
            return ret;
 8010348:	6a3b      	ldr	r3, [r7, #32]
 801034a:	e0f5      	b.n	8010538 <Base64_Decode+0x2ca>
        }
        e3 = in[j++];
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	1c5a      	adds	r2, r3, #1
 8010350:	617a      	str	r2, [r7, #20]
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	4413      	add	r3, r2
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	777b      	strb	r3, [r7, #29]
        inLen--;
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	3b01      	subs	r3, #1
 801035e:	60bb      	str	r3, [r7, #8]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 8010360:	f107 0214 	add.w	r2, r7, #20
 8010364:	f107 0308 	add.w	r3, r7, #8
 8010368:	4619      	mov	r1, r3
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f7ff ff1a 	bl	80101a4 <Base64_SkipNewline>
 8010370:	6238      	str	r0, [r7, #32]
 8010372:	6a3b      	ldr	r3, [r7, #32]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <Base64_Decode+0x10e>
            return ret;
 8010378:	6a3b      	ldr	r3, [r7, #32]
 801037a:	e0dd      	b.n	8010538 <Base64_Decode+0x2ca>
        }
        e4 = in[j++];
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	1c5a      	adds	r2, r3, #1
 8010380:	617a      	str	r2, [r7, #20]
 8010382:	68fa      	ldr	r2, [r7, #12]
 8010384:	4413      	add	r3, r2
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	773b      	strb	r3, [r7, #28]
        inLen--;
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	3b01      	subs	r3, #1
 801038e:	60bb      	str	r3, [r7, #8]

        if (e3 == PAD)
 8010390:	7f7b      	ldrb	r3, [r7, #29]
 8010392:	2b3d      	cmp	r3, #61	; 0x3d
 8010394:	d101      	bne.n	801039a <Base64_Decode+0x12c>
            pad3 = 1;
 8010396:	2301      	movs	r3, #1
 8010398:	633b      	str	r3, [r7, #48]	; 0x30
        if (e4 == PAD)
 801039a:	7f3b      	ldrb	r3, [r7, #28]
 801039c:	2b3d      	cmp	r3, #61	; 0x3d
 801039e:	d101      	bne.n	80103a4 <Base64_Decode+0x136>
            pad4 = 1;
 80103a0:	2301      	movs	r3, #1
 80103a2:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (pad3 && !pad4)
 80103a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d005      	beq.n	80103b6 <Base64_Decode+0x148>
 80103aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d102      	bne.n	80103b6 <Base64_Decode+0x148>
            return ASN_INPUT_E;
 80103b0:	f06f 0399 	mvn.w	r3, #153	; 0x99
 80103b4:	e0c0      	b.n	8010538 <Base64_Decode+0x2ca>

#ifndef BASE64_NO_TABLE
        if (e1 < BASE64_MIN || e2 < BASE64_MIN || e3 < BASE64_MIN ||
 80103b6:	7ffb      	ldrb	r3, [r7, #31]
 80103b8:	2b2a      	cmp	r3, #42	; 0x2a
 80103ba:	d908      	bls.n	80103ce <Base64_Decode+0x160>
 80103bc:	7fbb      	ldrb	r3, [r7, #30]
 80103be:	2b2a      	cmp	r3, #42	; 0x2a
 80103c0:	d905      	bls.n	80103ce <Base64_Decode+0x160>
 80103c2:	7f7b      	ldrb	r3, [r7, #29]
 80103c4:	2b2a      	cmp	r3, #42	; 0x2a
 80103c6:	d902      	bls.n	80103ce <Base64_Decode+0x160>
 80103c8:	7f3b      	ldrb	r3, [r7, #28]
 80103ca:	2b2a      	cmp	r3, #42	; 0x2a
 80103cc:	d802      	bhi.n	80103d4 <Base64_Decode+0x166>
                                                              e4 < BASE64_MIN) {
            WOLFSSL_MSG("Bad Base64 Decode data, too small");
            return ASN_INPUT_E;
 80103ce:	f06f 0399 	mvn.w	r3, #153	; 0x99
 80103d2:	e0b1      	b.n	8010538 <Base64_Decode+0x2ca>
        }

        if (e1 > maxIdx || e2 > maxIdx || e3 > maxIdx || e4 > maxIdx) {
 80103d4:	7ffa      	ldrb	r2, [r7, #31]
 80103d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103da:	429a      	cmp	r2, r3
 80103dc:	d80e      	bhi.n	80103fc <Base64_Decode+0x18e>
 80103de:	7fba      	ldrb	r2, [r7, #30]
 80103e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d809      	bhi.n	80103fc <Base64_Decode+0x18e>
 80103e8:	7f7a      	ldrb	r2, [r7, #29]
 80103ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d804      	bhi.n	80103fc <Base64_Decode+0x18e>
 80103f2:	7f3a      	ldrb	r2, [r7, #28]
 80103f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d902      	bls.n	8010402 <Base64_Decode+0x194>
            WOLFSSL_MSG("Bad Base64 Decode data, too big");
            return ASN_INPUT_E;
 80103fc:	f06f 0399 	mvn.w	r3, #153	; 0x99
 8010400:	e09a      	b.n	8010538 <Base64_Decode+0x2ca>
        }
#endif

        if (i + 1 + !pad3 + !pad4 > *outLen) {
 8010402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010404:	2b00      	cmp	r3, #0
 8010406:	bf0c      	ite	eq
 8010408:	2301      	moveq	r3, #1
 801040a:	2300      	movne	r3, #0
 801040c:	b2db      	uxtb	r3, r3
 801040e:	461a      	mov	r2, r3
 8010410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010412:	4413      	add	r3, r2
 8010414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010416:	2a00      	cmp	r2, #0
 8010418:	bf0c      	ite	eq
 801041a:	2201      	moveq	r2, #1
 801041c:	2200      	movne	r2, #0
 801041e:	b2d2      	uxtb	r2, r2
 8010420:	4413      	add	r3, r2
 8010422:	1c5a      	adds	r2, r3, #1
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	429a      	cmp	r2, r3
 801042a:	d902      	bls.n	8010432 <Base64_Decode+0x1c4>
            WOLFSSL_MSG("Bad Base64 Decode out buffer, too small");
            return BAD_FUNC_ARG;
 801042c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8010430:	e082      	b.n	8010538 <Base64_Decode+0x2ca>
        }

        e1 = Base64_Char2Val(e1);
 8010432:	7ffb      	ldrb	r3, [r7, #31]
 8010434:	4618      	mov	r0, r3
 8010436:	f7ff fe83 	bl	8010140 <Base64_Char2Val>
 801043a:	4603      	mov	r3, r0
 801043c:	77fb      	strb	r3, [r7, #31]
        e2 = Base64_Char2Val(e2);
 801043e:	7fbb      	ldrb	r3, [r7, #30]
 8010440:	4618      	mov	r0, r3
 8010442:	f7ff fe7d 	bl	8010140 <Base64_Char2Val>
 8010446:	4603      	mov	r3, r0
 8010448:	77bb      	strb	r3, [r7, #30]
        e3 = (e3 == PAD) ? 0 : Base64_Char2Val(e3);
 801044a:	7f7b      	ldrb	r3, [r7, #29]
 801044c:	2b3d      	cmp	r3, #61	; 0x3d
 801044e:	d005      	beq.n	801045c <Base64_Decode+0x1ee>
 8010450:	7f7b      	ldrb	r3, [r7, #29]
 8010452:	4618      	mov	r0, r3
 8010454:	f7ff fe74 	bl	8010140 <Base64_Char2Val>
 8010458:	4603      	mov	r3, r0
 801045a:	e000      	b.n	801045e <Base64_Decode+0x1f0>
 801045c:	2300      	movs	r3, #0
 801045e:	777b      	strb	r3, [r7, #29]
        e4 = (e4 == PAD) ? 0 : Base64_Char2Val(e4);
 8010460:	7f3b      	ldrb	r3, [r7, #28]
 8010462:	2b3d      	cmp	r3, #61	; 0x3d
 8010464:	d005      	beq.n	8010472 <Base64_Decode+0x204>
 8010466:	7f3b      	ldrb	r3, [r7, #28]
 8010468:	4618      	mov	r0, r3
 801046a:	f7ff fe69 	bl	8010140 <Base64_Char2Val>
 801046e:	4603      	mov	r3, r0
 8010470:	e000      	b.n	8010474 <Base64_Decode+0x206>
 8010472:	2300      	movs	r3, #0
 8010474:	773b      	strb	r3, [r7, #28]

        if (e1 == BAD || e2 == BAD || e3 == BAD || e4 == BAD) {
 8010476:	7ffb      	ldrb	r3, [r7, #31]
 8010478:	2bff      	cmp	r3, #255	; 0xff
 801047a:	d008      	beq.n	801048e <Base64_Decode+0x220>
 801047c:	7fbb      	ldrb	r3, [r7, #30]
 801047e:	2bff      	cmp	r3, #255	; 0xff
 8010480:	d005      	beq.n	801048e <Base64_Decode+0x220>
 8010482:	7f7b      	ldrb	r3, [r7, #29]
 8010484:	2bff      	cmp	r3, #255	; 0xff
 8010486:	d002      	beq.n	801048e <Base64_Decode+0x220>
 8010488:	7f3b      	ldrb	r3, [r7, #28]
 801048a:	2bff      	cmp	r3, #255	; 0xff
 801048c:	d102      	bne.n	8010494 <Base64_Decode+0x226>
            WOLFSSL_MSG("Bad Base64 Decode bad character");
            return ASN_INPUT_E;
 801048e:	f06f 0399 	mvn.w	r3, #153	; 0x99
 8010492:	e051      	b.n	8010538 <Base64_Decode+0x2ca>
        }

        b1 = (byte)((e1 << 2) | (e2 >> 4));
 8010494:	7ffb      	ldrb	r3, [r7, #31]
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	b25a      	sxtb	r2, r3
 801049a:	7fbb      	ldrb	r3, [r7, #30]
 801049c:	091b      	lsrs	r3, r3, #4
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	b25b      	sxtb	r3, r3
 80104a2:	4313      	orrs	r3, r2
 80104a4:	b25b      	sxtb	r3, r3
 80104a6:	76fb      	strb	r3, [r7, #27]
        b2 = (byte)(((e2 & 0xF) << 4) | (e3 >> 2));
 80104a8:	7fbb      	ldrb	r3, [r7, #30]
 80104aa:	011b      	lsls	r3, r3, #4
 80104ac:	b25a      	sxtb	r2, r3
 80104ae:	7f7b      	ldrb	r3, [r7, #29]
 80104b0:	089b      	lsrs	r3, r3, #2
 80104b2:	b2db      	uxtb	r3, r3
 80104b4:	b25b      	sxtb	r3, r3
 80104b6:	4313      	orrs	r3, r2
 80104b8:	b25b      	sxtb	r3, r3
 80104ba:	76bb      	strb	r3, [r7, #26]
        b3 = (byte)(((e3 & 0x3) << 6) | e4);
 80104bc:	7f7b      	ldrb	r3, [r7, #29]
 80104be:	019b      	lsls	r3, r3, #6
 80104c0:	b25a      	sxtb	r2, r3
 80104c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80104c6:	4313      	orrs	r3, r2
 80104c8:	b25b      	sxtb	r3, r3
 80104ca:	767b      	strb	r3, [r7, #25]

        out[i++] = b1;
 80104cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ce:	1c5a      	adds	r2, r3, #1
 80104d0:	637a      	str	r2, [r7, #52]	; 0x34
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	4413      	add	r3, r2
 80104d6:	7efa      	ldrb	r2, [r7, #27]
 80104d8:	701a      	strb	r2, [r3, #0]
        if (!pad3)
 80104da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d106      	bne.n	80104ee <Base64_Decode+0x280>
            out[i++] = b2;
 80104e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e2:	1c5a      	adds	r2, r3, #1
 80104e4:	637a      	str	r2, [r7, #52]	; 0x34
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	4413      	add	r3, r2
 80104ea:	7eba      	ldrb	r2, [r7, #26]
 80104ec:	701a      	strb	r2, [r3, #0]
        if (!pad4)
 80104ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10f      	bne.n	8010514 <Base64_Decode+0x2a6>
            out[i++] = b3;
 80104f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104f6:	1c5a      	adds	r2, r3, #1
 80104f8:	637a      	str	r2, [r7, #52]	; 0x34
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	4413      	add	r3, r2
 80104fe:	7e7a      	ldrb	r2, [r7, #25]
 8010500:	701a      	strb	r2, [r3, #0]
    while (inLen > 3) {
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	2b03      	cmp	r3, #3
 8010506:	f63f aed6 	bhi.w	80102b6 <Base64_Decode+0x48>
 801050a:	e004      	b.n	8010516 <Base64_Decode+0x2a8>
                break;
 801050c:	bf00      	nop
 801050e:	e002      	b.n	8010516 <Base64_Decode+0x2a8>
            break;
 8010510:	bf00      	nop
 8010512:	e000      	b.n	8010516 <Base64_Decode+0x2a8>
        else
            break;
 8010514:	bf00      	nop
    }
/* If the output buffer has a room for an extra byte, add a null terminator */
    if (out && *outLen > i)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d009      	beq.n	8010530 <Base64_Decode+0x2c2>
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010522:	429a      	cmp	r2, r3
 8010524:	d204      	bcs.n	8010530 <Base64_Decode+0x2c2>
        out[i]= '\0';
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052a:	4413      	add	r3, r2
 801052c:	2200      	movs	r2, #0
 801052e:	701a      	strb	r2, [r3, #0]

    *outLen = i;
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010534:	601a      	str	r2, [r3, #0]

    return 0;
 8010536:	2300      	movs	r3, #0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3738      	adds	r7, #56	; 0x38
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <wc_ecc_curve_cache_free_spec_item>:
    #define FREE_CURVE_SPECS()
#endif /* ECC_CACHE_CURVE */

static void wc_ecc_curve_cache_free_spec_item(ecc_curve_spec* curve, mp_int* item,
    byte mask)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	4613      	mov	r3, r2
 801054c:	71fb      	strb	r3, [r7, #7]
    if (item) {
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d002      	beq.n	801055a <wc_ecc_curve_cache_free_spec_item+0x1a>
    #ifdef HAVE_WOLF_BIGINT
        wc_bigint_free(&item->raw);
    #endif
        mp_clear(item);
 8010554:	68b8      	ldr	r0, [r7, #8]
 8010556:	f00a fd3c 	bl	801afd2 <sp_clear>
    }
    curve->load_mask &= ~mask;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010560:	b25a      	sxtb	r2, r3
 8010562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010566:	43db      	mvns	r3, r3
 8010568:	b25b      	sxtb	r3, r3
 801056a:	4013      	ands	r3, r2
 801056c:	b25b      	sxtb	r3, r3
 801056e:	b2da      	uxtb	r2, r3
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8010576:	bf00      	nop
 8010578:	3710      	adds	r7, #16
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}

0801057e <wc_ecc_curve_cache_free_spec>:
static void wc_ecc_curve_cache_free_spec(ecc_curve_spec* curve)
{
 801057e:	b580      	push	{r7, lr}
 8010580:	b082      	sub	sp, #8
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
    if (curve == NULL) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d04a      	beq.n	8010622 <wc_ecc_curve_cache_free_spec+0xa4>
        return;
    }

    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010592:	f003 0301 	and.w	r3, r3, #1
 8010596:	2b00      	cmp	r3, #0
 8010598:	d006      	beq.n	80105a8 <wc_ecc_curve_cache_free_spec+0x2a>
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	4619      	mov	r1, r3
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7ff ffcc 	bl	8010540 <wc_ecc_curve_cache_free_spec_item>
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80105ae:	f003 0302 	and.w	r3, r3, #2
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d006      	beq.n	80105c4 <wc_ecc_curve_cache_free_spec+0x46>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	689b      	ldr	r3, [r3, #8]
 80105ba:	2202      	movs	r2, #2
 80105bc:	4619      	mov	r1, r3
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f7ff ffbe 	bl	8010540 <wc_ecc_curve_cache_free_spec_item>
#ifdef USE_ECC_B_PARAM
    if (curve->load_mask & ECC_CURVE_FIELD_BF)
        wc_ecc_curve_cache_free_spec_item(curve, curve->Bf, ECC_CURVE_FIELD_BF);
#endif
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80105ca:	f003 0308 	and.w	r3, r3, #8
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d006      	beq.n	80105e0 <wc_ecc_curve_cache_free_spec+0x62>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	2208      	movs	r2, #8
 80105d8:	4619      	mov	r1, r3
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f7ff ffb0 	bl	8010540 <wc_ecc_curve_cache_free_spec_item>
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80105e6:	f003 0310 	and.w	r3, r3, #16
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d006      	beq.n	80105fc <wc_ecc_curve_cache_free_spec+0x7e>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	2210      	movs	r2, #16
 80105f4:	4619      	mov	r1, r3
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7ff ffa2 	bl	8010540 <wc_ecc_curve_cache_free_spec_item>
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010602:	f003 0320 	and.w	r3, r3, #32
 8010606:	2b00      	cmp	r3, #0
 8010608:	d006      	beq.n	8010618 <wc_ecc_curve_cache_free_spec+0x9a>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	695b      	ldr	r3, [r3, #20]
 801060e:	2220      	movs	r2, #32
 8010610:	4619      	mov	r1, r3
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f7ff ff94 	bl	8010540 <wc_ecc_curve_cache_free_spec_item>

    curve->load_mask = 0;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010620:	e000      	b.n	8010624 <wc_ecc_curve_cache_free_spec+0xa6>
        return;
 8010622:	bf00      	nop
}
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <wc_ecc_curve_free>:

static void wc_ecc_curve_free(ecc_curve_spec* curve)
{
 801062a:	b580      	push	{r7, lr}
 801062c:	b082      	sub	sp, #8
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
    if (curve) {
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d002      	beq.n	801063e <wc_ecc_curve_free+0x14>
            wc_ecc_curve_cache_free_spec(curve);
            XFREE(curve, NULL, DYNAMIC_TYPE_ECC);
        }
        #endif
    #else
        wc_ecc_curve_cache_free_spec(curve);
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f7ff ffa0 	bl	801057e <wc_ecc_curve_cache_free_spec>
    #endif
    }
}
 801063e:	bf00      	nop
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}

08010646 <wc_ecc_curve_cache_load_item>:

static int wc_ecc_curve_cache_load_item(ecc_curve_spec* curve, const char* src, 
    mp_int** dst, byte mask)
{
 8010646:	b580      	push	{r7, lr}
 8010648:	b086      	sub	sp, #24
 801064a:	af00      	add	r7, sp, #0
 801064c:	60f8      	str	r0, [r7, #12]
 801064e:	60b9      	str	r1, [r7, #8]
 8010650:	607a      	str	r2, [r7, #4]
 8010652:	70fb      	strb	r3, [r7, #3]
    int err;

#ifndef ECC_CACHE_CURVE
    /* get mp_int from temp */
    if (curve->spec_use >= curve->spec_count) {
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	6a1a      	ldr	r2, [r3, #32]
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	69db      	ldr	r3, [r3, #28]
 801065c:	429a      	cmp	r2, r3
 801065e:	d302      	bcc.n	8010666 <wc_ecc_curve_cache_load_item+0x20>
        WOLFSSL_MSG("Invalid DECLARE_CURVE_SPECS count");
        return ECC_BAD_ARG_E;
 8010660:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8010664:	e028      	b.n	80106b8 <wc_ecc_curve_cache_load_item+0x72>
    }
    *dst = &curve->spec_ints[curve->spec_use++];
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	699a      	ldr	r2, [r3, #24]
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6a1b      	ldr	r3, [r3, #32]
 801066e:	1c58      	adds	r0, r3, #1
 8010670:	68f9      	ldr	r1, [r7, #12]
 8010672:	6208      	str	r0, [r1, #32]
 8010674:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8010678:	fb01 f303 	mul.w	r3, r1, r3
 801067c:	441a      	add	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	601a      	str	r2, [r3, #0]
#endif

    err = mp_init(*dst);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4618      	mov	r0, r3
 8010688:	f00a fbf2 	bl	801ae70 <sp_init>
 801068c:	6178      	str	r0, [r7, #20]
    if (err == MP_OKAY) {
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d110      	bne.n	80106b6 <wc_ecc_curve_cache_load_item+0x70>
        curve->load_mask |= mask;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801069a:	78fb      	ldrb	r3, [r7, #3]
 801069c:	4313      	orrs	r3, r2
 801069e:	b2da      	uxtb	r2, r3
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	2210      	movs	r2, #16
 80106ac:	68b9      	ldr	r1, [r7, #8]
 80106ae:	4618      	mov	r0, r3
 80106b0:	f00b f824 	bl	801b6fc <sp_read_radix>
 80106b4:	6178      	str	r0, [r7, #20]
    #ifdef HAVE_WOLF_BIGINT
        if (err == MP_OKAY)
            err = wc_mp_to_bigint(*dst, &(*dst)->raw);
    #endif
    }
    return err;
 80106b6:	697b      	ldr	r3, [r7, #20]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3718      	adds	r7, #24
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <wc_ecc_curve_load>:

static int wc_ecc_curve_load(const ecc_set_type* dp, ecc_curve_spec** pCurve,
    byte load_mask)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b088      	sub	sp, #32
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	4613      	mov	r3, r2
 80106cc:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 80106ce:	2300      	movs	r3, #0
 80106d0:	61fb      	str	r3, [r7, #28]
    ecc_curve_spec* curve;
    byte load_items = 0; /* mask of items to load */
 80106d2:	2300      	movs	r3, #0
 80106d4:	76fb      	strb	r3, [r7, #27]
#ifdef ECC_CACHE_CURVE
    int x;
#endif

    if (dp == NULL || pCurve == NULL)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d002      	beq.n	80106e2 <wc_ecc_curve_load+0x22>
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d102      	bne.n	80106e8 <wc_ecc_curve_load+0x28>
        return BAD_FUNC_ARG;
 80106e2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80106e6:	e082      	b.n	80107ee <wc_ecc_curve_load+0x12e>
        curve = ecc_curve_spec_cache[x];
    }
    /* return new or cached curve */
    *pCurve = curve;
#else
    curve = *pCurve;
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	617b      	str	r3, [r7, #20]
#endif /* ECC_CACHE_CURVE */

    /* make sure the curve is initialized */
    if (curve->dp != dp) {
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d003      	beq.n	8010700 <wc_ecc_curve_load+0x40>
        curve->load_mask = 0;
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	2200      	movs	r2, #0
 80106fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        curve->order = &curve->order_lcl;
        curve->Gx = &curve->Gx_lcl;
        curve->Gy = &curve->Gy_lcl;
    #endif
    }
    curve->dp = dp; /* set dp info */
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	601a      	str	r2, [r3, #0]

    /* determine items to load */
    load_items = (((byte)~(word32)curve->load_mask) & load_mask);
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801070c:	43db      	mvns	r3, r3
 801070e:	b2da      	uxtb	r2, r3
 8010710:	79fb      	ldrb	r3, [r7, #7]
 8010712:	4013      	ands	r3, r2
 8010714:	76fb      	strb	r3, [r7, #27]
    curve->load_mask |= load_items;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801071c:	7efb      	ldrb	r3, [r7, #27]
 801071e:	4313      	orrs	r3, r2
 8010720:	b2da      	uxtb	r2, r3
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* load items */
    if (load_items & ECC_CURVE_FIELD_PRIME)
 8010728:	7efb      	ldrb	r3, [r7, #27]
 801072a:	f003 0301 	and.w	r3, r3, #1
 801072e:	2b00      	cmp	r3, #0
 8010730:	d00b      	beq.n	801074a <wc_ecc_curve_load+0x8a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	68d9      	ldr	r1, [r3, #12]
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	1d1a      	adds	r2, r3, #4
 801073a:	2301      	movs	r3, #1
 801073c:	6978      	ldr	r0, [r7, #20]
 801073e:	f7ff ff82 	bl	8010646 <wc_ecc_curve_cache_load_item>
 8010742:	4602      	mov	r2, r0
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	4413      	add	r3, r2
 8010748:	61fb      	str	r3, [r7, #28]
            ECC_CURVE_FIELD_PRIME);
    if (load_items & ECC_CURVE_FIELD_AF)
 801074a:	7efb      	ldrb	r3, [r7, #27]
 801074c:	f003 0302 	and.w	r3, r3, #2
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00c      	beq.n	801076e <wc_ecc_curve_load+0xae>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Af, &curve->Af,
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	6919      	ldr	r1, [r3, #16]
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	f103 0208 	add.w	r2, r3, #8
 801075e:	2302      	movs	r3, #2
 8010760:	6978      	ldr	r0, [r7, #20]
 8010762:	f7ff ff70 	bl	8010646 <wc_ecc_curve_cache_load_item>
 8010766:	4602      	mov	r2, r0
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	4413      	add	r3, r2
 801076c:	61fb      	str	r3, [r7, #28]
#ifdef USE_ECC_B_PARAM
    if (load_items & ECC_CURVE_FIELD_BF)
        ret += wc_ecc_curve_cache_load_item(curve, dp->Bf, &curve->Bf,
            ECC_CURVE_FIELD_BF);
#endif
    if (load_items & ECC_CURVE_FIELD_ORDER)
 801076e:	7efb      	ldrb	r3, [r7, #27]
 8010770:	f003 0308 	and.w	r3, r3, #8
 8010774:	2b00      	cmp	r3, #0
 8010776:	d00c      	beq.n	8010792 <wc_ecc_curve_load+0xd2>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6999      	ldr	r1, [r3, #24]
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	f103 020c 	add.w	r2, r3, #12
 8010782:	2308      	movs	r3, #8
 8010784:	6978      	ldr	r0, [r7, #20]
 8010786:	f7ff ff5e 	bl	8010646 <wc_ecc_curve_cache_load_item>
 801078a:	4602      	mov	r2, r0
 801078c:	69fb      	ldr	r3, [r7, #28]
 801078e:	4413      	add	r3, r2
 8010790:	61fb      	str	r3, [r7, #28]
            ECC_CURVE_FIELD_ORDER);
    if (load_items & ECC_CURVE_FIELD_GX)
 8010792:	7efb      	ldrb	r3, [r7, #27]
 8010794:	f003 0310 	and.w	r3, r3, #16
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00c      	beq.n	80107b6 <wc_ecc_curve_load+0xf6>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	69d9      	ldr	r1, [r3, #28]
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	f103 0210 	add.w	r2, r3, #16
 80107a6:	2310      	movs	r3, #16
 80107a8:	6978      	ldr	r0, [r7, #20]
 80107aa:	f7ff ff4c 	bl	8010646 <wc_ecc_curve_cache_load_item>
 80107ae:	4602      	mov	r2, r0
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	4413      	add	r3, r2
 80107b4:	61fb      	str	r3, [r7, #28]
            ECC_CURVE_FIELD_GX);
    if (load_items & ECC_CURVE_FIELD_GY)
 80107b6:	7efb      	ldrb	r3, [r7, #27]
 80107b8:	f003 0320 	and.w	r3, r3, #32
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d00c      	beq.n	80107da <wc_ecc_curve_load+0x11a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6a19      	ldr	r1, [r3, #32]
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	f103 0214 	add.w	r2, r3, #20
 80107ca:	2320      	movs	r3, #32
 80107cc:	6978      	ldr	r0, [r7, #20]
 80107ce:	f7ff ff3a 	bl	8010646 <wc_ecc_curve_cache_load_item>
 80107d2:	4602      	mov	r2, r0
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	4413      	add	r3, r2
 80107d8:	61fb      	str	r3, [r7, #28]
            ECC_CURVE_FIELD_GY);

    /* check for error */
    if (ret != 0) {
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d005      	beq.n	80107ec <wc_ecc_curve_load+0x12c>
        wc_ecc_curve_free(curve);
 80107e0:	6978      	ldr	r0, [r7, #20]
 80107e2:	f7ff ff22 	bl	801062a <wc_ecc_curve_free>
        ret = MP_READ_E;
 80107e6:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 80107ea:	61fb      	str	r3, [r7, #28]

#if defined(ECC_CACHE_CURVE) && !defined(SINGLE_THREADED)
    wc_UnLockMutex(&ecc_curve_cache_mutex);
#endif

    return ret;
 80107ec:	69fb      	ldr	r3, [r7, #28]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3720      	adds	r7, #32
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
	...

080107f8 <wc_ecc_set_curve>:
        return NULL;
    return ecc_sets[curve_idx].name;
}

int wc_ecc_set_curve(ecc_key* key, int keysize, int curve_id)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b087      	sub	sp, #28
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	607a      	str	r2, [r7, #4]
    if (keysize <= 0 && curve_id < 0) {
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	dc05      	bgt.n	8010816 <wc_ecc_set_curve+0x1e>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	da02      	bge.n	8010816 <wc_ecc_set_curve+0x1e>
        return BAD_FUNC_ARG;
 8010810:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8010814:	e052      	b.n	80108bc <wc_ecc_set_curve+0xc4>
    }

    if (keysize > ECC_MAXSIZE) {
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	2b42      	cmp	r3, #66	; 0x42
 801081a:	dd02      	ble.n	8010822 <wc_ecc_set_curve+0x2a>
        return ECC_BAD_ARG_E;
 801081c:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8010820:	e04c      	b.n	80108bc <wc_ecc_set_curve+0xc4>
    }

    /* handle custom case */
    if (key->idx != ECC_CUSTOM_IDX) {
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801082a:	d046      	beq.n	80108ba <wc_ecc_set_curve+0xc2>
        int x;

        /* default values */
        key->idx = 0;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	605a      	str	r2, [r3, #4]
        key->dp = NULL;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2200      	movs	r2, #0
 8010836:	611a      	str	r2, [r3, #16]

        /* find ecc_set based on curve_id or key size */
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8010838:	2300      	movs	r3, #0
 801083a:	617b      	str	r3, [r7, #20]
 801083c:	e01b      	b.n	8010876 <wc_ecc_set_curve+0x7e>
            if (curve_id > ECC_CURVE_DEF) {
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	dd0b      	ble.n	801085c <wc_ecc_set_curve+0x64>
                if (curve_id == ecc_sets[x].id)
 8010844:	4a20      	ldr	r2, [pc, #128]	; (80108c8 <wc_ecc_set_curve+0xd0>)
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	2134      	movs	r1, #52	; 0x34
 801084a:	fb01 f303 	mul.w	r3, r1, r3
 801084e:	4413      	add	r3, r2
 8010850:	3304      	adds	r3, #4
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	429a      	cmp	r2, r3
 8010858:	d10a      	bne.n	8010870 <wc_ecc_set_curve+0x78>
                  break;
 801085a:	e017      	b.n	801088c <wc_ecc_set_curve+0x94>
            }
            else if (keysize <= ecc_sets[x].size) {
 801085c:	4a1a      	ldr	r2, [pc, #104]	; (80108c8 <wc_ecc_set_curve+0xd0>)
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	2134      	movs	r1, #52	; 0x34
 8010862:	fb01 f303 	mul.w	r3, r1, r3
 8010866:	4413      	add	r3, r2
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	68ba      	ldr	r2, [r7, #8]
 801086c:	429a      	cmp	r2, r3
 801086e:	dd0c      	ble.n	801088a <wc_ecc_set_curve+0x92>
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	3301      	adds	r3, #1
 8010874:	617b      	str	r3, [r7, #20]
 8010876:	4a14      	ldr	r2, [pc, #80]	; (80108c8 <wc_ecc_set_curve+0xd0>)
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	2134      	movs	r1, #52	; 0x34
 801087c:	fb01 f303 	mul.w	r3, r1, r3
 8010880:	4413      	add	r3, r2
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d1da      	bne.n	801083e <wc_ecc_set_curve+0x46>
 8010888:	e000      	b.n	801088c <wc_ecc_set_curve+0x94>
                break;
 801088a:	bf00      	nop
            }
        }
        if (ecc_sets[x].size == 0) {
 801088c:	4a0e      	ldr	r2, [pc, #56]	; (80108c8 <wc_ecc_set_curve+0xd0>)
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	2134      	movs	r1, #52	; 0x34
 8010892:	fb01 f303 	mul.w	r3, r1, r3
 8010896:	4413      	add	r3, r2
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d102      	bne.n	80108a4 <wc_ecc_set_curve+0xac>
            WOLFSSL_MSG("ECC Curve not found");
            return ECC_CURVE_OID_E;
 801089e:	f06f 03ab 	mvn.w	r3, #171	; 0xab
 80108a2:	e00b      	b.n	80108bc <wc_ecc_set_curve+0xc4>
        }

        key->idx = x;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	605a      	str	r2, [r3, #4]
        key->dp  = &ecc_sets[x];
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	2234      	movs	r2, #52	; 0x34
 80108ae:	fb02 f303 	mul.w	r3, r2, r3
 80108b2:	4a05      	ldr	r2, [pc, #20]	; (80108c8 <wc_ecc_set_curve+0xd0>)
 80108b4:	441a      	add	r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	611a      	str	r2, [r3, #16]
    }

    return 0;
 80108ba:	2300      	movs	r3, #0
}
 80108bc:	4618      	mov	r0, r3
 80108be:	371c      	adds	r7, #28
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr
 80108c8:	0801e63c 	.word	0x0801e63c

080108cc <alt_fp_init>:


#ifdef ALT_ECC_SIZE
static void alt_fp_init(mp_int* a)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
    a->size = FP_SIZE_ECC;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2210      	movs	r2, #16
 80108d8:	605a      	str	r2, [r3, #4]
    mp_zero(a);
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f00a fb6b 	bl	801afb6 <sp_zero>
}
 80108e0:	bf00      	nop
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <wc_ecc_is_valid_idx>:
/** Returns whether an ECC idx is valid or not
  n      The idx number to check
  return 1 if valid, 0 if not
*/
int wc_ecc_is_valid_idx(int n)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b085      	sub	sp, #20
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
   int x;

   for (x = 0; ecc_sets[x].size != 0; x++)
 80108f0:	2300      	movs	r3, #0
 80108f2:	60fb      	str	r3, [r7, #12]
 80108f4:	e002      	b.n	80108fc <wc_ecc_is_valid_idx+0x14>
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	3301      	adds	r3, #1
 80108fa:	60fb      	str	r3, [r7, #12]
 80108fc:	4a0c      	ldr	r2, [pc, #48]	; (8010930 <wc_ecc_is_valid_idx+0x48>)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	2134      	movs	r1, #52	; 0x34
 8010902:	fb01 f303 	mul.w	r3, r1, r3
 8010906:	4413      	add	r3, r2
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d1f3      	bne.n	80108f6 <wc_ecc_is_valid_idx+0xe>
       ;
   /* -1 is a valid index --- indicating that the domain params
      were supplied by the user */
   if ((n >= ECC_CUSTOM_IDX) && (n < x)) {
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010914:	db05      	blt.n	8010922 <wc_ecc_is_valid_idx+0x3a>
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	429a      	cmp	r2, r3
 801091c:	da01      	bge.n	8010922 <wc_ecc_is_valid_idx+0x3a>
      return 1;
 801091e:	2301      	movs	r3, #1
 8010920:	e000      	b.n	8010924 <wc_ecc_is_valid_idx+0x3c>
   }

   return 0;
 8010922:	2300      	movs	r3, #0
}
 8010924:	4618      	mov	r0, r3
 8010926:	3714      	adds	r7, #20
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr
 8010930:	0801e63c 	.word	0x0801e63c

08010934 <wc_ecc_get_curve_idx>:

int wc_ecc_get_curve_idx(int curve_id)
{
 8010934:	b480      	push	{r7}
 8010936:	b085      	sub	sp, #20
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
    int curve_idx;
    for (curve_idx = 0; ecc_sets[curve_idx].size != 0; curve_idx++) {
 801093c:	2300      	movs	r3, #0
 801093e:	60fb      	str	r3, [r7, #12]
 8010940:	e00d      	b.n	801095e <wc_ecc_get_curve_idx+0x2a>
        if (curve_id == ecc_sets[curve_idx].id)
 8010942:	4a16      	ldr	r2, [pc, #88]	; (801099c <wc_ecc_get_curve_idx+0x68>)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2134      	movs	r1, #52	; 0x34
 8010948:	fb01 f303 	mul.w	r3, r1, r3
 801094c:	4413      	add	r3, r2
 801094e:	3304      	adds	r3, #4
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	429a      	cmp	r2, r3
 8010956:	d00c      	beq.n	8010972 <wc_ecc_get_curve_idx+0x3e>
    for (curve_idx = 0; ecc_sets[curve_idx].size != 0; curve_idx++) {
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	3301      	adds	r3, #1
 801095c:	60fb      	str	r3, [r7, #12]
 801095e:	4a0f      	ldr	r2, [pc, #60]	; (801099c <wc_ecc_get_curve_idx+0x68>)
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2134      	movs	r1, #52	; 0x34
 8010964:	fb01 f303 	mul.w	r3, r1, r3
 8010968:	4413      	add	r3, r2
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d1e8      	bne.n	8010942 <wc_ecc_get_curve_idx+0xe>
 8010970:	e000      	b.n	8010974 <wc_ecc_get_curve_idx+0x40>
            break;
 8010972:	bf00      	nop
    }
    if (ecc_sets[curve_idx].size == 0) {
 8010974:	4a09      	ldr	r2, [pc, #36]	; (801099c <wc_ecc_get_curve_idx+0x68>)
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	2134      	movs	r1, #52	; 0x34
 801097a:	fb01 f303 	mul.w	r3, r1, r3
 801097e:	4413      	add	r3, r2
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d102      	bne.n	801098c <wc_ecc_get_curve_idx+0x58>
        return ECC_CURVE_INVALID;
 8010986:	f04f 33ff 	mov.w	r3, #4294967295
 801098a:	e000      	b.n	801098e <wc_ecc_get_curve_idx+0x5a>
    }
    return curve_idx;
 801098c:	68fb      	ldr	r3, [r7, #12]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3714      	adds	r7, #20
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop
 801099c:	0801e63c 	.word	0x0801e63c

080109a0 <wc_ecc_get_curve_size_from_id>:
 *
 * id      curve id, from ecc_curve_id enum in ecc.h
 * return  curve size, from ecc_sets[] on success, negative on error
 */
int wc_ecc_get_curve_size_from_id(int curve_id)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
    int curve_idx = wc_ecc_get_curve_idx(curve_id);
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff ffc3 	bl	8010934 <wc_ecc_get_curve_idx>
 80109ae:	60f8      	str	r0, [r7, #12]
    if (curve_idx == ECC_CURVE_INVALID)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b6:	d102      	bne.n	80109be <wc_ecc_get_curve_size_from_id+0x1e>
        return ECC_BAD_ARG_E;
 80109b8:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 80109bc:	e006      	b.n	80109cc <wc_ecc_get_curve_size_from_id+0x2c>
    return ecc_sets[curve_idx].size;
 80109be:	4a05      	ldr	r2, [pc, #20]	; (80109d4 <wc_ecc_get_curve_size_from_id+0x34>)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2134      	movs	r1, #52	; 0x34
 80109c4:	fb01 f303 	mul.w	r3, r1, r3
 80109c8:	4413      	add	r3, r2
 80109ca:	681b      	ldr	r3, [r3, #0]
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3710      	adds	r7, #16
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	0801e63c 	.word	0x0801e63c

080109d8 <wc_ecc_reset>:
    return NOT_COMPILED_IN;
#endif /* !WC_NO_RNG */
}

static WC_INLINE void wc_ecc_reset(ecc_key* key)
{
 80109d8:	b480      	push	{r7}
 80109da:	b083      	sub	sp, #12
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
    /* make sure required key variables are reset */
    key->state = ECC_STATE_NONE;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2200      	movs	r2, #0
 80109e4:	609a      	str	r2, [r3, #8]
}
 80109e6:	bf00      	nop
 80109e8:	370c      	adds	r7, #12
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr
	...

080109f4 <ecc_make_pub_ex>:
 *
 * returns MP_OKAY on success
 */
static int ecc_make_pub_ex(ecc_key* key, ecc_curve_spec* curveIn,
        ecc_point* pubOut, WC_RNG* rng)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b094      	sub	sp, #80	; 0x50
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
 8010a00:	603b      	str	r3, [r7, #0]
    int err = MP_OKAY;
 8010a02:	2300      	movs	r3, #0
 8010a04:	64fb      	str	r3, [r7, #76]	; 0x4c
  && !defined(WOLFSSL_SILABS_SE_ACCEL)
#if !defined(WOLFSSL_SP_MATH)
    ecc_point* base = NULL;
#endif
    ecc_point* pub;
    DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);
 8010a06:	2300      	movs	r3, #0
 8010a08:	647b      	str	r3, [r7, #68]	; 0x44
 8010a0a:	f107 0318 	add.w	r3, r7, #24
 8010a0e:	617b      	str	r3, [r7, #20]
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	2228      	movs	r2, #40	; 0x28
 8010a14:	2100      	movs	r1, #0
 8010a16:	4618      	mov	r0, r3
 8010a18:	f00b f81f 	bl	801ba5a <memset>
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	2205      	movs	r2, #5
 8010a20:	61da      	str	r2, [r3, #28]
#endif /* !WOLFSSL_ATECC508A */

    (void)rng;

    if (key == NULL) {
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <ecc_make_pub_ex+0x3a>
        return BAD_FUNC_ARG;
 8010a28:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8010a2c:	e09f      	b.n	8010b6e <ecc_make_pub_ex+0x17a>

#if !defined(WOLFSSL_ATECC508A) && !defined(WOLFSSL_ATECC608A) \
  && !defined(WOLFSSL_SILABS_SE_ACCEL)

    /* if ecc_point passed in then use it as output for public key point */
    if (pubOut != NULL) {
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d002      	beq.n	8010a3a <ecc_make_pub_ex+0x46>
        pub = pubOut;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a38:	e005      	b.n	8010a46 <ecc_make_pub_ex+0x52>
    }
    else {
        /* caching public key making it a ECC_PRIVATEKEY instead of
           ECC_PRIVATEKEY_ONLY */
        pub = &key->pubkey;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	3318      	adds	r3, #24
 8010a3e:	64bb      	str	r3, [r7, #72]	; 0x48
        key->type = ECC_PRIVATEKEY_ONLY;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2203      	movs	r2, #3
 8010a44:	601a      	str	r2, [r3, #0]
    }

    /* avoid loading the curve unless it is not passed in */
    if (curveIn != NULL) {
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d002      	beq.n	8010a52 <ecc_make_pub_ex+0x5e>
        curve = curveIn;
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	617b      	str	r3, [r7, #20]
 8010a50:	e019      	b.n	8010a86 <ecc_make_pub_ex+0x92>
    }
    else {
        /* load curve info */
        if (err == MP_OKAY) {
 8010a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d116      	bne.n	8010a86 <ecc_make_pub_ex+0x92>
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 8010a58:	f640 703c 	movw	r0, #3900	; 0xf3c
 8010a5c:	f000 fcfe 	bl	801145c <wolfSSL_Malloc>
 8010a60:	6478      	str	r0, [r7, #68]	; 0x44
 8010a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d102      	bne.n	8010a6e <ecc_make_pub_ex+0x7a>
 8010a68:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8010a6c:	e07f      	b.n	8010b6e <ecc_make_pub_ex+0x17a>
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a72:	619a      	str	r2, [r3, #24]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	691b      	ldr	r3, [r3, #16]
 8010a78:	f107 0114 	add.w	r1, r7, #20
 8010a7c:	223b      	movs	r2, #59	; 0x3b
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7ff fe1e 	bl	80106c0 <wc_ecc_curve_load>
 8010a84:	64f8      	str	r0, [r7, #76]	; 0x4c
        }
    }

    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8010a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d114      	bne.n	8010ab6 <ecc_make_pub_ex+0xc2>
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d00c      	beq.n	8010ab0 <ecc_make_pub_ex+0xbc>
                                      (mp_cmp(&key->k, curve->order) != MP_LT)))
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	68db      	ldr	r3, [r3, #12]
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	4610      	mov	r0, r2
 8010aa4:	f00a fb25 	bl	801b0f2 <sp_cmp>
 8010aa8:	4603      	mov	r3, r0
    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8010aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aae:	d002      	beq.n	8010ab6 <ecc_make_pub_ex+0xc2>
    {
        err = ECC_PRIV_KEY_E;
 8010ab0:	f06f 03d7 	mvn.w	r3, #215	; 0xd7
 8010ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if (err == MP_OKAY) {
 8010ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d11d      	bne.n	8010af8 <ecc_make_pub_ex+0x104>
    #ifndef ALT_ECC_SIZE
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
    #else
        pub->x = (mp_int*)&pub->xyz[0];
 8010abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010abe:	f103 020c 	add.w	r2, r3, #12
 8010ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac4:	601a      	str	r2, [r3, #0]
        pub->y = (mp_int*)&pub->xyz[1];
 8010ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac8:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8010acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ace:	605a      	str	r2, [r3, #4]
        pub->z = (mp_int*)&pub->xyz[2];
 8010ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ad2:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 8010ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ad8:	609a      	str	r2, [r3, #8]
        alt_fp_init(pub->x);
 8010ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7ff fef4 	bl	80108cc <alt_fp_init>
        alt_fp_init(pub->y);
 8010ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff feef 	bl	80108cc <alt_fp_init>
        alt_fp_init(pub->z);
 8010aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010af0:	689b      	ldr	r3, [r3, #8]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff feea 	bl	80108cc <alt_fp_init>
    #endif
    }

    if (err != MP_OKAY) {
 8010af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d11d      	bne.n	8010b3a <ecc_make_pub_ex+0x146>
    }
    else
#ifdef WOLFSSL_HAVE_SP_ECC
#ifndef WOLFSSL_SP_NO_256
    if (key->idx != ECC_CUSTOM_IDX && ecc_sets[key->idx].id == ECC_SECP256R1) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b06:	d015      	beq.n	8010b34 <ecc_make_pub_ex+0x140>
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	4a1a      	ldr	r2, [pc, #104]	; (8010b78 <ecc_make_pub_ex+0x184>)
 8010b0e:	2134      	movs	r1, #52	; 0x34
 8010b10:	fb01 f303 	mul.w	r3, r1, r3
 8010b14:	4413      	add	r3, r2
 8010b16:	3304      	adds	r3, #4
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b07      	cmp	r3, #7
 8010b1c:	d10a      	bne.n	8010b34 <ecc_make_pub_ex+0x140>
        err = sp_ecc_mulmod_base_256(&key->k, pub, 1, key->heap);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	f503 7084 	add.w	r0, r3, #264	; 0x108
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	695b      	ldr	r3, [r3, #20]
 8010b28:	2201      	movs	r2, #1
 8010b2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010b2c:	f008 ffea 	bl	8019b04 <sp_ecc_mulmod_base_256>
 8010b30:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010b32:	e002      	b.n	8010b3a <ecc_make_pub_ex+0x146>
    }
    else
#endif
#endif
#if defined(WOLFSSL_SP_MATH)
        err = WC_KEY_SIZE_E;
 8010b34:	f06f 03e9 	mvn.w	r3, #233	; 0xe9
 8010b38:	64fb      	str	r3, [r7, #76]	; 0x4c
        mp_clear(pub->z);
    #endif
    }

    /* free up local curve */
    if (curveIn == NULL) {
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d10b      	bne.n	8010b58 <ecc_make_pub_ex+0x164>
        wc_ecc_curve_free(curve);
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7ff fd71 	bl	801062a <wc_ecc_curve_free>
        FREE_CURVE_SPECS();
 8010b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8010b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d002      	beq.n	8010b58 <ecc_make_pub_ex+0x164>
 8010b52:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010b54:	f000 fc9e 	bl	8011494 <wolfSSL_Free>
    (void)curveIn;
    err = NOT_COMPILED_IN;
#endif /* WOLFSSL_ATECC508A || WOLFSSL_SILABS_SE_ACCEL */

    /* change key state if public part is cached */
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b03      	cmp	r3, #3
 8010b5e:	d105      	bne.n	8010b6c <ecc_make_pub_ex+0x178>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d102      	bne.n	8010b6c <ecc_make_pub_ex+0x178>
        key->type = ECC_PRIVATEKEY;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2202      	movs	r2, #2
 8010b6a:	601a      	str	r2, [r3, #0]
    }

    return err;
 8010b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3750      	adds	r7, #80	; 0x50
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	0801e63c 	.word	0x0801e63c

08010b7c <wc_ecc_init_ex>:
}

/* Setup dynamic pointers if using normal math for proper freeing */
WOLFSSL_ABI
int wc_ecc_init_ex(ecc_key* key, void* heap, int devId)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b086      	sub	sp, #24
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	607a      	str	r2, [r7, #4]
    int ret = 0;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	617b      	str	r3, [r7, #20]

    if (key == NULL) {
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d102      	bne.n	8010b98 <wc_ecc_init_ex+0x1c>
        return BAD_FUNC_ARG;
 8010b92:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8010b96:	e037      	b.n	8010c08 <wc_ecc_init_ex+0x8c>

#ifdef ECC_DUMP_OID
    wc_ecc_dump_oids();
#endif

    XMEMSET(key, 0, sizeof(ecc_key));
 8010b98:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8010b9c:	2100      	movs	r1, #0
 8010b9e:	68f8      	ldr	r0, [r7, #12]
 8010ba0:	f00a ff5b 	bl	801ba5a <memset>
    key->state = ECC_STATE_NONE;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	609a      	str	r2, [r3, #8]

#if defined(WOLFSSL_ATECC508A) || defined(WOLFSSL_ATECC608A)
    key->slot = ATECC_INVALID_SLOT;
#else
#ifdef ALT_ECC_SIZE
    key->pubkey.x = (mp_int*)&key->pubkey.xyz[0];
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	619a      	str	r2, [r3, #24]
    key->pubkey.y = (mp_int*)&key->pubkey.xyz[1];
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	61da      	str	r2, [r3, #28]
    key->pubkey.z = (mp_int*)&key->pubkey.xyz[2];
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	621a      	str	r2, [r3, #32]
    alt_fp_init(key->pubkey.x);
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	699b      	ldr	r3, [r3, #24]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7ff fe7d 	bl	80108cc <alt_fp_init>
    alt_fp_init(key->pubkey.y);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	69db      	ldr	r3, [r3, #28]
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7ff fe78 	bl	80108cc <alt_fp_init>
    alt_fp_init(key->pubkey.z);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6a1b      	ldr	r3, [r3, #32]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7ff fe73 	bl	80108cc <alt_fp_init>
    ret = mp_init(&key->k);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8010bec:	4618      	mov	r0, r3
 8010bee:	f00a f93f 	bl	801ae70 <sp_init>
 8010bf2:	6178      	str	r0, [r7, #20]
    if (ret != MP_OKAY) {
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d002      	beq.n	8010c00 <wc_ecc_init_ex+0x84>
        return MEMORY_E;
 8010bfa:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8010bfe:	e003      	b.n	8010c08 <wc_ecc_init_ex+0x8c>
#endif /* WOLFSSL_ATECC508A */

#ifdef WOLFSSL_HEAP_TEST
    key->heap = (void*)WOLFSSL_HEAP_TEST;
#else
    key->heap = heap;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	68ba      	ldr	r2, [r7, #8]
 8010c04:	615a      	str	r2, [r3, #20]
#endif

#if defined(WOLFSSL_DSP)
    key->handle = -1;
#endif
    return ret;
 8010c06:	697b      	ldr	r3, [r7, #20]
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3718      	adds	r7, #24
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <wc_ecc_free>:
  Free an ECC key from memory
  key   The key you wish to free
*/
WOLFSSL_ABI
int wc_ecc_free(ecc_key* key)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
    if (key == NULL) {
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d101      	bne.n	8010c22 <wc_ecc_free+0x12>
        return 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e015      	b.n	8010c4e <wc_ecc_free+0x3e>
#if defined(WOLFSSL_ATECC508A) || defined(WOLFSSL_ATECC608A)
    atmel_ecc_free(key->slot);
    key->slot = ATECC_INVALID_SLOT;
#endif /* WOLFSSL_ATECC508A */

    mp_clear(key->pubkey.x);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	699b      	ldr	r3, [r3, #24]
 8010c26:	4618      	mov	r0, r3
 8010c28:	f00a f9d3 	bl	801afd2 <sp_clear>
    mp_clear(key->pubkey.y);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	69db      	ldr	r3, [r3, #28]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f00a f9ce 	bl	801afd2 <sp_clear>
    mp_clear(key->pubkey.z);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6a1b      	ldr	r3, [r3, #32]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f00a f9c9 	bl	801afd2 <sp_clear>

    mp_forcezero(&key->k);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8010c46:	4618      	mov	r0, r3
 8010c48:	f00a f9e4 	bl	801b014 <sp_forcezero>
#ifdef WOLFSSL_CUSTOM_CURVES
    if (key->deallocSet && key->dp != NULL)
        wc_ecc_free_curve(key->dp, key->heap);
#endif

    return 0;
 8010c4c:	2300      	movs	r3, #0
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
	...

08010c58 <wc_ecc_verify_hash>:
 key         The corresponding public ECC key
 return      MP_OKAY if successful (even if the signature is not valid)
 */
int wc_ecc_verify_hash(const byte* sig, word32 siglen, const byte* hash,
                       word32 hashlen, int* res, ecc_key* key)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08e      	sub	sp, #56	; 0x38
 8010c5c:	af02      	add	r7, sp, #8
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	60b9      	str	r1, [r7, #8]
 8010c62:	607a      	str	r2, [r7, #4]
 8010c64:	603b      	str	r3, [r7, #0]
    int err;
    mp_int *r = NULL, *s = NULL;
 8010c66:	2300      	movs	r3, #0
 8010c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	627b      	str	r3, [r7, #36]	; 0x24
#if (!defined(WOLFSSL_ASYNC_CRYPT) || !defined(WC_ASYNC_ENABLE_ECC)) && \
    !defined(WOLFSSL_SMALL_STACK)
    mp_int r_lcl, s_lcl;
#endif

    if (sig == NULL || hash == NULL || res == NULL || key == NULL) {
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d008      	beq.n	8010c86 <wc_ecc_verify_hash+0x2e>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d005      	beq.n	8010c86 <wc_ecc_verify_hash+0x2e>
 8010c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d002      	beq.n	8010c86 <wc_ecc_verify_hash+0x2e>
 8010c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d102      	bne.n	8010c8c <wc_ecc_verify_hash+0x34>
        return ECC_BAD_ARG_E;
 8010c86:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8010c8a:	e0ac      	b.n	8010de6 <wc_ecc_verify_hash+0x18e>
#else
    #ifndef WOLFSSL_SMALL_STACK
    r = &r_lcl;
    s = &s_lcl;
    #else
    r = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 8010c8c:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8010c90:	f000 fbe4 	bl	801145c <wolfSSL_Malloc>
 8010c94:	62b8      	str	r0, [r7, #40]	; 0x28
    if (r == NULL)
 8010c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d102      	bne.n	8010ca2 <wc_ecc_verify_hash+0x4a>
        return MEMORY_E;
 8010c9c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8010ca0:	e0a1      	b.n	8010de6 <wc_ecc_verify_hash+0x18e>
    s = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 8010ca2:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8010ca6:	f000 fbd9 	bl	801145c <wolfSSL_Malloc>
 8010caa:	6278      	str	r0, [r7, #36]	; 0x24
    if (s == NULL) {
 8010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d10a      	bne.n	8010cc8 <wc_ecc_verify_hash+0x70>
        XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
 8010cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb4:	613b      	str	r3, [r7, #16]
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d002      	beq.n	8010cc2 <wc_ecc_verify_hash+0x6a>
 8010cbc:	6938      	ldr	r0, [r7, #16]
 8010cbe:	f000 fbe9 	bl	8011494 <wolfSSL_Free>
        return MEMORY_E;
 8010cc2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8010cc6:	e08e      	b.n	8010de6 <wc_ecc_verify_hash+0x18e>
    }
    #endif
    XMEMSET(r, 0, sizeof(mp_int));
 8010cc8:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8010ccc:	2100      	movs	r1, #0
 8010cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cd0:	f00a fec3 	bl	801ba5a <memset>
    XMEMSET(s, 0, sizeof(mp_int));
 8010cd4:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8010cd8:	2100      	movs	r1, #0
 8010cda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cdc:	f00a febd 	bl	801ba5a <memset>
#endif /* WOLFSSL_ASYNC_CRYPT */

    switch (key->state) {
 8010ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	2b07      	cmp	r3, #7
 8010ce6:	d854      	bhi.n	8010d92 <wc_ecc_verify_hash+0x13a>
 8010ce8:	a201      	add	r2, pc, #4	; (adr r2, 8010cf0 <wc_ecc_verify_hash+0x98>)
 8010cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cee:	bf00      	nop
 8010cf0:	08010d11 	.word	0x08010d11
 8010cf4:	08010d93 	.word	0x08010d93
 8010cf8:	08010d93 	.word	0x08010d93
 8010cfc:	08010d93 	.word	0x08010d93
 8010d00:	08010d93 	.word	0x08010d93
 8010d04:	08010d11 	.word	0x08010d11
 8010d08:	08010d31 	.word	0x08010d31
 8010d0c:	08010d87 	.word	0x08010d87
        case ECC_STATE_NONE:
        case ECC_STATE_VERIFY_DECODE:
            key->state = ECC_STATE_VERIFY_DECODE;
 8010d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d12:	2205      	movs	r2, #5
 8010d14:	609a      	str	r2, [r3, #8]

            /* default to invalid signature */
            *res = 0;
 8010d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d18:	2200      	movs	r2, #0
 8010d1a:	601a      	str	r2, [r3, #0]
            /* Note, DecodeECC_DSA_Sig() calls mp_init() on r and s.
             * If either of those don't allocate correctly, none of
             * the rest of this function will execute, and everything
             * gets cleaned up at the end. */
            /* decode DSA header */
            err = DecodeECC_DSA_Sig(sig, siglen, r, s);
 8010d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d20:	68b9      	ldr	r1, [r7, #8]
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f7fe ff2c 	bl	800fb80 <DecodeECC_DSA_Sig>
 8010d28:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err < 0) {
 8010d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	db34      	blt.n	8010d9a <wc_ecc_verify_hash+0x142>
                break;
            }
            FALL_THROUGH;

        case ECC_STATE_VERIFY_DO:
            key->state = ECC_STATE_VERIFY_DO;
 8010d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d32:	2206      	movs	r2, #6
 8010d34:	609a      	str	r2, [r3, #8]

            err = wc_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
 8010d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d38:	9301      	str	r3, [sp, #4]
 8010d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3c:	9300      	str	r3, [sp, #0]
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d46:	f000 f8c7 	bl	8010ed8 <wc_ecc_verify_hash_ex>
 8010d4a:	62f8      	str	r0, [r7, #44]	; 0x2c

        #ifndef WOLFSSL_ASYNC_CRYPT
            /* done with R/S */
            mp_clear(r);
 8010d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d4e:	f00a f940 	bl	801afd2 <sp_clear>
            mp_clear(s);
 8010d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d54:	f00a f93d 	bl	801afd2 <sp_clear>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
 8010d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5a:	623b      	str	r3, [r7, #32]
 8010d5c:	6a3b      	ldr	r3, [r7, #32]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d002      	beq.n	8010d68 <wc_ecc_verify_hash+0x110>
 8010d62:	6a38      	ldr	r0, [r7, #32]
 8010d64:	f000 fb96 	bl	8011494 <wolfSSL_Free>
            XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	61fb      	str	r3, [r7, #28]
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d002      	beq.n	8010d78 <wc_ecc_verify_hash+0x120>
 8010d72:	69f8      	ldr	r0, [r7, #28]
 8010d74:	f000 fb8e 	bl	8011494 <wolfSSL_Free>
            r = NULL;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	62bb      	str	r3, [r7, #40]	; 0x28
            s = NULL;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	627b      	str	r3, [r7, #36]	; 0x24
        #endif
        #endif

            if (err < 0) {
 8010d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	db0b      	blt.n	8010d9e <wc_ecc_verify_hash+0x146>
                break;
            }
            FALL_THROUGH;

        case ECC_STATE_VERIFY_RES:
            key->state = ECC_STATE_VERIFY_RES;
 8010d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d88:	2207      	movs	r2, #7
 8010d8a:	609a      	str	r2, [r3, #8]
            err = 0;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8010d90:	e006      	b.n	8010da0 <wc_ecc_verify_hash+0x148>

        default:
            err = BAD_STATE_E;
 8010d92:	f06f 03bf 	mvn.w	r3, #191	; 0xbf
 8010d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d98:	e002      	b.n	8010da0 <wc_ecc_verify_hash+0x148>
                break;
 8010d9a:	bf00      	nop
 8010d9c:	e000      	b.n	8010da0 <wc_ecc_verify_hash+0x148>
                break;
 8010d9e:	bf00      	nop
    }

    /* if async pending then return and skip done cleanup below */
    if (err == WC_PENDING_E) {
 8010da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da2:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 8010da6:	d106      	bne.n	8010db6 <wc_ecc_verify_hash+0x15e>
        key->state++;
 8010da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010daa:	689b      	ldr	r3, [r3, #8]
 8010dac:	1c5a      	adds	r2, r3, #1
 8010dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010db0:	609a      	str	r2, [r3, #8]
        return err;
 8010db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db4:	e017      	b.n	8010de6 <wc_ecc_verify_hash+0x18e>

    /* cleanup */
#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_ECC)
    wc_ecc_free_async(key);
#elif defined(WOLFSSL_SMALL_STACK)
    XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
 8010db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db8:	61bb      	str	r3, [r7, #24]
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d002      	beq.n	8010dc6 <wc_ecc_verify_hash+0x16e>
 8010dc0:	69b8      	ldr	r0, [r7, #24]
 8010dc2:	f000 fb67 	bl	8011494 <wolfSSL_Free>
    XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
 8010dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc8:	617b      	str	r3, [r7, #20]
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d002      	beq.n	8010dd6 <wc_ecc_verify_hash+0x17e>
 8010dd0:	6978      	ldr	r0, [r7, #20]
 8010dd2:	f000 fb5f 	bl	8011494 <wolfSSL_Free>
    r = NULL;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    s = NULL;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    key->state = ECC_STATE_NONE;
 8010dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010de0:	2200      	movs	r2, #0
 8010de2:	609a      	str	r2, [r3, #8]

    return err;
 8010de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3730      	adds	r7, #48	; 0x30
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop

08010df0 <wc_ecc_check_r_s_range>:
#endif /* !NO_ASN */

static int wc_ecc_check_r_s_range(ecc_key* key, mp_int* r, mp_int* s)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b094      	sub	sp, #80	; 0x50
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
    int err;
    DECLARE_CURVE_SPECS(curve, 1);
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e00:	f107 0318 	add.w	r3, r7, #24
 8010e04:	617b      	str	r3, [r7, #20]
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	2228      	movs	r2, #40	; 0x28
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f00a fe24 	bl	801ba5a <memset>
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	2201      	movs	r2, #1
 8010e16:	61da      	str	r2, [r3, #28]

    ALLOC_CURVE_SPECS(1);
 8010e18:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8010e1c:	f000 fb1e 	bl	801145c <wolfSSL_Malloc>
 8010e20:	64b8      	str	r0, [r7, #72]	; 0x48
 8010e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d102      	bne.n	8010e2e <wc_ecc_check_r_s_range+0x3e>
 8010e28:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8010e2c:	e050      	b.n	8010ed0 <wc_ecc_check_r_s_range+0xe0>
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e32:	619a      	str	r2, [r3, #24]
    err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	691b      	ldr	r3, [r3, #16]
 8010e38:	f107 0114 	add.w	r1, r7, #20
 8010e3c:	2208      	movs	r2, #8
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7ff fc3e 	bl	80106c0 <wc_ecc_curve_load>
 8010e44:	64f8      	str	r0, [r7, #76]	; 0x4c
    if (err != 0) {
 8010e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d009      	beq.n	8010e60 <wc_ecc_check_r_s_range+0x70>
        FREE_CURVE_SPECS();
 8010e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8010e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d002      	beq.n	8010e5c <wc_ecc_check_r_s_range+0x6c>
 8010e56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010e58:	f000 fb1c 	bl	8011494 <wolfSSL_Free>
        return err;
 8010e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e5e:	e037      	b.n	8010ed0 <wc_ecc_check_r_s_range+0xe0>
    }

    if (mp_iszero(r) || mp_iszero(s)) {
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d003      	beq.n	8010e70 <wc_ecc_check_r_s_range+0x80>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d102      	bne.n	8010e76 <wc_ecc_check_r_s_range+0x86>
        err = MP_ZERO_E;
 8010e70:	f06f 0378 	mvn.w	r3, #120	; 0x78
 8010e74:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((err == 0) && (mp_cmp(r, curve->order) != MP_LT)) {
 8010e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d10c      	bne.n	8010e96 <wc_ecc_check_r_s_range+0xa6>
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	4619      	mov	r1, r3
 8010e82:	68b8      	ldr	r0, [r7, #8]
 8010e84:	f00a f935 	bl	801b0f2 <sp_cmp>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e8e:	d002      	beq.n	8010e96 <wc_ecc_check_r_s_range+0xa6>
        err = MP_VAL;
 8010e90:	f06f 0302 	mvn.w	r3, #2
 8010e94:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 8010e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d10c      	bne.n	8010eb6 <wc_ecc_check_r_s_range+0xc6>
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f00a f925 	bl	801b0f2 <sp_cmp>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eae:	d002      	beq.n	8010eb6 <wc_ecc_check_r_s_range+0xc6>
        err = MP_VAL;
 8010eb0:	f06f 0302 	mvn.w	r3, #2
 8010eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    wc_ecc_curve_free(curve);
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7ff fbb6 	bl	801062a <wc_ecc_curve_free>
    FREE_CURVE_SPECS();
 8010ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8010ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d002      	beq.n	8010ece <wc_ecc_check_r_s_range+0xde>
 8010ec8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010eca:	f000 fae3 	bl	8011494 <wolfSSL_Free>
    return err;
 8010ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3750      	adds	r7, #80	; 0x50
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <wc_ecc_verify_hash_ex>:
#elif defined(WOLFSSL_PSOC6_CRYPTO)
{
    return psoc6_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
}
#else
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b08c      	sub	sp, #48	; 0x30
 8010edc:	af06      	add	r7, sp, #24
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	607a      	str	r2, [r7, #4]
 8010ee4:	603b      	str	r3, [r7, #0]
   int           err;
   word32        keySz = 0;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	613b      	str	r3, [r7, #16]
   #endif /* WOLFSSL_SMALL_STACK */
   mp_int*       e;
   DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);
#endif

   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00b      	beq.n	8010f08 <wc_ecc_verify_hash_ex+0x30>
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d008      	beq.n	8010f08 <wc_ecc_verify_hash_ex+0x30>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d005      	beq.n	8010f08 <wc_ecc_verify_hash_ex+0x30>
 8010efc:	6a3b      	ldr	r3, [r7, #32]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d002      	beq.n	8010f08 <wc_ecc_verify_hash_ex+0x30>
 8010f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d102      	bne.n	8010f0e <wc_ecc_verify_hash_ex+0x36>
       return ECC_BAD_ARG_E;
 8010f08:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8010f0c:	e073      	b.n	8010ff6 <wc_ecc_verify_hash_ex+0x11e>

   /* default to invalid signature */
   *res = 0;
 8010f0e:	6a3b      	ldr	r3, [r7, #32]
 8010f10:	2200      	movs	r2, #0
 8010f12:	601a      	str	r2, [r3, #0]

   /* is the IDX valid ?  */
   if (wc_ecc_is_valid_idx(key->idx) != 1) {
 8010f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7ff fce5 	bl	80108e8 <wc_ecc_is_valid_idx>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d002      	beq.n	8010f2a <wc_ecc_verify_hash_ex+0x52>
      return ECC_BAD_ARG_E;
 8010f24:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 8010f28:	e065      	b.n	8010ff6 <wc_ecc_verify_hash_ex+0x11e>
   }

   err = wc_ecc_check_r_s_range(key, r, s);
 8010f2a:	68ba      	ldr	r2, [r7, #8]
 8010f2c:	68f9      	ldr	r1, [r7, #12]
 8010f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f30:	f7ff ff5e 	bl	8010df0 <wc_ecc_check_r_s_range>
 8010f34:	6178      	str	r0, [r7, #20]
   if (err != MP_OKAY) {
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d001      	beq.n	8010f40 <wc_ecc_verify_hash_ex+0x68>
      return err;
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	e05a      	b.n	8010ff6 <wc_ecc_verify_hash_ex+0x11e>
   }

   keySz = key->dp->size;
 8010f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f42:	691b      	ldr	r3, [r3, #16]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	613b      	str	r3, [r7, #16]
                                hash, hashlen,
                                res, key);

#else
  /* checking if private key with no public part */
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 8010f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b03      	cmp	r3, #3
 8010f4e:	d10b      	bne.n	8010f68 <wc_ecc_verify_hash_ex+0x90>
      WOLFSSL_MSG("Verify called with private key, generating public part");
      err = ecc_make_pub_ex(key, NULL, NULL, NULL);
 8010f50:	2300      	movs	r3, #0
 8010f52:	2200      	movs	r2, #0
 8010f54:	2100      	movs	r1, #0
 8010f56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f58:	f7ff fd4c 	bl	80109f4 <ecc_make_pub_ex>
 8010f5c:	6178      	str	r0, [r7, #20]
      if (err != MP_OKAY) {
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d001      	beq.n	8010f68 <wc_ecc_verify_hash_ex+0x90>
           WOLFSSL_MSG("Unable to extract public key");
           return err;
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	e046      	b.n	8010ff6 <wc_ecc_verify_hash_ex+0x11e>
        key->pubkey.y, key->pubkey.z, r, s, res, key->heap);
  }
#endif

#if defined(WOLFSSL_SP_MATH) && !defined(FREESCALE_LTC_ECC)
    if (key->idx == ECC_CUSTOM_IDX || 
 8010f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f70:	d015      	beq.n	8010f9e <wc_ecc_verify_hash_ex+0xc6>
            (ecc_sets[key->idx].id != ECC_SECP256R1 && 
 8010f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	4a22      	ldr	r2, [pc, #136]	; (8011000 <wc_ecc_verify_hash_ex+0x128>)
 8010f78:	2134      	movs	r1, #52	; 0x34
 8010f7a:	fb01 f303 	mul.w	r3, r1, r3
 8010f7e:	4413      	add	r3, r2
 8010f80:	3304      	adds	r3, #4
 8010f82:	681b      	ldr	r3, [r3, #0]
    if (key->idx == ECC_CUSTOM_IDX || 
 8010f84:	2b07      	cmp	r3, #7
 8010f86:	d00d      	beq.n	8010fa4 <wc_ecc_verify_hash_ex+0xcc>
             ecc_sets[key->idx].id != ECC_SECP384R1)) {
 8010f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	4a1c      	ldr	r2, [pc, #112]	; (8011000 <wc_ecc_verify_hash_ex+0x128>)
 8010f8e:	2134      	movs	r1, #52	; 0x34
 8010f90:	fb01 f303 	mul.w	r3, r1, r3
 8010f94:	4413      	add	r3, r2
 8010f96:	3304      	adds	r3, #4
 8010f98:	681b      	ldr	r3, [r3, #0]
            (ecc_sets[key->idx].id != ECC_SECP256R1 && 
 8010f9a:	2b0f      	cmp	r3, #15
 8010f9c:	d002      	beq.n	8010fa4 <wc_ecc_verify_hash_ex+0xcc>
        return WC_KEY_SIZE_E;
 8010f9e:	f06f 03e9 	mvn.w	r3, #233	; 0xe9
 8010fa2:	e028      	b.n	8010ff6 <wc_ecc_verify_hash_ex+0x11e>
#endif

#if defined(WOLFSSL_SP_MATH) || defined(WOLFSSL_HAVE_SP_ECC) || \
             (defined(WOLFSSL_SP_MATH_ALL) && defined(WOLFSSL_HAVE_SP_ECC)) && \
                                                     !defined(FREESCALE_LTC_ECC)
    if (key->idx != ECC_CUSTOM_IDX
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fac:	d022      	beq.n	8010ff4 <wc_ecc_verify_hash_ex+0x11c>
        ecc_nb_ctx_t nb_ctx;
        XMEMSET(&nb_ctx, 0, sizeof(nb_ctx));
        err = NOT_COMPILED_IN; /* set default error */
    #endif
    #ifndef WOLFSSL_SP_NO_256
        if (ecc_sets[key->idx].id == ECC_SECP256R1) {
 8010fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	4a13      	ldr	r2, [pc, #76]	; (8011000 <wc_ecc_verify_hash_ex+0x128>)
 8010fb4:	2134      	movs	r1, #52	; 0x34
 8010fb6:	fb01 f303 	mul.w	r3, r1, r3
 8010fba:	4413      	add	r3, r2
 8010fbc:	3304      	adds	r3, #4
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b07      	cmp	r3, #7
 8010fc2:	d117      	bne.n	8010ff4 <wc_ecc_verify_hash_ex+0x11c>
            } while (err == FP_WOULDBLOCK);
            return err;
            #endif
        #endif /* WC_ECC_NONBLOCK */
        #if !defined(WC_ECC_NONBLOCK) || (defined(WC_ECC_NONBLOCK) && !defined(WC_ECC_NONBLOCK_ONLY))
            return sp_ecc_verify_256(hash, hashlen, key->pubkey.x, 
 8010fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc6:	6999      	ldr	r1, [r3, #24]
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fca:	69d8      	ldr	r0, [r3, #28]
 8010fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fce:	6a1b      	ldr	r3, [r3, #32]
 8010fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fd2:	6952      	ldr	r2, [r2, #20]
 8010fd4:	9204      	str	r2, [sp, #16]
 8010fd6:	6a3a      	ldr	r2, [r7, #32]
 8010fd8:	9203      	str	r2, [sp, #12]
 8010fda:	68ba      	ldr	r2, [r7, #8]
 8010fdc:	9202      	str	r2, [sp, #8]
 8010fde:	68fa      	ldr	r2, [r7, #12]
 8010fe0:	9201      	str	r2, [sp, #4]
 8010fe2:	9300      	str	r3, [sp, #0]
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	460a      	mov	r2, r1
 8010fe8:	6839      	ldr	r1, [r7, #0]
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f009 fdb4 	bl	801ab58 <sp_ecc_verify_256>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	e000      	b.n	8010ff6 <wc_ecc_verify_hash_ex+0x11e>
#endif /* WOLFSSL_ATECC508A */

   (void)keySz;
   (void)hashlen;

   return err;
 8010ff4:	697b      	ldr	r3, [r7, #20]
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3718      	adds	r7, #24
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	bf00      	nop
 8011000:	0801e63c 	.word	0x0801e63c

08011004 <wc_ecc_import_x963_ex>:

#ifdef HAVE_ECC_KEY_IMPORT
/* import public ECC key in ANSI X9.63 format */
int wc_ecc_import_x963_ex(const byte* in, word32 inLen, ecc_key* key,
                          int curve_id)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b088      	sub	sp, #32
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	607a      	str	r2, [r7, #4]
 8011010:	603b      	str	r3, [r7, #0]
    int err = MP_OKAY;
 8011012:	2300      	movs	r3, #0
 8011014:	61fb      	str	r3, [r7, #28]
#ifdef HAVE_COMP_KEY
    int compressed = 0;
#endif
    int keysize = 0;
 8011016:	2300      	movs	r3, #0
 8011018:	61bb      	str	r3, [r7, #24]
    byte pointType;

    if (in == NULL || key == NULL)
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d002      	beq.n	8011026 <wc_ecc_import_x963_ex+0x22>
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d102      	bne.n	801102c <wc_ecc_import_x963_ex+0x28>
        return BAD_FUNC_ARG;
 8011026:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801102a:	e09d      	b.n	8011168 <wc_ecc_import_x963_ex+0x164>

    /* must be odd */
    if ((inLen & 1) == 0) {
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	f003 0301 	and.w	r3, r3, #1
 8011032:	2b00      	cmp	r3, #0
 8011034:	d102      	bne.n	801103c <wc_ecc_import_x963_ex+0x38>
        return ECC_BAD_ARG_E;
 8011036:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 801103a:	e095      	b.n	8011168 <wc_ecc_import_x963_ex+0x164>
    }

    /* make sure required variables are reset */
    wc_ecc_reset(key);
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f7ff fccb 	bl	80109d8 <wc_ecc_reset>

    /* init key */
    #ifdef ALT_ECC_SIZE
        key->pubkey.x = (mp_int*)&key->pubkey.xyz[0];
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	619a      	str	r2, [r3, #24]
        key->pubkey.y = (mp_int*)&key->pubkey.xyz[1];
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	61da      	str	r2, [r3, #28]
        key->pubkey.z = (mp_int*)&key->pubkey.xyz[2];
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	621a      	str	r2, [r3, #32]
        alt_fp_init(key->pubkey.x);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	699b      	ldr	r3, [r3, #24]
 8011064:	4618      	mov	r0, r3
 8011066:	f7ff fc31 	bl	80108cc <alt_fp_init>
        alt_fp_init(key->pubkey.y);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	69db      	ldr	r3, [r3, #28]
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff fc2c 	bl	80108cc <alt_fp_init>
        alt_fp_init(key->pubkey.z);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6a1b      	ldr	r3, [r3, #32]
 8011078:	4618      	mov	r0, r3
 801107a:	f7ff fc27 	bl	80108cc <alt_fp_init>
        err = mp_init(&key->k);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011084:	4618      	mov	r0, r3
 8011086:	f009 fef3 	bl	801ae70 <sp_init>
 801108a:	61f8      	str	r0, [r7, #28]
    #else
        err = mp_init_multi(&key->k,
                    key->pubkey.x, key->pubkey.y, key->pubkey.z, NULL, NULL);
    #endif
    if (err != MP_OKAY)
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d002      	beq.n	8011098 <wc_ecc_import_x963_ex+0x94>
        return MEMORY_E;
 8011092:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8011096:	e067      	b.n	8011168 <wc_ecc_import_x963_ex+0x164>

    /* check for point type (4, 2, or 3) */
    pointType = in[0];
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	75fb      	strb	r3, [r7, #23]
    if (pointType != ECC_POINT_UNCOMP && pointType != ECC_POINT_COMP_EVEN &&
 801109e:	7dfb      	ldrb	r3, [r7, #23]
 80110a0:	2b04      	cmp	r3, #4
 80110a2:	d008      	beq.n	80110b6 <wc_ecc_import_x963_ex+0xb2>
 80110a4:	7dfb      	ldrb	r3, [r7, #23]
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d005      	beq.n	80110b6 <wc_ecc_import_x963_ex+0xb2>
 80110aa:	7dfb      	ldrb	r3, [r7, #23]
 80110ac:	2b03      	cmp	r3, #3
 80110ae:	d002      	beq.n	80110b6 <wc_ecc_import_x963_ex+0xb2>
                                         pointType != ECC_POINT_COMP_ODD) {
        err = ASN_PARSE_E;
 80110b0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80110b4:	61fb      	str	r3, [r7, #28]
    }

    if (pointType == ECC_POINT_COMP_EVEN || pointType == ECC_POINT_COMP_ODD) {
 80110b6:	7dfb      	ldrb	r3, [r7, #23]
 80110b8:	2b02      	cmp	r3, #2
 80110ba:	d002      	beq.n	80110c2 <wc_ecc_import_x963_ex+0xbe>
 80110bc:	7dfb      	ldrb	r3, [r7, #23]
 80110be:	2b03      	cmp	r3, #3
 80110c0:	d102      	bne.n	80110c8 <wc_ecc_import_x963_ex+0xc4>
    #ifdef HAVE_COMP_KEY
        compressed = 1;
    #else
        err = NOT_COMPILED_IN;
 80110c2:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 80110c6:	61fb      	str	r3, [r7, #28]
    #endif
    }

    /* adjust to skip first byte */
    inLen -= 1;
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	3b01      	subs	r3, #1
 80110cc:	60bb      	str	r3, [r7, #8]
    in += 1;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	3301      	adds	r3, #1
 80110d2:	60fb      	str	r3, [r7, #12]
    #endif
            XMEMCPY(key->pubkey_raw, (byte*)in, inLen);
    }
#endif

    if (err == MP_OKAY) {
 80110d4:	69fb      	ldr	r3, [r7, #28]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d10b      	bne.n	80110f2 <wc_ecc_import_x963_ex+0xee>
        if (compressed)
            inLen = inLen*2 + 1;  /* used uncompressed len */
    #endif

        /* determine key size */
        keysize = (inLen>>1);
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	085b      	lsrs	r3, r3, #1
 80110de:	61bb      	str	r3, [r7, #24]
        err = wc_ecc_set_curve(key, keysize, curve_id);
 80110e0:	683a      	ldr	r2, [r7, #0]
 80110e2:	69b9      	ldr	r1, [r7, #24]
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7ff fb87 	bl	80107f8 <wc_ecc_set_curve>
 80110ea:	61f8      	str	r0, [r7, #28]
        key->type = ECC_PUBLICKEY;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2201      	movs	r2, #1
 80110f0:	601a      	str	r2, [r3, #0]
    }

    /* read data */
    if (err == MP_OKAY)
 80110f2:	69fb      	ldr	r3, [r7, #28]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d107      	bne.n	8011108 <wc_ecc_import_x963_ex+0x104>
        err = mp_read_unsigned_bin(key->pubkey.x, (byte*)in, keysize);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	699b      	ldr	r3, [r3, #24]
 80110fc:	69ba      	ldr	r2, [r7, #24]
 80110fe:	68f9      	ldr	r1, [r7, #12]
 8011100:	4618      	mov	r0, r3
 8011102:	f00a f97d 	bl	801b400 <sp_read_unsigned_bin>
 8011106:	61f8      	str	r0, [r7, #28]
        }
#endif
    }
#endif /* HAVE_COMP_KEY */

    if (err == MP_OKAY) {
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d109      	bne.n	8011122 <wc_ecc_import_x963_ex+0x11e>
    #ifdef HAVE_COMP_KEY
        if (compressed == 0)
    #endif
        {
            err = mp_read_unsigned_bin(key->pubkey.y, (byte*)in + keysize,
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	69d8      	ldr	r0, [r3, #28]
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	68fa      	ldr	r2, [r7, #12]
 8011116:	4413      	add	r3, r2
 8011118:	69ba      	ldr	r2, [r7, #24]
 801111a:	4619      	mov	r1, r3
 801111c:	f00a f970 	bl	801b400 <sp_read_unsigned_bin>
 8011120:	61f8      	str	r0, [r7, #28]
                                                                      keysize);
        }
    }
    if (err == MP_OKAY)
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d106      	bne.n	8011136 <wc_ecc_import_x963_ex+0x132>
        err = mp_set(key->pubkey.z, 1);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6a1b      	ldr	r3, [r3, #32]
 801112c:	2101      	movs	r1, #1
 801112e:	4618      	mov	r0, r3
 8011130:	f00a f84e 	bl	801b1d0 <sp_set>
 8011134:	61f8      	str	r0, [r7, #28]
#ifdef WOLFSSL_VALIDATE_ECC_IMPORT
    if (err == MP_OKAY)
        err = wc_ecc_check_key(key);
#endif

    if (err != MP_OKAY) {
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d014      	beq.n	8011166 <wc_ecc_import_x963_ex+0x162>
        mp_clear(key->pubkey.x);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	699b      	ldr	r3, [r3, #24]
 8011140:	4618      	mov	r0, r3
 8011142:	f009 ff46 	bl	801afd2 <sp_clear>
        mp_clear(key->pubkey.y);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	69db      	ldr	r3, [r3, #28]
 801114a:	4618      	mov	r0, r3
 801114c:	f009 ff41 	bl	801afd2 <sp_clear>
        mp_clear(key->pubkey.z);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6a1b      	ldr	r3, [r3, #32]
 8011154:	4618      	mov	r0, r3
 8011156:	f009 ff3c 	bl	801afd2 <sp_clear>
        mp_clear(&key->k);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011160:	4618      	mov	r0, r3
 8011162:	f009 ff36 	bl	801afd2 <sp_clear>
    }

    return err;
 8011166:	69fb      	ldr	r3, [r7, #28]
}
 8011168:	4618      	mov	r0, r3
 801116a:	3720      	adds	r7, #32
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <wc_ecc_import_private_key_ex>:
#ifdef HAVE_ECC_KEY_IMPORT
/* import private key, public part optional if (pub) passed as NULL */
int wc_ecc_import_private_key_ex(const byte* priv, word32 privSz,
                                 const byte* pub, word32 pubSz, ecc_key* key,
                                 int curve_id)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b086      	sub	sp, #24
 8011174:	af00      	add	r7, sp, #0
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	60b9      	str	r1, [r7, #8]
 801117a:	607a      	str	r2, [r7, #4]
 801117c:	603b      	str	r3, [r7, #0]
    int ret;
#ifdef WOLFSSL_CRYPTOCELL
    const CRYS_ECPKI_Domain_t* pDomain;
    CRYS_ECPKI_BUILD_TempData_t tempBuff;
#endif
    if (key == NULL || priv == NULL)
 801117e:	6a3b      	ldr	r3, [r7, #32]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d002      	beq.n	801118a <wc_ecc_import_private_key_ex+0x1a>
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d102      	bne.n	8011190 <wc_ecc_import_private_key_ex+0x20>
        return BAD_FUNC_ARG;
 801118a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801118e:	e036      	b.n	80111fe <wc_ecc_import_private_key_ex+0x8e>

    /* public optional, NULL if only importing private */
    if (pub != NULL) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d017      	beq.n	80111c6 <wc_ecc_import_private_key_ex+0x56>
    #ifndef NO_ASN
        word32 idx = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	613b      	str	r3, [r7, #16]
        ret = wc_ecc_import_x963_ex(pub, pubSz, key, curve_id);
 801119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119c:	6a3a      	ldr	r2, [r7, #32]
 801119e:	6839      	ldr	r1, [r7, #0]
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f7ff ff2f 	bl	8011004 <wc_ecc_import_x963_ex>
 80111a6:	6178      	str	r0, [r7, #20]
        if (ret < 0)
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	da07      	bge.n	80111be <wc_ecc_import_private_key_ex+0x4e>
            ret = wc_EccPublicKeyDecode(pub, &idx, key, pubSz);
 80111ae:	f107 0110 	add.w	r1, r7, #16
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	6a3a      	ldr	r2, [r7, #32]
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f7fe fe77 	bl	800feaa <wc_EccPublicKeyDecode>
 80111bc:	6178      	str	r0, [r7, #20]
        key->type = ECC_PRIVATEKEY;
 80111be:	6a3b      	ldr	r3, [r7, #32]
 80111c0:	2202      	movs	r2, #2
 80111c2:	601a      	str	r2, [r3, #0]
 80111c4:	e00c      	b.n	80111e0 <wc_ecc_import_private_key_ex+0x70>
        ret = NOT_COMPILED_IN;
    #endif
    }
    else {
        /* make sure required variables are reset */
        wc_ecc_reset(key);
 80111c6:	6a38      	ldr	r0, [r7, #32]
 80111c8:	f7ff fc06 	bl	80109d8 <wc_ecc_reset>

        /* set key size */
        ret = wc_ecc_set_curve(key, privSz, curve_id);
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111d0:	4619      	mov	r1, r3
 80111d2:	6a38      	ldr	r0, [r7, #32]
 80111d4:	f7ff fb10 	bl	80107f8 <wc_ecc_set_curve>
 80111d8:	6178      	str	r0, [r7, #20]
        key->type = ECC_PRIVATEKEY_ONLY;
 80111da:	6a3b      	ldr	r3, [r7, #32]
 80111dc:	2203      	movs	r2, #3
 80111de:	601a      	str	r2, [r3, #0]
    }

    if (ret != 0)
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d001      	beq.n	80111ea <wc_ecc_import_private_key_ex+0x7a>
        return ret;
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	e009      	b.n	80111fe <wc_ecc_import_private_key_ex+0x8e>
            ret = silabs_ecc_import_private(key, key->dp->size);
        }
    }
#else

    ret = mp_read_unsigned_bin(&key->k, priv, privSz);
 80111ea:	6a3b      	ldr	r3, [r7, #32]
 80111ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80111f0:	68ba      	ldr	r2, [r7, #8]
 80111f2:	68f9      	ldr	r1, [r7, #12]
 80111f4:	4618      	mov	r0, r3
 80111f6:	f00a f903 	bl	801b400 <sp_read_unsigned_bin>
 80111fa:	6178      	str	r0, [r7, #20]
    if ((pub != NULL) && (ret == MP_OKAY))
        /* public key needed to perform key validation */
        ret = ecc_check_privkey_gen_helper(key);
#endif

    return ret;
 80111fc:	697b      	ldr	r3, [r7, #20]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3718      	adds	r7, #24
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}

08011206 <wc_ecc_size>:
}
#endif /* HAVE_ECC_KEY_IMPORT */

/* key size in octets */
int wc_ecc_size(ecc_key* key)
{
 8011206:	b480      	push	{r7}
 8011208:	b083      	sub	sp, #12
 801120a:	af00      	add	r7, sp, #0
 801120c:	6078      	str	r0, [r7, #4]
    if (key == NULL)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d101      	bne.n	8011218 <wc_ecc_size+0x12>
        return 0;
 8011214:	2300      	movs	r3, #0
 8011216:	e002      	b.n	801121e <wc_ecc_size+0x18>

    return key->dp->size;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	691b      	ldr	r3, [r3, #16]
 801121c:	681b      	ldr	r3, [r3, #0]
}
 801121e:	4618      	mov	r0, r3
 8011220:	370c      	adds	r7, #12
 8011222:	46bd      	mov	sp, r7
 8011224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011228:	4770      	bx	lr
	...

0801122c <wc_ecc_get_oid>:

#endif /* HAVE_COMP_KEY */


int wc_ecc_get_oid(word32 oidSum, const byte** oid, word32* oidSz)
{
 801122c:	b480      	push	{r7}
 801122e:	b087      	sub	sp, #28
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
    int x;

    if (oidSum == 0) {
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d102      	bne.n	8011244 <wc_ecc_get_oid+0x18>
        return BAD_FUNC_ARG;
 801123e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8011242:	e040      	b.n	80112c6 <wc_ecc_get_oid+0x9a>
    }

    /* find matching OID sum (based on encoded value) */
    for (x = 0; ecc_sets[x].size != 0; x++) {
 8011244:	2300      	movs	r3, #0
 8011246:	617b      	str	r3, [r7, #20]
 8011248:	e032      	b.n	80112b0 <wc_ecc_get_oid+0x84>
        if (ecc_sets[x].oidSum == oidSum) {
 801124a:	4a22      	ldr	r2, [pc, #136]	; (80112d4 <wc_ecc_get_oid+0xa8>)
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	2134      	movs	r1, #52	; 0x34
 8011250:	fb01 f303 	mul.w	r3, r1, r3
 8011254:	4413      	add	r3, r2
 8011256:	332c      	adds	r3, #44	; 0x2c
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	68fa      	ldr	r2, [r7, #12]
 801125c:	429a      	cmp	r2, r3
 801125e:	d124      	bne.n	80112aa <wc_ecc_get_oid+0x7e>
            /* on success return curve id */
            if (ret == 0) {
                ret = ecc_sets[x].id;
            }
        #else
            if (oidSz) {
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d009      	beq.n	801127a <wc_ecc_get_oid+0x4e>
                *oidSz = ecc_sets[x].oidSz;
 8011266:	4a1b      	ldr	r2, [pc, #108]	; (80112d4 <wc_ecc_get_oid+0xa8>)
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	2134      	movs	r1, #52	; 0x34
 801126c:	fb01 f303 	mul.w	r3, r1, r3
 8011270:	4413      	add	r3, r2
 8011272:	3328      	adds	r3, #40	; 0x28
 8011274:	681a      	ldr	r2, [r3, #0]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	601a      	str	r2, [r3, #0]
            }
            if (oid) {
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d009      	beq.n	8011294 <wc_ecc_get_oid+0x68>
                *oid = ecc_sets[x].oid;
 8011280:	4a14      	ldr	r2, [pc, #80]	; (80112d4 <wc_ecc_get_oid+0xa8>)
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	2134      	movs	r1, #52	; 0x34
 8011286:	fb01 f303 	mul.w	r3, r1, r3
 801128a:	4413      	add	r3, r2
 801128c:	3324      	adds	r3, #36	; 0x24
 801128e:	681a      	ldr	r2, [r3, #0]
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	601a      	str	r2, [r3, #0]
            }
            ret = ecc_sets[x].id;
 8011294:	4a0f      	ldr	r2, [pc, #60]	; (80112d4 <wc_ecc_get_oid+0xa8>)
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	2134      	movs	r1, #52	; 0x34
 801129a:	fb01 f303 	mul.w	r3, r1, r3
 801129e:	4413      	add	r3, r2
 80112a0:	3304      	adds	r3, #4
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	613b      	str	r3, [r7, #16]
        #endif
            return ret;
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	e00d      	b.n	80112c6 <wc_ecc_get_oid+0x9a>
    for (x = 0; ecc_sets[x].size != 0; x++) {
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	3301      	adds	r3, #1
 80112ae:	617b      	str	r3, [r7, #20]
 80112b0:	4a08      	ldr	r2, [pc, #32]	; (80112d4 <wc_ecc_get_oid+0xa8>)
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	2134      	movs	r1, #52	; 0x34
 80112b6:	fb01 f303 	mul.w	r3, r1, r3
 80112ba:	4413      	add	r3, r2
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d1c3      	bne.n	801124a <wc_ecc_get_oid+0x1e>
        }
    }

    return NOT_COMPILED_IN;
 80112c2:	f06f 03ad 	mvn.w	r3, #173	; 0xad
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	371c      	adds	r7, #28
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	0801e63c 	.word	0x0801e63c

080112d8 <wc_HashGetDigestSize>:

#ifndef NO_HASH_WRAPPER

/* Get Hash digest size */
int wc_HashGetDigestSize(enum wc_HashType hash_type)
{
 80112d8:	b480      	push	{r7}
 80112da:	b085      	sub	sp, #20
 80112dc:	af00      	add	r7, sp, #0
 80112de:	4603      	mov	r3, r0
 80112e0:	71fb      	strb	r3, [r7, #7]
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
 80112e2:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 80112e6:	60fb      	str	r3, [r7, #12]
    switch(hash_type)
 80112e8:	79fb      	ldrb	r3, [r7, #7]
 80112ea:	3b01      	subs	r3, #1
 80112ec:	2b0e      	cmp	r3, #14
 80112ee:	d824      	bhi.n	801133a <wc_HashGetDigestSize+0x62>
 80112f0:	a201      	add	r2, pc, #4	; (adr r2, 80112f8 <wc_HashGetDigestSize+0x20>)
 80112f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f6:	bf00      	nop
 80112f8:	08011343 	.word	0x08011343
 80112fc:	08011343 	.word	0x08011343
 8011300:	08011343 	.word	0x08011343
 8011304:	08011343 	.word	0x08011343
 8011308:	08011343 	.word	0x08011343
 801130c:	08011335 	.word	0x08011335
 8011310:	08011343 	.word	0x08011343
 8011314:	08011343 	.word	0x08011343
 8011318:	08011343 	.word	0x08011343
 801131c:	08011343 	.word	0x08011343
 8011320:	08011343 	.word	0x08011343
 8011324:	08011343 	.word	0x08011343
 8011328:	08011343 	.word	0x08011343
 801132c:	08011343 	.word	0x08011343
 8011330:	08011343 	.word	0x08011343
            dig_size = WC_SHA224_DIGEST_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_SHA256:
        #ifndef NO_SHA256
            dig_size = WC_SHA256_DIGEST_SIZE;
 8011334:	2320      	movs	r3, #32
 8011336:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 8011338:	e004      	b.n	8011344 <wc_HashGetDigestSize+0x6c>
            break;

        /* Not Supported */
        case WC_HASH_TYPE_NONE:
        default:
            dig_size = BAD_FUNC_ARG;
 801133a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801133e:	60fb      	str	r3, [r7, #12]
            break;
 8011340:	e000      	b.n	8011344 <wc_HashGetDigestSize+0x6c>
            break;
 8011342:	bf00      	nop
    }
    return dig_size;
 8011344:	68fb      	ldr	r3, [r7, #12]
}
 8011346:	4618      	mov	r0, r3
 8011348:	3714      	adds	r7, #20
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr
 8011352:	bf00      	nop

08011354 <wc_Hash>:
}

/* Generic Hashing Wrapper */
int wc_Hash(enum wc_HashType hash_type, const byte* data,
    word32 data_len, byte* hash, word32 hash_len)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b086      	sub	sp, #24
 8011358:	af00      	add	r7, sp, #0
 801135a:	60b9      	str	r1, [r7, #8]
 801135c:	607a      	str	r2, [r7, #4]
 801135e:	603b      	str	r3, [r7, #0]
 8011360:	4603      	mov	r3, r0
 8011362:	73fb      	strb	r3, [r7, #15]
    int ret = HASH_TYPE_E; /* Default to hash type error */
 8011364:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 8011368:	617b      	str	r3, [r7, #20]
    word32 dig_size;

    /* Validate hash buffer size */
    dig_size = wc_HashGetDigestSize(hash_type);
 801136a:	7bfb      	ldrb	r3, [r7, #15]
 801136c:	4618      	mov	r0, r3
 801136e:	f7ff ffb3 	bl	80112d8 <wc_HashGetDigestSize>
 8011372:	4603      	mov	r3, r0
 8011374:	613b      	str	r3, [r7, #16]
    if (hash_len < dig_size) {
 8011376:	6a3a      	ldr	r2, [r7, #32]
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	429a      	cmp	r2, r3
 801137c:	d202      	bcs.n	8011384 <wc_Hash+0x30>
        return BUFFER_E;
 801137e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8011382:	e02a      	b.n	80113da <wc_Hash+0x86>
    (void)data;
    (void)data_len;
    (void)hash;
    (void)hash_len;

    switch(hash_type)
 8011384:	7bfb      	ldrb	r3, [r7, #15]
 8011386:	3b03      	subs	r3, #3
 8011388:	2b0a      	cmp	r3, #10
 801138a:	d820      	bhi.n	80113ce <wc_Hash+0x7a>
 801138c:	a201      	add	r2, pc, #4	; (adr r2, 8011394 <wc_Hash+0x40>)
 801138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011392:	bf00      	nop
 8011394:	080113d7 	.word	0x080113d7
 8011398:	080113d7 	.word	0x080113d7
 801139c:	080113d7 	.word	0x080113d7
 80113a0:	080113c1 	.word	0x080113c1
 80113a4:	080113d7 	.word	0x080113d7
 80113a8:	080113d7 	.word	0x080113d7
 80113ac:	080113d7 	.word	0x080113d7
 80113b0:	080113d7 	.word	0x080113d7
 80113b4:	080113d7 	.word	0x080113d7
 80113b8:	080113d7 	.word	0x080113d7
 80113bc:	080113d7 	.word	0x080113d7
            ret = wc_Sha224Hash(data, data_len, hash);
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_Sha256Hash(data, data_len, hash);
 80113c0:	683a      	ldr	r2, [r7, #0]
 80113c2:	6879      	ldr	r1, [r7, #4]
 80113c4:	68b8      	ldr	r0, [r7, #8]
 80113c6:	f000 f80d 	bl	80113e4 <wc_Sha256Hash>
 80113ca:	6178      	str	r0, [r7, #20]
#endif
            break;
 80113cc:	e004      	b.n	80113d8 <wc_Hash+0x84>
        case WC_HASH_TYPE_MD4:
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_BLAKE2S:
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
 80113ce:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80113d2:	617b      	str	r3, [r7, #20]
            break;
 80113d4:	e000      	b.n	80113d8 <wc_Hash+0x84>
            break;
 80113d6:	bf00      	nop
    }
    return ret;
 80113d8:	697b      	ldr	r3, [r7, #20]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3718      	adds	r7, #24
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop

080113e4 <wc_Sha256Hash>:
}
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b088      	sub	sp, #32
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
        int ret = 0;
 80113f0:	2300      	movs	r3, #0
 80113f2:	61fb      	str	r3, [r7, #28]
    #ifdef WOLFSSL_SMALL_STACK
        wc_Sha256* sha256;
    #else
        wc_Sha256 sha256[1];
    #endif
        int devId = INVALID_DEVID;
 80113f4:	f06f 0301 	mvn.w	r3, #1
 80113f8:	61bb      	str	r3, [r7, #24]

    #ifdef WOLFSSL_SMALL_STACK
        sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 80113fa:	2070      	movs	r0, #112	; 0x70
 80113fc:	f000 f82e 	bl	801145c <wolfSSL_Malloc>
 8011400:	6178      	str	r0, [r7, #20]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d102      	bne.n	801140e <wc_Sha256Hash+0x2a>
            return MEMORY_E;
 8011408:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801140c:	e022      	b.n	8011454 <wc_Sha256Hash+0x70>
        /* only use devId if its not an empty hash */
        if (data != NULL && len > 0)
            devId = wc_CryptoCb_GetDevIdAtIndex(0);
    #endif

        if ((ret = wc_InitSha256_ex(sha256, NULL, devId)) != 0) {
 801140e:	69ba      	ldr	r2, [r7, #24]
 8011410:	2100      	movs	r1, #0
 8011412:	6978      	ldr	r0, [r7, #20]
 8011414:	f001 fade 	bl	80129d4 <wc_InitSha256_ex>
 8011418:	61f8      	str	r0, [r7, #28]
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d110      	bne.n	8011442 <wc_Sha256Hash+0x5e>
            WOLFSSL_MSG("InitSha256 failed");
        }
        else {
            if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
 8011420:	68ba      	ldr	r2, [r7, #8]
 8011422:	68f9      	ldr	r1, [r7, #12]
 8011424:	6978      	ldr	r0, [r7, #20]
 8011426:	f001 ff25 	bl	8013274 <wc_Sha256Update>
 801142a:	61f8      	str	r0, [r7, #28]
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d104      	bne.n	801143c <wc_Sha256Hash+0x58>
                WOLFSSL_MSG("Sha256Update failed");
            }
            else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
 8011432:	6879      	ldr	r1, [r7, #4]
 8011434:	6978      	ldr	r0, [r7, #20]
 8011436:	f001 ffb9 	bl	80133ac <wc_Sha256Final>
 801143a:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha256Final failed");
            }
            wc_Sha256Free(sha256);
 801143c:	6978      	ldr	r0, [r7, #20]
 801143e:	f001 ffe0 	bl	8013402 <wc_Sha256Free>
        }


    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	613b      	str	r3, [r7, #16]
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <wc_Sha256Hash+0x6e>
 801144c:	6938      	ldr	r0, [r7, #16]
 801144e:	f000 f821 	bl	8011494 <wolfSSL_Free>
    #endif

        return ret;
 8011452:	69fb      	ldr	r3, [r7, #28]
    }
 8011454:	4618      	mov	r0, r3
 8011456:	3720      	adds	r7, #32
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <wolfSSL_Malloc>:
#ifdef WOLFSSL_DEBUG_MEMORY
void* wolfSSL_Malloc(size_t size, const char* func, unsigned int line)
#else
void* wolfSSL_Malloc(size_t size)
#endif
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
    void* res = 0;
 8011464:	2300      	movs	r3, #0
 8011466:	60fb      	str	r3, [r7, #12]

    if (malloc_function) {
 8011468:	4b09      	ldr	r3, [pc, #36]	; (8011490 <wolfSSL_Malloc+0x34>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d005      	beq.n	801147c <wolfSSL_Malloc+0x20>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
 8011470:	4b07      	ldr	r3, [pc, #28]	; (8011490 <wolfSSL_Malloc+0x34>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	4798      	blx	r3
 8011478:	60f8      	str	r0, [r7, #12]
 801147a:	e004      	b.n	8011486 <wolfSSL_Malloc+0x2a>
    #endif
    }
    else {
    #ifndef WOLFSSL_NO_MALLOC
        res = malloc(size);
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f00a fa97 	bl	801b9b0 <malloc>
 8011482:	4603      	mov	r3, r0
 8011484:	60fb      	str	r3, [r7, #12]
        gMemFailCount = gMemFailCountSeed; /* reset */
        return NULL;
    }
#endif

    return res;
 8011486:	68fb      	ldr	r3, [r7, #12]
}
 8011488:	4618      	mov	r0, r3
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	20000b58 	.word	0x20000b58

08011494 <wolfSSL_Free>:
#ifdef WOLFSSL_DEBUG_MEMORY
void wolfSSL_Free(void *ptr, const char* func, unsigned int line)
#else
void wolfSSL_Free(void *ptr)
#endif
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
    (void)func;
    (void)line;
#endif
#endif

    if (free_function) {
 801149c:	4b07      	ldr	r3, [pc, #28]	; (80114bc <wolfSSL_Free+0x28>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d004      	beq.n	80114ae <wolfSSL_Free+0x1a>
    #ifdef WOLFSSL_DEBUG_MEMORY
        free_function(ptr, func, line);
    #else
        free_function(ptr);
 80114a4:	4b05      	ldr	r3, [pc, #20]	; (80114bc <wolfSSL_Free+0x28>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	4798      	blx	r3
        free(ptr);
    #else
        WOLFSSL_MSG("No free available");
    #endif
    }
}
 80114ac:	e002      	b.n	80114b4 <wolfSSL_Free+0x20>
        free(ptr);
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f00a fa86 	bl	801b9c0 <free>
}
 80114b4:	bf00      	nop
 80114b6:	3708      	adds	r7, #8
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}
 80114bc:	20000b5c 	.word	0x20000b5c

080114c0 <ForceZero>:
{
 80114c0:	b480      	push	{r7}
 80114c2:	b085      	sub	sp, #20
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 80114ce:	e004      	b.n	80114da <ForceZero+0x1a>
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	1c5a      	adds	r2, r3, #1
 80114d4:	60fa      	str	r2, [r7, #12]
 80114d6:	2200      	movs	r2, #0
 80114d8:	701a      	strb	r2, [r3, #0]
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	1e5a      	subs	r2, r3, #1
 80114de:	603a      	str	r2, [r7, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d1f5      	bne.n	80114d0 <ForceZero+0x10>
}
 80114e4:	bf00      	nop
 80114e6:	3714      	adds	r7, #20
 80114e8:	46bd      	mov	sp, r7
 80114ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ee:	4770      	bx	lr

080114f0 <Hash_DRBG_Uninstantiate>:
    return ret;
}

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_DRBG_Uninstantiate(DRBG_internal* drbg)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b086      	sub	sp, #24
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
    word32 i;
    int    compareSum = 0;
 80114f8:	2300      	movs	r3, #0
 80114fa:	613b      	str	r3, [r7, #16]
    byte*  compareDrbg = (byte*)drbg;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	60fb      	str	r3, [r7, #12]

#ifdef WOLFSSL_SMALL_STACK_CACHE
    wc_Sha256Free(&drbg->sha256);
#endif

    ForceZero(drbg, sizeof(DRBG_internal));
 8011500:	2178      	movs	r1, #120	; 0x78
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f7ff ffdc 	bl	80114c0 <ForceZero>

    for (i = 0; i < sizeof(DRBG_internal); i++)
 8011508:	2300      	movs	r3, #0
 801150a:	617b      	str	r3, [r7, #20]
 801150c:	e00a      	b.n	8011524 <Hash_DRBG_Uninstantiate+0x34>
        compareSum |= compareDrbg[i] ^ 0;
 801150e:	68fa      	ldr	r2, [r7, #12]
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	4413      	add	r3, r2
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	461a      	mov	r2, r3
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	4313      	orrs	r3, r2
 801151c:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(DRBG_internal); i++)
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	3301      	adds	r3, #1
 8011522:	617b      	str	r3, [r7, #20]
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	2b77      	cmp	r3, #119	; 0x77
 8011528:	d9f1      	bls.n	801150e <Hash_DRBG_Uninstantiate+0x1e>

    return (compareSum == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	bf14      	ite	ne
 8011530:	2301      	movne	r3, #1
 8011532:	2300      	moveq	r3, #0
 8011534:	b2db      	uxtb	r3, r3
}
 8011536:	4618      	mov	r0, r3
 8011538:	3718      	adds	r7, #24
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <wc_FreeRng>:
    return wc_RNG_GenerateBlock(rng, b, 1);
}


int wc_FreeRng(WC_RNG* rng)
{
 801153e:	b580      	push	{r7, lr}
 8011540:	b084      	sub	sp, #16
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8011546:	2300      	movs	r3, #0
 8011548:	60fb      	str	r3, [r7, #12]

    if (rng == NULL)
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d102      	bne.n	8011556 <wc_FreeRng+0x18>
        return BAD_FUNC_ARG;
 8011550:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8011554:	e01e      	b.n	8011594 <wc_FreeRng+0x56>
#if defined(WOLFSSL_ASYNC_CRYPT)
    wolfAsync_DevCtxFree(&rng->asyncDev, WOLFSSL_ASYNC_MARKER_RNG);
#endif

#ifdef HAVE_HASHDRBG
    if (rng->drbg != NULL) {
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	689b      	ldr	r3, [r3, #8]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d016      	beq.n	801158c <wc_FreeRng+0x4e>
      if (Hash_DRBG_Uninstantiate((DRBG_internal *)rng->drbg) != DRBG_SUCCESS)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	689b      	ldr	r3, [r3, #8]
 8011562:	4618      	mov	r0, r3
 8011564:	f7ff ffc4 	bl	80114f0 <Hash_DRBG_Uninstantiate>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	d002      	beq.n	8011574 <wc_FreeRng+0x36>
            ret = RNG_FAILURE_E;
 801156e:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
 8011572:	60fb      	str	r3, [r7, #12]

    #if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
        XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	689b      	ldr	r3, [r3, #8]
 8011578:	60bb      	str	r3, [r7, #8]
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d002      	beq.n	8011586 <wc_FreeRng+0x48>
 8011580:	68b8      	ldr	r0, [r7, #8]
 8011582:	f7ff ff87 	bl	8011494 <wolfSSL_Free>
    #endif
        rng->drbg = NULL;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2200      	movs	r2, #0
 801158a:	609a      	str	r2, [r3, #8]
    }

    rng->status = DRBG_NOT_INIT;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2200      	movs	r2, #0
 8011590:	731a      	strb	r2, [r3, #12]
#endif /* HAVE_HASHDRBG */

    return ret;
 8011592:	68fb      	ldr	r3, [r7, #12]
}
 8011594:	4618      	mov	r0, r3
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <ForceZero>:
{
 801159c:	b480      	push	{r7}
 801159e:	b085      	sub	sp, #20
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 80115aa:	e004      	b.n	80115b6 <ForceZero+0x1a>
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	1c5a      	adds	r2, r3, #1
 80115b0:	60fa      	str	r2, [r7, #12]
 80115b2:	2200      	movs	r2, #0
 80115b4:	701a      	strb	r2, [r3, #0]
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	1e5a      	subs	r2, r3, #1
 80115ba:	603a      	str	r2, [r7, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d1f5      	bne.n	80115ac <ForceZero+0x10>
}
 80115c0:	bf00      	nop
 80115c2:	3714      	adds	r7, #20
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr

080115cc <ConstantCompare>:
{
 80115cc:	b480      	push	{r7}
 80115ce:	b087      	sub	sp, #28
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	607a      	str	r2, [r7, #4]
    int compareSum = 0;
 80115d8:	2300      	movs	r3, #0
 80115da:	613b      	str	r3, [r7, #16]
    for (i = 0; i < length; i++) {
 80115dc:	2300      	movs	r3, #0
 80115de:	617b      	str	r3, [r7, #20]
 80115e0:	e010      	b.n	8011604 <ConstantCompare+0x38>
        compareSum |= a[i] ^ b[i];
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	68fa      	ldr	r2, [r7, #12]
 80115e6:	4413      	add	r3, r2
 80115e8:	781a      	ldrb	r2, [r3, #0]
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	68b9      	ldr	r1, [r7, #8]
 80115ee:	440b      	add	r3, r1
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	4053      	eors	r3, r2
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	461a      	mov	r2, r3
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	4313      	orrs	r3, r2
 80115fc:	613b      	str	r3, [r7, #16]
    for (i = 0; i < length; i++) {
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	3301      	adds	r3, #1
 8011602:	617b      	str	r3, [r7, #20]
 8011604:	697a      	ldr	r2, [r7, #20]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	429a      	cmp	r2, r3
 801160a:	dbea      	blt.n	80115e2 <ConstantCompare+0x16>
    return compareSum;
 801160c:	693b      	ldr	r3, [r7, #16]
}
 801160e:	4618      	mov	r0, r3
 8011610:	371c      	adds	r7, #28
 8011612:	46bd      	mov	sp, r7
 8011614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011618:	4770      	bx	lr

0801161a <ctMaskGT>:
{
 801161a:	b480      	push	{r7}
 801161c:	b083      	sub	sp, #12
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
 8011622:	6039      	str	r1, [r7, #0]
    return (byte)((((word32)a - b - 1) >> 31) - 1);
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	3b01      	subs	r3, #1
 801162c:	0fdb      	lsrs	r3, r3, #31
 801162e:	b2db      	uxtb	r3, r3
 8011630:	3b01      	subs	r3, #1
 8011632:	b2db      	uxtb	r3, r3
}
 8011634:	4618      	mov	r0, r3
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <ctMaskGTE>:
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
    return (byte)((((word32)a - b    ) >> 31) - 1);
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	0fdb      	lsrs	r3, r3, #31
 8011652:	b2db      	uxtb	r3, r3
 8011654:	3b01      	subs	r3, #1
 8011656:	b2db      	uxtb	r3, r3
}
 8011658:	4618      	mov	r0, r3
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <ctMaskLT>:
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
    return (byte)((((word32)b - a - 1) >> 31) - 1);
 801166e:	683a      	ldr	r2, [r7, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	1ad3      	subs	r3, r2, r3
 8011674:	3b01      	subs	r3, #1
 8011676:	0fdb      	lsrs	r3, r3, #31
 8011678:	b2db      	uxtb	r3, r3
 801167a:	3b01      	subs	r3, #1
 801167c:	b2db      	uxtb	r3, r3
}
 801167e:	4618      	mov	r0, r3
 8011680:	370c      	adds	r7, #12
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr

0801168a <ctMaskLTE>:
{
 801168a:	b480      	push	{r7}
 801168c:	b083      	sub	sp, #12
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	6039      	str	r1, [r7, #0]
    return (byte)((((word32)b - a    ) >> 31) - 1);
 8011694:	683a      	ldr	r2, [r7, #0]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	1ad3      	subs	r3, r2, r3
 801169a:	0fdb      	lsrs	r3, r3, #31
 801169c:	b2db      	uxtb	r3, r3
 801169e:	3b01      	subs	r3, #1
 80116a0:	b2db      	uxtb	r3, r3
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	370c      	adds	r7, #12
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr

080116ae <ctMaskEq>:

/* Constant time - mask set when a == b. */
WC_STATIC WC_INLINE byte ctMaskEq(int a, int b)
{
 80116ae:	b590      	push	{r4, r7, lr}
 80116b0:	b083      	sub	sp, #12
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
 80116b6:	6039      	str	r1, [r7, #0]
    return (byte)(~ctMaskGT(a, b)) & (byte)(~ctMaskLT(a, b));
 80116b8:	6839      	ldr	r1, [r7, #0]
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f7ff ffad 	bl	801161a <ctMaskGT>
 80116c0:	4603      	mov	r3, r0
 80116c2:	461c      	mov	r4, r3
 80116c4:	6839      	ldr	r1, [r7, #0]
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7ff ffcc 	bl	8011664 <ctMaskLT>
 80116cc:	4603      	mov	r3, r0
 80116ce:	4323      	orrs	r3, r4
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	43db      	mvns	r3, r3
 80116d4:	b2db      	uxtb	r3, r3
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	370c      	adds	r7, #12
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd90      	pop	{r4, r7, pc}

080116de <ctMask16GT>:

/* Constant time - sets 16 bit integer mask when a > b */
WC_STATIC WC_INLINE word16 ctMask16GT(int a, int b)
{
 80116de:	b480      	push	{r7}
 80116e0:	b083      	sub	sp, #12
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
 80116e6:	6039      	str	r1, [r7, #0]
    return (word16)((((word32)a - b - 1) >> 31) - 1);
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	1ad3      	subs	r3, r2, r3
 80116ee:	3b01      	subs	r3, #1
 80116f0:	0fdb      	lsrs	r3, r3, #31
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	3b01      	subs	r3, #1
 80116f6:	b29b      	uxth	r3, r3
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr

08011704 <ctMask16LT>:
    return (word16)((((word32)a - b    ) >> 31) - 1);
}

/* Constant time - sets 16 bit integer mask when a < b. */
WC_STATIC WC_INLINE word16 ctMask16LT(int a, int b)
{
 8011704:	b480      	push	{r7}
 8011706:	b083      	sub	sp, #12
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
    return (word16)((((word32)b - a - 1) >> 31) - 1);
 801170e:	683a      	ldr	r2, [r7, #0]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	1ad3      	subs	r3, r2, r3
 8011714:	3b01      	subs	r3, #1
 8011716:	0fdb      	lsrs	r3, r3, #31
 8011718:	b29b      	uxth	r3, r3
 801171a:	3b01      	subs	r3, #1
 801171c:	b29b      	uxth	r3, r3
}
 801171e:	4618      	mov	r0, r3
 8011720:	370c      	adds	r7, #12
 8011722:	46bd      	mov	sp, r7
 8011724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011728:	4770      	bx	lr

0801172a <ctMask16Eq>:
    return (word16)((((word32)b - a    ) >> 31) - 1);
}

/* Constant time - sets 16 bit integer mask when a == b. */
WC_STATIC WC_INLINE word16 ctMask16Eq(int a, int b)
{
 801172a:	b590      	push	{r4, r7, lr}
 801172c:	b083      	sub	sp, #12
 801172e:	af00      	add	r7, sp, #0
 8011730:	6078      	str	r0, [r7, #4]
 8011732:	6039      	str	r1, [r7, #0]
    return (word16)(~ctMask16GT(a, b)) & (word16)(~ctMask16LT(a, b));
 8011734:	6839      	ldr	r1, [r7, #0]
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f7ff ffd1 	bl	80116de <ctMask16GT>
 801173c:	4603      	mov	r3, r0
 801173e:	461c      	mov	r4, r3
 8011740:	6839      	ldr	r1, [r7, #0]
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f7ff ffde 	bl	8011704 <ctMask16LT>
 8011748:	4603      	mov	r3, r0
 801174a:	4323      	orrs	r3, r4
 801174c:	b29b      	uxth	r3, r3
 801174e:	43db      	mvns	r3, r3
 8011750:	b29b      	uxth	r3, r3
}
 8011752:	4618      	mov	r0, r3
 8011754:	370c      	adds	r7, #12
 8011756:	46bd      	mov	sp, r7
 8011758:	bd90      	pop	{r4, r7, pc}

0801175a <ctMaskNotEq>:

/* Constant time - mask set when a != b. */
WC_STATIC WC_INLINE byte ctMaskNotEq(int a, int b)
{
 801175a:	b590      	push	{r4, r7, lr}
 801175c:	b083      	sub	sp, #12
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
 8011762:	6039      	str	r1, [r7, #0]
    return (byte)ctMaskGT(a, b) | (byte)ctMaskLT(a, b);
 8011764:	6839      	ldr	r1, [r7, #0]
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7ff ff57 	bl	801161a <ctMaskGT>
 801176c:	4603      	mov	r3, r0
 801176e:	461c      	mov	r4, r3
 8011770:	6839      	ldr	r1, [r7, #0]
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f7ff ff76 	bl	8011664 <ctMaskLT>
 8011778:	4603      	mov	r3, r0
 801177a:	4323      	orrs	r3, r4
 801177c:	b2db      	uxtb	r3, r3
}
 801177e:	4618      	mov	r0, r3
 8011780:	370c      	adds	r7, #12
 8011782:	46bd      	mov	sp, r7
 8011784:	bd90      	pop	{r4, r7, pc}

08011786 <ctMaskSelInt>:
    return (byte)((b & ((byte)~(word32)m)) | (a & m));
}

/* Constant time - select integer a when mask is set and integer b otherwise. */
WC_STATIC WC_INLINE int ctMaskSelInt(byte m, int a, int b)
{
 8011786:	b480      	push	{r7}
 8011788:	b085      	sub	sp, #20
 801178a:	af00      	add	r7, sp, #0
 801178c:	4603      	mov	r3, r0
 801178e:	60b9      	str	r1, [r7, #8]
 8011790:	607a      	str	r2, [r7, #4]
 8011792:	73fb      	strb	r3, [r7, #15]
    return (b & (~(signed int)(signed char)m)) |
 8011794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011798:	43da      	mvns	r2, r3
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	401a      	ands	r2, r3
           (a & ( (signed int)(signed char)m));
 801179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117a2:	4619      	mov	r1, r3
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	400b      	ands	r3, r1
    return (b & (~(signed int)(signed char)m)) |
 80117a8:	4313      	orrs	r3, r2
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3714      	adds	r7, #20
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr

080117b6 <wc_RsaCleanup>:
    RSA_STATE_DECRYPT_RES,
};


static void wc_RsaCleanup(RsaKey* key)
{
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b084      	sub	sp, #16
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
#ifndef WOLFSSL_RSA_VERIFY_INLINE
    if (key && key->data) {
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d047      	beq.n	8011854 <wc_RsaCleanup+0x9e>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80117ca:	3304      	adds	r3, #4
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d040      	beq.n	8011854 <wc_RsaCleanup+0x9e>
        /* make sure any allocated memory is free'd */
        if (key->dataIsAlloc) {
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80117d8:	3318      	adds	r3, #24
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d02d      	beq.n	801183c <wc_RsaCleanup+0x86>
        #ifndef WOLFSSL_RSA_PUBLIC_ONLY
            if (key->type == RSA_PRIVATE_DECRYPT ||
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80117e6:	3308      	adds	r3, #8
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2b03      	cmp	r3, #3
 80117ec:	d006      	beq.n	80117fc <wc_RsaCleanup+0x46>
                key->type == RSA_PRIVATE_ENCRYPT) {
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80117f4:	3308      	adds	r3, #8
 80117f6:	681b      	ldr	r3, [r3, #0]
            if (key->type == RSA_PRIVATE_DECRYPT ||
 80117f8:	2b02      	cmp	r3, #2
 80117fa:	d10d      	bne.n	8011818 <wc_RsaCleanup+0x62>
                ForceZero(key->data, key->dataLen);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8011802:	3304      	adds	r3, #4
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801180c:	3310      	adds	r3, #16
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4619      	mov	r1, r3
 8011812:	4610      	mov	r0, r2
 8011814:	f7ff fec2 	bl	801159c <ForceZero>
            }
        #endif
            XFREE(key->data, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801181e:	3304      	adds	r3, #4
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	60fb      	str	r3, [r7, #12]
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d002      	beq.n	8011830 <wc_RsaCleanup+0x7a>
 801182a:	68f8      	ldr	r0, [r7, #12]
 801182c:	f7ff fe32 	bl	8011494 <wolfSSL_Free>
            key->dataIsAlloc = 0;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8011836:	3318      	adds	r3, #24
 8011838:	2200      	movs	r2, #0
 801183a:	701a      	strb	r2, [r3, #0]
        }
        key->data = NULL;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8011842:	3304      	adds	r3, #4
 8011844:	2200      	movs	r2, #0
 8011846:	601a      	str	r2, [r3, #0]
        key->dataLen = 0;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801184e:	3310      	adds	r3, #16
 8011850:	2200      	movs	r2, #0
 8011852:	601a      	str	r2, [r3, #0]
    }
#else
    (void)key;
#endif
}
 8011854:	bf00      	nop
 8011856:	3710      	adds	r7, #16
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <wc_InitRsaKey_ex>:

int wc_InitRsaKey_ex(RsaKey* key, void* heap, int devId)
{
 801185c:	b5b0      	push	{r4, r5, r7, lr}
 801185e:	b088      	sub	sp, #32
 8011860:	af02      	add	r7, sp, #8
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
    int ret = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	617b      	str	r3, [r7, #20]

    if (key == NULL) {
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d102      	bne.n	8011878 <wc_InitRsaKey_ex+0x1c>
        return BAD_FUNC_ARG;
 8011872:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8011876:	e06c      	b.n	8011952 <wc_InitRsaKey_ex+0xf6>
    }

    XMEMSET(key, 0, sizeof(RsaKey));
 8011878:	f641 027c 	movw	r2, #6268	; 0x187c
 801187c:	2100      	movs	r1, #0
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f00a f8eb 	bl	801ba5a <memset>

    key->type = RSA_TYPE_UNKNOWN;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801188a:	3308      	adds	r3, #8
 801188c:	f04f 32ff 	mov.w	r2, #4294967295
 8011890:	601a      	str	r2, [r3, #0]
    key->state = RSA_STATE_NONE;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8011898:	330c      	adds	r3, #12
 801189a:	2200      	movs	r2, #0
 801189c:	601a      	str	r2, [r3, #0]
    key->heap = heap;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	601a      	str	r2, [r3, #0]
#ifndef WOLFSSL_RSA_VERIFY_INLINE
    key->dataIsAlloc = 0;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80118ae:	3318      	adds	r3, #24
 80118b0:	2200      	movs	r2, #0
 80118b2:	701a      	strb	r2, [r3, #0]
    key->data = NULL;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80118ba:	3304      	adds	r3, #4
 80118bc:	2200      	movs	r2, #0
 80118be:	601a      	str	r2, [r3, #0]
#endif
    key->dataLen = 0;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80118c6:	3310      	adds	r3, #16
 80118c8:	2200      	movs	r2, #0
 80118ca:	601a      	str	r2, [r3, #0]
#ifdef WC_RSA_BLINDING
    key->rng = NULL;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80118d2:	3314      	adds	r3, #20
 80118d4:	2200      	movs	r2, #0
 80118d6:	601a      	str	r2, [r3, #0]
            return ret;
    #endif /* WC_ASYNC_ENABLE_RSA */
#endif /* WOLFSSL_ASYNC_CRYPT */

#ifndef WOLFSSL_RSA_PUBLIC_ONLY
    ret = mp_init_multi(&key->n, &key->e, NULL, NULL, NULL, NULL);
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 80118e0:	2300      	movs	r3, #0
 80118e2:	9301      	str	r3, [sp, #4]
 80118e4:	2300      	movs	r3, #0
 80118e6:	9300      	str	r3, [sp, #0]
 80118e8:	2300      	movs	r3, #0
 80118ea:	2200      	movs	r2, #0
 80118ec:	f009 fadc 	bl	801aea8 <sp_init_multi>
 80118f0:	6178      	str	r0, [r7, #20]
    if (ret != MP_OKAY)
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d001      	beq.n	80118fc <wc_InitRsaKey_ex+0xa0>
        return ret;
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	e02a      	b.n	8011952 <wc_InitRsaKey_ex+0xf6>

#if !defined(WOLFSSL_KEY_GEN) && !defined(OPENSSL_EXTRA) && defined(RSA_LOW_MEM)
    ret = mp_init_multi(&key->d, &key->p, &key->q, NULL, NULL, NULL);
#else
    ret = mp_init_multi(&key->d, &key->p, &key->q, &key->dP, &key->dQ, &key->u);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	f503 60c3 	add.w	r0, r3, #1560	; 0x618
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f603 1124 	addw	r1, r3, #2340	; 0x924
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f503 6443 	add.w	r4, r3, #3120	; 0xc30
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f603 753c 	addw	r5, r3, #3900	; 0xf3c
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 801191a:	3308      	adds	r3, #8
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	f502 52aa 	add.w	r2, r2, #5440	; 0x1540
 8011922:	3214      	adds	r2, #20
 8011924:	9201      	str	r2, [sp, #4]
 8011926:	9300      	str	r3, [sp, #0]
 8011928:	462b      	mov	r3, r5
 801192a:	4622      	mov	r2, r4
 801192c:	f009 fabc 	bl	801aea8 <sp_init_multi>
 8011930:	6178      	str	r0, [r7, #20]
#endif
    if (ret != MP_OKAY) {
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d00b      	beq.n	8011950 <wc_InitRsaKey_ex+0xf4>
        mp_clear(&key->n);
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	4618      	mov	r0, r3
 801193c:	f009 fb49 	bl	801afd2 <sp_clear>
        mp_clear(&key->e);
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8011946:	4618      	mov	r0, r3
 8011948:	f009 fb43 	bl	801afd2 <sp_clear>
        return ret;
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	e000      	b.n	8011952 <wc_InitRsaKey_ex+0xf6>
#ifdef WOLFSSL_AFALG_XILINX_RSA
    key->alFd = WC_SOCK_NOTSET;
    key->rdFd = WC_SOCK_NOTSET;
#endif

    return ret;
 8011950:	697b      	ldr	r3, [r7, #20]
}
 8011952:	4618      	mov	r0, r3
 8011954:	3718      	adds	r7, #24
 8011956:	46bd      	mov	sp, r7
 8011958:	bdb0      	pop	{r4, r5, r7, pc}

0801195a <wc_FreeRsaKey>:
    return ret;
}
#endif /* WOLFSSL_CRYPTOCELL */

int wc_FreeRsaKey(RsaKey* key)
{
 801195a:	b580      	push	{r7, lr}
 801195c:	b084      	sub	sp, #16
 801195e:	af00      	add	r7, sp, #0
 8011960:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8011962:	2300      	movs	r3, #0
 8011964:	60fb      	str	r3, [r7, #12]

    if (key == NULL) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d102      	bne.n	8011972 <wc_FreeRsaKey+0x18>
        return BAD_FUNC_ARG;
 801196c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8011970:	e060      	b.n	8011a34 <wc_FreeRsaKey+0xda>
    }

    wc_RsaCleanup(key);
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7ff ff1f 	bl	80117b6 <wc_RsaCleanup>
#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_RSA)
    wolfAsync_DevCtxFree(&key->asyncDev, WOLFSSL_ASYNC_MARKER_RSA);
#endif

#ifndef WOLFSSL_RSA_PUBLIC_ONLY
    if (key->type == RSA_PRIVATE) {
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801197e:	3308      	adds	r3, #8
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2b01      	cmp	r3, #1
 8011984:	d125      	bne.n	80119d2 <wc_FreeRsaKey+0x78>
#if defined(WOLFSSL_KEY_GEN) || defined(OPENSSL_EXTRA) || !defined(RSA_LOW_MEM)
        mp_forcezero(&key->u);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 801198c:	3314      	adds	r3, #20
 801198e:	4618      	mov	r0, r3
 8011990:	f009 fb40 	bl	801b014 <sp_forcezero>
        mp_forcezero(&key->dQ);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 801199a:	3308      	adds	r3, #8
 801199c:	4618      	mov	r0, r3
 801199e:	f009 fb39 	bl	801b014 <sp_forcezero>
        mp_forcezero(&key->dP);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f603 733c 	addw	r3, r3, #3900	; 0xf3c
 80119a8:	4618      	mov	r0, r3
 80119aa:	f009 fb33 	bl	801b014 <sp_forcezero>
#endif
        mp_forcezero(&key->q);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80119b4:	4618      	mov	r0, r3
 80119b6:	f009 fb2d 	bl	801b014 <sp_forcezero>
        mp_forcezero(&key->p);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f603 1324 	addw	r3, r3, #2340	; 0x924
 80119c0:	4618      	mov	r0, r3
 80119c2:	f009 fb27 	bl	801b014 <sp_forcezero>
        mp_forcezero(&key->d);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80119cc:	4618      	mov	r0, r3
 80119ce:	f009 fb21 	bl	801b014 <sp_forcezero>
    }
    /* private part */
#if defined(WOLFSSL_KEY_GEN) || defined(OPENSSL_EXTRA) || !defined(RSA_LOW_MEM)
    mp_clear(&key->u);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80119d8:	3314      	adds	r3, #20
 80119da:	4618      	mov	r0, r3
 80119dc:	f009 faf9 	bl	801afd2 <sp_clear>
    mp_clear(&key->dQ);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 80119e6:	3308      	adds	r3, #8
 80119e8:	4618      	mov	r0, r3
 80119ea:	f009 faf2 	bl	801afd2 <sp_clear>
    mp_clear(&key->dP);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f603 733c 	addw	r3, r3, #3900	; 0xf3c
 80119f4:	4618      	mov	r0, r3
 80119f6:	f009 faec 	bl	801afd2 <sp_clear>
#endif
    mp_clear(&key->q);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8011a00:	4618      	mov	r0, r3
 8011a02:	f009 fae6 	bl	801afd2 <sp_clear>
    mp_clear(&key->p);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f009 fae0 	bl	801afd2 <sp_clear>
    mp_clear(&key->d);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f009 fada 	bl	801afd2 <sp_clear>
#endif /* WOLFSSL_RSA_PUBLIC_ONLY */

    /* public part */
    mp_clear(&key->e);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8011a24:	4618      	mov	r0, r3
 8011a26:	f009 fad4 	bl	801afd2 <sp_clear>
    mp_clear(&key->n);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f009 fad0 	bl	801afd2 <sp_clear>
        close(key->rdFd);
        key->rdFd = WC_SOCK_NOTSET;
    }
#endif

    return ret;
 8011a32:	68fb      	ldr	r3, [r7, #12]
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3710      	adds	r7, #16
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <RsaMGF1>:
   outSz: size of output buffer
 */
#if !defined(NO_SHA) || !defined(NO_SHA256) || defined(WOLFSSL_SHA384) || defined(WOLFSSL_SHA512)
static int RsaMGF1(enum wc_HashType hType, byte* seed, word32 seedSz,
                                        byte* out, word32 outSz, void* heap)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b09a      	sub	sp, #104	; 0x68
 8011a40:	af02      	add	r7, sp, #8
 8011a42:	60b9      	str	r1, [r7, #8]
 8011a44:	607a      	str	r2, [r7, #4]
 8011a46:	603b      	str	r3, [r7, #0]
 8011a48:	4603      	mov	r3, r0
 8011a4a:	73fb      	strb	r3, [r7, #15]
    word32 tmpSz;
    int hLen;
    int ret;
    word32 counter;
    word32 idx;
    hLen    = wc_HashGetDigestSize(hType);
 8011a4c:	7bfb      	ldrb	r3, [r7, #15]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7ff fc42 	bl	80112d8 <wc_HashGetDigestSize>
 8011a54:	6478      	str	r0, [r7, #68]	; 0x44
    counter = 0;
 8011a56:	2300      	movs	r3, #0
 8011a58:	653b      	str	r3, [r7, #80]	; 0x50
    idx     = 0;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	64fb      	str	r3, [r7, #76]	; 0x4c

    (void)heap;

    /* check error return of wc_HashGetDigestSize */
    if (hLen < 0) {
 8011a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	da01      	bge.n	8011a68 <RsaMGF1+0x2c>
        return hLen;
 8011a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a66:	e08f      	b.n	8011b88 <RsaMGF1+0x14c>
    }

    /* if tmp is not large enough than use some dynamic memory */
    if ((seedSz + 4) > sizeof(tmpA) || (word32)hLen > sizeof(tmpA)) {
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	3304      	adds	r3, #4
 8011a6c:	2b24      	cmp	r3, #36	; 0x24
 8011a6e:	d802      	bhi.n	8011a76 <RsaMGF1+0x3a>
 8011a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a72:	2b24      	cmp	r3, #36	; 0x24
 8011a74:	d914      	bls.n	8011aa0 <RsaMGF1+0x64>
        /* find largest amount of memory needed which will be the max of
         * hLen and (seedSz + 4) since tmp is used to store the hash digest */
        tmpSz = ((seedSz + 4) > (word32)hLen)? seedSz + 4: (word32)hLen;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	1d1a      	adds	r2, r3, #4
 8011a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	bf38      	it	cc
 8011a80:	4613      	movcc	r3, r2
 8011a82:	657b      	str	r3, [r7, #84]	; 0x54
        tmp = (byte*)XMALLOC(tmpSz, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011a84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011a86:	f7ff fce9 	bl	801145c <wolfSSL_Malloc>
 8011a8a:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (tmp == NULL) {
 8011a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d102      	bne.n	8011a98 <RsaMGF1+0x5c>
            return MEMORY_E;
 8011a92:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8011a96:	e077      	b.n	8011b88 <RsaMGF1+0x14c>
        }
        tmpF = 1; /* make sure to free memory when done */
 8011a98:	2301      	movs	r3, #1
 8011a9a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8011a9e:	e007      	b.n	8011ab0 <RsaMGF1+0x74>
    }
    else {
        /* use array on the stack */
        tmpSz = sizeof(tmpA);
 8011aa0:	2324      	movs	r3, #36	; 0x24
 8011aa2:	657b      	str	r3, [r7, #84]	; 0x54
        tmp  = tmpA;
 8011aa4:	f107 0314 	add.w	r3, r7, #20
 8011aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
        tmpF = 0; /* no need to free memory at end */
 8011aaa:	2300      	movs	r3, #0
 8011aac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    }

    do {
        int i = 0;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	64bb      	str	r3, [r7, #72]	; 0x48
        XMEMCPY(tmp, seed, seedSz);
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	68b9      	ldr	r1, [r7, #8]
 8011ab8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011aba:	f009 ffaa 	bl	801ba12 <memcpy>

        /* counter to byte array appended to tmp */
        tmp[seedSz]     = (byte)((counter >> 24) & 0xFF);
 8011abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ac0:	0e19      	lsrs	r1, r3, #24
 8011ac2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	b2ca      	uxtb	r2, r1
 8011aca:	701a      	strb	r2, [r3, #0]
        tmp[seedSz + 1] = (byte)((counter >> 16) & 0xFF);
 8011acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ace:	0c19      	lsrs	r1, r3, #16
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ad6:	4413      	add	r3, r2
 8011ad8:	b2ca      	uxtb	r2, r1
 8011ada:	701a      	strb	r2, [r3, #0]
        tmp[seedSz + 2] = (byte)((counter >>  8) & 0xFF);
 8011adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ade:	0a19      	lsrs	r1, r3, #8
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	3302      	adds	r3, #2
 8011ae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ae6:	4413      	add	r3, r2
 8011ae8:	b2ca      	uxtb	r2, r1
 8011aea:	701a      	strb	r2, [r3, #0]
        tmp[seedSz + 3] = (byte)((counter)       & 0xFF);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	3303      	adds	r3, #3
 8011af0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011af2:	4413      	add	r3, r2
 8011af4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011af6:	b2d2      	uxtb	r2, r2
 8011af8:	701a      	strb	r2, [r3, #0]

        /* hash and append to existing output */
        if ((ret = wc_Hash(hType, tmp, (seedSz + 4), tmp, tmpSz)) != 0) {
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	1d1a      	adds	r2, r3, #4
 8011afe:	7bf8      	ldrb	r0, [r7, #15]
 8011b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b02:	9300      	str	r3, [sp, #0]
 8011b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b06:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011b08:	f7ff fc24 	bl	8011354 <wc_Hash>
 8011b0c:	6438      	str	r0, [r7, #64]	; 0x40
 8011b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d00d      	beq.n	8011b30 <RsaMGF1+0xf4>
            /* check for if dynamic memory was needed, then free */
            if (tmpF) {
 8011b14:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d007      	beq.n	8011b2c <RsaMGF1+0xf0>
                XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d002      	beq.n	8011b2c <RsaMGF1+0xf0>
 8011b26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b28:	f7ff fcb4 	bl	8011494 <wolfSSL_Free>
            }
            return ret;
 8011b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b2e:	e02b      	b.n	8011b88 <RsaMGF1+0x14c>
        }

        for (i = 0; i < hLen && idx < outSz; i++) {
 8011b30:	2300      	movs	r3, #0
 8011b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b34:	e00c      	b.n	8011b50 <RsaMGF1+0x114>
            out[idx++] = tmp[i];
 8011b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011b3a:	441a      	add	r2, r3
 8011b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b3e:	1c59      	adds	r1, r3, #1
 8011b40:	64f9      	str	r1, [r7, #76]	; 0x4c
 8011b42:	6839      	ldr	r1, [r7, #0]
 8011b44:	440b      	add	r3, r1
 8011b46:	7812      	ldrb	r2, [r2, #0]
 8011b48:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < hLen && idx < outSz; i++) {
 8011b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b54:	429a      	cmp	r2, r3
 8011b56:	da03      	bge.n	8011b60 <RsaMGF1+0x124>
 8011b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d3ea      	bcc.n	8011b36 <RsaMGF1+0xfa>
        }
        counter++;
 8011b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b62:	3301      	adds	r3, #1
 8011b64:	653b      	str	r3, [r7, #80]	; 0x50
    } while (idx < outSz);
 8011b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d3a0      	bcc.n	8011ab0 <RsaMGF1+0x74>

    /* check for if dynamic memory was needed, then free */
    if (tmpF) {
 8011b6e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d007      	beq.n	8011b86 <RsaMGF1+0x14a>
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d002      	beq.n	8011b86 <RsaMGF1+0x14a>
 8011b80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b82:	f7ff fc87 	bl	8011494 <wolfSSL_Free>
    }

    return 0;
 8011b86:	2300      	movs	r3, #0
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3760      	adds	r7, #96	; 0x60
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <RsaMGF>:
/* helper function to direct which mask generation function is used
   switched on type input
 */
static int RsaMGF(int type, byte* seed, word32 seedSz, byte* out,
                                                    word32 outSz, void* heap)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b088      	sub	sp, #32
 8011b94:	af02      	add	r7, sp, #8
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	60b9      	str	r1, [r7, #8]
 8011b9a:	607a      	str	r2, [r7, #4]
 8011b9c:	603b      	str	r3, [r7, #0]
    int ret;

    switch(type) {
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d10b      	bne.n	8011bbc <RsaMGF+0x2c>
        case WC_MGF1SHA224:
            ret = RsaMGF1(WC_HASH_TYPE_SHA224, seed, seedSz, out, outSz, heap);
            break;
    #endif
        case WC_MGF1SHA256:
            ret = RsaMGF1(WC_HASH_TYPE_SHA256, seed, seedSz, out, outSz, heap);
 8011ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba6:	9301      	str	r3, [sp, #4]
 8011ba8:	6a3b      	ldr	r3, [r7, #32]
 8011baa:	9300      	str	r3, [sp, #0]
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	68b9      	ldr	r1, [r7, #8]
 8011bb2:	2006      	movs	r0, #6
 8011bb4:	f7ff ff42 	bl	8011a3c <RsaMGF1>
 8011bb8:	6178      	str	r0, [r7, #20]
            break;
 8011bba:	e002      	b.n	8011bc2 <RsaMGF+0x32>
            ret = RsaMGF1(WC_HASH_TYPE_SHA512, seed, seedSz, out, outSz, heap);
            break;
    #endif
        default:
            WOLFSSL_MSG("Unknown MGF type: check build options");
            ret = BAD_FUNC_ARG;
 8011bbc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8011bc0:	617b      	str	r3, [r7, #20]
    (void)seedSz;
    (void)out;
    (void)outSz;
    (void)heap;

    return ret;
 8011bc2:	697b      	ldr	r3, [r7, #20]
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3718      	adds	r7, #24
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <RsaUnPad_OAEP>:
/* UnPad plaintext, set start to *output, return length of plaintext,
 * < 0 on error */
static int RsaUnPad_OAEP(byte *pkcsBlock, unsigned int pkcsBlockLen,
                            byte **output, enum wc_HashType hType, int mgf,
                            byte* optLabel, word32 labelLen, void* heap)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b096      	sub	sp, #88	; 0x58
 8011bd0:	af02      	add	r7, sp, #8
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	607a      	str	r2, [r7, #4]
 8011bd8:	70fb      	strb	r3, [r7, #3]
    byte h[WC_MAX_DIGEST_SIZE]; /* max digest size */
    byte* tmp;
    word32 idx;

    /* no label is allowed, but catch if no label provided and length > 0 */
    if (optLabel == NULL && labelLen > 0) {
 8011bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d105      	bne.n	8011bec <RsaUnPad_OAEP+0x20>
 8011be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d002      	beq.n	8011bec <RsaUnPad_OAEP+0x20>
        return BUFFER_E;
 8011be6:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8011bea:	e0fc      	b.n	8011de6 <RsaUnPad_OAEP+0x21a>
    }

    hLen = wc_HashGetDigestSize(hType);
 8011bec:	78fb      	ldrb	r3, [r7, #3]
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7ff fb72 	bl	80112d8 <wc_HashGetDigestSize>
 8011bf4:	64b8      	str	r0, [r7, #72]	; 0x48
    if ((hLen < 0) || (pkcsBlockLen < (2 * (word32)hLen + 2))) {
 8011bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	db05      	blt.n	8011c08 <RsaUnPad_OAEP+0x3c>
 8011bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bfe:	3301      	adds	r3, #1
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	68ba      	ldr	r2, [r7, #8]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d202      	bcs.n	8011c0e <RsaUnPad_OAEP+0x42>
        return BAD_FUNC_ARG;
 8011c08:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8011c0c:	e0eb      	b.n	8011de6 <RsaUnPad_OAEP+0x21a>
    }

    tmp = (byte*)XMALLOC(pkcsBlockLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011c0e:	68b8      	ldr	r0, [r7, #8]
 8011c10:	f7ff fc24 	bl	801145c <wolfSSL_Malloc>
 8011c14:	6478      	str	r0, [r7, #68]	; 0x44
    if (tmp == NULL) {
 8011c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d102      	bne.n	8011c22 <RsaUnPad_OAEP+0x56>
        return MEMORY_E;
 8011c1c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8011c20:	e0e1      	b.n	8011de6 <RsaUnPad_OAEP+0x21a>
    }
    XMEMSET(tmp, 0, pkcsBlockLen);
 8011c22:	68ba      	ldr	r2, [r7, #8]
 8011c24:	2100      	movs	r1, #0
 8011c26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011c28:	f009 ff17 	bl	801ba5a <memset>

    /* find seedMask value */
    if ((ret = RsaMGF(mgf, (byte*)(pkcsBlock + (hLen + 1)),
 8011c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c2e:	3301      	adds	r3, #1
 8011c30:	68fa      	ldr	r2, [r7, #12]
 8011c32:	18d1      	adds	r1, r2, r3
                            pkcsBlockLen - hLen - 1, tmp, hLen, heap)) != 0) {
 8011c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c36:	68ba      	ldr	r2, [r7, #8]
 8011c38:	1ad3      	subs	r3, r2, r3
    if ((ret = RsaMGF(mgf, (byte*)(pkcsBlock + (hLen + 1)),
 8011c3a:	1e58      	subs	r0, r3, #1
 8011c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c40:	9201      	str	r2, [sp, #4]
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c46:	4602      	mov	r2, r0
 8011c48:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011c4a:	f7ff ffa1 	bl	8011b90 <RsaMGF>
 8011c4e:	6438      	str	r0, [r7, #64]	; 0x40
 8011c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d009      	beq.n	8011c6a <RsaUnPad_OAEP+0x9e>
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c58:	637b      	str	r3, [r7, #52]	; 0x34
 8011c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d002      	beq.n	8011c66 <RsaUnPad_OAEP+0x9a>
 8011c60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011c62:	f7ff fc17 	bl	8011494 <wolfSSL_Free>
        return ret;
 8011c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c68:	e0bd      	b.n	8011de6 <RsaUnPad_OAEP+0x21a>
    }

    /* xor seedMask value with maskedSeed to get seed value */
    for (idx = 0; idx < (word32)hLen; idx++) {
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c6e:	e011      	b.n	8011c94 <RsaUnPad_OAEP+0xc8>
        tmp[idx] = tmp[idx] ^ pkcsBlock[1 + idx];
 8011c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c74:	4413      	add	r3, r2
 8011c76:	7819      	ldrb	r1, [r3, #0]
 8011c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	68fa      	ldr	r2, [r7, #12]
 8011c7e:	4413      	add	r3, r2
 8011c80:	781a      	ldrb	r2, [r3, #0]
 8011c82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c86:	4403      	add	r3, r0
 8011c88:	404a      	eors	r2, r1
 8011c8a:	b2d2      	uxtb	r2, r2
 8011c8c:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < (word32)hLen; idx++) {
 8011c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c90:	3301      	adds	r3, #1
 8011c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d3e9      	bcc.n	8011c70 <RsaUnPad_OAEP+0xa4>
    }

    /* get dbMask value */
    if ((ret = RsaMGF(mgf, tmp, hLen, tmp + hLen,
 8011c9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ca2:	18d0      	adds	r0, r2, r3
                                       pkcsBlockLen - hLen - 1, heap)) != 0) {
 8011ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ca6:	68ba      	ldr	r2, [r7, #8]
 8011ca8:	1ad3      	subs	r3, r2, r3
    if ((ret = RsaMGF(mgf, tmp, hLen, tmp + hLen,
 8011caa:	3b01      	subs	r3, #1
 8011cac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011cae:	9201      	str	r2, [sp, #4]
 8011cb0:	9300      	str	r3, [sp, #0]
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	460a      	mov	r2, r1
 8011cb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011cb8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011cba:	f7ff ff69 	bl	8011b90 <RsaMGF>
 8011cbe:	6438      	str	r0, [r7, #64]	; 0x40
 8011cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d009      	beq.n	8011cda <RsaUnPad_OAEP+0x10e>
        XFREE(tmp, NULL, DYNAMIC_TYPE_RSA_BUFFER);
 8011cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8011cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d002      	beq.n	8011cd6 <RsaUnPad_OAEP+0x10a>
 8011cd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011cd2:	f7ff fbdf 	bl	8011494 <wolfSSL_Free>
        return ret;
 8011cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cd8:	e085      	b.n	8011de6 <RsaUnPad_OAEP+0x21a>
    }

    /* get DB value by doing maskedDB xor dbMask */
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
 8011cda:	2300      	movs	r3, #0
 8011cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cde:	e018      	b.n	8011d12 <RsaUnPad_OAEP+0x146>
        pkcsBlock[hLen + 1 + idx] = pkcsBlock[hLen + 1 + idx] ^ tmp[idx + hLen];
 8011ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ce4:	4413      	add	r3, r2
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	4413      	add	r3, r2
 8011cec:	7819      	ldrb	r1, [r3, #0]
 8011cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cf2:	4413      	add	r3, r2
 8011cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011cf6:	4413      	add	r3, r2
 8011cf8:	781a      	ldrb	r2, [r3, #0]
 8011cfa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cfe:	4403      	add	r3, r0
 8011d00:	3301      	adds	r3, #1
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	4403      	add	r3, r0
 8011d06:	404a      	eors	r2, r1
 8011d08:	b2d2      	uxtb	r2, r2
 8011d0a:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
 8011d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d0e:	3301      	adds	r3, #1
 8011d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d14:	68ba      	ldr	r2, [r7, #8]
 8011d16:	1ad3      	subs	r3, r2, r3
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d3df      	bcc.n	8011ce0 <RsaUnPad_OAEP+0x114>
    }

    /* done with use of tmp buffer */
    XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d002      	beq.n	8011d30 <RsaUnPad_OAEP+0x164>
 8011d2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011d2c:	f7ff fbb2 	bl	8011494 <wolfSSL_Free>

    /* advance idx to index of PS and msg separator, account for PS size of 0*/
    idx = hLen + 1 + hLen;
 8011d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d32:	1c5a      	adds	r2, r3, #1
 8011d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d36:	4413      	add	r3, r2
 8011d38:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (idx < pkcsBlockLen && pkcsBlock[idx] == 0) {idx++;}
 8011d3a:	e002      	b.n	8011d42 <RsaUnPad_OAEP+0x176>
 8011d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d3e:	3301      	adds	r3, #1
 8011d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d205      	bcs.n	8011d56 <RsaUnPad_OAEP+0x18a>
 8011d4a:	68fa      	ldr	r2, [r7, #12]
 8011d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d4e:	4413      	add	r3, r2
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d0f2      	beq.n	8011d3c <RsaUnPad_OAEP+0x170>

    /* create hash of label for comparison with hash sent */
    if ((ret = wc_Hash(hType, optLabel, labelLen, h, hLen)) != 0) {
 8011d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d58:	f107 0214 	add.w	r2, r7, #20
 8011d5c:	78f8      	ldrb	r0, [r7, #3]
 8011d5e:	9300      	str	r3, [sp, #0]
 8011d60:	4613      	mov	r3, r2
 8011d62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011d64:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011d66:	f7ff faf5 	bl	8011354 <wc_Hash>
 8011d6a:	6438      	str	r0, [r7, #64]	; 0x40
 8011d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d001      	beq.n	8011d76 <RsaUnPad_OAEP+0x1aa>
        return ret;
 8011d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d74:	e037      	b.n	8011de6 <RsaUnPad_OAEP+0x21a>
       Comparison of lHash, Y, and separator value needs to all happen in
       constant time.
       Attackers should not be able to get error condition from the timing of
       these checks.
     */
    ret = 0;
 8011d76:	2300      	movs	r3, #0
 8011d78:	643b      	str	r3, [r7, #64]	; 0x40
    ret |= ConstantCompare(pkcsBlock + hLen + 1, h, hLen);
 8011d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	68fa      	ldr	r2, [r7, #12]
 8011d80:	4413      	add	r3, r2
 8011d82:	f107 0114 	add.w	r1, r7, #20
 8011d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7ff fc1f 	bl	80115cc <ConstantCompare>
 8011d8e:	4602      	mov	r2, r0
 8011d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d92:	4313      	orrs	r3, r2
 8011d94:	643b      	str	r3, [r7, #64]	; 0x40
    ret += pkcsBlock[idx++] ^ 0x01; /* separator value is 0x01 */
 8011d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d98:	1c5a      	adds	r2, r3, #1
 8011d9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011d9c:	68fa      	ldr	r2, [r7, #12]
 8011d9e:	4413      	add	r3, r2
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	f083 0301 	eor.w	r3, r3, #1
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	461a      	mov	r2, r3
 8011daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dac:	4413      	add	r3, r2
 8011dae:	643b      	str	r3, [r7, #64]	; 0x40
    ret += pkcsBlock[0]     ^ 0x00; /* Y, the first value, should be 0 */
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	461a      	mov	r2, r3
 8011db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011db8:	4413      	add	r3, r2
 8011dba:	643b      	str	r3, [r7, #64]	; 0x40

    /* Return 0 data length on error. */
    idx = ctMaskSelInt(ctMaskEq(ret, 0), idx, pkcsBlockLen);
 8011dbc:	2100      	movs	r1, #0
 8011dbe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011dc0:	f7ff fc75 	bl	80116ae <ctMaskEq>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dca:	68ba      	ldr	r2, [r7, #8]
 8011dcc:	4619      	mov	r1, r3
 8011dce:	f7ff fcda 	bl	8011786 <ctMaskSelInt>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* adjust pointer to correct location in array and return size of M */
    *output = (byte*)(pkcsBlock + idx);
 8011dd6:	68fa      	ldr	r2, [r7, #12]
 8011dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dda:	441a      	add	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	601a      	str	r2, [r3, #0]
    return pkcsBlockLen - idx;
 8011de0:	68ba      	ldr	r2, [r7, #8]
 8011de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011de4:	1ad3      	subs	r3, r2, r3
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3750      	adds	r7, #80	; 0x50
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}

08011dee <RsaUnPad_PSS>:
                 and other negative values on error.
 */
static int RsaUnPad_PSS(byte *pkcsBlock, unsigned int pkcsBlockLen,
                        byte **output, enum wc_HashType hType, int mgf,
                        int saltLen, int bits, void* heap)
{
 8011dee:	b580      	push	{r7, lr}
 8011df0:	b090      	sub	sp, #64	; 0x40
 8011df2:	af02      	add	r7, sp, #8
 8011df4:	60f8      	str	r0, [r7, #12]
 8011df6:	60b9      	str	r1, [r7, #8]
 8011df8:	607a      	str	r2, [r7, #4]
 8011dfa:	70fb      	strb	r3, [r7, #3]
    if (pkcsBlockLen > RSA_MAX_SIZE/8) {
        return MEMORY_E;
    }
#endif

    hLen = wc_HashGetDigestSize(hType);
 8011dfc:	78fb      	ldrb	r3, [r7, #3]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7ff fa6a 	bl	80112d8 <wc_HashGetDigestSize>
 8011e04:	6338      	str	r0, [r7, #48]	; 0x30
    if (hLen < 0)
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	da01      	bge.n	8011e10 <RsaUnPad_PSS+0x22>
        return hLen;
 8011e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0e:	e0f7      	b.n	8012000 <RsaUnPad_PSS+0x212>
    bits = (bits - 1) & 0x7;
 8011e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e12:	3b01      	subs	r3, #1
 8011e14:	f003 0307 	and.w	r3, r3, #7
 8011e18:	64bb      	str	r3, [r7, #72]	; 0x48
    if ((pkcsBlock[0] & (0xff << bits)) != 0) {
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	4619      	mov	r1, r3
 8011e20:	22ff      	movs	r2, #255	; 0xff
 8011e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e24:	fa02 f303 	lsl.w	r3, r2, r3
 8011e28:	400b      	ands	r3, r1
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d002      	beq.n	8011e34 <RsaUnPad_PSS+0x46>
        return BAD_PADDING_E;
 8011e2e:	f06f 03c0 	mvn.w	r3, #192	; 0xc0
 8011e32:	e0e5      	b.n	8012000 <RsaUnPad_PSS+0x212>
    }
    if (bits == 0) {
 8011e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d105      	bne.n	8011e46 <RsaUnPad_PSS+0x58>
        pkcsBlock++;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	60fb      	str	r3, [r7, #12]
        pkcsBlockLen--;
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	3b01      	subs	r3, #1
 8011e44:	60bb      	str	r3, [r7, #8]
    }
    maskLen = (int)pkcsBlockLen - 1 - hLen;
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	1e5a      	subs	r2, r3, #1
 8011e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4c:	1ad3      	subs	r3, r2, r3
 8011e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (maskLen < 0) {
 8011e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	da02      	bge.n	8011e5c <RsaUnPad_PSS+0x6e>
        WOLFSSL_MSG("RsaUnPad_PSS: Hash too large");
        return WC_KEY_SIZE_E;
 8011e56:	f06f 03e9 	mvn.w	r3, #233	; 0xe9
 8011e5a:	e0d1      	b.n	8012000 <RsaUnPad_PSS+0x212>
    }

    if (saltLen == RSA_PSS_SALT_LEN_DEFAULT) {
 8011e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e62:	d102      	bne.n	8011e6a <RsaUnPad_PSS+0x7c>
        saltLen = hLen;
 8011e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e66:	647b      	str	r3, [r7, #68]	; 0x44
 8011e68:	e00d      	b.n	8011e86 <RsaUnPad_PSS+0x98>
            if (orig_bits == 1024 && hLen == WC_SHA512_DIGEST_SIZE)
                saltLen = RSA_PSS_SALT_MAX_SZ;
        #endif
    }
#ifndef WOLFSSL_PSS_LONG_SALT
    else if (saltLen > hLen)
 8011e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	dd02      	ble.n	8011e78 <RsaUnPad_PSS+0x8a>
        return PSS_SALTLEN_E;
 8011e72:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8011e76:	e0c3      	b.n	8012000 <RsaUnPad_PSS+0x212>
#endif
#ifndef WOLFSSL_PSS_SALT_LEN_DISCOVER
    else if (saltLen < RSA_PSS_SALT_LEN_DEFAULT)
 8011e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e7e:	da02      	bge.n	8011e86 <RsaUnPad_PSS+0x98>
        return PSS_SALTLEN_E;
 8011e80:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8011e84:	e0bc      	b.n	8012000 <RsaUnPad_PSS+0x212>
    if (maskLen < saltLen + 1) {
 8011e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e88:	3301      	adds	r3, #1
 8011e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	da02      	bge.n	8011e96 <RsaUnPad_PSS+0xa8>
        return PSS_SALTLEN_E;
 8011e90:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8011e94:	e0b4      	b.n	8012000 <RsaUnPad_PSS+0x212>
    if (saltLen != RSA_PSS_SALT_LEN_DISCOVER && maskLen < saltLen + 1) {
        return WC_KEY_SIZE_E;
    }
#endif

    if (pkcsBlock[pkcsBlockLen - 1] != RSA_PSS_PAD_TERM) {
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	3b01      	subs	r3, #1
 8011e9a:	68fa      	ldr	r2, [r7, #12]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	2bbc      	cmp	r3, #188	; 0xbc
 8011ea2:	d002      	beq.n	8011eaa <RsaUnPad_PSS+0xbc>
        WOLFSSL_MSG("RsaUnPad_PSS: Padding Term Error");
        return BAD_PADDING_E;
 8011ea4:	f06f 03c0 	mvn.w	r3, #192	; 0xc0
 8011ea8:	e0aa      	b.n	8012000 <RsaUnPad_PSS+0x212>
    }

#if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
    tmp = (byte*)XMALLOC(maskLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7ff fad5 	bl	801145c <wolfSSL_Malloc>
 8011eb2:	62b8      	str	r0, [r7, #40]	; 0x28
    if (tmp == NULL) {
 8011eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <RsaUnPad_PSS+0xd2>
        return MEMORY_E;
 8011eba:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8011ebe:	e09f      	b.n	8012000 <RsaUnPad_PSS+0x212>
    }
#endif

    if ((ret = RsaMGF(mgf, pkcsBlock + maskLen, hLen, tmp, maskLen,
 8011ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec2:	68fa      	ldr	r2, [r7, #12]
 8011ec4:	18d1      	adds	r1, r2, r3
 8011ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ecc:	9201      	str	r2, [sp, #4]
 8011ece:	9300      	str	r3, [sp, #0]
 8011ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed2:	4602      	mov	r2, r0
 8011ed4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011ed6:	f7ff fe5b 	bl	8011b90 <RsaMGF>
 8011eda:	6278      	str	r0, [r7, #36]	; 0x24
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d009      	beq.n	8011ef6 <RsaUnPad_PSS+0x108>
                                                                  heap)) != 0) {
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee4:	617b      	str	r3, [r7, #20]
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d002      	beq.n	8011ef2 <RsaUnPad_PSS+0x104>
 8011eec:	6978      	ldr	r0, [r7, #20]
 8011eee:	f7ff fad1 	bl	8011494 <wolfSSL_Free>
        return ret;
 8011ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef4:	e084      	b.n	8012000 <RsaUnPad_PSS+0x212>
    }

    tmp[0] &= (1 << bits) - 1;
 8011ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	b25a      	sxtb	r2, r3
 8011efc:	2101      	movs	r1, #1
 8011efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f00:	fa01 f303 	lsl.w	r3, r1, r3
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	3b01      	subs	r3, #1
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	b25b      	sxtb	r3, r3
 8011f0c:	4013      	ands	r3, r2
 8011f0e:	b25b      	sxtb	r3, r3
 8011f10:	b2da      	uxtb	r2, r3
 8011f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f14:	701a      	strb	r2, [r3, #0]
    pkcsBlock[0] &= (1 << bits) - 1;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	b25a      	sxtb	r2, r3
 8011f1c:	2101      	movs	r1, #1
 8011f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f20:	fa01 f303 	lsl.w	r3, r1, r3
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	3b01      	subs	r3, #1
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	b25b      	sxtb	r3, r3
 8011f2c:	4013      	ands	r3, r2
 8011f2e:	b25b      	sxtb	r3, r3
 8011f30:	b2da      	uxtb	r2, r3
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	701a      	strb	r2, [r3, #0]
        saltLen = maskLen - (i + 1);
    }
    else
#endif
    {
        for (i = 0; i < maskLen - 1 - saltLen; i++) {
 8011f36:	2300      	movs	r3, #0
 8011f38:	637b      	str	r3, [r7, #52]	; 0x34
 8011f3a:	e017      	b.n	8011f6c <RsaUnPad_PSS+0x17e>
            if (tmp[i] != pkcsBlock[i]) {
 8011f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f40:	4413      	add	r3, r2
 8011f42:	781a      	ldrb	r2, [r3, #0]
 8011f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f46:	68f9      	ldr	r1, [r7, #12]
 8011f48:	440b      	add	r3, r1
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d00a      	beq.n	8011f66 <RsaUnPad_PSS+0x178>
                XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f52:	61bb      	str	r3, [r7, #24]
 8011f54:	69bb      	ldr	r3, [r7, #24]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d002      	beq.n	8011f60 <RsaUnPad_PSS+0x172>
 8011f5a:	69b8      	ldr	r0, [r7, #24]
 8011f5c:	f7ff fa9a 	bl	8011494 <wolfSSL_Free>
                WOLFSSL_MSG("RsaUnPad_PSS: Padding Error Match");
                return PSS_SALTLEN_E;
 8011f60:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8011f64:	e04c      	b.n	8012000 <RsaUnPad_PSS+0x212>
        for (i = 0; i < maskLen - 1 - saltLen; i++) {
 8011f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f68:	3301      	adds	r3, #1
 8011f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8011f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6e:	1e5a      	subs	r2, r3, #1
 8011f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f72:	1ad3      	subs	r3, r2, r3
 8011f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f76:	429a      	cmp	r2, r3
 8011f78:	dbe0      	blt.n	8011f3c <RsaUnPad_PSS+0x14e>
            }
        }
        if (tmp[i] != (pkcsBlock[i] ^ 0x01)) {
 8011f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f7e:	4413      	add	r3, r2
 8011f80:	781a      	ldrb	r2, [r3, #0]
 8011f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f84:	68f9      	ldr	r1, [r7, #12]
 8011f86:	440b      	add	r3, r1
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	f083 0301 	eor.w	r3, r3, #1
 8011f8e:	b2db      	uxtb	r3, r3
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d00a      	beq.n	8011faa <RsaUnPad_PSS+0x1bc>
            XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f96:	61fb      	str	r3, [r7, #28]
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d002      	beq.n	8011fa4 <RsaUnPad_PSS+0x1b6>
 8011f9e:	69f8      	ldr	r0, [r7, #28]
 8011fa0:	f7ff fa78 	bl	8011494 <wolfSSL_Free>
            WOLFSSL_MSG("RsaUnPad_PSS: Padding Error End");
            return PSS_SALTLEN_E;
 8011fa4:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8011fa8:	e02a      	b.n	8012000 <RsaUnPad_PSS+0x212>
        }
    }
    for (i++; i < maskLen; i++)
 8011faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fac:	3301      	adds	r3, #1
 8011fae:	637b      	str	r3, [r7, #52]	; 0x34
 8011fb0:	e010      	b.n	8011fd4 <RsaUnPad_PSS+0x1e6>
        pkcsBlock[i] ^= tmp[i];
 8011fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb4:	68fa      	ldr	r2, [r7, #12]
 8011fb6:	4413      	add	r3, r2
 8011fb8:	7819      	ldrb	r1, [r3, #0]
 8011fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fbe:	4413      	add	r3, r2
 8011fc0:	781a      	ldrb	r2, [r3, #0]
 8011fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fc4:	68f8      	ldr	r0, [r7, #12]
 8011fc6:	4403      	add	r3, r0
 8011fc8:	404a      	eors	r2, r1
 8011fca:	b2d2      	uxtb	r2, r2
 8011fcc:	701a      	strb	r2, [r3, #0]
    for (i++; i < maskLen; i++)
 8011fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8011fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	dbea      	blt.n	8011fb2 <RsaUnPad_PSS+0x1c4>

#if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
    XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8011fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fde:	623b      	str	r3, [r7, #32]
 8011fe0:	6a3b      	ldr	r3, [r7, #32]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d002      	beq.n	8011fec <RsaUnPad_PSS+0x1fe>
 8011fe6:	6a38      	ldr	r0, [r7, #32]
 8011fe8:	f7ff fa54 	bl	8011494 <wolfSSL_Free>
#endif

    *output = pkcsBlock + maskLen - saltLen;
 8011fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ff0:	1ad3      	subs	r3, r2, r3
 8011ff2:	68fa      	ldr	r2, [r7, #12]
 8011ff4:	441a      	add	r2, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	601a      	str	r2, [r3, #0]
    return saltLen + hLen;
 8011ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffe:	4413      	add	r3, r2
}
 8012000:	4618      	mov	r0, r3
 8012002:	3738      	adds	r7, #56	; 0x38
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <RsaUnPad>:

/* UnPad plaintext, set start to *output, return length of plaintext,
 * < 0 on error */
static int RsaUnPad(const byte *pkcsBlock, unsigned int pkcsBlockLen,
                    byte **output, byte padValue)
{
 8012008:	b590      	push	{r4, r7, lr}
 801200a:	b089      	sub	sp, #36	; 0x24
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	607a      	str	r2, [r7, #4]
 8012014:	70fb      	strb	r3, [r7, #3]
    int    ret = BAD_FUNC_ARG;
 8012016:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801201a:	61fb      	str	r3, [r7, #28]
    word16 i;
#ifndef WOLFSSL_RSA_VERIFY_ONLY
    byte   invalid = 0;
 801201c:	2300      	movs	r3, #0
 801201e:	757b      	strb	r3, [r7, #21]
#endif

    if (output == NULL || pkcsBlockLen < 2 || pkcsBlockLen > 0xFFFF) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d006      	beq.n	8012034 <RsaUnPad+0x2c>
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d903      	bls.n	8012034 <RsaUnPad+0x2c>
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012032:	d302      	bcc.n	801203a <RsaUnPad+0x32>
        return BAD_FUNC_ARG;
 8012034:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8012038:	e0a0      	b.n	801217c <RsaUnPad+0x174>
    }

    if (padValue == RSA_BLOCK_TYPE_1) {
 801203a:	78fb      	ldrb	r3, [r7, #3]
 801203c:	2b01      	cmp	r3, #1
 801203e:	d132      	bne.n	80120a6 <RsaUnPad+0x9e>
        /* First byte must be 0x00 and Second byte, block type, 0x01 */
        if (pkcsBlock[0] != 0 || pkcsBlock[1] != RSA_BLOCK_TYPE_1) {
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d104      	bne.n	8012052 <RsaUnPad+0x4a>
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	3301      	adds	r3, #1
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b01      	cmp	r3, #1
 8012050:	d002      	beq.n	8012058 <RsaUnPad+0x50>
            WOLFSSL_MSG("RsaUnPad error, invalid formatting");
            return RSA_PAD_E;
 8012052:	f06f 03c8 	mvn.w	r3, #200	; 0xc8
 8012056:	e091      	b.n	801217c <RsaUnPad+0x174>
        }

        /* check the padding until we find the separator */
        for (i = 2; i < pkcsBlockLen && pkcsBlock[i++] == 0xFF; ) { }
 8012058:	2302      	movs	r3, #2
 801205a:	837b      	strh	r3, [r7, #26]
 801205c:	bf00      	nop
 801205e:	8b7b      	ldrh	r3, [r7, #26]
 8012060:	68ba      	ldr	r2, [r7, #8]
 8012062:	429a      	cmp	r2, r3
 8012064:	d908      	bls.n	8012078 <RsaUnPad+0x70>
 8012066:	8b7b      	ldrh	r3, [r7, #26]
 8012068:	1c5a      	adds	r2, r3, #1
 801206a:	837a      	strh	r2, [r7, #26]
 801206c:	461a      	mov	r2, r3
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	4413      	add	r3, r2
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	2bff      	cmp	r3, #255	; 0xff
 8012076:	d0f2      	beq.n	801205e <RsaUnPad+0x56>

        /* Minimum of 11 bytes of pre-message data and must have separator. */
        if (i < RSA_MIN_PAD_SZ || pkcsBlock[i-1] != 0) {
 8012078:	8b7b      	ldrh	r3, [r7, #26]
 801207a:	2b0a      	cmp	r3, #10
 801207c:	d906      	bls.n	801208c <RsaUnPad+0x84>
 801207e:	8b7b      	ldrh	r3, [r7, #26]
 8012080:	3b01      	subs	r3, #1
 8012082:	68fa      	ldr	r2, [r7, #12]
 8012084:	4413      	add	r3, r2
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d002      	beq.n	8012092 <RsaUnPad+0x8a>
            WOLFSSL_MSG("RsaUnPad error, bad formatting");
            return RSA_PAD_E;
 801208c:	f06f 03c8 	mvn.w	r3, #200	; 0xc8
 8012090:	e074      	b.n	801217c <RsaUnPad+0x174>
        }

        *output = (byte *)(pkcsBlock + i);
 8012092:	8b7b      	ldrh	r3, [r7, #26]
 8012094:	68fa      	ldr	r2, [r7, #12]
 8012096:	441a      	add	r2, r3
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	601a      	str	r2, [r3, #0]
        ret = pkcsBlockLen - i;
 801209c:	8b7b      	ldrh	r3, [r7, #26]
 801209e:	68ba      	ldr	r2, [r7, #8]
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	61fb      	str	r3, [r7, #28]
 80120a4:	e069      	b.n	801217a <RsaUnPad+0x172>
    }
#ifndef WOLFSSL_RSA_VERIFY_ONLY
    else {
        word16 j;
        word16 pastSep = 0;
 80120a6:	2300      	movs	r3, #0
 80120a8:	82fb      	strh	r3, [r7, #22]

        /* Decrypted with private key - unpad must be constant time. */
        for (i = 0, j = 2; j < pkcsBlockLen; j++) {
 80120aa:	2300      	movs	r3, #0
 80120ac:	837b      	strh	r3, [r7, #26]
 80120ae:	2302      	movs	r3, #2
 80120b0:	833b      	strh	r3, [r7, #24]
 80120b2:	e025      	b.n	8012100 <RsaUnPad+0xf8>
           /* Update i if not passed the separator and at separator. */
            i |= (~pastSep) & ctMask16Eq(pkcsBlock[j], 0x00) & (j + 1);
 80120b4:	8afb      	ldrh	r3, [r7, #22]
 80120b6:	43dc      	mvns	r4, r3
 80120b8:	8b3b      	ldrh	r3, [r7, #24]
 80120ba:	68fa      	ldr	r2, [r7, #12]
 80120bc:	4413      	add	r3, r2
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	2100      	movs	r1, #0
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7ff fb31 	bl	801172a <ctMask16Eq>
 80120c8:	4603      	mov	r3, r0
 80120ca:	ea04 0203 	and.w	r2, r4, r3
 80120ce:	8b3b      	ldrh	r3, [r7, #24]
 80120d0:	3301      	adds	r3, #1
 80120d2:	4013      	ands	r3, r2
 80120d4:	b21a      	sxth	r2, r3
 80120d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80120da:	4313      	orrs	r3, r2
 80120dc:	b21b      	sxth	r3, r3
 80120de:	837b      	strh	r3, [r7, #26]
            pastSep |= ctMask16Eq(pkcsBlock[j], 0x00);
 80120e0:	8b3b      	ldrh	r3, [r7, #24]
 80120e2:	68fa      	ldr	r2, [r7, #12]
 80120e4:	4413      	add	r3, r2
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	2100      	movs	r1, #0
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7ff fb1d 	bl	801172a <ctMask16Eq>
 80120f0:	4603      	mov	r3, r0
 80120f2:	461a      	mov	r2, r3
 80120f4:	8afb      	ldrh	r3, [r7, #22]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	82fb      	strh	r3, [r7, #22]
        for (i = 0, j = 2; j < pkcsBlockLen; j++) {
 80120fa:	8b3b      	ldrh	r3, [r7, #24]
 80120fc:	3301      	adds	r3, #1
 80120fe:	833b      	strh	r3, [r7, #24]
 8012100:	8b3b      	ldrh	r3, [r7, #24]
 8012102:	68ba      	ldr	r2, [r7, #8]
 8012104:	429a      	cmp	r2, r3
 8012106:	d8d5      	bhi.n	80120b4 <RsaUnPad+0xac>
        }

        /* Minimum of 11 bytes of pre-message data - including leading 0x00. */
        invalid |= ctMaskLT(i, RSA_MIN_PAD_SZ);
 8012108:	8b7b      	ldrh	r3, [r7, #26]
 801210a:	210b      	movs	r1, #11
 801210c:	4618      	mov	r0, r3
 801210e:	f7ff faa9 	bl	8011664 <ctMaskLT>
 8012112:	4603      	mov	r3, r0
 8012114:	461a      	mov	r2, r3
 8012116:	7d7b      	ldrb	r3, [r7, #21]
 8012118:	4313      	orrs	r3, r2
 801211a:	757b      	strb	r3, [r7, #21]
        /* Must have seen separator. */
        invalid |= ~pastSep;
 801211c:	8afb      	ldrh	r3, [r7, #22]
 801211e:	b25b      	sxtb	r3, r3
 8012120:	43db      	mvns	r3, r3
 8012122:	b25a      	sxtb	r2, r3
 8012124:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8012128:	4313      	orrs	r3, r2
 801212a:	b25b      	sxtb	r3, r3
 801212c:	757b      	strb	r3, [r7, #21]
        /* First byte must be 0x00. */
        invalid |= ctMaskNotEq(pkcsBlock[0], 0x00);
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	2100      	movs	r1, #0
 8012134:	4618      	mov	r0, r3
 8012136:	f7ff fb10 	bl	801175a <ctMaskNotEq>
 801213a:	4603      	mov	r3, r0
 801213c:	461a      	mov	r2, r3
 801213e:	7d7b      	ldrb	r3, [r7, #21]
 8012140:	4313      	orrs	r3, r2
 8012142:	757b      	strb	r3, [r7, #21]
        /* Check against expected block type: padValue */
        invalid |= ctMaskNotEq(pkcsBlock[1], padValue);
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	3301      	adds	r3, #1
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	461a      	mov	r2, r3
 801214c:	78fb      	ldrb	r3, [r7, #3]
 801214e:	4619      	mov	r1, r3
 8012150:	4610      	mov	r0, r2
 8012152:	f7ff fb02 	bl	801175a <ctMaskNotEq>
 8012156:	4603      	mov	r3, r0
 8012158:	461a      	mov	r2, r3
 801215a:	7d7b      	ldrb	r3, [r7, #21]
 801215c:	4313      	orrs	r3, r2
 801215e:	757b      	strb	r3, [r7, #21]

        *output = (byte *)(pkcsBlock + i);
 8012160:	8b7b      	ldrh	r3, [r7, #26]
 8012162:	68fa      	ldr	r2, [r7, #12]
 8012164:	441a      	add	r2, r3
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	601a      	str	r2, [r3, #0]
        ret = ((int)~invalid) & (pkcsBlockLen - i);
 801216a:	7d7b      	ldrb	r3, [r7, #21]
 801216c:	43db      	mvns	r3, r3
 801216e:	4619      	mov	r1, r3
 8012170:	8b7b      	ldrh	r3, [r7, #26]
 8012172:	68ba      	ldr	r2, [r7, #8]
 8012174:	1ad3      	subs	r3, r2, r3
 8012176:	400b      	ands	r3, r1
 8012178:	61fb      	str	r3, [r7, #28]
    }
#endif

    return ret;
 801217a:	69fb      	ldr	r3, [r7, #28]
}
 801217c:	4618      	mov	r0, r3
 801217e:	3724      	adds	r7, #36	; 0x24
 8012180:	46bd      	mov	sp, r7
 8012182:	bd90      	pop	{r4, r7, pc}

08012184 <wc_RsaUnPad_ex>:
 */
int wc_RsaUnPad_ex(byte* pkcsBlock, word32 pkcsBlockLen, byte** out,
                   byte padValue, int padType, enum wc_HashType hType,
                   int mgf, byte* optLabel, word32 labelLen, int saltLen,
                   int bits, void* heap)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b08a      	sub	sp, #40	; 0x28
 8012188:	af04      	add	r7, sp, #16
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	60b9      	str	r1, [r7, #8]
 801218e:	607a      	str	r2, [r7, #4]
 8012190:	70fb      	strb	r3, [r7, #3]
    int ret;

    switch (padType) {
 8012192:	6a3b      	ldr	r3, [r7, #32]
 8012194:	2b01      	cmp	r3, #1
 8012196:	d00b      	beq.n	80121b0 <wc_RsaUnPad_ex+0x2c>
 8012198:	2b02      	cmp	r3, #2
 801219a:	d01b      	beq.n	80121d4 <wc_RsaUnPad_ex+0x50>
 801219c:	2b00      	cmp	r3, #0
 801219e:	d12b      	bne.n	80121f8 <wc_RsaUnPad_ex+0x74>
        case WC_RSA_PKCSV15_PAD:
            /*WOLFSSL_MSG("wolfSSL Using RSA PKCSV15 un-padding");*/
            ret = RsaUnPad(pkcsBlock, pkcsBlockLen, out, padValue);
 80121a0:	78fb      	ldrb	r3, [r7, #3]
 80121a2:	687a      	ldr	r2, [r7, #4]
 80121a4:	68b9      	ldr	r1, [r7, #8]
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	f7ff ff2e 	bl	8012008 <RsaUnPad>
 80121ac:	6178      	str	r0, [r7, #20]
            break;
 80121ae:	e026      	b.n	80121fe <wc_RsaUnPad_ex+0x7a>

    #ifndef WC_NO_RSA_OAEP
        case WC_RSA_OAEP_PAD:
            WOLFSSL_MSG("wolfSSL Using RSA OAEP un-padding");
            ret = RsaUnPad_OAEP((byte*)pkcsBlock, pkcsBlockLen, out,
 80121b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80121b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121b6:	9303      	str	r3, [sp, #12]
 80121b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ba:	9302      	str	r3, [sp, #8]
 80121bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121be:	9301      	str	r3, [sp, #4]
 80121c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	4613      	mov	r3, r2
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	68b9      	ldr	r1, [r7, #8]
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f7ff fcfe 	bl	8011bcc <RsaUnPad_OAEP>
 80121d0:	6178      	str	r0, [r7, #20]
                                        hType, mgf, optLabel, labelLen, heap);
            break;
 80121d2:	e014      	b.n	80121fe <wc_RsaUnPad_ex+0x7a>
    #endif

    #ifdef WC_RSA_PSS
        case WC_RSA_PSS_PAD:
            WOLFSSL_MSG("wolfSSL Using RSA PSS un-padding");
            ret = RsaUnPad_PSS((byte*)pkcsBlock, pkcsBlockLen, out, hType, mgf,
 80121d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80121d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121da:	9303      	str	r3, [sp, #12]
 80121dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121de:	9302      	str	r3, [sp, #8]
 80121e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e2:	9301      	str	r3, [sp, #4]
 80121e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e6:	9300      	str	r3, [sp, #0]
 80121e8:	4613      	mov	r3, r2
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	68b9      	ldr	r1, [r7, #8]
 80121ee:	68f8      	ldr	r0, [r7, #12]
 80121f0:	f7ff fdfd 	bl	8011dee <RsaUnPad_PSS>
 80121f4:	6178      	str	r0, [r7, #20]
                                                           saltLen, bits, heap);
            break;
 80121f6:	e002      	b.n	80121fe <wc_RsaUnPad_ex+0x7a>
            break;
    #endif /* WC_RSA_NO_PADDING */

        default:
            WOLFSSL_MSG("Unknown RSA UnPad Type");
            ret = RSA_PAD_E;
 80121f8:	f06f 03c8 	mvn.w	r3, #200	; 0xc8
 80121fc:	617b      	str	r3, [r7, #20]
    (void)labelLen;
    (void)saltLen;
    (void)bits;
    (void)heap;

    return ret;
 80121fe:	697b      	ldr	r3, [r7, #20]
}
 8012200:	4618      	mov	r0, r3
 8012202:	3718      	adds	r7, #24
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}

08012208 <wc_RsaFunctionSync>:
}

#else
static int wc_RsaFunctionSync(const byte* in, word32 inLen, byte* out,
                          word32* outLen, int type, RsaKey* key, WC_RNG* rng)
{
 8012208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801220a:	b08d      	sub	sp, #52	; 0x34
 801220c:	af08      	add	r7, sp, #32
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	60b9      	str	r1, [r7, #8]
 8012212:	607a      	str	r2, [r7, #4]
 8012214:	603b      	str	r3, [r7, #0]
    word32 keyLen = 0;
#endif

#ifdef WOLFSSL_HAVE_SP_RSA
#ifndef WOLFSSL_SP_NO_2048
    if (mp_count_bits(&key->n) == 2048) {
 8012216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012218:	4618      	mov	r0, r3
 801221a:	f008 ff8d 	bl	801b138 <sp_count_bits>
 801221e:	4603      	mov	r3, r0
 8012220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012224:	d15e      	bne.n	80122e4 <wc_RsaFunctionSync+0xdc>
        switch(type) {
 8012226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012228:	2b03      	cmp	r3, #3
 801222a:	d85b      	bhi.n	80122e4 <wc_RsaFunctionSync+0xdc>
 801222c:	a201      	add	r2, pc, #4	; (adr r2, 8012234 <wc_RsaFunctionSync+0x2c>)
 801222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012232:	bf00      	nop
 8012234:	080122c5 	.word	0x080122c5
 8012238:	080122c5 	.word	0x080122c5
 801223c:	08012245 	.word	0x08012245
 8012240:	08012245 	.word	0x08012245
#ifndef WOLFSSL_RSA_PUBLIC_ONLY
        case RSA_PRIVATE_DECRYPT:
        case RSA_PRIVATE_ENCRYPT:
    #ifdef WC_RSA_BLINDING
            if (rng == NULL)
 8012244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012246:	2b00      	cmp	r3, #0
 8012248:	d102      	bne.n	8012250 <wc_RsaFunctionSync+0x48>
                return MISSING_RNG_E;
 801224a:	f06f 03eb 	mvn.w	r3, #235	; 0xeb
 801224e:	e0b1      	b.n	80123b4 <wc_RsaFunctionSync+0x1ac>
    #endif
    #ifndef RSA_LOW_MEM
            if ((mp_count_bits(&key->p) == 1024) &&
 8012250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012252:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8012256:	4618      	mov	r0, r3
 8012258:	f008 ff6e 	bl	801b138 <sp_count_bits>
 801225c:	4603      	mov	r3, r0
 801225e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012262:	d13e      	bne.n	80122e2 <wc_RsaFunctionSync+0xda>
                                             (mp_count_bits(&key->q) == 1024)) {
 8012264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012266:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 801226a:	4618      	mov	r0, r3
 801226c:	f008 ff64 	bl	801b138 <sp_count_bits>
 8012270:	4603      	mov	r3, r0
            if ((mp_count_bits(&key->p) == 1024) &&
 8012272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012276:	d134      	bne.n	80122e2 <wc_RsaFunctionSync+0xda>
                return sp_RsaPrivate_2048(in, inLen, &key->d, &key->p, &key->q,
 8012278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227a:	f503 66c3 	add.w	r6, r3, #1560	; 0x618
 801227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012280:	f603 1c24 	addw	ip, r3, #2340	; 0x924
 8012284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012286:	f503 6143 	add.w	r1, r3, #3120	; 0xc30
 801228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228c:	f603 703c 	addw	r0, r3, #3900	; 0xf3c
 8012290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012292:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8012296:	3308      	adds	r3, #8
 8012298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801229a:	f502 52aa 	add.w	r2, r2, #5440	; 0x1540
 801229e:	3214      	adds	r2, #20
 80122a0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80122a2:	683d      	ldr	r5, [r7, #0]
 80122a4:	9506      	str	r5, [sp, #24]
 80122a6:	687d      	ldr	r5, [r7, #4]
 80122a8:	9505      	str	r5, [sp, #20]
 80122aa:	9404      	str	r4, [sp, #16]
 80122ac:	9203      	str	r2, [sp, #12]
 80122ae:	9302      	str	r3, [sp, #8]
 80122b0:	9001      	str	r0, [sp, #4]
 80122b2:	9100      	str	r1, [sp, #0]
 80122b4:	4663      	mov	r3, ip
 80122b6:	4632      	mov	r2, r6
 80122b8:	68b9      	ldr	r1, [r7, #8]
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	f002 fd41 	bl	8014d42 <sp_RsaPrivate_2048>
 80122c0:	4603      	mov	r3, r0
 80122c2:	e077      	b.n	80123b4 <wc_RsaFunctionSync+0x1ac>
                                      NULL, NULL, &key->n, out, outLen);
    #endif
#endif
        case RSA_PUBLIC_ENCRYPT:
        case RSA_PUBLIC_DECRYPT:
            return sp_RsaPublic_2048(in, inLen, &key->e, &key->n, out, outLen);
 80122c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c6:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 80122ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	9301      	str	r3, [sp, #4]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	9300      	str	r3, [sp, #0]
 80122d4:	460b      	mov	r3, r1
 80122d6:	68b9      	ldr	r1, [r7, #8]
 80122d8:	68f8      	ldr	r0, [r7, #12]
 80122da:	f002 fbd0 	bl	8014a7e <sp_RsaPublic_2048>
 80122de:	4603      	mov	r3, r0
 80122e0:	e068      	b.n	80123b4 <wc_RsaFunctionSync+0x1ac>
            break;
 80122e2:	bf00      	nop
        }
    }
#endif
#ifndef WOLFSSL_SP_NO_3072
    if (mp_count_bits(&key->n) == 3072) {
 80122e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e6:	4618      	mov	r0, r3
 80122e8:	f008 ff26 	bl	801b138 <sp_count_bits>
 80122ec:	4603      	mov	r3, r0
 80122ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80122f2:	d15d      	bne.n	80123b0 <wc_RsaFunctionSync+0x1a8>
        switch(type) {
 80122f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f6:	2b03      	cmp	r3, #3
 80122f8:	d85a      	bhi.n	80123b0 <wc_RsaFunctionSync+0x1a8>
 80122fa:	a201      	add	r2, pc, #4	; (adr r2, 8012300 <wc_RsaFunctionSync+0xf8>)
 80122fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012300:	08012391 	.word	0x08012391
 8012304:	08012391 	.word	0x08012391
 8012308:	08012311 	.word	0x08012311
 801230c:	08012311 	.word	0x08012311
#ifndef WOLFSSL_RSA_PUBLIC_ONLY
        case RSA_PRIVATE_DECRYPT:
        case RSA_PRIVATE_ENCRYPT:
    #ifdef WC_RSA_BLINDING
            if (rng == NULL)
 8012310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012312:	2b00      	cmp	r3, #0
 8012314:	d102      	bne.n	801231c <wc_RsaFunctionSync+0x114>
                return MISSING_RNG_E;
 8012316:	f06f 03eb 	mvn.w	r3, #235	; 0xeb
 801231a:	e04b      	b.n	80123b4 <wc_RsaFunctionSync+0x1ac>
    #endif
    #ifndef RSA_LOW_MEM
            if ((mp_count_bits(&key->p) == 1536) &&
 801231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231e:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8012322:	4618      	mov	r0, r3
 8012324:	f008 ff08 	bl	801b138 <sp_count_bits>
 8012328:	4603      	mov	r3, r0
 801232a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801232e:	d13e      	bne.n	80123ae <wc_RsaFunctionSync+0x1a6>
                                             (mp_count_bits(&key->q) == 1536)) {
 8012330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012332:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8012336:	4618      	mov	r0, r3
 8012338:	f008 fefe 	bl	801b138 <sp_count_bits>
 801233c:	4603      	mov	r3, r0
            if ((mp_count_bits(&key->p) == 1536) &&
 801233e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012342:	d134      	bne.n	80123ae <wc_RsaFunctionSync+0x1a6>
                return sp_RsaPrivate_3072(in, inLen, &key->d, &key->p, &key->q,
 8012344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012346:	f503 66c3 	add.w	r6, r3, #1560	; 0x618
 801234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234c:	f603 1c24 	addw	ip, r3, #2340	; 0x924
 8012350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012352:	f503 6143 	add.w	r1, r3, #3120	; 0xc30
 8012356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012358:	f603 703c 	addw	r0, r3, #3900	; 0xf3c
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8012362:	3308      	adds	r3, #8
 8012364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012366:	f502 52aa 	add.w	r2, r2, #5440	; 0x1540
 801236a:	3214      	adds	r2, #20
 801236c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 801236e:	683d      	ldr	r5, [r7, #0]
 8012370:	9506      	str	r5, [sp, #24]
 8012372:	687d      	ldr	r5, [r7, #4]
 8012374:	9505      	str	r5, [sp, #20]
 8012376:	9404      	str	r4, [sp, #16]
 8012378:	9203      	str	r2, [sp, #12]
 801237a:	9302      	str	r3, [sp, #8]
 801237c:	9001      	str	r0, [sp, #4]
 801237e:	9100      	str	r1, [sp, #0]
 8012380:	4663      	mov	r3, ip
 8012382:	4632      	mov	r2, r6
 8012384:	68b9      	ldr	r1, [r7, #8]
 8012386:	68f8      	ldr	r0, [r7, #12]
 8012388:	f004 fa98 	bl	80168bc <sp_RsaPrivate_3072>
 801238c:	4603      	mov	r3, r0
 801238e:	e011      	b.n	80123b4 <wc_RsaFunctionSync+0x1ac>
                                      NULL, NULL, &key->n, out, outLen);
    #endif
#endif
        case RSA_PUBLIC_ENCRYPT:
        case RSA_PUBLIC_DECRYPT:
            return sp_RsaPublic_3072(in, inLen, &key->e, &key->n, out, outLen);
 8012390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012392:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 8012396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	9301      	str	r3, [sp, #4]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	9300      	str	r3, [sp, #0]
 80123a0:	460b      	mov	r3, r1
 80123a2:	68b9      	ldr	r1, [r7, #8]
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f004 f926 	bl	80165f6 <sp_RsaPublic_3072>
 80123aa:	4603      	mov	r3, r0
 80123ac:	e002      	b.n	80123b4 <wc_RsaFunctionSync+0x1ac>
            break;
 80123ae:	bf00      	nop
#endif /* WOLFSSL_HAVE_SP_RSA */

#if defined(WOLFSSL_SP_MATH)
    (void)rng;
    WOLFSSL_MSG("SP Key Size Error");
    return WC_KEY_SIZE_E;
 80123b0:	f06f 03e9 	mvn.w	r3, #233	; 0xe9
    XFREE(rnd, key->heap, DYNAMIC_TYPE_RSA);
#endif
#endif /* WC_RSA_BLINDING */
    return ret;
#endif /* WOLFSSL_SP_MATH */
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3714      	adds	r7, #20
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080123bc <wc_RsaFunction>:
}
#endif /* WOLFSSL_CRYPTOCELL */

int wc_RsaFunction(const byte* in, word32 inLen, byte* out,
                          word32* outLen, int type, RsaKey* key, WC_RNG* rng)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b08c      	sub	sp, #48	; 0x30
 80123c0:	af04      	add	r7, sp, #16
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	607a      	str	r2, [r7, #4]
 80123c8:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80123ca:	2300      	movs	r3, #0
 80123cc:	61fb      	str	r3, [r7, #28]

    if (key == NULL || in == NULL || inLen == 0 || out == NULL ||
 80123ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d013      	beq.n	80123fc <wc_RsaFunction+0x40>
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d010      	beq.n	80123fc <wc_RsaFunction+0x40>
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d00d      	beq.n	80123fc <wc_RsaFunction+0x40>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d00a      	beq.n	80123fc <wc_RsaFunction+0x40>
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d007      	beq.n	80123fc <wc_RsaFunction+0x40>
            outLen == NULL || *outLen == 0 || type == RSA_TYPE_UNKNOWN) {
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d003      	beq.n	80123fc <wc_RsaFunction+0x40>
 80123f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123fa:	d102      	bne.n	8012402 <wc_RsaFunction+0x46>
        return BAD_FUNC_ARG;
 80123fc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8012400:	e083      	b.n	801250a <wc_RsaFunction+0x14e>
    }
#endif

#ifndef TEST_UNPAD_CONSTANT_TIME
#ifndef NO_RSA_BOUNDS_CHECK
    if (type == RSA_PRIVATE_DECRYPT &&
 8012402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012404:	2b03      	cmp	r3, #3
 8012406:	d162      	bne.n	80124ce <wc_RsaFunction+0x112>
        key->state == RSA_STATE_DECRYPT_EXPTMOD) {
 8012408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240a:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801240e:	330c      	adds	r3, #12
 8012410:	681b      	ldr	r3, [r3, #0]
    if (type == RSA_PRIVATE_DECRYPT &&
 8012412:	2b04      	cmp	r3, #4
 8012414:	d15b      	bne.n	80124ce <wc_RsaFunction+0x112>
#else
        mp_int c[1];
#endif

#ifdef WOLFSSL_SMALL_STACK
        c = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_RSA);
 8012416:	f44f 7043 	mov.w	r0, #780	; 0x30c
 801241a:	f7ff f81f 	bl	801145c <wolfSSL_Malloc>
 801241e:	61b8      	str	r0, [r7, #24]
        if (c == NULL)
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d102      	bne.n	801242c <wc_RsaFunction+0x70>
            ret = MEMORY_E;
 8012426:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801242a:	61fb      	str	r3, [r7, #28]
#endif

        if (mp_init(c) != MP_OKAY)
 801242c:	69b8      	ldr	r0, [r7, #24]
 801242e:	f008 fd1f 	bl	801ae70 <sp_init>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d002      	beq.n	801243e <wc_RsaFunction+0x82>
            ret = MP_INIT_E;
 8012438:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801243c:	61fb      	str	r3, [r7, #28]
        if (ret == 0) {
 801243e:	69fb      	ldr	r3, [r7, #28]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d10a      	bne.n	801245a <wc_RsaFunction+0x9e>
            if (mp_read_unsigned_bin(c, in, inLen) != 0)
 8012444:	68ba      	ldr	r2, [r7, #8]
 8012446:	68f9      	ldr	r1, [r7, #12]
 8012448:	69b8      	ldr	r0, [r7, #24]
 801244a:	f008 ffd9 	bl	801b400 <sp_read_unsigned_bin>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d002      	beq.n	801245a <wc_RsaFunction+0x9e>
                ret = MP_READ_E;
 8012454:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8012458:	61fb      	str	r3, [r7, #28]
        }
        if (ret == 0) {
 801245a:	69fb      	ldr	r3, [r7, #28]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d109      	bne.n	8012474 <wc_RsaFunction+0xb8>
            /* check c > 1 */
            if (mp_cmp_d(c, 1) != MP_GT)
 8012460:	2101      	movs	r1, #1
 8012462:	69b8      	ldr	r0, [r7, #24]
 8012464:	f008 fed7 	bl	801b216 <sp_cmp_d>
 8012468:	4603      	mov	r3, r0
 801246a:	2b01      	cmp	r3, #1
 801246c:	d002      	beq.n	8012474 <wc_RsaFunction+0xb8>
                ret = RSA_OUT_OF_RANGE_E;
 801246e:	f06f 03fc 	mvn.w	r3, #252	; 0xfc
 8012472:	61fb      	str	r3, [r7, #28]
        }
        if (ret == 0) {
 8012474:	69fb      	ldr	r3, [r7, #28]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d10a      	bne.n	8012490 <wc_RsaFunction+0xd4>
            /* add c+1 */
            if (mp_add_d(c, 1, c) != MP_OKAY)
 801247a:	69ba      	ldr	r2, [r7, #24]
 801247c:	2101      	movs	r1, #1
 801247e:	69b8      	ldr	r0, [r7, #24]
 8012480:	f008 ff88 	bl	801b394 <sp_add_d>
 8012484:	4603      	mov	r3, r0
 8012486:	2b00      	cmp	r3, #0
 8012488:	d002      	beq.n	8012490 <wc_RsaFunction+0xd4>
                ret = MP_ADD_E;
 801248a:	f06f 0372 	mvn.w	r3, #114	; 0x72
 801248e:	61fb      	str	r3, [r7, #28]
        }
        if (ret == 0) {
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d10b      	bne.n	80124ae <wc_RsaFunction+0xf2>
            /* check c+1 < n */
            if (mp_cmp(c, &key->n) != MP_LT)
 8012496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012498:	4619      	mov	r1, r3
 801249a:	69b8      	ldr	r0, [r7, #24]
 801249c:	f008 fe29 	bl	801b0f2 <sp_cmp>
 80124a0:	4603      	mov	r3, r0
 80124a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124a6:	d002      	beq.n	80124ae <wc_RsaFunction+0xf2>
                ret = RSA_OUT_OF_RANGE_E;
 80124a8:	f06f 03fc 	mvn.w	r3, #252	; 0xfc
 80124ac:	61fb      	str	r3, [r7, #28]
        }
        mp_clear(c);
 80124ae:	69b8      	ldr	r0, [r7, #24]
 80124b0:	f008 fd8f 	bl	801afd2 <sp_clear>

#ifdef WOLFSSL_SMALL_STACK
        XFREE(c, key->heap, DYNAMIC_TYPE_RSA);
 80124b4:	69bb      	ldr	r3, [r7, #24]
 80124b6:	617b      	str	r3, [r7, #20]
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d002      	beq.n	80124c4 <wc_RsaFunction+0x108>
 80124be:	6978      	ldr	r0, [r7, #20]
 80124c0:	f7fe ffe8 	bl	8011494 <wolfSSL_Free>
#endif

        if (ret != 0)
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d001      	beq.n	80124ce <wc_RsaFunction+0x112>
            return ret;
 80124ca:	69fb      	ldr	r3, [r7, #28]
 80124cc:	e01d      	b.n	801250a <wc_RsaFunction+0x14e>
        ret = wc_RsaFunctionNonBlock(in, inLen, out, outLen, type, key);
    }
    else
#endif
    {
        ret = wc_RsaFunctionSync(in, inLen, out, outLen, type, key, rng);
 80124ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d0:	9302      	str	r3, [sp, #8]
 80124d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d4:	9301      	str	r3, [sp, #4]
 80124d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d8:	9300      	str	r3, [sp, #0]
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	68b9      	ldr	r1, [r7, #8]
 80124e0:	68f8      	ldr	r0, [r7, #12]
 80124e2:	f7ff fe91 	bl	8012208 <wc_RsaFunctionSync>
 80124e6:	61f8      	str	r0, [r7, #28]
    }

    /* handle error */
    if (ret < 0 && ret != WC_PENDING_E
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	da0c      	bge.n	8012508 <wc_RsaFunction+0x14c>
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 80124f4:	d008      	beq.n	8012508 <wc_RsaFunction+0x14c>
        if (ret == MP_EXPTMOD_E) {
            /* This can happen due to incorrectly set FP_MAX_BITS or missing XREALLOC */
            WOLFSSL_MSG("RSA_FUNCTION MP_EXPTMOD_E: memory/config problem");
        }

        key->state = RSA_STATE_NONE;
 80124f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f8:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80124fc:	330c      	adds	r3, #12
 80124fe:	2200      	movs	r2, #0
 8012500:	601a      	str	r2, [r3, #0]
        wc_RsaCleanup(key);
 8012502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012504:	f7ff f957 	bl	80117b6 <wc_RsaCleanup>
    }

    return ret;
 8012508:	69fb      	ldr	r3, [r7, #28]
}
 801250a:	4618      	mov	r0, r3
 801250c:	3720      	adds	r7, #32
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}
	...

08012514 <RsaPrivateDecryptEx>:
                            word32 outLen, byte** outPtr, RsaKey* key,
                            int rsa_type, byte pad_value, int pad_type,
                            enum wc_HashType hash, int mgf,
                            byte* label, word32 labelSz, int saltLen,
                            WC_RNG* rng)
{
 8012514:	b5b0      	push	{r4, r5, r7, lr}
 8012516:	b092      	sub	sp, #72	; 0x48
 8012518:	af08      	add	r7, sp, #32
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	607a      	str	r2, [r7, #4]
 8012520:	603b      	str	r3, [r7, #0]
    int ret = RSA_WRONG_TYPE_E;
 8012522:	f06f 0381 	mvn.w	r3, #129	; 0x81
 8012526:	627b      	str	r3, [r7, #36]	; 0x24
    byte* pad = NULL;
 8012528:	2300      	movs	r3, #0
 801252a:	613b      	str	r3, [r7, #16]

    if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d008      	beq.n	8012544 <RsaPrivateDecryptEx+0x30>
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d005      	beq.n	8012544 <RsaPrivateDecryptEx+0x30>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d002      	beq.n	8012544 <RsaPrivateDecryptEx+0x30>
 801253e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012540:	2b00      	cmp	r3, #0
 8012542:	d102      	bne.n	801254a <RsaPrivateDecryptEx+0x36>
        return BAD_FUNC_ARG;
 8012544:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8012548:	e149      	b.n	80127de <RsaPrivateDecryptEx+0x2ca>
    }

    switch (key->state) {
 801254a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801254c:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8012550:	330c      	adds	r3, #12
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	2b06      	cmp	r3, #6
 8012556:	f200 812b 	bhi.w	80127b0 <RsaPrivateDecryptEx+0x29c>
 801255a:	a201      	add	r2, pc, #4	; (adr r2, 8012560 <RsaPrivateDecryptEx+0x4c>)
 801255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012560:	0801257d 	.word	0x0801257d
 8012564:	080127b1 	.word	0x080127b1
 8012568:	080127b1 	.word	0x080127b1
 801256c:	080127b1 	.word	0x080127b1
 8012570:	08012607 	.word	0x08012607
 8012574:	0801265b 	.word	0x0801265b
 8012578:	080127b9 	.word	0x080127b9
    case RSA_STATE_NONE:
        key->dataLen = inLen;
 801257c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801257e:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8012582:	3310      	adds	r3, #16
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	601a      	str	r2, [r3, #0]
    #endif /* WOLFSSL_CRYPTOCELL */


#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_VERIFY_INLINE)
        /* verify the tmp ptr is NULL, otherwise indicates bad state */
        if (key->data != NULL) {
 8012588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801258a:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801258e:	3304      	adds	r3, #4
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d003      	beq.n	801259e <RsaPrivateDecryptEx+0x8a>
            ret = BAD_STATE_E;
 8012596:	f06f 03bf 	mvn.w	r3, #191	; 0xbf
 801259a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801259c:	e10f      	b.n	80127be <RsaPrivateDecryptEx+0x2aa>
        }

        /* if not doing this inline then allocate a buffer for it */
        if (outPtr == NULL) {
 801259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d124      	bne.n	80125ee <RsaPrivateDecryptEx+0xda>
            key->data = (byte*)XMALLOC(inLen, key->heap,
 80125a4:	68b8      	ldr	r0, [r7, #8]
 80125a6:	f7fe ff59 	bl	801145c <wolfSSL_Malloc>
 80125aa:	4602      	mov	r2, r0
 80125ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ae:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80125b2:	3304      	adds	r3, #4
 80125b4:	601a      	str	r2, [r3, #0]
                                                      DYNAMIC_TYPE_WOLF_BIGINT);
            key->dataIsAlloc = 1;
 80125b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125b8:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80125bc:	3318      	adds	r3, #24
 80125be:	2201      	movs	r2, #1
 80125c0:	701a      	strb	r2, [r3, #0]
            if (key->data == NULL) {
 80125c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c4:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80125c8:	3304      	adds	r3, #4
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d103      	bne.n	80125d8 <RsaPrivateDecryptEx+0xc4>
                ret = MEMORY_E;
 80125d0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80125d4:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80125d6:	e0f2      	b.n	80127be <RsaPrivateDecryptEx+0x2aa>
            }
            XMEMCPY(key->data, in, inLen);
 80125d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125da:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80125de:	3304      	adds	r3, #4
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	68ba      	ldr	r2, [r7, #8]
 80125e4:	68f9      	ldr	r1, [r7, #12]
 80125e6:	4618      	mov	r0, r3
 80125e8:	f009 fa13 	bl	801ba12 <memcpy>
 80125ec:	e005      	b.n	80125fa <RsaPrivateDecryptEx+0xe6>
        }
        else {
            key->data = out;
 80125ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125f0:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80125f4:	3304      	adds	r3, #4
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	601a      	str	r2, [r3, #0]
        }
#endif

        key->state = RSA_STATE_DECRYPT_EXPTMOD;
 80125fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125fc:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8012600:	330c      	adds	r3, #12
 8012602:	2204      	movs	r2, #4
 8012604:	601a      	str	r2, [r3, #0]
        FALL_THROUGH;

    case RSA_STATE_DECRYPT_EXPTMOD:
#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_VERIFY_INLINE)
        ret = wc_RsaFunction(key->data, inLen, key->data, &key->dataLen,
 8012606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012608:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801260c:	3304      	adds	r3, #4
 801260e:	6818      	ldr	r0, [r3, #0]
 8012610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012612:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8012616:	3304      	adds	r3, #4
 8012618:	6819      	ldr	r1, [r3, #0]
 801261a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801261c:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8012620:	3310      	adds	r3, #16
 8012622:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012624:	9202      	str	r2, [sp, #8]
 8012626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012628:	9201      	str	r2, [sp, #4]
 801262a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801262c:	9200      	str	r2, [sp, #0]
 801262e:	460a      	mov	r2, r1
 8012630:	68b9      	ldr	r1, [r7, #8]
 8012632:	f7ff fec3 	bl	80123bc <wc_RsaFunction>
 8012636:	6278      	str	r0, [r7, #36]	; 0x24
                                                            rsa_type, key, rng);
#else
        ret = wc_RsaFunction(in, inLen, out, &key->dataLen, rsa_type, key, rng);
#endif

        if (ret >= 0 || ret == WC_PENDING_E) {
 8012638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263a:	2b00      	cmp	r3, #0
 801263c:	da03      	bge.n	8012646 <RsaPrivateDecryptEx+0x132>
 801263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012640:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 8012644:	d105      	bne.n	8012652 <RsaPrivateDecryptEx+0x13e>
            key->state = RSA_STATE_DECRYPT_UNPAD;
 8012646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012648:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801264c:	330c      	adds	r3, #12
 801264e:	2205      	movs	r2, #5
 8012650:	601a      	str	r2, [r3, #0]
        }
        if (ret < 0) {
 8012652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012654:	2b00      	cmp	r3, #0
 8012656:	f2c0 80b1 	blt.w	80127bc <RsaPrivateDecryptEx+0x2a8>

        FALL_THROUGH;

    case RSA_STATE_DECRYPT_UNPAD:
#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_VERIFY_INLINE)
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
 801265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801265c:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8012660:	3304      	adds	r3, #4
 8012662:	681c      	ldr	r4, [r3, #0]
 8012664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012666:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801266a:	3310      	adds	r3, #16
 801266c:	681d      	ldr	r5, [r3, #0]
                             hash, mgf, label, labelSz, saltLen,
                             mp_count_bits(&key->n), key->heap);
 801266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
 8012670:	4618      	mov	r0, r3
 8012672:	f008 fd61 	bl	801b138 <sp_count_bits>
 8012676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012678:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8012682:	f107 0210 	add.w	r2, r7, #16
 8012686:	9307      	str	r3, [sp, #28]
 8012688:	9006      	str	r0, [sp, #24]
 801268a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801268c:	9305      	str	r3, [sp, #20]
 801268e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012690:	9304      	str	r3, [sp, #16]
 8012692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012694:	9303      	str	r3, [sp, #12]
 8012696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012698:	9302      	str	r3, [sp, #8]
 801269a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801269e:	9301      	str	r3, [sp, #4]
 80126a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	460b      	mov	r3, r1
 80126a6:	4629      	mov	r1, r5
 80126a8:	4620      	mov	r0, r4
 80126aa:	f7ff fd6b 	bl	8012184 <wc_RsaUnPad_ex>
 80126ae:	6278      	str	r0, [r7, #36]	; 0x24
#else
        ret = wc_RsaUnPad_ex(out, key->dataLen, &pad, pad_value, pad_type, hash,
                             mgf, label, labelSz, saltLen,
                             mp_count_bits(&key->n), key->heap);
#endif
        if (rsa_type == RSA_PUBLIC_DECRYPT && ret > (int)outLen)
 80126b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d107      	bne.n	80126c6 <RsaPrivateDecryptEx+0x1b2>
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126ba:	429a      	cmp	r2, r3
 80126bc:	dd03      	ble.n	80126c6 <RsaPrivateDecryptEx+0x1b2>
            ret = RSA_BUFFER_E;
 80126be:	f06f 0382 	mvn.w	r3, #130	; 0x82
 80126c2:	627b      	str	r3, [r7, #36]	; 0x24
 80126c4:	e06d      	b.n	80127a2 <RsaPrivateDecryptEx+0x28e>
        else if (ret >= 0 && pad != NULL) {
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	db6a      	blt.n	80127a2 <RsaPrivateDecryptEx+0x28e>
 80126cc:	693b      	ldr	r3, [r7, #16]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d067      	beq.n	80127a2 <RsaPrivateDecryptEx+0x28e>
#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_VERIFY_INLINE)
            signed char c;
#endif

            /* only copy output if not inline */
            if (outPtr == NULL) {
 80126d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d148      	bne.n	801276a <RsaPrivateDecryptEx+0x256>
#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_VERIFY_INLINE)
                if (rsa_type == RSA_PRIVATE_DECRYPT) {
 80126d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126da:	2b03      	cmp	r3, #3
 80126dc:	d13e      	bne.n	801275c <RsaPrivateDecryptEx+0x248>
                    word32 i, j;
                    int start = (int)((size_t)pad - (size_t)key->data);
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	461a      	mov	r2, r3
 80126e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126e4:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80126e8:	3304      	adds	r3, #4
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	1ad3      	subs	r3, r2, r3
 80126ee:	61bb      	str	r3, [r7, #24]

                    for (i = 0, j = 0; j < key->dataLen; j++) {
 80126f0:	2300      	movs	r3, #0
 80126f2:	623b      	str	r3, [r7, #32]
 80126f4:	2300      	movs	r3, #0
 80126f6:	61fb      	str	r3, [r7, #28]
 80126f8:	e027      	b.n	801274a <RsaPrivateDecryptEx+0x236>
                        out[i] = key->data[j];
 80126fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126fc:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8012700:	3304      	adds	r3, #4
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	441a      	add	r2, r3
 8012708:	6879      	ldr	r1, [r7, #4]
 801270a:	6a3b      	ldr	r3, [r7, #32]
 801270c:	440b      	add	r3, r1
 801270e:	7812      	ldrb	r2, [r2, #0]
 8012710:	701a      	strb	r2, [r3, #0]
                        c  = ctMaskGTE(j, start);
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	69b9      	ldr	r1, [r7, #24]
 8012716:	4618      	mov	r0, r3
 8012718:	f7fe ff92 	bl	8011640 <ctMaskGTE>
 801271c:	4603      	mov	r3, r0
 801271e:	75fb      	strb	r3, [r7, #23]
                        c &= ctMaskLT(i, outLen);
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	683a      	ldr	r2, [r7, #0]
 8012724:	4611      	mov	r1, r2
 8012726:	4618      	mov	r0, r3
 8012728:	f7fe ff9c 	bl	8011664 <ctMaskLT>
 801272c:	4603      	mov	r3, r0
 801272e:	b25a      	sxtb	r2, r3
 8012730:	7dfb      	ldrb	r3, [r7, #23]
 8012732:	4013      	ands	r3, r2
 8012734:	75fb      	strb	r3, [r7, #23]
                        /* 0 - no add, -1 add */
                        i += (word32)((byte)(-c));
 8012736:	7dfb      	ldrb	r3, [r7, #23]
 8012738:	425b      	negs	r3, r3
 801273a:	b2db      	uxtb	r3, r3
 801273c:	461a      	mov	r2, r3
 801273e:	6a3b      	ldr	r3, [r7, #32]
 8012740:	4413      	add	r3, r2
 8012742:	623b      	str	r3, [r7, #32]
                    for (i = 0, j = 0; j < key->dataLen; j++) {
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	3301      	adds	r3, #1
 8012748:	61fb      	str	r3, [r7, #28]
 801274a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801274c:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8012750:	3310      	adds	r3, #16
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	69fa      	ldr	r2, [r7, #28]
 8012756:	429a      	cmp	r2, r3
 8012758:	d3cf      	bcc.n	80126fa <RsaPrivateDecryptEx+0x1e6>
 801275a:	e009      	b.n	8012770 <RsaPrivateDecryptEx+0x25c>
                    }
                }
                else
#endif
                {
                    XMEMCPY(out, pad, ret);
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012760:	4619      	mov	r1, r3
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f009 f955 	bl	801ba12 <memcpy>
 8012768:	e002      	b.n	8012770 <RsaPrivateDecryptEx+0x25c>
                }
            }
            else
                *outPtr = pad;
 801276a:	693a      	ldr	r2, [r7, #16]
 801276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801276e:	601a      	str	r2, [r3, #0]

#if !defined(WOLFSSL_RSA_VERIFY_ONLY)
            ret = ctMaskSelInt(ctMaskLTE(ret, outLen), ret, RSA_BUFFER_E);
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	4619      	mov	r1, r3
 8012774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012776:	f7fe ff88 	bl	801168a <ctMaskLTE>
 801277a:	4603      	mov	r3, r0
 801277c:	f06f 0282 	mvn.w	r2, #130	; 0x82
 8012780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012782:	4618      	mov	r0, r3
 8012784:	f7fe ffff 	bl	8011786 <ctMaskSelInt>
 8012788:	6278      	str	r0, [r7, #36]	; 0x24
            ret = ctMaskSelInt(ctMaskNotEq(ret, 0), ret, RSA_BUFFER_E);
 801278a:	2100      	movs	r1, #0
 801278c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801278e:	f7fe ffe4 	bl	801175a <ctMaskNotEq>
 8012792:	4603      	mov	r3, r0
 8012794:	f06f 0282 	mvn.w	r2, #130	; 0x82
 8012798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801279a:	4618      	mov	r0, r3
 801279c:	f7fe fff3 	bl	8011786 <ctMaskSelInt>
 80127a0:	6278      	str	r0, [r7, #36]	; 0x24
            if (outLen < (word32)ret)
                ret = RSA_BUFFER_E;
#endif
        }

        key->state = RSA_STATE_DECRYPT_RES;
 80127a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a4:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80127a8:	330c      	adds	r3, #12
 80127aa:	2206      	movs	r2, #6
 80127ac:	601a      	str	r2, [r3, #0]
                if (outPtr)
                    *outPtr = in;
            }
        }
    #endif
        break;
 80127ae:	e003      	b.n	80127b8 <RsaPrivateDecryptEx+0x2a4>

    default:
        ret = BAD_STATE_E;
 80127b0:	f06f 03bf 	mvn.w	r3, #191	; 0xbf
 80127b4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80127b6:	e002      	b.n	80127be <RsaPrivateDecryptEx+0x2aa>
        break;
 80127b8:	bf00      	nop
 80127ba:	e000      	b.n	80127be <RsaPrivateDecryptEx+0x2aa>
            break;
 80127bc:	bf00      	nop
    }

    /* if async pending then return and skip done cleanup below */
    if (ret == WC_PENDING_E
 80127be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c0:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 80127c4:	d101      	bne.n	80127ca <RsaPrivateDecryptEx+0x2b6>
    #ifdef WC_RSA_NONBLOCK
        || ret == FP_WOULDBLOCK
    #endif
    ) {
        return ret;
 80127c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c8:	e009      	b.n	80127de <RsaPrivateDecryptEx+0x2ca>
    }

    key->state = RSA_STATE_NONE;
 80127ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127cc:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80127d0:	330c      	adds	r3, #12
 80127d2:	2200      	movs	r2, #0
 80127d4:	601a      	str	r2, [r3, #0]
    wc_RsaCleanup(key);
 80127d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80127d8:	f7fe ffed 	bl	80117b6 <wc_RsaCleanup>

    return ret;
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3728      	adds	r7, #40	; 0x28
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bdb0      	pop	{r4, r5, r7, pc}
 80127e6:	bf00      	nop

080127e8 <wc_RsaSSL_VerifyInline>:
#endif /* WC_NO_RSA_OAEP || WC_RSA_NO_PADDING */
#endif /* WOLFSSL_RSA_PUBLIC_ONLY */

#if !defined(WOLFSSL_CRYPTOCELL)
int wc_RsaSSL_VerifyInline(byte* in, word32 inLen, byte** out, RsaKey* key)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b092      	sub	sp, #72	; 0x48
 80127ec:	af0c      	add	r7, sp, #48	; 0x30
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	607a      	str	r2, [r7, #4]
 80127f4:	603b      	str	r3, [r7, #0]
    WC_RNG* rng;
#ifdef WC_RSA_BLINDING
    rng = key->rng;
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80127fc:	3314      	adds	r3, #20
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	617b      	str	r3, [r7, #20]
#else
    rng = NULL;
#endif
    return RsaPrivateDecryptEx(in, inLen, in, inLen, out, key,
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	930a      	str	r3, [sp, #40]	; 0x28
 8012806:	2300      	movs	r3, #0
 8012808:	9309      	str	r3, [sp, #36]	; 0x24
 801280a:	2300      	movs	r3, #0
 801280c:	9308      	str	r3, [sp, #32]
 801280e:	2300      	movs	r3, #0
 8012810:	9307      	str	r3, [sp, #28]
 8012812:	2300      	movs	r3, #0
 8012814:	9306      	str	r3, [sp, #24]
 8012816:	2300      	movs	r3, #0
 8012818:	9305      	str	r3, [sp, #20]
 801281a:	2300      	movs	r3, #0
 801281c:	9304      	str	r3, [sp, #16]
 801281e:	2301      	movs	r3, #1
 8012820:	9303      	str	r3, [sp, #12]
 8012822:	2301      	movs	r3, #1
 8012824:	9302      	str	r3, [sp, #8]
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	9301      	str	r3, [sp, #4]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	68b9      	ldr	r1, [r7, #8]
 8012834:	68f8      	ldr	r0, [r7, #12]
 8012836:	f7ff fe6d 	bl	8012514 <RsaPrivateDecryptEx>
 801283a:	4603      	mov	r3, r0
        RSA_PUBLIC_DECRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PKCSV15_PAD,
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, 0, rng);
}
 801283c:	4618      	mov	r0, r3
 801283e:	3718      	adds	r7, #24
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <wc_RsaEncryptSize>:
#endif

#if !defined(WOLFSSL_RSA_VERIFY_ONLY) || !defined(WOLFSSL_SP_MATH) || \
                                                             defined(WC_RSA_PSS)
int wc_RsaEncryptSize(RsaKey* key)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
    int ret;

    if (key == NULL) {
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d102      	bne.n	8012858 <wc_RsaEncryptSize+0x14>
        return BAD_FUNC_ARG;
 8012852:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8012856:	e005      	b.n	8012864 <wc_RsaEncryptSize+0x20>
    }

    ret = mp_unsigned_bin_size(&key->n);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4618      	mov	r0, r3
 801285c:	f008 fdb7 	bl	801b3ce <sp_unsigned_bin_size>
 8012860:	60f8      	str	r0, [r7, #12]
    if (ret == 0 && key->devId != INVALID_DEVID) {
        ret = 2048/8; /* hardware handles, use 2048-bit as default */
    }
#endif

    return ret;
 8012862:	68fb      	ldr	r3, [r7, #12]
}
 8012864:	4618      	mov	r0, r3
 8012866:	3710      	adds	r7, #16
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <rotlFixed>:
    {
 801286c:	b480      	push	{r7}
 801286e:	b083      	sub	sp, #12
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	f1c3 0320 	rsb	r3, r3, #32
 801287e:	fa62 f303 	ror.w	r3, r2, r3
    }
 8012882:	4618      	mov	r0, r3
 8012884:	370c      	adds	r7, #12
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr

0801288e <rotrFixed>:
    {
 801288e:	b480      	push	{r7}
 8012890:	b083      	sub	sp, #12
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	6039      	str	r1, [r7, #0]
        return (x >> y) | (x << (sizeof(y) * 8 - y));
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	fa62 f303 	ror.w	r3, r2, r3
    }
 80128a0:	4618      	mov	r0, r3
 80128a2:	370c      	adds	r7, #12
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr

080128ac <ByteReverseWord32>:
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b082      	sub	sp, #8
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	0a1b      	lsrs	r3, r3, #8
 80128b8:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	021b      	lsls	r3, r3, #8
 80128c0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80128c4:	4313      	orrs	r3, r2
 80128c6:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 80128c8:	2110      	movs	r1, #16
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f7ff ffce 	bl	801286c <rotlFixed>
 80128d0:	4603      	mov	r3, r0
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3708      	adds	r7, #8
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}

080128da <ByteReverseWords>:
{
 80128da:	b590      	push	{r4, r7, lr}
 80128dc:	b087      	sub	sp, #28
 80128de:	af00      	add	r7, sp, #0
 80128e0:	60f8      	str	r0, [r7, #12]
 80128e2:	60b9      	str	r1, [r7, #8]
 80128e4:	607a      	str	r2, [r7, #4]
    word32 count = byteCount/(word32)sizeof(word32), i;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	089b      	lsrs	r3, r3, #2
 80128ea:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count; i++)
 80128ec:	2300      	movs	r3, #0
 80128ee:	617b      	str	r3, [r7, #20]
 80128f0:	e010      	b.n	8012914 <ByteReverseWords+0x3a>
        out[i] = ByteReverseWord32(in[i]);
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	009b      	lsls	r3, r3, #2
 80128f6:	68ba      	ldr	r2, [r7, #8]
 80128f8:	4413      	add	r3, r2
 80128fa:	6819      	ldr	r1, [r3, #0]
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	009b      	lsls	r3, r3, #2
 8012900:	68fa      	ldr	r2, [r7, #12]
 8012902:	18d4      	adds	r4, r2, r3
 8012904:	4608      	mov	r0, r1
 8012906:	f7ff ffd1 	bl	80128ac <ByteReverseWord32>
 801290a:	4603      	mov	r3, r0
 801290c:	6023      	str	r3, [r4, #0]
    for (i = 0; i < count; i++)
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	3301      	adds	r3, #1
 8012912:	617b      	str	r3, [r7, #20]
 8012914:	697a      	ldr	r2, [r7, #20]
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	429a      	cmp	r2, r3
 801291a:	d3ea      	bcc.n	80128f2 <ByteReverseWords+0x18>
}
 801291c:	bf00      	nop
 801291e:	371c      	adds	r7, #28
 8012920:	46bd      	mov	sp, r7
 8012922:	bd90      	pop	{r4, r7, pc}

08012924 <min>:
    {
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	4293      	cmp	r3, r2
 8012934:	bf28      	it	cs
 8012936:	4613      	movcs	r3, r2
    }
 8012938:	4618      	mov	r0, r3
 801293a:	370c      	adds	r7, #12
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr

08012944 <InitSha256>:
    (!defined(WOLFSSL_RENESAS_TSIP_CRYPT) || defined(NO_WOLFSSL_RENESAS_TSIP_HASH)) && \
    !defined(WOLFSSL_PSOC6_CRYPTO) && !defined(WOLFSSL_IMXRT_DCP) && !defined(WOLFSSL_SILABS_SE_ACCEL)


static int InitSha256(wc_Sha256* sha256)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
    int ret = 0;
 801294c:	2300      	movs	r3, #0
 801294e:	60fb      	str	r3, [r7, #12]

    if (sha256 == NULL)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d102      	bne.n	801295c <InitSha256+0x18>
        return BAD_FUNC_ARG;
 8012956:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801295a:	e027      	b.n	80129ac <InitSha256+0x68>

    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2220      	movs	r2, #32
 8012960:	2100      	movs	r1, #0
 8012962:	4618      	mov	r0, r3
 8012964:	f009 f879 	bl	801ba5a <memset>
    sha256->digest[0] = 0x6A09E667L;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	4a12      	ldr	r2, [pc, #72]	; (80129b4 <InitSha256+0x70>)
 801296c:	601a      	str	r2, [r3, #0]
    sha256->digest[1] = 0xBB67AE85L;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4a11      	ldr	r2, [pc, #68]	; (80129b8 <InitSha256+0x74>)
 8012972:	605a      	str	r2, [r3, #4]
    sha256->digest[2] = 0x3C6EF372L;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	4a11      	ldr	r2, [pc, #68]	; (80129bc <InitSha256+0x78>)
 8012978:	609a      	str	r2, [r3, #8]
    sha256->digest[3] = 0xA54FF53AL;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	4a10      	ldr	r2, [pc, #64]	; (80129c0 <InitSha256+0x7c>)
 801297e:	60da      	str	r2, [r3, #12]
    sha256->digest[4] = 0x510E527FL;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	4a10      	ldr	r2, [pc, #64]	; (80129c4 <InitSha256+0x80>)
 8012984:	611a      	str	r2, [r3, #16]
    sha256->digest[5] = 0x9B05688CL;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4a0f      	ldr	r2, [pc, #60]	; (80129c8 <InitSha256+0x84>)
 801298a:	615a      	str	r2, [r3, #20]
    sha256->digest[6] = 0x1F83D9ABL;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	4a0f      	ldr	r2, [pc, #60]	; (80129cc <InitSha256+0x88>)
 8012990:	619a      	str	r2, [r3, #24]
    sha256->digest[7] = 0x5BE0CD19L;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	4a0e      	ldr	r2, [pc, #56]	; (80129d0 <InitSha256+0x8c>)
 8012996:	61da      	str	r2, [r3, #28]

    sha256->buffLen = 0;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2200      	movs	r2, #0
 801299c:	661a      	str	r2, [r3, #96]	; 0x60
    sha256->loLen   = 0;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2200      	movs	r2, #0
 80129a2:	665a      	str	r2, [r3, #100]	; 0x64
    sha256->hiLen   = 0;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2200      	movs	r2, #0
 80129a8:	669a      	str	r2, [r3, #104]	; 0x68
#if defined(WOLFSSL_HASH_FLAGS) || defined(WOLF_CRYPTO_CB)
    sha256->flags = 0;
#endif

    return ret;
 80129aa:	68fb      	ldr	r3, [r7, #12]
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3710      	adds	r7, #16
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	6a09e667 	.word	0x6a09e667
 80129b8:	bb67ae85 	.word	0xbb67ae85
 80129bc:	3c6ef372 	.word	0x3c6ef372
 80129c0:	a54ff53a 	.word	0xa54ff53a
 80129c4:	510e527f 	.word	0x510e527f
 80129c8:	9b05688c 	.word	0x9b05688c
 80129cc:	1f83d9ab 	.word	0x1f83d9ab
 80129d0:	5be0cd19 	.word	0x5be0cd19

080129d4 <wc_InitSha256_ex>:

#else
    #define NEED_SOFT_SHA256

    int wc_InitSha256_ex(wc_Sha256* sha256, void* heap, int devId)
    {
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b086      	sub	sp, #24
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
        int ret = 0;
 80129e0:	2300      	movs	r3, #0
 80129e2:	617b      	str	r3, [r7, #20]
        if (sha256 == NULL)
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d102      	bne.n	80129f0 <wc_InitSha256_ex+0x1c>
            return BAD_FUNC_ARG;
 80129ea:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80129ee:	e00c      	b.n	8012a0a <wc_InitSha256_ex+0x36>

        sha256->heap = heap;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	68ba      	ldr	r2, [r7, #8]
 80129f4:	66da      	str	r2, [r3, #108]	; 0x6c
    #endif
    #ifdef WOLFSSL_SMALL_STACK_CACHE
        sha256->W = NULL;
    #endif

        ret = InitSha256(sha256);
 80129f6:	68f8      	ldr	r0, [r7, #12]
 80129f8:	f7ff ffa4 	bl	8012944 <InitSha256>
 80129fc:	6178      	str	r0, [r7, #20]
        if (ret != 0)
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d001      	beq.n	8012a08 <wc_InitSha256_ex+0x34>
            return ret;
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	e000      	b.n	8012a0a <wc_InitSha256_ex+0x36>
                            WOLFSSL_ASYNC_MARKER_SHA256, sha256->heap, devId);
    #else
        (void)devId;
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return ret;
 8012a08:	697b      	ldr	r3, [r7, #20]
    }
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3718      	adds	r7, #24
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
	...

08012a14 <Transform_Sha256>:
         t1 = Sigma0(a(j)) + Maj(a(j), b(j), c(j)); \
         d(j) += t0; \
         h(j)  = t0 + t1

    static int Transform_Sha256(wc_Sha256* sha256, const byte* data)
    {
 8012a14:	b5b0      	push	{r4, r5, r7, lr}
 8012a16:	b090      	sub	sp, #64	; 0x40
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
                return MEMORY_E;
            sha256->W = W;
        }
    #elif defined(WOLFSSL_SMALL_STACK)
        word32* W;
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 8012a1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012a22:	f7fe fd1b 	bl	801145c <wolfSSL_Malloc>
 8012a26:	63b8      	str	r0, [r7, #56]	; 0x38
                                                       DYNAMIC_TYPE_TMP_BUFFER);
        if (W == NULL)
 8012a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d102      	bne.n	8012a34 <Transform_Sha256+0x20>
            return MEMORY_E;
 8012a2e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8012a32:	e360      	b.n	80130f6 <Transform_Sha256+0x6e2>
    #else
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
 8012a34:	2300      	movs	r3, #0
 8012a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a38:	e00d      	b.n	8012a56 <Transform_Sha256+0x42>
            S[i] = sha256->digest[i];
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012a4a:	440b      	add	r3, r1
 8012a4c:	f843 2c34 	str.w	r2, [r3, #-52]
        for (i = 0; i < 8; i++)
 8012a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a52:	3301      	adds	r3, #1
 8012a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a58:	2b07      	cmp	r3, #7
 8012a5a:	ddee      	ble.n	8012a3a <Transform_Sha256+0x26>

        for (i = 0; i < 16; i++)
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a60:	e00c      	b.n	8012a7c <Transform_Sha256+0x68>
            W[i] = *((word32*)&data[i*sizeof(word32)]);
 8012a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	683a      	ldr	r2, [r7, #0]
 8012a68:	441a      	add	r2, r3
 8012a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a70:	440b      	add	r3, r1
 8012a72:	6812      	ldr	r2, [r2, #0]
 8012a74:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 16; i++)
 8012a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a78:	3301      	adds	r3, #1
 8012a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a7e:	2b0f      	cmp	r3, #15
 8012a80:	ddef      	ble.n	8012a62 <Transform_Sha256+0x4e>

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 8012a82:	2310      	movs	r3, #16
 8012a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a86:	e066      	b.n	8012b56 <Transform_Sha256+0x142>
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 8012a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012a8e:	3b02      	subs	r3, #2
 8012a90:	009b      	lsls	r3, r3, #2
 8012a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a94:	4413      	add	r3, r2
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	2111      	movs	r1, #17
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7ff fef7 	bl	801288e <rotrFixed>
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012aa8:	3b02      	subs	r3, #2
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012aae:	4413      	add	r3, r2
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2113      	movs	r1, #19
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7ff feea 	bl	801288e <rotrFixed>
 8012aba:	4603      	mov	r3, r0
 8012abc:	ea84 0203 	eor.w	r2, r4, r3
 8012ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ac2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012ac6:	3b02      	subs	r3, #2
 8012ac8:	009b      	lsls	r3, r3, #2
 8012aca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012acc:	440b      	add	r3, r1
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	0a9b      	lsrs	r3, r3, #10
 8012ad2:	405a      	eors	r2, r3
 8012ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ad6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012ada:	3b07      	subs	r3, #7
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ae0:	440b      	add	r3, r1
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	18d4      	adds	r4, r2, r3
 8012ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ae8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012aec:	3b0f      	subs	r3, #15
 8012aee:	009b      	lsls	r3, r3, #2
 8012af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012af2:	4413      	add	r3, r2
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2107      	movs	r1, #7
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff fec8 	bl	801288e <rotrFixed>
 8012afe:	4605      	mov	r5, r0
 8012b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012b06:	3b0f      	subs	r3, #15
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b0c:	4413      	add	r3, r2
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2112      	movs	r1, #18
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7ff febb 	bl	801288e <rotrFixed>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	ea85 0203 	eor.w	r2, r5, r3
 8012b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012b24:	3b0f      	subs	r3, #15
 8012b26:	009b      	lsls	r3, r3, #2
 8012b28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b2a:	440b      	add	r3, r1
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	08db      	lsrs	r3, r3, #3
 8012b30:	4053      	eors	r3, r2
 8012b32:	18e1      	adds	r1, r4, r3
 8012b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012b3a:	3b10      	subs	r3, #16
 8012b3c:	009b      	lsls	r3, r3, #2
 8012b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b40:	4413      	add	r3, r2
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b46:	009b      	lsls	r3, r3, #2
 8012b48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b4a:	4403      	add	r3, r0
 8012b4c:	440a      	add	r2, r1
 8012b4e:	601a      	str	r2, [r3, #0]
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 8012b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b52:	3301      	adds	r3, #1
 8012b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b58:	2b3f      	cmp	r3, #63	; 0x3f
 8012b5a:	dd95      	ble.n	8012a88 <Transform_Sha256+0x74>
                RND(j);
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b60:	e2a3      	b.n	80130aa <Transform_Sha256+0x696>
            RND(0); RND(1); RND(2); RND(3);
 8012b62:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8012b64:	69fb      	ldr	r3, [r7, #28]
 8012b66:	2106      	movs	r1, #6
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7ff fe90 	bl	801288e <rotrFixed>
 8012b6e:	4605      	mov	r5, r0
 8012b70:	69fb      	ldr	r3, [r7, #28]
 8012b72:	210b      	movs	r1, #11
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7ff fe8a 	bl	801288e <rotrFixed>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	405d      	eors	r5, r3
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	2119      	movs	r1, #25
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7ff fe83 	bl	801288e <rotrFixed>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	406b      	eors	r3, r5
 8012b8c:	18e2      	adds	r2, r4, r3
 8012b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b90:	69f8      	ldr	r0, [r7, #28]
 8012b92:	6a3c      	ldr	r4, [r7, #32]
 8012b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b96:	4063      	eors	r3, r4
 8012b98:	4003      	ands	r3, r0
 8012b9a:	404b      	eors	r3, r1
 8012b9c:	441a      	add	r2, r3
 8012b9e:	49bd      	ldr	r1, [pc, #756]	; (8012e94 <Transform_Sha256+0x480>)
 8012ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ba2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012ba6:	441a      	add	r2, r3
 8012ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012baa:	009b      	lsls	r3, r3, #2
 8012bac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012bae:	440b      	add	r3, r1
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	4413      	add	r3, r2
 8012bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	2102      	movs	r1, #2
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7ff fe67 	bl	801288e <rotrFixed>
 8012bc0:	4604      	mov	r4, r0
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	210d      	movs	r1, #13
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff fe61 	bl	801288e <rotrFixed>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	405c      	eors	r4, r3
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	2116      	movs	r1, #22
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7ff fe5a 	bl	801288e <rotrFixed>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	ea84 0203 	eor.w	r2, r4, r3
 8012be0:	68f9      	ldr	r1, [r7, #12]
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	4319      	orrs	r1, r3
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	4019      	ands	r1, r3
 8012bea:	68f8      	ldr	r0, [r7, #12]
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	4003      	ands	r3, r0
 8012bf0:	430b      	orrs	r3, r1
 8012bf2:	4413      	add	r3, r2
 8012bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bf6:	69ba      	ldr	r2, [r7, #24]
 8012bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfa:	4413      	add	r3, r2
 8012bfc:	61bb      	str	r3, [r7, #24]
 8012bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c02:	4413      	add	r3, r2
 8012c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c06:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	2106      	movs	r1, #6
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7ff fe3e 	bl	801288e <rotrFixed>
 8012c12:	4605      	mov	r5, r0
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	210b      	movs	r1, #11
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7ff fe38 	bl	801288e <rotrFixed>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	405d      	eors	r5, r3
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	2119      	movs	r1, #25
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7ff fe31 	bl	801288e <rotrFixed>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	406b      	eors	r3, r5
 8012c30:	18e2      	adds	r2, r4, r3
 8012c32:	6a39      	ldr	r1, [r7, #32]
 8012c34:	69b8      	ldr	r0, [r7, #24]
 8012c36:	69fc      	ldr	r4, [r7, #28]
 8012c38:	6a3b      	ldr	r3, [r7, #32]
 8012c3a:	4063      	eors	r3, r4
 8012c3c:	4003      	ands	r3, r0
 8012c3e:	404b      	eors	r3, r1
 8012c40:	441a      	add	r2, r3
 8012c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c44:	3301      	adds	r3, #1
 8012c46:	4993      	ldr	r1, [pc, #588]	; (8012e94 <Transform_Sha256+0x480>)
 8012c48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012c4c:	441a      	add	r2, r3
 8012c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c50:	3301      	adds	r3, #1
 8012c52:	009b      	lsls	r3, r3, #2
 8012c54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c56:	440b      	add	r3, r1
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8012c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c60:	2102      	movs	r1, #2
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7ff fe13 	bl	801288e <rotrFixed>
 8012c68:	4604      	mov	r4, r0
 8012c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c6c:	210d      	movs	r1, #13
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7ff fe0d 	bl	801288e <rotrFixed>
 8012c74:	4603      	mov	r3, r0
 8012c76:	405c      	eors	r4, r3
 8012c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7a:	2116      	movs	r1, #22
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7ff fe06 	bl	801288e <rotrFixed>
 8012c82:	4603      	mov	r3, r0
 8012c84:	ea84 0203 	eor.w	r2, r4, r3
 8012c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	4319      	orrs	r1, r3
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	4019      	ands	r1, r3
 8012c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	4003      	ands	r3, r0
 8012c98:	430b      	orrs	r3, r1
 8012c9a:	4413      	add	r3, r2
 8012c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c9e:	697a      	ldr	r2, [r7, #20]
 8012ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca2:	4413      	add	r3, r2
 8012ca4:	617b      	str	r3, [r7, #20]
 8012ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012caa:	4413      	add	r3, r2
 8012cac:	627b      	str	r3, [r7, #36]	; 0x24
 8012cae:	6a3c      	ldr	r4, [r7, #32]
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	2106      	movs	r1, #6
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7ff fdea 	bl	801288e <rotrFixed>
 8012cba:	4605      	mov	r5, r0
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	210b      	movs	r1, #11
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7ff fde4 	bl	801288e <rotrFixed>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	405d      	eors	r5, r3
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	2119      	movs	r1, #25
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7ff fddd 	bl	801288e <rotrFixed>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	406b      	eors	r3, r5
 8012cd8:	18e2      	adds	r2, r4, r3
 8012cda:	69f9      	ldr	r1, [r7, #28]
 8012cdc:	6978      	ldr	r0, [r7, #20]
 8012cde:	69bc      	ldr	r4, [r7, #24]
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	4063      	eors	r3, r4
 8012ce4:	4003      	ands	r3, r0
 8012ce6:	404b      	eors	r3, r1
 8012ce8:	441a      	add	r2, r3
 8012cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cec:	3302      	adds	r3, #2
 8012cee:	4969      	ldr	r1, [pc, #420]	; (8012e94 <Transform_Sha256+0x480>)
 8012cf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012cf4:	441a      	add	r2, r3
 8012cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cf8:	3302      	adds	r3, #2
 8012cfa:	009b      	lsls	r3, r3, #2
 8012cfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012cfe:	440b      	add	r3, r1
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	4413      	add	r3, r2
 8012d04:	633b      	str	r3, [r7, #48]	; 0x30
 8012d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d08:	2102      	movs	r1, #2
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7ff fdbf 	bl	801288e <rotrFixed>
 8012d10:	4604      	mov	r4, r0
 8012d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d14:	210d      	movs	r1, #13
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7ff fdb9 	bl	801288e <rotrFixed>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	405c      	eors	r4, r3
 8012d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d22:	2116      	movs	r1, #22
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7ff fdb2 	bl	801288e <rotrFixed>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	ea84 0203 	eor.w	r2, r4, r3
 8012d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d34:	4319      	orrs	r1, r3
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	4019      	ands	r1, r3
 8012d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3e:	4003      	ands	r3, r0
 8012d40:	430b      	orrs	r3, r1
 8012d42:	4413      	add	r3, r2
 8012d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d46:	693a      	ldr	r2, [r7, #16]
 8012d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4a:	4413      	add	r3, r2
 8012d4c:	613b      	str	r3, [r7, #16]
 8012d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d52:	4413      	add	r3, r2
 8012d54:	623b      	str	r3, [r7, #32]
 8012d56:	69fc      	ldr	r4, [r7, #28]
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	2106      	movs	r1, #6
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7ff fd96 	bl	801288e <rotrFixed>
 8012d62:	4605      	mov	r5, r0
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	210b      	movs	r1, #11
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7ff fd90 	bl	801288e <rotrFixed>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	405d      	eors	r5, r3
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	2119      	movs	r1, #25
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ff fd89 	bl	801288e <rotrFixed>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	406b      	eors	r3, r5
 8012d80:	18e2      	adds	r2, r4, r3
 8012d82:	69b9      	ldr	r1, [r7, #24]
 8012d84:	6938      	ldr	r0, [r7, #16]
 8012d86:	697c      	ldr	r4, [r7, #20]
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	4063      	eors	r3, r4
 8012d8c:	4003      	ands	r3, r0
 8012d8e:	404b      	eors	r3, r1
 8012d90:	441a      	add	r2, r3
 8012d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d94:	3303      	adds	r3, #3
 8012d96:	493f      	ldr	r1, [pc, #252]	; (8012e94 <Transform_Sha256+0x480>)
 8012d98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012d9c:	441a      	add	r2, r3
 8012d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012da0:	3303      	adds	r3, #3
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012da6:	440b      	add	r3, r1
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	4413      	add	r3, r2
 8012dac:	633b      	str	r3, [r7, #48]	; 0x30
 8012dae:	6a3b      	ldr	r3, [r7, #32]
 8012db0:	2102      	movs	r1, #2
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7ff fd6b 	bl	801288e <rotrFixed>
 8012db8:	4604      	mov	r4, r0
 8012dba:	6a3b      	ldr	r3, [r7, #32]
 8012dbc:	210d      	movs	r1, #13
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7ff fd65 	bl	801288e <rotrFixed>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	405c      	eors	r4, r3
 8012dc8:	6a3b      	ldr	r3, [r7, #32]
 8012dca:	2116      	movs	r1, #22
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7ff fd5e 	bl	801288e <rotrFixed>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	ea84 0203 	eor.w	r2, r4, r3
 8012dd8:	6a39      	ldr	r1, [r7, #32]
 8012dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ddc:	4319      	orrs	r1, r3
 8012dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012de0:	4019      	ands	r1, r3
 8012de2:	6a38      	ldr	r0, [r7, #32]
 8012de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de6:	4003      	ands	r3, r0
 8012de8:	430b      	orrs	r3, r1
 8012dea:	4413      	add	r3, r2
 8012dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012dee:	68fa      	ldr	r2, [r7, #12]
 8012df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df2:	4413      	add	r3, r2
 8012df4:	60fb      	str	r3, [r7, #12]
 8012df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfa:	4413      	add	r3, r2
 8012dfc:	61fb      	str	r3, [r7, #28]
            RND(4); RND(5); RND(6); RND(7);
 8012dfe:	69bc      	ldr	r4, [r7, #24]
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2106      	movs	r1, #6
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7ff fd42 	bl	801288e <rotrFixed>
 8012e0a:	4605      	mov	r5, r0
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	210b      	movs	r1, #11
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7ff fd3c 	bl	801288e <rotrFixed>
 8012e16:	4603      	mov	r3, r0
 8012e18:	405d      	eors	r5, r3
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2119      	movs	r1, #25
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7ff fd35 	bl	801288e <rotrFixed>
 8012e24:	4603      	mov	r3, r0
 8012e26:	406b      	eors	r3, r5
 8012e28:	18e2      	adds	r2, r4, r3
 8012e2a:	6979      	ldr	r1, [r7, #20]
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	693c      	ldr	r4, [r7, #16]
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	4063      	eors	r3, r4
 8012e34:	4003      	ands	r3, r0
 8012e36:	404b      	eors	r3, r1
 8012e38:	441a      	add	r2, r3
 8012e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e3c:	3304      	adds	r3, #4
 8012e3e:	4915      	ldr	r1, [pc, #84]	; (8012e94 <Transform_Sha256+0x480>)
 8012e40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012e44:	441a      	add	r2, r3
 8012e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e48:	3304      	adds	r3, #4
 8012e4a:	009b      	lsls	r3, r3, #2
 8012e4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e4e:	440b      	add	r3, r1
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4413      	add	r3, r2
 8012e54:	633b      	str	r3, [r7, #48]	; 0x30
 8012e56:	69fb      	ldr	r3, [r7, #28]
 8012e58:	2102      	movs	r1, #2
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7ff fd17 	bl	801288e <rotrFixed>
 8012e60:	4604      	mov	r4, r0
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	210d      	movs	r1, #13
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7ff fd11 	bl	801288e <rotrFixed>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	405c      	eors	r4, r3
 8012e70:	69fb      	ldr	r3, [r7, #28]
 8012e72:	2116      	movs	r1, #22
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7ff fd0a 	bl	801288e <rotrFixed>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	ea84 0203 	eor.w	r2, r4, r3
 8012e80:	69f9      	ldr	r1, [r7, #28]
 8012e82:	6a3b      	ldr	r3, [r7, #32]
 8012e84:	4319      	orrs	r1, r3
 8012e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e88:	4019      	ands	r1, r3
 8012e8a:	69f8      	ldr	r0, [r7, #28]
 8012e8c:	6a3b      	ldr	r3, [r7, #32]
 8012e8e:	4003      	ands	r3, r0
 8012e90:	430b      	orrs	r3, r1
 8012e92:	e001      	b.n	8012e98 <Transform_Sha256+0x484>
 8012e94:	0801e6a4 	.word	0x0801e6a4
 8012e98:	4413      	add	r3, r2
 8012e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea0:	4413      	add	r3, r2
 8012ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea8:	4413      	add	r3, r2
 8012eaa:	61bb      	str	r3, [r7, #24]
 8012eac:	697c      	ldr	r4, [r7, #20]
 8012eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb0:	2106      	movs	r1, #6
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7ff fceb 	bl	801288e <rotrFixed>
 8012eb8:	4605      	mov	r5, r0
 8012eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebc:	210b      	movs	r1, #11
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7ff fce5 	bl	801288e <rotrFixed>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	405d      	eors	r5, r3
 8012ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eca:	2119      	movs	r1, #25
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7ff fcde 	bl	801288e <rotrFixed>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	406b      	eors	r3, r5
 8012ed6:	18e2      	adds	r2, r4, r3
 8012ed8:	6939      	ldr	r1, [r7, #16]
 8012eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012edc:	68fc      	ldr	r4, [r7, #12]
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	4063      	eors	r3, r4
 8012ee2:	4003      	ands	r3, r0
 8012ee4:	404b      	eors	r3, r1
 8012ee6:	441a      	add	r2, r3
 8012ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eea:	3305      	adds	r3, #5
 8012eec:	4984      	ldr	r1, [pc, #528]	; (8013100 <Transform_Sha256+0x6ec>)
 8012eee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012ef2:	441a      	add	r2, r3
 8012ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ef6:	3305      	adds	r3, #5
 8012ef8:	009b      	lsls	r3, r3, #2
 8012efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012efc:	440b      	add	r3, r1
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	4413      	add	r3, r2
 8012f02:	633b      	str	r3, [r7, #48]	; 0x30
 8012f04:	69bb      	ldr	r3, [r7, #24]
 8012f06:	2102      	movs	r1, #2
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7ff fcc0 	bl	801288e <rotrFixed>
 8012f0e:	4604      	mov	r4, r0
 8012f10:	69bb      	ldr	r3, [r7, #24]
 8012f12:	210d      	movs	r1, #13
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7ff fcba 	bl	801288e <rotrFixed>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	405c      	eors	r4, r3
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	2116      	movs	r1, #22
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7ff fcb3 	bl	801288e <rotrFixed>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	ea84 0203 	eor.w	r2, r4, r3
 8012f2e:	69b9      	ldr	r1, [r7, #24]
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	4319      	orrs	r1, r3
 8012f34:	6a3b      	ldr	r3, [r7, #32]
 8012f36:	4019      	ands	r1, r3
 8012f38:	69b8      	ldr	r0, [r7, #24]
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	4003      	ands	r3, r0
 8012f3e:	430b      	orrs	r3, r1
 8012f40:	4413      	add	r3, r2
 8012f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f48:	4413      	add	r3, r2
 8012f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f50:	4413      	add	r3, r2
 8012f52:	617b      	str	r3, [r7, #20]
 8012f54:	693c      	ldr	r4, [r7, #16]
 8012f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f58:	2106      	movs	r1, #6
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ff fc97 	bl	801288e <rotrFixed>
 8012f60:	4605      	mov	r5, r0
 8012f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f64:	210b      	movs	r1, #11
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7ff fc91 	bl	801288e <rotrFixed>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	405d      	eors	r5, r3
 8012f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f72:	2119      	movs	r1, #25
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7ff fc8a 	bl	801288e <rotrFixed>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	406b      	eors	r3, r5
 8012f7e:	18e2      	adds	r2, r4, r3
 8012f80:	68f9      	ldr	r1, [r7, #12]
 8012f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f84:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	4063      	eors	r3, r4
 8012f8a:	4003      	ands	r3, r0
 8012f8c:	404b      	eors	r3, r1
 8012f8e:	441a      	add	r2, r3
 8012f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f92:	3306      	adds	r3, #6
 8012f94:	495a      	ldr	r1, [pc, #360]	; (8013100 <Transform_Sha256+0x6ec>)
 8012f96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012f9a:	441a      	add	r2, r3
 8012f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f9e:	3306      	adds	r3, #6
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012fa4:	440b      	add	r3, r1
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	4413      	add	r3, r2
 8012faa:	633b      	str	r3, [r7, #48]	; 0x30
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	2102      	movs	r1, #2
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7ff fc6c 	bl	801288e <rotrFixed>
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	210d      	movs	r1, #13
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff fc66 	bl	801288e <rotrFixed>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	405c      	eors	r4, r3
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	2116      	movs	r1, #22
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7ff fc5f 	bl	801288e <rotrFixed>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	ea84 0203 	eor.w	r2, r4, r3
 8012fd6:	6979      	ldr	r1, [r7, #20]
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	4319      	orrs	r1, r3
 8012fdc:	69fb      	ldr	r3, [r7, #28]
 8012fde:	4019      	ands	r1, r3
 8012fe0:	6978      	ldr	r0, [r7, #20]
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	4003      	ands	r3, r0
 8012fe6:	430b      	orrs	r3, r1
 8012fe8:	4413      	add	r3, r2
 8012fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012fec:	6a3a      	ldr	r2, [r7, #32]
 8012fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff0:	4413      	add	r3, r2
 8012ff2:	623b      	str	r3, [r7, #32]
 8012ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff8:	4413      	add	r3, r2
 8012ffa:	613b      	str	r3, [r7, #16]
 8012ffc:	68fc      	ldr	r4, [r7, #12]
 8012ffe:	6a3b      	ldr	r3, [r7, #32]
 8013000:	2106      	movs	r1, #6
 8013002:	4618      	mov	r0, r3
 8013004:	f7ff fc43 	bl	801288e <rotrFixed>
 8013008:	4605      	mov	r5, r0
 801300a:	6a3b      	ldr	r3, [r7, #32]
 801300c:	210b      	movs	r1, #11
 801300e:	4618      	mov	r0, r3
 8013010:	f7ff fc3d 	bl	801288e <rotrFixed>
 8013014:	4603      	mov	r3, r0
 8013016:	405d      	eors	r5, r3
 8013018:	6a3b      	ldr	r3, [r7, #32]
 801301a:	2119      	movs	r1, #25
 801301c:	4618      	mov	r0, r3
 801301e:	f7ff fc36 	bl	801288e <rotrFixed>
 8013022:	4603      	mov	r3, r0
 8013024:	406b      	eors	r3, r5
 8013026:	18e2      	adds	r2, r4, r3
 8013028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801302a:	6a38      	ldr	r0, [r7, #32]
 801302c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013030:	4063      	eors	r3, r4
 8013032:	4003      	ands	r3, r0
 8013034:	404b      	eors	r3, r1
 8013036:	441a      	add	r2, r3
 8013038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801303a:	3307      	adds	r3, #7
 801303c:	4930      	ldr	r1, [pc, #192]	; (8013100 <Transform_Sha256+0x6ec>)
 801303e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013042:	441a      	add	r2, r3
 8013044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013046:	3307      	adds	r3, #7
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801304c:	440b      	add	r3, r1
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	4413      	add	r3, r2
 8013052:	633b      	str	r3, [r7, #48]	; 0x30
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	2102      	movs	r1, #2
 8013058:	4618      	mov	r0, r3
 801305a:	f7ff fc18 	bl	801288e <rotrFixed>
 801305e:	4604      	mov	r4, r0
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	210d      	movs	r1, #13
 8013064:	4618      	mov	r0, r3
 8013066:	f7ff fc12 	bl	801288e <rotrFixed>
 801306a:	4603      	mov	r3, r0
 801306c:	405c      	eors	r4, r3
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	2116      	movs	r1, #22
 8013072:	4618      	mov	r0, r3
 8013074:	f7ff fc0b 	bl	801288e <rotrFixed>
 8013078:	4603      	mov	r3, r0
 801307a:	ea84 0203 	eor.w	r2, r4, r3
 801307e:	6939      	ldr	r1, [r7, #16]
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	4319      	orrs	r1, r3
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	4019      	ands	r1, r3
 8013088:	6938      	ldr	r0, [r7, #16]
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	4003      	ands	r3, r0
 801308e:	430b      	orrs	r3, r1
 8013090:	4413      	add	r3, r2
 8013092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013094:	69fa      	ldr	r2, [r7, #28]
 8013096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013098:	4413      	add	r3, r2
 801309a:	61fb      	str	r3, [r7, #28]
 801309c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a0:	4413      	add	r3, r2
 80130a2:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 80130a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130a6:	3308      	adds	r3, #8
 80130a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80130aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130ac:	2b3f      	cmp	r3, #63	; 0x3f
 80130ae:	f77f ad58 	ble.w	8012b62 <Transform_Sha256+0x14e>
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
 80130b2:	2300      	movs	r3, #0
 80130b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80130b6:	e012      	b.n	80130de <Transform_Sha256+0x6ca>
            sha256->digest[i] += S[i];
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80130bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80130c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130c2:	009b      	lsls	r3, r3, #2
 80130c4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80130c8:	440b      	add	r3, r1
 80130ca:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80130ce:	18d1      	adds	r1, r2, r3
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80130d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0; i < 8; i++) {
 80130d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130da:	3301      	adds	r3, #1
 80130dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80130de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130e0:	2b07      	cmp	r3, #7
 80130e2:	dde9      	ble.n	80130b8 <Transform_Sha256+0x6a4>
        }

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80130e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e6:	637b      	str	r3, [r7, #52]	; 0x34
 80130e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d002      	beq.n	80130f4 <Transform_Sha256+0x6e0>
 80130ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80130f0:	f7fe f9d0 	bl	8011494 <wolfSSL_Free>
    #endif
        return 0;
 80130f4:	2300      	movs	r3, #0
    }
 80130f6:	4618      	mov	r0, r3
 80130f8:	3740      	adds	r7, #64	; 0x40
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bdb0      	pop	{r4, r5, r7, pc}
 80130fe:	bf00      	nop
 8013100:	0801e6a4 	.word	0x0801e6a4

08013104 <AddLength>:


#ifdef XTRANSFORM

    static WC_INLINE void AddLength(wc_Sha256* sha256, word32 len)
    {
 8013104:	b480      	push	{r7}
 8013106:	b085      	sub	sp, #20
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
        word32 tmp = sha256->loLen;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013112:	60fb      	str	r3, [r7, #12]
        if ((sha256->loLen += len) < tmp) {
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	441a      	add	r2, r3
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	665a      	str	r2, [r3, #100]	; 0x64
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013124:	68fa      	ldr	r2, [r7, #12]
 8013126:	429a      	cmp	r2, r3
 8013128:	d904      	bls.n	8013134 <AddLength+0x30>
            sha256->hiLen++;                       /* carry low to high */
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801312e:	1c5a      	adds	r2, r3, #1
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	669a      	str	r2, [r3, #104]	; 0x68
        }
    }
 8013134:	bf00      	nop
 8013136:	3714      	adds	r7, #20
 8013138:	46bd      	mov	sp, r7
 801313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313e:	4770      	bx	lr

08013140 <Sha256Update>:

    /* do block size increments/updates */
    static WC_INLINE int Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 8013140:	b580      	push	{r7, lr}
 8013142:	b088      	sub	sp, #32
 8013144:	af00      	add	r7, sp, #0
 8013146:	60f8      	str	r0, [r7, #12]
 8013148:	60b9      	str	r1, [r7, #8]
 801314a:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801314c:	2300      	movs	r3, #0
 801314e:	61fb      	str	r3, [r7, #28]
        word32 blocksLen;
        byte* local;

        if (sha256 == NULL || (data == NULL && len > 0)) {
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d005      	beq.n	8013162 <Sha256Update+0x22>
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d105      	bne.n	8013168 <Sha256Update+0x28>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d002      	beq.n	8013168 <Sha256Update+0x28>
            return BAD_FUNC_ARG;
 8013162:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8013166:	e081      	b.n	801326c <Sha256Update+0x12c>
        }

        if (data == NULL && len == 0) {
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d104      	bne.n	8013178 <Sha256Update+0x38>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <Sha256Update+0x38>
            /* valid, but do nothing */
            return 0;
 8013174:	2300      	movs	r3, #0
 8013176:	e079      	b.n	801326c <Sha256Update+0x12c>
        }

        /* check that internal buffLen is valid */
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801317c:	2b3f      	cmp	r3, #63	; 0x3f
 801317e:	d902      	bls.n	8013186 <Sha256Update+0x46>
            return BUFFER_E;
 8013180:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8013184:	e072      	b.n	801326c <Sha256Update+0x12c>
        }

        /* add length for final */
        AddLength(sha256, len);
 8013186:	6879      	ldr	r1, [r7, #4]
 8013188:	68f8      	ldr	r0, [r7, #12]
 801318a:	f7ff ffbb 	bl	8013104 <AddLength>

        local = (byte*)sha256->buffer;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	3320      	adds	r3, #32
 8013192:	61bb      	str	r3, [r7, #24]

        /* process any remainder from previous operation */
        if (sha256->buffLen > 0) {
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013198:	2b00      	cmp	r3, #0
 801319a:	d056      	beq.n	801324a <Sha256Update+0x10a>
            blocksLen = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131a0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80131a4:	4619      	mov	r1, r3
 80131a6:	6878      	ldr	r0, [r7, #4]
 80131a8:	f7ff fbbc 	bl	8012924 <min>
 80131ac:	6178      	str	r0, [r7, #20]
            XMEMCPY(&local[sha256->buffLen], data, blocksLen);
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131b2:	69ba      	ldr	r2, [r7, #24]
 80131b4:	4413      	add	r3, r2
 80131b6:	697a      	ldr	r2, [r7, #20]
 80131b8:	68b9      	ldr	r1, [r7, #8]
 80131ba:	4618      	mov	r0, r3
 80131bc:	f008 fc29 	bl	801ba12 <memcpy>

            sha256->buffLen += blocksLen;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	441a      	add	r2, r3
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	661a      	str	r2, [r3, #96]	; 0x60
            data            += blocksLen;
 80131cc:	68ba      	ldr	r2, [r7, #8]
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	4413      	add	r3, r2
 80131d2:	60bb      	str	r3, [r7, #8]
            len             -= blocksLen;
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	1ad3      	subs	r3, r2, r3
 80131da:	607b      	str	r3, [r7, #4]

            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131e0:	2b40      	cmp	r3, #64	; 0x40
 80131e2:	d132      	bne.n	801324a <Sha256Update+0x10a>
                #if defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(sha256->buffer, sha256->buffer,
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	f103 0020 	add.w	r0, r3, #32
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	3320      	adds	r3, #32
 80131ee:	2240      	movs	r2, #64	; 0x40
 80131f0:	4619      	mov	r1, r3
 80131f2:	f7ff fb72 	bl	80128da <ByteReverseWords>
                    ret = XTRANSFORM(sha256, (const byte*)local);
                } else {
                    esp_sha256_process(sha256, (const byte*)local);
                }
            #else
                ret = XTRANSFORM(sha256, (const byte*)local);
 80131f6:	69b9      	ldr	r1, [r7, #24]
 80131f8:	68f8      	ldr	r0, [r7, #12]
 80131fa:	f7ff fc0b 	bl	8012a14 <Transform_Sha256>
 80131fe:	61f8      	str	r0, [r7, #28]
            #endif

                if (ret == 0)
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d103      	bne.n	801320e <Sha256Update+0xce>
                    sha256->buffLen = 0;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2200      	movs	r2, #0
 801320a:	661a      	str	r2, [r3, #96]	; 0x60
 801320c:	e01d      	b.n	801324a <Sha256Update+0x10a>
                else
                    len = 0; /* error */
 801320e:	2300      	movs	r3, #0
 8013210:	607b      	str	r3, [r7, #4]
        #endif
    #endif /* XTRANSFORM_LEN */
    #if !defined(XTRANSFORM_LEN) || (defined(USE_INTEL_SPEEDUP) && \
                         (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2)))
        {
            while (len >= WC_SHA256_BLOCK_SIZE) {
 8013212:	e01a      	b.n	801324a <Sha256Update+0x10a>
                word32* local32 = sha256->buffer;
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	3320      	adds	r3, #32
 8013218:	613b      	str	r3, [r7, #16]
                    local32 = (word32*)data;
                }
                else
            #endif
                {
                    XMEMCPY(local32, data, WC_SHA256_BLOCK_SIZE);
 801321a:	2240      	movs	r2, #64	; 0x40
 801321c:	68b9      	ldr	r1, [r7, #8]
 801321e:	6938      	ldr	r0, [r7, #16]
 8013220:	f008 fbf7 	bl	801ba12 <memcpy>
                }

                data += WC_SHA256_BLOCK_SIZE;
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	3340      	adds	r3, #64	; 0x40
 8013228:	60bb      	str	r3, [r7, #8]
                len  -= WC_SHA256_BLOCK_SIZE;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	3b40      	subs	r3, #64	; 0x40
 801322e:	607b      	str	r3, [r7, #4]
                #if defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(local32, local32, WC_SHA256_BLOCK_SIZE);
 8013230:	2240      	movs	r2, #64	; 0x40
 8013232:	6939      	ldr	r1, [r7, #16]
 8013234:	6938      	ldr	r0, [r7, #16]
 8013236:	f7ff fb50 	bl	80128da <ByteReverseWords>
                    ret = XTRANSFORM(sha256, (const byte*)local32);
                } else {
                    esp_sha256_process(sha256, (const byte*)local32);
                }
            #else
                ret = XTRANSFORM(sha256, (const byte*)local32);
 801323a:	6939      	ldr	r1, [r7, #16]
 801323c:	68f8      	ldr	r0, [r7, #12]
 801323e:	f7ff fbe9 	bl	8012a14 <Transform_Sha256>
 8013242:	61f8      	str	r0, [r7, #28]
            #endif

                if (ret != 0)
 8013244:	69fb      	ldr	r3, [r7, #28]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d103      	bne.n	8013252 <Sha256Update+0x112>
            while (len >= WC_SHA256_BLOCK_SIZE) {
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2b3f      	cmp	r3, #63	; 0x3f
 801324e:	d8e1      	bhi.n	8013214 <Sha256Update+0xd4>
 8013250:	e000      	b.n	8013254 <Sha256Update+0x114>
                    break;
 8013252:	bf00      	nop
            }
        }
    #endif

        /* save remainder */
        if (len > 0) {
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d007      	beq.n	801326a <Sha256Update+0x12a>
            XMEMCPY(local, data, len);
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	68b9      	ldr	r1, [r7, #8]
 801325e:	69b8      	ldr	r0, [r7, #24]
 8013260:	f008 fbd7 	bl	801ba12 <memcpy>
            sha256->buffLen = len;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	661a      	str	r2, [r3, #96]	; 0x60
        }

        return ret;
 801326a:	69fb      	ldr	r3, [r7, #28]
    }
 801326c:	4618      	mov	r0, r3
 801326e:	3720      	adds	r7, #32
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <wc_Sha256Update>:

    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	60f8      	str	r0, [r7, #12]
 801327c:	60b9      	str	r1, [r7, #8]
 801327e:	607a      	str	r2, [r7, #4]
        if (sha256 == NULL || (data == NULL && len > 0)) {
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d005      	beq.n	8013292 <wc_Sha256Update+0x1e>
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d105      	bne.n	8013298 <wc_Sha256Update+0x24>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d002      	beq.n	8013298 <wc_Sha256Update+0x24>
            return BAD_FUNC_ARG;
 8013292:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8013296:	e00d      	b.n	80132b4 <wc_Sha256Update+0x40>
        }

        if (data == NULL && len == 0) {
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d104      	bne.n	80132a8 <wc_Sha256Update+0x34>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d101      	bne.n	80132a8 <wc_Sha256Update+0x34>
            /* valid, but do nothing */
            return 0;
 80132a4:	2300      	movs	r3, #0
 80132a6:	e005      	b.n	80132b4 <wc_Sha256Update+0x40>
            return IntelQaSymSha256(&sha256->asyncDev, NULL, data, len);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	68b9      	ldr	r1, [r7, #8]
 80132ac:	68f8      	ldr	r0, [r7, #12]
 80132ae:	f7ff ff47 	bl	8013140 <Sha256Update>
 80132b2:	4603      	mov	r3, r0
    }
 80132b4:	4618      	mov	r0, r3
 80132b6:	3710      	adds	r7, #16
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}

080132bc <Sha256Final>:

    static WC_INLINE int Sha256Final(wc_Sha256* sha256)
    {
 80132bc:	b580      	push	{r7, lr}
 80132be:	b084      	sub	sp, #16
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]

        int ret;
        byte* local;

        if (sha256 == NULL) {
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d102      	bne.n	80132d0 <Sha256Final+0x14>
            return BAD_FUNC_ARG;
 80132ca:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80132ce:	e069      	b.n	80133a4 <Sha256Final+0xe8>
        }

        local = (byte*)sha256->buffer;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	3320      	adds	r3, #32
 80132d4:	60fb      	str	r3, [r7, #12]
        local[sha256->buffLen++] = 0x80; /* add 1 */
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80132da:	1c59      	adds	r1, r3, #1
 80132dc:	687a      	ldr	r2, [r7, #4]
 80132de:	6611      	str	r1, [r2, #96]	; 0x60
 80132e0:	68fa      	ldr	r2, [r7, #12]
 80132e2:	4413      	add	r3, r2
 80132e4:	2280      	movs	r2, #128	; 0x80
 80132e6:	701a      	strb	r2, [r3, #0]

        /* pad with zeros */
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80132ec:	2b38      	cmp	r3, #56	; 0x38
 80132ee:	d924      	bls.n	801333a <Sha256Final+0x7e>
            XMEMSET(&local[sha256->buffLen], 0,
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80132f4:	68fa      	ldr	r2, [r7, #12]
 80132f6:	18d0      	adds	r0, r2, r3
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80132fc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8013300:	461a      	mov	r2, r3
 8013302:	2100      	movs	r1, #0
 8013304:	f008 fba9 	bl	801ba5a <memset>
                WC_SHA256_BLOCK_SIZE - sha256->buffLen);
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2240      	movs	r2, #64	; 0x40
 801330c:	661a      	str	r2, [r3, #96]	; 0x60
            #if defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
            if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
            #endif
            {
                ByteReverseWords(sha256->buffer, sha256->buffer,
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f103 0020 	add.w	r0, r3, #32
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	3320      	adds	r3, #32
 8013318:	2240      	movs	r2, #64	; 0x40
 801331a:	4619      	mov	r1, r3
 801331c:	f7ff fadd 	bl	80128da <ByteReverseWords>
                ret = XTRANSFORM(sha256, (const byte*)local);
            } else {
                ret = esp_sha256_process(sha256, (const byte*)local);
            }
        #else
            ret = XTRANSFORM(sha256, (const byte*)local);
 8013320:	68f9      	ldr	r1, [r7, #12]
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f7ff fb76 	bl	8012a14 <Transform_Sha256>
 8013328:	60b8      	str	r0, [r7, #8]
        #endif
            if (ret != 0)
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d001      	beq.n	8013334 <Sha256Final+0x78>
                return ret;
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	e037      	b.n	80133a4 <Sha256Final+0xe8>

            sha256->buffLen = 0;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2200      	movs	r2, #0
 8013338:	661a      	str	r2, [r3, #96]	; 0x60
        }
        XMEMSET(&local[sha256->buffLen], 0,
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801333e:	68fa      	ldr	r2, [r7, #12]
 8013340:	18d0      	adds	r0, r2, r3
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013346:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801334a:	461a      	mov	r2, r3
 801334c:	2100      	movs	r1, #0
 801334e:	f008 fb84 	bl	801ba5a <memset>
            WC_SHA256_PAD_SIZE - sha256->buffLen);

        /* put lengths in bits */
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013356:	0f5a      	lsrs	r2, r3, #29
                                                         (sha256->hiLen << 3);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801335c:	00db      	lsls	r3, r3, #3
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 801335e:	441a      	add	r2, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	669a      	str	r2, [r3, #104]	; 0x68
        sha256->loLen = sha256->loLen << 3;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013368:	00da      	lsls	r2, r3, #3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	665a      	str	r2, [r3, #100]	; 0x64
        #if defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
        if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
        #endif
        {
            ByteReverseWords(sha256->buffer, sha256->buffer,
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f103 0020 	add.w	r0, r3, #32
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	3320      	adds	r3, #32
 8013378:	2240      	movs	r2, #64	; 0x40
 801337a:	4619      	mov	r1, r3
 801337c:	f7ff faad 	bl	80128da <ByteReverseWords>
                WC_SHA256_BLOCK_SIZE);
        }
    #endif
        /* ! length ordering dependent on digest endian type ! */
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	3338      	adds	r3, #56	; 0x38
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	3268      	adds	r2, #104	; 0x68
 8013388:	6812      	ldr	r2, [r2, #0]
 801338a:	601a      	str	r2, [r3, #0]
        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	333c      	adds	r3, #60	; 0x3c
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	3264      	adds	r2, #100	; 0x64
 8013394:	6812      	ldr	r2, [r2, #0]
 8013396:	601a      	str	r2, [r3, #0]
            ret = XTRANSFORM(sha256, (const byte*)local);
        } else {
            ret = esp_sha256_digest_process(sha256, 1);
        }
    #else
        ret = XTRANSFORM(sha256, (const byte*)local);
 8013398:	68f9      	ldr	r1, [r7, #12]
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f7ff fb3a 	bl	8012a14 <Transform_Sha256>
 80133a0:	60b8      	str	r0, [r7, #8]
    #endif

        return ret;
 80133a2:	68bb      	ldr	r3, [r7, #8]
    }
 80133a4:	4618      	mov	r0, r3
 80133a6:	3710      	adds	r7, #16
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}

080133ac <wc_Sha256Final>:

        return 0;
    }

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b084      	sub	sp, #16
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
        int ret;

        if (sha256 == NULL || hash == NULL) {
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d002      	beq.n	80133c2 <wc_Sha256Final+0x16>
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d102      	bne.n	80133c8 <wc_Sha256Final+0x1c>
            return BAD_FUNC_ARG;
 80133c2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80133c6:	e018      	b.n	80133fa <wc_Sha256Final+0x4e>
                                            WC_SHA256_DIGEST_SIZE);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f7ff ff77 	bl	80132bc <Sha256Final>
 80133ce:	60f8      	str	r0, [r7, #12]
        if (ret != 0)
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d001      	beq.n	80133da <wc_Sha256Final+0x2e>
            return ret;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	e00f      	b.n	80133fa <wc_Sha256Final+0x4e>

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, WC_SHA256_DIGEST_SIZE);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	6879      	ldr	r1, [r7, #4]
 80133de:	2220      	movs	r2, #32
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7ff fa7a 	bl	80128da <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2220      	movs	r2, #32
 80133ea:	4619      	mov	r1, r3
 80133ec:	6838      	ldr	r0, [r7, #0]
 80133ee:	f008 fb10 	bl	801ba12 <memcpy>

        return InitSha256(sha256);  /* reset state */
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f7ff faa6 	bl	8012944 <InitSha256>
 80133f8:	4603      	mov	r3, r0
    }
 80133fa:	4618      	mov	r0, r3
 80133fc:	3710      	adds	r7, #16
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}

08013402 <wc_Sha256Free>:
{
    return wc_InitSha256_ex(sha256, NULL, INVALID_DEVID);
}

void wc_Sha256Free(wc_Sha256* sha256)
{
 8013402:	b480      	push	{r7}
 8013404:	b083      	sub	sp, #12
 8013406:	af00      	add	r7, sp, #0
 8013408:	6078      	str	r0, [r7, #4]
    if (sha256 == NULL)
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2b00      	cmp	r3, #0
    }
#endif
#ifdef WOLFSSL_IMXRT_DCP
    DCPSha256Free(sha256);
#endif
}
 801340e:	370c      	adds	r7, #12
 8013410:	46bd      	mov	sp, r7
 8013412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013416:	4770      	bx	lr

08013418 <sp_2048_from_bin>:
 * size  Maximum number of bytes to convert
 * a  Byte array.
 * n  Number of bytes in array to read.
 */
static void sp_2048_from_bin(sp_digit* r, int size, const byte* a, int n)
{
 8013418:	b480      	push	{r7}
 801341a:	b089      	sub	sp, #36	; 0x24
 801341c:	af00      	add	r7, sp, #0
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	60b9      	str	r1, [r7, #8]
 8013422:	607a      	str	r2, [r7, #4]
 8013424:	603b      	str	r3, [r7, #0]
    int i, j = 0;
 8013426:	2300      	movs	r3, #0
 8013428:	61bb      	str	r3, [r7, #24]
    word32 s = 0;
 801342a:	2300      	movs	r3, #0
 801342c:	617b      	str	r3, [r7, #20]

    r[0] = 0;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2200      	movs	r2, #0
 8013432:	601a      	str	r2, [r3, #0]
    for (i = n-1; i >= 0; i--) {
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	3b01      	subs	r3, #1
 8013438:	61fb      	str	r3, [r7, #28]
 801343a:	e042      	b.n	80134c2 <sp_2048_from_bin+0xaa>
        r[j] |= (((sp_digit)a[i]) << s);
 801343c:	69bb      	ldr	r3, [r7, #24]
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	68fa      	ldr	r2, [r7, #12]
 8013442:	4413      	add	r3, r2
 8013444:	6819      	ldr	r1, [r3, #0]
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	687a      	ldr	r2, [r7, #4]
 801344a:	4413      	add	r3, r2
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	461a      	mov	r2, r3
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	409a      	lsls	r2, r3
 8013454:	69bb      	ldr	r3, [r7, #24]
 8013456:	009b      	lsls	r3, r3, #2
 8013458:	68f8      	ldr	r0, [r7, #12]
 801345a:	4403      	add	r3, r0
 801345c:	430a      	orrs	r2, r1
 801345e:	601a      	str	r2, [r3, #0]
        if (s >= 24U) {
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	2b17      	cmp	r3, #23
 8013464:	d927      	bls.n	80134b6 <sp_2048_from_bin+0x9e>
            r[j] &= 0xffffffff;
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	441a      	add	r2, r3
 801346e:	69bb      	ldr	r3, [r7, #24]
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	68f9      	ldr	r1, [r7, #12]
 8013474:	440b      	add	r3, r1
 8013476:	6812      	ldr	r2, [r2, #0]
 8013478:	601a      	str	r2, [r3, #0]
            s = 32U - s;
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	f1c3 0320 	rsb	r3, r3, #32
 8013480:	617b      	str	r3, [r7, #20]
            if (j + 1 >= size) {
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	3301      	adds	r3, #1
 8013486:	68ba      	ldr	r2, [r7, #8]
 8013488:	429a      	cmp	r2, r3
 801348a:	dd1e      	ble.n	80134ca <sp_2048_from_bin+0xb2>
                break;
            }
            r[++j] = (sp_digit)a[i] >> s;
 801348c:	69fb      	ldr	r3, [r7, #28]
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	4413      	add	r3, r2
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	4619      	mov	r1, r3
 8013496:	69bb      	ldr	r3, [r7, #24]
 8013498:	3301      	adds	r3, #1
 801349a:	61bb      	str	r3, [r7, #24]
 801349c:	69bb      	ldr	r3, [r7, #24]
 801349e:	009b      	lsls	r3, r3, #2
 80134a0:	68fa      	ldr	r2, [r7, #12]
 80134a2:	4413      	add	r3, r2
 80134a4:	697a      	ldr	r2, [r7, #20]
 80134a6:	fa21 f202 	lsr.w	r2, r1, r2
 80134aa:	601a      	str	r2, [r3, #0]
            s = 8U - s;
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	f1c3 0308 	rsb	r3, r3, #8
 80134b2:	617b      	str	r3, [r7, #20]
 80134b4:	e002      	b.n	80134bc <sp_2048_from_bin+0xa4>
        }
        else {
            s += 8U;
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	3308      	adds	r3, #8
 80134ba:	617b      	str	r3, [r7, #20]
    for (i = n-1; i >= 0; i--) {
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	3b01      	subs	r3, #1
 80134c0:	61fb      	str	r3, [r7, #28]
 80134c2:	69fb      	ldr	r3, [r7, #28]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	dab9      	bge.n	801343c <sp_2048_from_bin+0x24>
 80134c8:	e000      	b.n	80134cc <sp_2048_from_bin+0xb4>
                break;
 80134ca:	bf00      	nop
        }
    }

    for (j++; j < size; j++) {
 80134cc:	69bb      	ldr	r3, [r7, #24]
 80134ce:	3301      	adds	r3, #1
 80134d0:	61bb      	str	r3, [r7, #24]
 80134d2:	e008      	b.n	80134e6 <sp_2048_from_bin+0xce>
        r[j] = 0;
 80134d4:	69bb      	ldr	r3, [r7, #24]
 80134d6:	009b      	lsls	r3, r3, #2
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	4413      	add	r3, r2
 80134dc:	2200      	movs	r2, #0
 80134de:	601a      	str	r2, [r3, #0]
    for (j++; j < size; j++) {
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	3301      	adds	r3, #1
 80134e4:	61bb      	str	r3, [r7, #24]
 80134e6:	69ba      	ldr	r2, [r7, #24]
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	dbf2      	blt.n	80134d4 <sp_2048_from_bin+0xbc>
    }
}
 80134ee:	bf00      	nop
 80134f0:	3724      	adds	r7, #36	; 0x24
 80134f2:	46bd      	mov	sp, r7
 80134f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f8:	4770      	bx	lr

080134fa <sp_2048_from_mp>:
 * r  A single precision integer.
 * size  Maximum number of bytes to convert
 * a  A multi-precision integer.
 */
static void sp_2048_from_mp(sp_digit* r, int size, const mp_int* a)
{
 80134fa:	b580      	push	{r7, lr}
 80134fc:	b086      	sub	sp, #24
 80134fe:	af00      	add	r7, sp, #0
 8013500:	60f8      	str	r0, [r7, #12]
 8013502:	60b9      	str	r1, [r7, #8]
 8013504:	607a      	str	r2, [r7, #4]
#if DIGIT_BIT == 32
    int j;

    XMEMCPY(r, a->dp, sizeof(sp_digit) * a->used);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f103 0108 	add.w	r1, r3, #8
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	461a      	mov	r2, r3
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	f008 fa7c 	bl	801ba12 <memcpy>

    for (j = a->used; j < size; j++) {
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	617b      	str	r3, [r7, #20]
 8013520:	e008      	b.n	8013534 <sp_2048_from_mp+0x3a>
        r[j] = 0;
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	009b      	lsls	r3, r3, #2
 8013526:	68fa      	ldr	r2, [r7, #12]
 8013528:	4413      	add	r3, r2
 801352a:	2200      	movs	r2, #0
 801352c:	601a      	str	r2, [r3, #0]
    for (j = a->used; j < size; j++) {
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	3301      	adds	r3, #1
 8013532:	617b      	str	r3, [r7, #20]
 8013534:	697a      	ldr	r2, [r7, #20]
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	429a      	cmp	r2, r3
 801353a:	dbf2      	blt.n	8013522 <sp_2048_from_mp+0x28>

    for (j++; j < size; j++) {
        r[j] = 0;
    }
#endif
}
 801353c:	bf00      	nop
 801353e:	3718      	adds	r7, #24
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <sp_2048_to_bin>:
 *
 * r  A single precision integer.
 * a  Byte array.
 */
static void sp_2048_to_bin(sp_digit* r, byte* a)
{
 8013544:	b480      	push	{r7}
 8013546:	b087      	sub	sp, #28
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	6039      	str	r1, [r7, #0]
    int i, j, s = 0, b;
 801354e:	2300      	movs	r3, #0
 8013550:	60fb      	str	r3, [r7, #12]

    j = 2048 / 8 - 1;
 8013552:	23ff      	movs	r3, #255	; 0xff
 8013554:	613b      	str	r3, [r7, #16]
    a[j] = 0;
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	683a      	ldr	r2, [r7, #0]
 801355a:	4413      	add	r3, r2
 801355c:	2200      	movs	r2, #0
 801355e:	701a      	strb	r2, [r3, #0]
    for (i=0; i<64 && j>=0; i++) {
 8013560:	2300      	movs	r3, #0
 8013562:	617b      	str	r3, [r7, #20]
 8013564:	e051      	b.n	801360a <sp_2048_to_bin+0xc6>
        b = 0;
 8013566:	2300      	movs	r3, #0
 8013568:	60bb      	str	r3, [r7, #8]
        /* lint allow cast of mismatch sp_digit and int */
        a[j--] |= (byte)(r[i] << s); /*lint !e9033*/
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	1e5a      	subs	r2, r3, #1
 801356e:	613a      	str	r2, [r7, #16]
 8013570:	4619      	mov	r1, r3
 8013572:	683a      	ldr	r2, [r7, #0]
 8013574:	440a      	add	r2, r1
 8013576:	7811      	ldrb	r1, [r2, #0]
 8013578:	697a      	ldr	r2, [r7, #20]
 801357a:	0092      	lsls	r2, r2, #2
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	4402      	add	r2, r0
 8013580:	6810      	ldr	r0, [r2, #0]
 8013582:	68fa      	ldr	r2, [r7, #12]
 8013584:	fa00 f202 	lsl.w	r2, r0, r2
 8013588:	b2d2      	uxtb	r2, r2
 801358a:	4618      	mov	r0, r3
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	4403      	add	r3, r0
 8013590:	430a      	orrs	r2, r1
 8013592:	b2d2      	uxtb	r2, r2
 8013594:	701a      	strb	r2, [r3, #0]
        b += 8 - s;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f1c3 0308 	rsb	r3, r3, #8
 801359c:	68ba      	ldr	r2, [r7, #8]
 801359e:	4413      	add	r3, r2
 80135a0:	60bb      	str	r3, [r7, #8]
        if (j < 0) {
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	db37      	blt.n	8013618 <sp_2048_to_bin+0xd4>
            break;
        }
        while (b < 32) {
 80135a8:	e015      	b.n	80135d6 <sp_2048_to_bin+0x92>
            a[j--] = (byte)(r[i] >> b);
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	4413      	add	r3, r2
 80135b2:	681a      	ldr	r2, [r3, #0]
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	fa22 f103 	lsr.w	r1, r2, r3
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	1e5a      	subs	r2, r3, #1
 80135be:	613a      	str	r2, [r7, #16]
 80135c0:	461a      	mov	r2, r3
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	4413      	add	r3, r2
 80135c6:	b2ca      	uxtb	r2, r1
 80135c8:	701a      	strb	r2, [r3, #0]
            b += 8;
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	3308      	adds	r3, #8
 80135ce:	60bb      	str	r3, [r7, #8]
            if (j < 0) {
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	db03      	blt.n	80135de <sp_2048_to_bin+0x9a>
        while (b < 32) {
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	2b1f      	cmp	r3, #31
 80135da:	dde6      	ble.n	80135aa <sp_2048_to_bin+0x66>
 80135dc:	e000      	b.n	80135e0 <sp_2048_to_bin+0x9c>
                break;
 80135de:	bf00      	nop
            }
        }
        s = 8 - (b - 32);
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80135e6:	60fb      	str	r3, [r7, #12]
        if (j >= 0) {
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	db04      	blt.n	80135f8 <sp_2048_to_bin+0xb4>
            a[j] = 0;
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	683a      	ldr	r2, [r7, #0]
 80135f2:	4413      	add	r3, r2
 80135f4:	2200      	movs	r2, #0
 80135f6:	701a      	strb	r2, [r3, #0]
        }
        if (s != 0) {
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d002      	beq.n	8013604 <sp_2048_to_bin+0xc0>
            j++;
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	3301      	adds	r3, #1
 8013602:	613b      	str	r3, [r7, #16]
    for (i=0; i<64 && j>=0; i++) {
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	3301      	adds	r3, #1
 8013608:	617b      	str	r3, [r7, #20]
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	2b3f      	cmp	r3, #63	; 0x3f
 801360e:	dc04      	bgt.n	801361a <sp_2048_to_bin+0xd6>
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	2b00      	cmp	r3, #0
 8013614:	daa7      	bge.n	8013566 <sp_2048_to_bin+0x22>
        }
    }
}
 8013616:	e000      	b.n	801361a <sp_2048_to_bin+0xd6>
            break;
 8013618:	bf00      	nop
}
 801361a:	bf00      	nop
 801361c:	371c      	adds	r7, #28
 801361e:	46bd      	mov	sp, r7
 8013620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013624:	4770      	bx	lr

08013626 <sp_2048_add_64>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_2048_add_64(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8013626:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801362a:	b087      	sub	sp, #28
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]
    sp_digit c = 0;
 8013634:	2300      	movs	r3, #0
 8013636:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8013638:	6978      	ldr	r0, [r7, #20]
 801363a:	68f9      	ldr	r1, [r7, #12]
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4616      	mov	r6, r2
 8013642:	f04f 0800 	mov.w	r8, #0
 8013646:	f506 7680 	add.w	r6, r6, #256	; 0x100
 801364a:	f1a8 0801 	sub.w	r8, r8, #1
 801364e:	eb10 0008 	adds.w	r0, r0, r8
 8013652:	6814      	ldr	r4, [r2, #0]
 8013654:	681d      	ldr	r5, [r3, #0]
 8013656:	416c      	adcs	r4, r5
 8013658:	600c      	str	r4, [r1, #0]
 801365a:	f04f 0000 	mov.w	r0, #0
 801365e:	eb40 0000 	adc.w	r0, r0, r0
 8013662:	f102 0204 	add.w	r2, r2, #4
 8013666:	f103 0304 	add.w	r3, r3, #4
 801366a:	f101 0104 	add.w	r1, r1, #4
 801366e:	42b2      	cmp	r2, r6
 8013670:	d1ed      	bne.n	801364e <sp_2048_add_64+0x28>
 8013672:	6178      	str	r0, [r7, #20]
 8013674:	60f9      	str	r1, [r7, #12]
 8013676:	60ba      	str	r2, [r7, #8]
 8013678:	607b      	str	r3, [r7, #4]
        : [c] "+r" (c), [r] "+r" (r), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r4", "r5", "r6", "r8"
    );

    return c;
 801367a:	697b      	ldr	r3, [r7, #20]
}
 801367c:	4618      	mov	r0, r3
 801367e:	371c      	adds	r7, #28
 8013680:	46bd      	mov	sp, r7
 8013682:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8013686:	4770      	bx	lr

08013688 <sp_2048_sub_in_place_64>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_2048_sub_in_place_64(sp_digit* a,
        const sp_digit* b)
{
 8013688:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801368c:	b085      	sub	sp, #20
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
 8013692:	6039      	str	r1, [r7, #0]
    sp_digit c = 0;
 8013694:	2300      	movs	r3, #0
 8013696:	60fb      	str	r3, [r7, #12]
    __asm__ __volatile__ (
 8013698:	68f9      	ldr	r1, [r7, #12]
 801369a:	687a      	ldr	r2, [r7, #4]
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	4608      	mov	r0, r1
 80136a0:	4611      	mov	r1, r2
 80136a2:	461a      	mov	r2, r3
 80136a4:	4688      	mov	r8, r1
 80136a6:	f508 7880 	add.w	r8, r8, #256	; 0x100
 80136aa:	f04f 0500 	mov.w	r5, #0
 80136ae:	1a2d      	subs	r5, r5, r0
 80136b0:	680b      	ldr	r3, [r1, #0]
 80136b2:	684c      	ldr	r4, [r1, #4]
 80136b4:	6815      	ldr	r5, [r2, #0]
 80136b6:	6856      	ldr	r6, [r2, #4]
 80136b8:	41ab      	sbcs	r3, r5
 80136ba:	41b4      	sbcs	r4, r6
 80136bc:	600b      	str	r3, [r1, #0]
 80136be:	604c      	str	r4, [r1, #4]
 80136c0:	eb60 0000 	sbc.w	r0, r0, r0
 80136c4:	f101 0108 	add.w	r1, r1, #8
 80136c8:	f102 0208 	add.w	r2, r2, #8
 80136cc:	4541      	cmp	r1, r8
 80136ce:	d1ec      	bne.n	80136aa <sp_2048_sub_in_place_64+0x22>
 80136d0:	60f8      	str	r0, [r7, #12]
 80136d2:	6079      	str	r1, [r7, #4]
 80136d4:	603a      	str	r2, [r7, #0]
        : [c] "+r" (c), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );

    return c;
 80136d6:	68fb      	ldr	r3, [r7, #12]
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3714      	adds	r7, #20
 80136dc:	46bd      	mov	sp, r7
 80136de:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80136e2:	4770      	bx	lr

080136e4 <sp_2048_mul_64>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static void sp_2048_mul_64(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 80136e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e8:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	f107 030c 	add.w	r3, r7, #12
 80136f2:	6018      	str	r0, [r3, #0]
 80136f4:	f107 0308 	add.w	r3, r7, #8
 80136f8:	6019      	str	r1, [r3, #0]
 80136fa:	1d3b      	adds	r3, r7, #4
 80136fc:	601a      	str	r2, [r3, #0]
    sp_digit tmp_arr[64 * 2];
    sp_digit* tmp = tmp_arr;
 80136fe:	f107 0314 	add.w	r3, r7, #20
 8013702:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    __asm__ __volatile__ (
 8013706:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801370a:	f107 0308 	add.w	r3, r7, #8
 801370e:	6819      	ldr	r1, [r3, #0]
 8013710:	1d3b      	adds	r3, r7, #4
 8013712:	6818      	ldr	r0, [r3, #0]
 8013714:	f04f 0300 	mov.w	r3, #0
 8013718:	f04f 0400 	mov.w	r4, #0
 801371c:	4699      	mov	r9, r3
 801371e:	4694      	mov	ip, r2
 8013720:	468a      	mov	sl, r1
 8013722:	4683      	mov	fp, r0
 8013724:	f04f 0601 	mov.w	r6, #1
 8013728:	ea4f 2606 	mov.w	r6, r6, lsl #8
 801372c:	4456      	add	r6, sl
 801372e:	46b6      	mov	lr, r6
 8013730:	f04f 0200 	mov.w	r2, #0
 8013734:	f04f 0500 	mov.w	r5, #0
 8013738:	f04f 06fc 	mov.w	r6, #252	; 0xfc
 801373c:	4649      	mov	r1, r9
 801373e:	1b89      	subs	r1, r1, r6
 8013740:	eb66 0606 	sbc.w	r6, r6, r6
 8013744:	ea6f 0606 	mvn.w	r6, r6
 8013748:	ea01 0106 	and.w	r1, r1, r6
 801374c:	4648      	mov	r0, r9
 801374e:	eba0 0001 	sub.w	r0, r0, r1
 8013752:	4451      	add	r1, sl
 8013754:	4458      	add	r0, fp
 8013756:	680e      	ldr	r6, [r1, #0]
 8013758:	f8d0 8000 	ldr.w	r8, [r0]
 801375c:	fba6 6808 	umull	r6, r8, r6, r8
 8013760:	199b      	adds	r3, r3, r6
 8013762:	eb54 0408 	adcs.w	r4, r4, r8
 8013766:	eb45 0502 	adc.w	r5, r5, r2
 801376a:	f101 0104 	add.w	r1, r1, #4
 801376e:	f1a0 0004 	sub.w	r0, r0, #4
 8013772:	4571      	cmp	r1, lr
 8013774:	d003      	beq.n	801377e <sp_2048_mul_64+0x9a>
 8013776:	464e      	mov	r6, r9
 8013778:	4456      	add	r6, sl
 801377a:	42b1      	cmp	r1, r6
 801377c:	ddeb      	ble.n	8013756 <sp_2048_mul_64+0x72>
 801377e:	4662      	mov	r2, ip
 8013780:	46c8      	mov	r8, r9
 8013782:	f842 3008 	str.w	r3, [r2, r8]
 8013786:	4623      	mov	r3, r4
 8013788:	462c      	mov	r4, r5
 801378a:	f108 0804 	add.w	r8, r8, #4
 801378e:	46c1      	mov	r9, r8
 8013790:	f04f 0601 	mov.w	r6, #1
 8013794:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8013798:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
 801379c:	45b0      	cmp	r8, r6
 801379e:	ddc7      	ble.n	8013730 <sp_2048_mul_64+0x4c>
 80137a0:	f842 3008 	str.w	r3, [r2, r8]
 80137a4:	4651      	mov	r1, sl
 80137a6:	4658      	mov	r0, fp
        :
        : [r] "r" (tmp), [a] "r" (a), [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    XMEMCPY(r, tmp_arr, sizeof(tmp_arr));
 80137a8:	f107 0114 	add.w	r1, r7, #20
 80137ac:	f107 030c 	add.w	r3, r7, #12
 80137b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137b4:	6818      	ldr	r0, [r3, #0]
 80137b6:	f008 f92c 	bl	801ba12 <memcpy>
}
 80137ba:	bf00      	nop
 80137bc:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80137c0:	46bd      	mov	sp, r7
 80137c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137c6 <sp_2048_sqr_64>:
 *
 * r  A single precision integer.
 * a  A single precision integer.
 */
SP_NOINLINE static void sp_2048_sqr_64(sp_digit* r, const sp_digit* a)
{
 80137c6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80137ca:	b082      	sub	sp, #8
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	6039      	str	r1, [r7, #0]
    __asm__ __volatile__ (
 80137d2:	6879      	ldr	r1, [r7, #4]
 80137d4:	6838      	ldr	r0, [r7, #0]
 80137d6:	f04f 0300 	mov.w	r3, #0
 80137da:	f04f 0400 	mov.w	r4, #0
 80137de:	f04f 0500 	mov.w	r5, #0
 80137e2:	4699      	mov	r9, r3
 80137e4:	468c      	mov	ip, r1
 80137e6:	f04f 0602 	mov.w	r6, #2
 80137ea:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80137ee:	f1c6 0600 	rsb	r6, r6, #0
 80137f2:	44b5      	add	sp, r6
 80137f4:	46eb      	mov	fp, sp
 80137f6:	4682      	mov	sl, r0
 80137f8:	f04f 0100 	mov.w	r1, #0
 80137fc:	f04f 06fc 	mov.w	r6, #252	; 0xfc
 8013800:	4648      	mov	r0, r9
 8013802:	1b80      	subs	r0, r0, r6
 8013804:	eb66 0606 	sbc.w	r6, r6, r6
 8013808:	ea6f 0606 	mvn.w	r6, r6
 801380c:	ea00 0006 	and.w	r0, r0, r6
 8013810:	464a      	mov	r2, r9
 8013812:	eba2 0200 	sub.w	r2, r2, r0
 8013816:	4450      	add	r0, sl
 8013818:	4452      	add	r2, sl
 801381a:	4282      	cmp	r2, r0
 801381c:	d00f      	beq.n	801383e <sp_2048_sqr_64+0x78>
 801381e:	6806      	ldr	r6, [r0, #0]
 8013820:	f8d2 8000 	ldr.w	r8, [r2]
 8013824:	fba6 6808 	umull	r6, r8, r6, r8
 8013828:	199b      	adds	r3, r3, r6
 801382a:	eb54 0408 	adcs.w	r4, r4, r8
 801382e:	eb45 0501 	adc.w	r5, r5, r1
 8013832:	199b      	adds	r3, r3, r6
 8013834:	eb54 0408 	adcs.w	r4, r4, r8
 8013838:	eb45 0501 	adc.w	r5, r5, r1
 801383c:	e007      	b.n	801384e <sp_2048_sqr_64+0x88>
 801383e:	6806      	ldr	r6, [r0, #0]
 8013840:	fba6 6806 	umull	r6, r8, r6, r6
 8013844:	199b      	adds	r3, r3, r6
 8013846:	eb54 0408 	adcs.w	r4, r4, r8
 801384a:	eb45 0501 	adc.w	r5, r5, r1
 801384e:	f100 0004 	add.w	r0, r0, #4
 8013852:	f1a2 0204 	sub.w	r2, r2, #4
 8013856:	f04f 0601 	mov.w	r6, #1
 801385a:	ea4f 2606 	mov.w	r6, r6, lsl #8
 801385e:	4456      	add	r6, sl
 8013860:	42b0      	cmp	r0, r6
 8013862:	d005      	beq.n	8013870 <sp_2048_sqr_64+0xaa>
 8013864:	4290      	cmp	r0, r2
 8013866:	dc03      	bgt.n	8013870 <sp_2048_sqr_64+0xaa>
 8013868:	46c8      	mov	r8, r9
 801386a:	44d0      	add	r8, sl
 801386c:	4540      	cmp	r0, r8
 801386e:	ddd4      	ble.n	801381a <sp_2048_sqr_64+0x54>
 8013870:	4659      	mov	r1, fp
 8013872:	46c8      	mov	r8, r9
 8013874:	f841 3008 	str.w	r3, [r1, r8]
 8013878:	4623      	mov	r3, r4
 801387a:	462c      	mov	r4, r5
 801387c:	f04f 0500 	mov.w	r5, #0
 8013880:	f108 0804 	add.w	r8, r8, #4
 8013884:	46c1      	mov	r9, r8
 8013886:	f04f 0601 	mov.w	r6, #1
 801388a:	ea4f 2606 	mov.w	r6, r6, lsl #8
 801388e:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
 8013892:	45b0      	cmp	r8, r6
 8013894:	ddb0      	ble.n	80137f8 <sp_2048_sqr_64+0x32>
 8013896:	4650      	mov	r0, sl
 8013898:	f841 3008 	str.w	r3, [r1, r8]
 801389c:	4661      	mov	r1, ip
 801389e:	4658      	mov	r0, fp
 80138a0:	f04f 0301 	mov.w	r3, #1
 80138a4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80138a8:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 80138ac:	58c6      	ldr	r6, [r0, r3]
 80138ae:	50ce      	str	r6, [r1, r3]
 80138b0:	3b04      	subs	r3, #4
 80138b2:	dafb      	bge.n	80138ac <sp_2048_sqr_64+0xe6>
 80138b4:	f04f 0602 	mov.w	r6, #2
 80138b8:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80138bc:	44b5      	add	sp, r6
        "add	sp, sp, r6\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12"
    );
}
 80138be:	bf00      	nop
 80138c0:	3708      	adds	r7, #8
 80138c2:	46bd      	mov	sp, r7
 80138c4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80138c8:	4770      	bx	lr

080138ca <sp_2048_mask_32>:
 * r  A single precision integer.
 * a  A single precision integer.
 * m  Mask to AND against each digit.
 */
static void sp_2048_mask_32(sp_digit* r, const sp_digit* a, sp_digit m)
{
 80138ca:	b480      	push	{r7}
 80138cc:	b087      	sub	sp, #28
 80138ce:	af00      	add	r7, sp, #0
 80138d0:	60f8      	str	r0, [r7, #12]
 80138d2:	60b9      	str	r1, [r7, #8]
 80138d4:	607a      	str	r2, [r7, #4]
    int i;

    for (i=0; i<32; i++) {
 80138d6:	2300      	movs	r3, #0
 80138d8:	617b      	str	r3, [r7, #20]
 80138da:	e00e      	b.n	80138fa <sp_2048_mask_32+0x30>
        r[i] = a[i] & m;
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	009b      	lsls	r3, r3, #2
 80138e0:	68ba      	ldr	r2, [r7, #8]
 80138e2:	4413      	add	r3, r2
 80138e4:	6819      	ldr	r1, [r3, #0]
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	009b      	lsls	r3, r3, #2
 80138ea:	68fa      	ldr	r2, [r7, #12]
 80138ec:	4413      	add	r3, r2
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	400a      	ands	r2, r1
 80138f2:	601a      	str	r2, [r3, #0]
    for (i=0; i<32; i++) {
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	3301      	adds	r3, #1
 80138f8:	617b      	str	r3, [r7, #20]
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	2b1f      	cmp	r3, #31
 80138fe:	dded      	ble.n	80138dc <sp_2048_mask_32+0x12>
    }
}
 8013900:	bf00      	nop
 8013902:	371c      	adds	r7, #28
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr

0801390c <sp_2048_add_32>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_2048_add_32(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 801390c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8013910:	b087      	sub	sp, #28
 8013912:	af00      	add	r7, sp, #0
 8013914:	60f8      	str	r0, [r7, #12]
 8013916:	60b9      	str	r1, [r7, #8]
 8013918:	607a      	str	r2, [r7, #4]
    sp_digit c = 0;
 801391a:	2300      	movs	r3, #0
 801391c:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 801391e:	6978      	ldr	r0, [r7, #20]
 8013920:	68f9      	ldr	r1, [r7, #12]
 8013922:	68ba      	ldr	r2, [r7, #8]
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	4616      	mov	r6, r2
 8013928:	f04f 0800 	mov.w	r8, #0
 801392c:	f106 0680 	add.w	r6, r6, #128	; 0x80
 8013930:	f1a8 0801 	sub.w	r8, r8, #1
 8013934:	eb10 0008 	adds.w	r0, r0, r8
 8013938:	6814      	ldr	r4, [r2, #0]
 801393a:	681d      	ldr	r5, [r3, #0]
 801393c:	416c      	adcs	r4, r5
 801393e:	600c      	str	r4, [r1, #0]
 8013940:	f04f 0000 	mov.w	r0, #0
 8013944:	eb40 0000 	adc.w	r0, r0, r0
 8013948:	f102 0204 	add.w	r2, r2, #4
 801394c:	f103 0304 	add.w	r3, r3, #4
 8013950:	f101 0104 	add.w	r1, r1, #4
 8013954:	42b2      	cmp	r2, r6
 8013956:	d1ed      	bne.n	8013934 <sp_2048_add_32+0x28>
 8013958:	6178      	str	r0, [r7, #20]
 801395a:	60f9      	str	r1, [r7, #12]
 801395c:	60ba      	str	r2, [r7, #8]
 801395e:	607b      	str	r3, [r7, #4]
        : [c] "+r" (c), [r] "+r" (r), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r4", "r5", "r6", "r8"
    );

    return c;
 8013960:	697b      	ldr	r3, [r7, #20]
}
 8013962:	4618      	mov	r0, r3
 8013964:	371c      	adds	r7, #28
 8013966:	46bd      	mov	sp, r7
 8013968:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801396c:	4770      	bx	lr

0801396e <sp_2048_sub_in_place_32>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_2048_sub_in_place_32(sp_digit* a,
        const sp_digit* b)
{
 801396e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8013972:	b085      	sub	sp, #20
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
    sp_digit c = 0;
 801397a:	2300      	movs	r3, #0
 801397c:	60fb      	str	r3, [r7, #12]
    __asm__ __volatile__ (
 801397e:	68f9      	ldr	r1, [r7, #12]
 8013980:	687a      	ldr	r2, [r7, #4]
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	4608      	mov	r0, r1
 8013986:	4611      	mov	r1, r2
 8013988:	461a      	mov	r2, r3
 801398a:	4688      	mov	r8, r1
 801398c:	f108 0880 	add.w	r8, r8, #128	; 0x80
 8013990:	f04f 0500 	mov.w	r5, #0
 8013994:	1a2d      	subs	r5, r5, r0
 8013996:	680b      	ldr	r3, [r1, #0]
 8013998:	684c      	ldr	r4, [r1, #4]
 801399a:	6815      	ldr	r5, [r2, #0]
 801399c:	6856      	ldr	r6, [r2, #4]
 801399e:	41ab      	sbcs	r3, r5
 80139a0:	41b4      	sbcs	r4, r6
 80139a2:	600b      	str	r3, [r1, #0]
 80139a4:	604c      	str	r4, [r1, #4]
 80139a6:	eb60 0000 	sbc.w	r0, r0, r0
 80139aa:	f101 0108 	add.w	r1, r1, #8
 80139ae:	f102 0208 	add.w	r2, r2, #8
 80139b2:	4541      	cmp	r1, r8
 80139b4:	d1ec      	bne.n	8013990 <sp_2048_sub_in_place_32+0x22>
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	6079      	str	r1, [r7, #4]
 80139ba:	603a      	str	r2, [r7, #0]
        : [c] "+r" (c), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );

    return c;
 80139bc:	68fb      	ldr	r3, [r7, #12]
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3714      	adds	r7, #20
 80139c2:	46bd      	mov	sp, r7
 80139c4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80139c8:	4770      	bx	lr

080139ca <sp_2048_mul_32>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static void sp_2048_mul_32(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 80139ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ce:	b0c7      	sub	sp, #284	; 0x11c
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	f107 030c 	add.w	r3, r7, #12
 80139d6:	6018      	str	r0, [r3, #0]
 80139d8:	f107 0308 	add.w	r3, r7, #8
 80139dc:	6019      	str	r1, [r3, #0]
 80139de:	1d3b      	adds	r3, r7, #4
 80139e0:	601a      	str	r2, [r3, #0]
    sp_digit tmp_arr[32 * 2];
    sp_digit* tmp = tmp_arr;
 80139e2:	f107 0314 	add.w	r3, r7, #20
 80139e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    __asm__ __volatile__ (
 80139ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80139ee:	f107 0308 	add.w	r3, r7, #8
 80139f2:	6819      	ldr	r1, [r3, #0]
 80139f4:	1d3b      	adds	r3, r7, #4
 80139f6:	6818      	ldr	r0, [r3, #0]
 80139f8:	f04f 0300 	mov.w	r3, #0
 80139fc:	f04f 0400 	mov.w	r4, #0
 8013a00:	4699      	mov	r9, r3
 8013a02:	4694      	mov	ip, r2
 8013a04:	468a      	mov	sl, r1
 8013a06:	4683      	mov	fp, r0
 8013a08:	f04f 0680 	mov.w	r6, #128	; 0x80
 8013a0c:	4456      	add	r6, sl
 8013a0e:	46b6      	mov	lr, r6
 8013a10:	f04f 0200 	mov.w	r2, #0
 8013a14:	f04f 0500 	mov.w	r5, #0
 8013a18:	f04f 067c 	mov.w	r6, #124	; 0x7c
 8013a1c:	4649      	mov	r1, r9
 8013a1e:	1b89      	subs	r1, r1, r6
 8013a20:	eb66 0606 	sbc.w	r6, r6, r6
 8013a24:	ea6f 0606 	mvn.w	r6, r6
 8013a28:	ea01 0106 	and.w	r1, r1, r6
 8013a2c:	4648      	mov	r0, r9
 8013a2e:	eba0 0001 	sub.w	r0, r0, r1
 8013a32:	4451      	add	r1, sl
 8013a34:	4458      	add	r0, fp
 8013a36:	680e      	ldr	r6, [r1, #0]
 8013a38:	f8d0 8000 	ldr.w	r8, [r0]
 8013a3c:	fba6 6808 	umull	r6, r8, r6, r8
 8013a40:	199b      	adds	r3, r3, r6
 8013a42:	eb54 0408 	adcs.w	r4, r4, r8
 8013a46:	eb45 0502 	adc.w	r5, r5, r2
 8013a4a:	f101 0104 	add.w	r1, r1, #4
 8013a4e:	f1a0 0004 	sub.w	r0, r0, #4
 8013a52:	4571      	cmp	r1, lr
 8013a54:	d003      	beq.n	8013a5e <sp_2048_mul_32+0x94>
 8013a56:	464e      	mov	r6, r9
 8013a58:	4456      	add	r6, sl
 8013a5a:	42b1      	cmp	r1, r6
 8013a5c:	ddeb      	ble.n	8013a36 <sp_2048_mul_32+0x6c>
 8013a5e:	4662      	mov	r2, ip
 8013a60:	46c8      	mov	r8, r9
 8013a62:	f842 3008 	str.w	r3, [r2, r8]
 8013a66:	4623      	mov	r3, r4
 8013a68:	462c      	mov	r4, r5
 8013a6a:	f108 0804 	add.w	r8, r8, #4
 8013a6e:	46c1      	mov	r9, r8
 8013a70:	f04f 06f8 	mov.w	r6, #248	; 0xf8
 8013a74:	45b0      	cmp	r8, r6
 8013a76:	ddcb      	ble.n	8013a10 <sp_2048_mul_32+0x46>
 8013a78:	f842 3008 	str.w	r3, [r2, r8]
 8013a7c:	4651      	mov	r1, sl
 8013a7e:	4658      	mov	r0, fp
        :
        : [r] "r" (tmp), [a] "r" (a), [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    XMEMCPY(r, tmp_arr, sizeof(tmp_arr));
 8013a80:	f107 0114 	add.w	r1, r7, #20
 8013a84:	f107 030c 	add.w	r3, r7, #12
 8013a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013a8c:	6818      	ldr	r0, [r3, #0]
 8013a8e:	f007 ffc0 	bl	801ba12 <memcpy>
}
 8013a92:	bf00      	nop
 8013a94:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a9e <sp_2048_sqr_32>:
 *
 * r  A single precision integer.
 * a  A single precision integer.
 */
SP_NOINLINE static void sp_2048_sqr_32(sp_digit* r, const sp_digit* a)
{
 8013a9e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
    __asm__ __volatile__ (
 8013aaa:	6879      	ldr	r1, [r7, #4]
 8013aac:	6838      	ldr	r0, [r7, #0]
 8013aae:	f04f 0300 	mov.w	r3, #0
 8013ab2:	f04f 0400 	mov.w	r4, #0
 8013ab6:	f04f 0500 	mov.w	r5, #0
 8013aba:	4699      	mov	r9, r3
 8013abc:	468c      	mov	ip, r1
 8013abe:	f04f 0601 	mov.w	r6, #1
 8013ac2:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8013ac6:	f1c6 0600 	rsb	r6, r6, #0
 8013aca:	44b5      	add	sp, r6
 8013acc:	46eb      	mov	fp, sp
 8013ace:	4682      	mov	sl, r0
 8013ad0:	f04f 0100 	mov.w	r1, #0
 8013ad4:	f04f 067c 	mov.w	r6, #124	; 0x7c
 8013ad8:	4648      	mov	r0, r9
 8013ada:	1b80      	subs	r0, r0, r6
 8013adc:	eb66 0606 	sbc.w	r6, r6, r6
 8013ae0:	ea6f 0606 	mvn.w	r6, r6
 8013ae4:	ea00 0006 	and.w	r0, r0, r6
 8013ae8:	464a      	mov	r2, r9
 8013aea:	eba2 0200 	sub.w	r2, r2, r0
 8013aee:	4450      	add	r0, sl
 8013af0:	4452      	add	r2, sl
 8013af2:	4282      	cmp	r2, r0
 8013af4:	d00f      	beq.n	8013b16 <sp_2048_sqr_32+0x78>
 8013af6:	6806      	ldr	r6, [r0, #0]
 8013af8:	f8d2 8000 	ldr.w	r8, [r2]
 8013afc:	fba6 6808 	umull	r6, r8, r6, r8
 8013b00:	199b      	adds	r3, r3, r6
 8013b02:	eb54 0408 	adcs.w	r4, r4, r8
 8013b06:	eb45 0501 	adc.w	r5, r5, r1
 8013b0a:	199b      	adds	r3, r3, r6
 8013b0c:	eb54 0408 	adcs.w	r4, r4, r8
 8013b10:	eb45 0501 	adc.w	r5, r5, r1
 8013b14:	e007      	b.n	8013b26 <sp_2048_sqr_32+0x88>
 8013b16:	6806      	ldr	r6, [r0, #0]
 8013b18:	fba6 6806 	umull	r6, r8, r6, r6
 8013b1c:	199b      	adds	r3, r3, r6
 8013b1e:	eb54 0408 	adcs.w	r4, r4, r8
 8013b22:	eb45 0501 	adc.w	r5, r5, r1
 8013b26:	f100 0004 	add.w	r0, r0, #4
 8013b2a:	f1a2 0204 	sub.w	r2, r2, #4
 8013b2e:	f04f 0680 	mov.w	r6, #128	; 0x80
 8013b32:	4456      	add	r6, sl
 8013b34:	42b0      	cmp	r0, r6
 8013b36:	d005      	beq.n	8013b44 <sp_2048_sqr_32+0xa6>
 8013b38:	4290      	cmp	r0, r2
 8013b3a:	dc03      	bgt.n	8013b44 <sp_2048_sqr_32+0xa6>
 8013b3c:	46c8      	mov	r8, r9
 8013b3e:	44d0      	add	r8, sl
 8013b40:	4540      	cmp	r0, r8
 8013b42:	ddd6      	ble.n	8013af2 <sp_2048_sqr_32+0x54>
 8013b44:	4659      	mov	r1, fp
 8013b46:	46c8      	mov	r8, r9
 8013b48:	f841 3008 	str.w	r3, [r1, r8]
 8013b4c:	4623      	mov	r3, r4
 8013b4e:	462c      	mov	r4, r5
 8013b50:	f04f 0500 	mov.w	r5, #0
 8013b54:	f108 0804 	add.w	r8, r8, #4
 8013b58:	46c1      	mov	r9, r8
 8013b5a:	f04f 06f8 	mov.w	r6, #248	; 0xf8
 8013b5e:	45b0      	cmp	r8, r6
 8013b60:	ddb6      	ble.n	8013ad0 <sp_2048_sqr_32+0x32>
 8013b62:	4650      	mov	r0, sl
 8013b64:	f841 3008 	str.w	r3, [r1, r8]
 8013b68:	4661      	mov	r1, ip
 8013b6a:	4658      	mov	r0, fp
 8013b6c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8013b70:	58c6      	ldr	r6, [r0, r3]
 8013b72:	50ce      	str	r6, [r1, r3]
 8013b74:	3b04      	subs	r3, #4
 8013b76:	dafb      	bge.n	8013b70 <sp_2048_sqr_32+0xd2>
 8013b78:	f04f 0601 	mov.w	r6, #1
 8013b7c:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8013b80:	44b5      	add	sp, r6
        "add	sp, sp, r6\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12"
    );
}
 8013b82:	bf00      	nop
 8013b84:	3708      	adds	r7, #8
 8013b86:	46bd      	mov	sp, r7
 8013b88:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013b8c:	4770      	bx	lr

08013b8e <sp_2048_mont_setup>:
 *
 * a    A single precision number.
 * rho  Bottom word of inverse.
 */
static void sp_2048_mont_setup(const sp_digit* a, sp_digit* rho)
{
 8013b8e:	b480      	push	{r7}
 8013b90:	b085      	sub	sp, #20
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
 8013b96:	6039      	str	r1, [r7, #0]
    sp_digit x, b;

    b = a[0];
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	60fb      	str	r3, [r7, #12]
    x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	3302      	adds	r3, #2
 8013ba2:	005b      	lsls	r3, r3, #1
 8013ba4:	f003 0308 	and.w	r3, r3, #8
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	4413      	add	r3, r2
 8013bac:	60bb      	str	r3, [r7, #8]
    x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	68ba      	ldr	r2, [r7, #8]
 8013bb2:	fb02 f303 	mul.w	r3, r2, r3
 8013bb6:	f1c3 0202 	rsb	r2, r3, #2
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	fb02 f303 	mul.w	r3, r2, r3
 8013bc0:	60bb      	str	r3, [r7, #8]
    x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	68ba      	ldr	r2, [r7, #8]
 8013bc6:	fb02 f303 	mul.w	r3, r2, r3
 8013bca:	f1c3 0202 	rsb	r2, r3, #2
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	fb02 f303 	mul.w	r3, r2, r3
 8013bd4:	60bb      	str	r3, [r7, #8]
    x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	68ba      	ldr	r2, [r7, #8]
 8013bda:	fb02 f303 	mul.w	r3, r2, r3
 8013bde:	f1c3 0202 	rsb	r2, r3, #2
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	fb02 f303 	mul.w	r3, r2, r3
 8013be8:	60bb      	str	r3, [r7, #8]

    /* rho = -1/m mod b */
    *rho = -x;
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	425a      	negs	r2, r3
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	601a      	str	r2, [r3, #0]
}
 8013bf2:	bf00      	nop
 8013bf4:	3714      	adds	r7, #20
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfc:	4770      	bx	lr

08013bfe <sp_2048_mul_d_64>:
 * a  A single precision integer.
 * b  A single precision digit.
 */
SP_NOINLINE static void sp_2048_mul_d_64(sp_digit* r, const sp_digit* a,
        sp_digit b)
{
 8013bfe:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]
    __asm__ __volatile__ (
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	68fa      	ldr	r2, [r7, #12]
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	4611      	mov	r1, r2
 8013c14:	461a      	mov	r2, r3
 8013c16:	f502 7980 	add.w	r9, r2, #256	; 0x100
 8013c1a:	f852 6b04 	ldr.w	r6, [r2], #4
 8013c1e:	fba6 5300 	umull	r5, r3, r6, r0
 8013c22:	f04f 0400 	mov.w	r4, #0
 8013c26:	f841 5b04 	str.w	r5, [r1], #4
 8013c2a:	f04f 0500 	mov.w	r5, #0
 8013c2e:	f852 6b04 	ldr.w	r6, [r2], #4
 8013c32:	fba6 6800 	umull	r6, r8, r6, r0
 8013c36:	199b      	adds	r3, r3, r6
 8013c38:	eb54 0408 	adcs.w	r4, r4, r8
 8013c3c:	f145 0500 	adc.w	r5, r5, #0
 8013c40:	f841 3b04 	str.w	r3, [r1], #4
 8013c44:	4623      	mov	r3, r4
 8013c46:	462c      	mov	r4, r5
 8013c48:	454a      	cmp	r2, r9
 8013c4a:	dbee      	blt.n	8013c2a <sp_2048_mul_d_64+0x2c>
 8013c4c:	600b      	str	r3, [r1, #0]
 8013c4e:	60f9      	str	r1, [r7, #12]
 8013c50:	60ba      	str	r2, [r7, #8]
        "str	r3, [%[r]]\n\t"
        : [r] "+r" (r), [a] "+r" (a)
        : [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9"
    );
}
 8013c52:	bf00      	nop
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8013c5c:	4770      	bx	lr

08013c5e <sp_2048_mont_norm_32>:
 *
 * r  A single precision number.
 * m  A single precision number.
 */
static void sp_2048_mont_norm_32(sp_digit* r, const sp_digit* m)
{
 8013c5e:	b580      	push	{r7, lr}
 8013c60:	b082      	sub	sp, #8
 8013c62:	af00      	add	r7, sp, #0
 8013c64:	6078      	str	r0, [r7, #4]
 8013c66:	6039      	str	r1, [r7, #0]
    XMEMSET(r, 0, sizeof(sp_digit) * 32);
 8013c68:	2280      	movs	r2, #128	; 0x80
 8013c6a:	2100      	movs	r1, #0
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f007 fef4 	bl	801ba5a <memset>

    /* r = 2^n mod m */
    sp_2048_sub_in_place_32(r, m);
 8013c72:	6839      	ldr	r1, [r7, #0]
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f7ff fe7a 	bl	801396e <sp_2048_sub_in_place_32>
}
 8013c7a:	bf00      	nop
 8013c7c:	3708      	adds	r7, #8
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}

08013c82 <sp_2048_cond_sub_32>:
 * b  A single precision number to subtract.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_2048_cond_sub_32(sp_digit* r, const sp_digit* a,
        const sp_digit* b, sp_digit m)
{
 8013c82:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	60b9      	str	r1, [r7, #8]
 8013c8e:	607a      	str	r2, [r7, #4]
 8013c90:	603b      	str	r3, [r7, #0]
    sp_digit c = 0;
 8013c92:	2300      	movs	r3, #0
 8013c94:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8013c96:	68fa      	ldr	r2, [r7, #12]
 8013c98:	68b9      	ldr	r1, [r7, #8]
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	683c      	ldr	r4, [r7, #0]
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	f04f 0580 	mov.w	r5, #128	; 0x80
 8013ca4:	46a9      	mov	r9, r5
 8013ca6:	f04f 0800 	mov.w	r8, #0
 8013caa:	f850 6008 	ldr.w	r6, [r0, r8]
 8013cae:	ea06 0604 	and.w	r6, r6, r4
 8013cb2:	f04f 0500 	mov.w	r5, #0
 8013cb6:	1aed      	subs	r5, r5, r3
 8013cb8:	f851 5008 	ldr.w	r5, [r1, r8]
 8013cbc:	41b5      	sbcs	r5, r6
 8013cbe:	419b      	sbcs	r3, r3
 8013cc0:	f842 5008 	str.w	r5, [r2, r8]
 8013cc4:	f108 0804 	add.w	r8, r8, #4
 8013cc8:	45c8      	cmp	r8, r9
 8013cca:	dbee      	blt.n	8013caa <sp_2048_cond_sub_32+0x28>
 8013ccc:	617b      	str	r3, [r7, #20]
        : [c] "+r" (c)
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
 8013cce:	697b      	ldr	r3, [r7, #20]
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3718      	adds	r7, #24
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8013cda:	4770      	bx	lr

08013cdc <sp_2048_mont_reduce_32>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_2048_mont_reduce_32(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8013cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce0:	b087      	sub	sp, #28
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	60f8      	str	r0, [r7, #12]
 8013ce6:	60b9      	str	r1, [r7, #8]
 8013ce8:	607a      	str	r2, [r7, #4]
    sp_digit ca = 0;
 8013cea:	2300      	movs	r3, #0
 8013cec:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8013cee:	68b9      	ldr	r1, [r7, #8]
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	697a      	ldr	r2, [r7, #20]
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	4681      	mov	r9, r0
 8013cf8:	468c      	mov	ip, r1
 8013cfa:	469a      	mov	sl, r3
 8013cfc:	f04f 0400 	mov.w	r4, #0
 8013d00:	f10a 0b80 	add.w	fp, sl, #128	; 0x80
 8013d04:	4648      	mov	r0, r9
 8013d06:	f8da 3000 	ldr.w	r3, [sl]
 8013d0a:	fb00 f003 	mul.w	r0, r0, r3
 8013d0e:	4661      	mov	r1, ip
 8013d10:	f10a 0e78 	add.w	lr, sl, #120	; 0x78
 8013d14:	f8da 3000 	ldr.w	r3, [sl]
 8013d18:	f04f 0500 	mov.w	r5, #0
 8013d1c:	f851 8b04 	ldr.w	r8, [r1], #4
 8013d20:	fba0 6808 	umull	r6, r8, r0, r8
 8013d24:	199b      	adds	r3, r3, r6
 8013d26:	eb45 0508 	adc.w	r5, r5, r8
 8013d2a:	18e4      	adds	r4, r4, r3
 8013d2c:	f145 0500 	adc.w	r5, r5, #0
 8013d30:	f84a 4b04 	str.w	r4, [sl], #4
 8013d34:	f8da 3000 	ldr.w	r3, [sl]
 8013d38:	f04f 0400 	mov.w	r4, #0
 8013d3c:	f851 8b04 	ldr.w	r8, [r1], #4
 8013d40:	fba0 6808 	umull	r6, r8, r0, r8
 8013d44:	199b      	adds	r3, r3, r6
 8013d46:	eb44 0408 	adc.w	r4, r4, r8
 8013d4a:	18ed      	adds	r5, r5, r3
 8013d4c:	f144 0400 	adc.w	r4, r4, #0
 8013d50:	f84a 5b04 	str.w	r5, [sl], #4
 8013d54:	45f2      	cmp	sl, lr
 8013d56:	dbdd      	blt.n	8013d14 <sp_2048_mont_reduce_32+0x38>
 8013d58:	f8da 3000 	ldr.w	r3, [sl]
 8013d5c:	f04f 0500 	mov.w	r5, #0
 8013d60:	f851 8b04 	ldr.w	r8, [r1], #4
 8013d64:	fba0 6808 	umull	r6, r8, r0, r8
 8013d68:	199b      	adds	r3, r3, r6
 8013d6a:	eb45 0508 	adc.w	r5, r5, r8
 8013d6e:	18e4      	adds	r4, r4, r3
 8013d70:	f145 0500 	adc.w	r5, r5, #0
 8013d74:	f84a 4b04 	str.w	r4, [sl], #4
 8013d78:	4614      	mov	r4, r2
 8013d7a:	f04f 0200 	mov.w	r2, #0
 8013d7e:	f8d1 8000 	ldr.w	r8, [r1]
 8013d82:	fba0 6808 	umull	r6, r8, r0, r8
 8013d86:	19ad      	adds	r5, r5, r6
 8013d88:	eb54 0408 	adcs.w	r4, r4, r8
 8013d8c:	f142 0200 	adc.w	r2, r2, #0
 8013d90:	f8da 6000 	ldr.w	r6, [sl]
 8013d94:	f8da 8004 	ldr.w	r8, [sl, #4]
 8013d98:	1976      	adds	r6, r6, r5
 8013d9a:	eb58 0804 	adcs.w	r8, r8, r4
 8013d9e:	f142 0200 	adc.w	r2, r2, #0
 8013da2:	f8ca 6000 	str.w	r6, [sl]
 8013da6:	f8ca 8004 	str.w	r8, [sl, #4]
 8013daa:	f1aa 0a78 	sub.w	sl, sl, #120	; 0x78
 8013dae:	45da      	cmp	sl, fp
 8013db0:	dba8      	blt.n	8013d04 <sp_2048_mont_reduce_32+0x28>
 8013db2:	4653      	mov	r3, sl
 8013db4:	4661      	mov	r1, ip
 8013db6:	617a      	str	r2, [r7, #20]
 8013db8:	60fb      	str	r3, [r7, #12]
        : [ca] "+r" (ca), [a] "+r" (a)
        : [m] "r" (m), [mp] "r" (mp)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    sp_2048_cond_sub_32(a - 32, a, m, (sp_digit)0 - ca);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	f1a3 0080 	sub.w	r0, r3, #128	; 0x80
 8013dc0:	697b      	ldr	r3, [r7, #20]
 8013dc2:	425b      	negs	r3, r3
 8013dc4:	68ba      	ldr	r2, [r7, #8]
 8013dc6:	68f9      	ldr	r1, [r7, #12]
 8013dc8:	f7ff ff5b 	bl	8013c82 <sp_2048_cond_sub_32>
}
 8013dcc:	bf00      	nop
 8013dce:	371c      	adds	r7, #28
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013dd6 <sp_2048_mont_mul_32>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
static void sp_2048_mont_mul_32(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m, sp_digit mp)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b084      	sub	sp, #16
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	60f8      	str	r0, [r7, #12]
 8013dde:	60b9      	str	r1, [r7, #8]
 8013de0:	607a      	str	r2, [r7, #4]
 8013de2:	603b      	str	r3, [r7, #0]
    sp_2048_mul_32(r, a, b);
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	68b9      	ldr	r1, [r7, #8]
 8013de8:	68f8      	ldr	r0, [r7, #12]
 8013dea:	f7ff fdee 	bl	80139ca <sp_2048_mul_32>
    sp_2048_mont_reduce_32(r, m, mp);
 8013dee:	69ba      	ldr	r2, [r7, #24]
 8013df0:	6839      	ldr	r1, [r7, #0]
 8013df2:	68f8      	ldr	r0, [r7, #12]
 8013df4:	f7ff ff72 	bl	8013cdc <sp_2048_mont_reduce_32>
}
 8013df8:	bf00      	nop
 8013dfa:	3710      	adds	r7, #16
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <sp_2048_mont_sqr_32>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
static void sp_2048_mont_sqr_32(sp_digit* r, const sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b084      	sub	sp, #16
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	60f8      	str	r0, [r7, #12]
 8013e08:	60b9      	str	r1, [r7, #8]
 8013e0a:	607a      	str	r2, [r7, #4]
 8013e0c:	603b      	str	r3, [r7, #0]
    sp_2048_sqr_32(r, a);
 8013e0e:	68b9      	ldr	r1, [r7, #8]
 8013e10:	68f8      	ldr	r0, [r7, #12]
 8013e12:	f7ff fe44 	bl	8013a9e <sp_2048_sqr_32>
    sp_2048_mont_reduce_32(r, m, mp);
 8013e16:	683a      	ldr	r2, [r7, #0]
 8013e18:	6879      	ldr	r1, [r7, #4]
 8013e1a:	68f8      	ldr	r0, [r7, #12]
 8013e1c:	f7ff ff5e 	bl	8013cdc <sp_2048_mont_reduce_32>
}
 8013e20:	bf00      	nop
 8013e22:	3710      	adds	r7, #16
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}

08013e28 <sp_2048_mul_d_32>:
 * a  A single precision integer.
 * b  A single precision digit.
 */
SP_NOINLINE static void sp_2048_mul_d_32(sp_digit* r, const sp_digit* a,
        sp_digit b)
{
 8013e28:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8013e2c:	b084      	sub	sp, #16
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	60f8      	str	r0, [r7, #12]
 8013e32:	60b9      	str	r1, [r7, #8]
 8013e34:	607a      	str	r2, [r7, #4]
    __asm__ __volatile__ (
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	68fa      	ldr	r2, [r7, #12]
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	4611      	mov	r1, r2
 8013e3e:	461a      	mov	r2, r3
 8013e40:	f102 0980 	add.w	r9, r2, #128	; 0x80
 8013e44:	f852 6b04 	ldr.w	r6, [r2], #4
 8013e48:	fba6 5300 	umull	r5, r3, r6, r0
 8013e4c:	f04f 0400 	mov.w	r4, #0
 8013e50:	f841 5b04 	str.w	r5, [r1], #4
 8013e54:	f04f 0500 	mov.w	r5, #0
 8013e58:	f852 6b04 	ldr.w	r6, [r2], #4
 8013e5c:	fba6 6800 	umull	r6, r8, r6, r0
 8013e60:	199b      	adds	r3, r3, r6
 8013e62:	eb54 0408 	adcs.w	r4, r4, r8
 8013e66:	f145 0500 	adc.w	r5, r5, #0
 8013e6a:	f841 3b04 	str.w	r3, [r1], #4
 8013e6e:	4623      	mov	r3, r4
 8013e70:	462c      	mov	r4, r5
 8013e72:	454a      	cmp	r2, r9
 8013e74:	dbee      	blt.n	8013e54 <sp_2048_mul_d_32+0x2c>
 8013e76:	600b      	str	r3, [r1, #0]
 8013e78:	60f9      	str	r1, [r7, #12]
 8013e7a:	60ba      	str	r2, [r7, #8]
        "str	r3, [%[r]]\n\t"
        : [r] "+r" (r), [a] "+r" (a)
        : [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9"
    );
}
 8013e7c:	bf00      	nop
 8013e7e:	3710      	adds	r7, #16
 8013e80:	46bd      	mov	sp, r7
 8013e82:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8013e86:	4770      	bx	lr

08013e88 <div_2048_word_32>:
 *
 * Note that this is an approximate div. It may give an answer 1 larger.
 */
SP_NOINLINE static sp_digit div_2048_word_32(sp_digit d1, sp_digit d0,
        sp_digit div)
{
 8013e88:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8013e8c:	b087      	sub	sp, #28
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	60f8      	str	r0, [r7, #12]
 8013e92:	60b9      	str	r1, [r7, #8]
 8013e94:	607a      	str	r2, [r7, #4]
    sp_digit r = 0;
 8013e96:	2300      	movs	r3, #0
 8013e98:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8013e9a:	68fa      	ldr	r2, [r7, #12]
 8013e9c:	68b9      	ldr	r1, [r7, #8]
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	ea4f 4610 	mov.w	r6, r0, lsr #16
 8013ea6:	f106 0601 	add.w	r6, r6, #1
 8013eaa:	fbb2 f4f6 	udiv	r4, r2, r6
 8013eae:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8013eb2:	fba0 4508 	umull	r4, r5, r0, r8
 8013eb6:	1b09      	subs	r1, r1, r4
 8013eb8:	eb62 0205 	sbc.w	r2, r2, r5
 8013ebc:	fbb2 f5f6 	udiv	r5, r2, r6
 8013ec0:	ea4f 4405 	mov.w	r4, r5, lsl #16
 8013ec4:	44a0      	add	r8, r4
 8013ec6:	fba0 4504 	umull	r4, r5, r0, r4
 8013eca:	1b09      	subs	r1, r1, r4
 8013ecc:	eb62 0205 	sbc.w	r2, r2, r5
 8013ed0:	ea4f 4402 	mov.w	r4, r2, lsl #16
 8013ed4:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8013ed8:	fbb4 f4f6 	udiv	r4, r4, r6
 8013edc:	44a0      	add	r8, r4
 8013ede:	fba0 4504 	umull	r4, r5, r0, r4
 8013ee2:	1b09      	subs	r1, r1, r4
 8013ee4:	eb62 0205 	sbc.w	r2, r2, r5
 8013ee8:	ea4f 4402 	mov.w	r4, r2, lsl #16
 8013eec:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8013ef0:	fbb4 f4f6 	udiv	r4, r4, r6
 8013ef4:	44a0      	add	r8, r4
 8013ef6:	fba0 4504 	umull	r4, r5, r0, r4
 8013efa:	1b09      	subs	r1, r1, r4
 8013efc:	eb62 0205 	sbc.w	r2, r2, r5
 8013f00:	fbb1 f4f0 	udiv	r4, r1, r0
 8013f04:	44a0      	add	r8, r4
 8013f06:	4643      	mov	r3, r8
 8013f08:	617b      	str	r3, [r7, #20]
        "mov	%[r], r8\n\t"
        : [r] "+r" (r)
        : [d1] "r" (d1), [d0] "r" (d0), [div] "r" (div)
        : "r4", "r5", "r6", "r8"
    );
    return r;
 8013f0a:	697b      	ldr	r3, [r7, #20]
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	371c      	adds	r7, #28
 8013f10:	46bd      	mov	sp, r7
 8013f12:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8013f16:	4770      	bx	lr

08013f18 <sp_2048_cmp_32>:
 * b  A single precision integer.
 * return -ve, 0 or +ve if a is less than, equal to or greater than b
 * respectively.
 */
SP_NOINLINE static int32_t sp_2048_cmp_32(const sp_digit* a, const sp_digit* b)
{
 8013f18:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8013f1c:	b085      	sub	sp, #20
 8013f1e:	af00      	add	r7, sp, #0
 8013f20:	6078      	str	r0, [r7, #4]
 8013f22:	6039      	str	r1, [r7, #0]
    sp_digit r = 0;
 8013f24:	2300      	movs	r3, #0
 8013f26:	60fb      	str	r3, [r7, #12]


    __asm__ __volatile__ (
 8013f28:	6879      	ldr	r1, [r7, #4]
 8013f2a:	6838      	ldr	r0, [r7, #0]
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	461a      	mov	r2, r3
 8013f30:	f04f 0300 	mov.w	r3, #0
 8013f34:	ea6f 0303 	mvn.w	r3, r3
 8013f38:	f04f 067c 	mov.w	r6, #124	; 0x7c
 8013f3c:	f851 8006 	ldr.w	r8, [r1, r6]
 8013f40:	5985      	ldr	r5, [r0, r6]
 8013f42:	ea08 0803 	and.w	r8, r8, r3
 8013f46:	ea05 0503 	and.w	r5, r5, r3
 8013f4a:	4644      	mov	r4, r8
 8013f4c:	ebb8 0805 	subs.w	r8, r8, r5
 8013f50:	eb68 0808 	sbc.w	r8, r8, r8
 8013f54:	4442      	add	r2, r8
 8013f56:	ea6f 0808 	mvn.w	r8, r8
 8013f5a:	ea03 0308 	and.w	r3, r3, r8
 8013f5e:	1b2d      	subs	r5, r5, r4
 8013f60:	eb68 0808 	sbc.w	r8, r8, r8
 8013f64:	eba2 0208 	sub.w	r2, r2, r8
 8013f68:	ea6f 0808 	mvn.w	r8, r8
 8013f6c:	ea03 0308 	and.w	r3, r3, r8
 8013f70:	f1a6 0604 	sub.w	r6, r6, #4
 8013f74:	2e00      	cmp	r6, #0
 8013f76:	dae1      	bge.n	8013f3c <sp_2048_cmp_32+0x24>
 8013f78:	60fa      	str	r2, [r7, #12]
        : [r] "+r" (r)
        : [a] "r" (a), [b] "r" (b)
        : "r3", "r4", "r5", "r6", "r8"
    );

    return r;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3714      	adds	r7, #20
 8013f80:	46bd      	mov	sp, r7
 8013f82:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8013f86:	4770      	bx	lr

08013f88 <sp_2048_div_32>:
 * r  Remainder from the division.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_2048_div_32(const sp_digit* a, const sp_digit* d, sp_digit* m,
        sp_digit* r)
{
 8013f88:	b590      	push	{r4, r7, lr}
 8013f8a:	b0eb      	sub	sp, #428	; 0x1ac
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	f107 040c 	add.w	r4, r7, #12
 8013f92:	6020      	str	r0, [r4, #0]
 8013f94:	f107 0008 	add.w	r0, r7, #8
 8013f98:	6001      	str	r1, [r0, #0]
 8013f9a:	1d39      	adds	r1, r7, #4
 8013f9c:	600a      	str	r2, [r1, #0]
 8013f9e:	463a      	mov	r2, r7
 8013fa0:	6013      	str	r3, [r2, #0]
    sp_digit div, r1;
    int i;

    (void)m;

    div = d[31];
 8013fa2:	f107 0308 	add.w	r3, r7, #8
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013faa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    XMEMCPY(t1, a, sizeof(*t1) * 2 * 32);
 8013fae:	f107 030c 	add.w	r3, r7, #12
 8013fb2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8013fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013fba:	6819      	ldr	r1, [r3, #0]
 8013fbc:	f007 fd29 	bl	801ba12 <memcpy>
    for (i=31; i>=0; i--) {
 8013fc0:	231f      	movs	r3, #31
 8013fc2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8013fc6:	e0cb      	b.n	8014160 <sp_2048_div_32+0x1d8>
        sp_digit hi = t1[32 + i] - (t1[32 + i] == div);
 8013fc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013fcc:	f103 0220 	add.w	r2, r3, #32
 8013fd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8013fdc:	f102 0120 	add.w	r1, r2, #32
 8013fe0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8013fe4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8013fe8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8013fec:	4291      	cmp	r1, r2
 8013fee:	bf0c      	ite	eq
 8013ff0:	2201      	moveq	r2, #1
 8013ff2:	2200      	movne	r2, #0
 8013ff4:	b2d2      	uxtb	r2, r2
 8013ff6:	1a9b      	subs	r3, r3, r2
 8013ff8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
        r1 = div_2048_word_32(hi, t1[32 + i - 1], div);
 8013ffc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8014000:	f103 021f 	add.w	r2, r3, #31
 8014004:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801400c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8014010:	4619      	mov	r1, r3
 8014012:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8014016:	f7ff ff37 	bl	8013e88 <div_2048_word_32>
 801401a:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c

        sp_2048_mul_d_32(t2, d, r1);
 801401e:	f107 0308 	add.w	r3, r7, #8
 8014022:	f107 0014 	add.w	r0, r7, #20
 8014026:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801402a:	6819      	ldr	r1, [r3, #0]
 801402c:	f7ff fefc 	bl	8013e28 <sp_2048_mul_d_32>
        t1[32 + i] += sp_2048_sub_in_place_32(&t1[i], t2);
 8014030:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8014034:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8014038:	009b      	lsls	r3, r3, #2
 801403a:	4413      	add	r3, r2
 801403c:	f107 0214 	add.w	r2, r7, #20
 8014040:	4611      	mov	r1, r2
 8014042:	4618      	mov	r0, r3
 8014044:	f7ff fc93 	bl	801396e <sp_2048_sub_in_place_32>
 8014048:	4601      	mov	r1, r0
 801404a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801404e:	f103 0220 	add.w	r2, r3, #32
 8014052:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801405a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801405e:	3220      	adds	r2, #32
 8014060:	4419      	add	r1, r3
 8014062:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        t1[32 + i] -= t2[32];
 801406a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801406e:	f103 0220 	add.w	r2, r3, #32
 8014072:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014076:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801407a:	f107 0314 	add.w	r3, r7, #20
 801407e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014082:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8014086:	3220      	adds	r2, #32
 8014088:	1ac9      	subs	r1, r1, r3
 801408a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801408e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        sp_2048_mask_32(t2, d, t1[32 + i]);
 8014092:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8014096:	f103 0220 	add.w	r2, r3, #32
 801409a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801409e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80140a2:	f107 0308 	add.w	r3, r7, #8
 80140a6:	f107 0014 	add.w	r0, r7, #20
 80140aa:	6819      	ldr	r1, [r3, #0]
 80140ac:	f7ff fc0d 	bl	80138ca <sp_2048_mask_32>
        t1[32 + i] += sp_2048_add_32(&t1[i], &t1[i], t2);
 80140b0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80140b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	18d0      	adds	r0, r2, r3
 80140bc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80140c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80140c4:	009b      	lsls	r3, r3, #2
 80140c6:	4413      	add	r3, r2
 80140c8:	f107 0214 	add.w	r2, r7, #20
 80140cc:	4619      	mov	r1, r3
 80140ce:	f7ff fc1d 	bl	801390c <sp_2048_add_32>
 80140d2:	4601      	mov	r1, r0
 80140d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80140d8:	f103 0220 	add.w	r2, r3, #32
 80140dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80140e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140e4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80140e8:	3220      	adds	r2, #32
 80140ea:	4419      	add	r1, r3
 80140ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80140f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        sp_2048_mask_32(t2, d, t1[32 + i]);
 80140f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80140f8:	f103 0220 	add.w	r2, r3, #32
 80140fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014100:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014104:	f107 0308 	add.w	r3, r7, #8
 8014108:	f107 0014 	add.w	r0, r7, #20
 801410c:	6819      	ldr	r1, [r3, #0]
 801410e:	f7ff fbdc 	bl	80138ca <sp_2048_mask_32>
        t1[32 + i] += sp_2048_add_32(&t1[i], &t1[i], t2);
 8014112:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8014116:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	18d0      	adds	r0, r2, r3
 801411e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8014122:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8014126:	009b      	lsls	r3, r3, #2
 8014128:	4413      	add	r3, r2
 801412a:	f107 0214 	add.w	r2, r7, #20
 801412e:	4619      	mov	r1, r3
 8014130:	f7ff fbec 	bl	801390c <sp_2048_add_32>
 8014134:	4601      	mov	r1, r0
 8014136:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801413a:	f103 0220 	add.w	r2, r3, #32
 801413e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014146:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801414a:	3220      	adds	r2, #32
 801414c:	4419      	add	r1, r3
 801414e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i=31; i>=0; i--) {
 8014156:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801415a:	3b01      	subs	r3, #1
 801415c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8014160:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8014164:	2b00      	cmp	r3, #0
 8014166:	f6bf af2f 	bge.w	8013fc8 <sp_2048_div_32+0x40>
    }

    r1 = sp_2048_cmp_32(t1, d) >= 0;
 801416a:	f107 0308 	add.w	r3, r7, #8
 801416e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8014172:	6819      	ldr	r1, [r3, #0]
 8014174:	4610      	mov	r0, r2
 8014176:	f7ff fecf 	bl	8013f18 <sp_2048_cmp_32>
 801417a:	4603      	mov	r3, r0
 801417c:	43db      	mvns	r3, r3
 801417e:	0fdb      	lsrs	r3, r3, #31
 8014180:	b2db      	uxtb	r3, r3
 8014182:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    sp_2048_cond_sub_32(r, t1, d, (sp_digit)0 - r1);
 8014186:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801418a:	425b      	negs	r3, r3
 801418c:	f107 0208 	add.w	r2, r7, #8
 8014190:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8014194:	4638      	mov	r0, r7
 8014196:	6812      	ldr	r2, [r2, #0]
 8014198:	6800      	ldr	r0, [r0, #0]
 801419a:	f7ff fd72 	bl	8013c82 <sp_2048_cond_sub_32>

    return MP_OKAY;
 801419e:	2300      	movs	r3, #0
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd90      	pop	{r4, r7, pc}

080141aa <sp_2048_mod_32>:
 * a  A single precision number that is to be reduced.
 * m  A single precision number that is the modulus to reduce with.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_2048_mod_32(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 80141aa:	b580      	push	{r7, lr}
 80141ac:	b084      	sub	sp, #16
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	60f8      	str	r0, [r7, #12]
 80141b2:	60b9      	str	r1, [r7, #8]
 80141b4:	607a      	str	r2, [r7, #4]
    return sp_2048_div_32(a, m, NULL, r);
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2200      	movs	r2, #0
 80141ba:	6879      	ldr	r1, [r7, #4]
 80141bc:	68b8      	ldr	r0, [r7, #8]
 80141be:	f7ff fee3 	bl	8013f88 <sp_2048_div_32>
 80141c2:	4603      	mov	r3, r0
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	3710      	adds	r7, #16
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}

080141cc <sp_2048_mod_exp_32>:
 * m     A single precision number that is the modulus.
 * returns 0 on success and MEMORY_E on dynamic memory allocation failure.
 */
static int sp_2048_mod_exp_32(sp_digit* r, const sp_digit* a, const sp_digit* e,
        int bits, const sp_digit* m, int reduceA)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b0a0      	sub	sp, #128	; 0x80
 80141d0:	af02      	add	r7, sp, #8
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	607a      	str	r2, [r7, #4]
 80141d8:	603b      	str	r3, [r7, #0]
#else
    sp_digit td[16 * 64];
#endif
    sp_digit* t[16];
    sp_digit* norm;
    sp_digit mp = 1;
 80141da:	2301      	movs	r3, #1
 80141dc:	613b      	str	r3, [r7, #16]
    sp_digit n;
    sp_digit mask;
    int i;
    int c, y;
    int err = MP_OKAY;
 80141de:	2300      	movs	r3, #0
 80141e0:	667b      	str	r3, [r7, #100]	; 0x64

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
    td = (sp_digit*)XMALLOC(sizeof(sp_digit) * (16 * 64), NULL,
 80141e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80141e6:	f7fd f939 	bl	801145c <wolfSSL_Malloc>
 80141ea:	6638      	str	r0, [r7, #96]	; 0x60
                            DYNAMIC_TYPE_TMP_BUFFER);
    if (td == NULL) {
 80141ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d102      	bne.n	80141f8 <sp_2048_mod_exp_32+0x2c>
        err = MEMORY_E;
 80141f2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80141f6:	667b      	str	r3, [r7, #100]	; 0x64
    }
#endif

    if (err == MP_OKAY) {
 80141f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d150      	bne.n	80142a0 <sp_2048_mod_exp_32+0xd4>
        norm = td;
 80141fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014200:	65fb      	str	r3, [r7, #92]	; 0x5c
        for (i=0; i<16; i++) {
 8014202:	2300      	movs	r3, #0
 8014204:	673b      	str	r3, [r7, #112]	; 0x70
 8014206:	e00e      	b.n	8014226 <sp_2048_mod_exp_32+0x5a>
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
            t[i] = td + i * 64;
 8014208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801420a:	021b      	lsls	r3, r3, #8
 801420c:	461a      	mov	r2, r3
 801420e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014210:	441a      	add	r2, r3
 8014212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	f107 0178 	add.w	r1, r7, #120	; 0x78
 801421a:	440b      	add	r3, r1
 801421c:	f843 2c64 	str.w	r2, [r3, #-100]
        for (i=0; i<16; i++) {
 8014220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014222:	3301      	adds	r3, #1
 8014224:	673b      	str	r3, [r7, #112]	; 0x70
 8014226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014228:	2b0f      	cmp	r3, #15
 801422a:	dded      	ble.n	8014208 <sp_2048_mod_exp_32+0x3c>
#else
            t[i] = &td[i * 64];
#endif
        }

        sp_2048_mont_setup(m, &mp);
 801422c:	f107 0310 	add.w	r3, r7, #16
 8014230:	4619      	mov	r1, r3
 8014232:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8014236:	f7ff fcaa 	bl	8013b8e <sp_2048_mont_setup>
        sp_2048_mont_norm_32(norm, m);
 801423a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801423e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8014240:	f7ff fd0d 	bl	8013c5e <sp_2048_mont_norm_32>

        XMEMSET(t[1], 0, sizeof(sp_digit) * 32U);
 8014244:	69bb      	ldr	r3, [r7, #24]
 8014246:	2280      	movs	r2, #128	; 0x80
 8014248:	2100      	movs	r1, #0
 801424a:	4618      	mov	r0, r3
 801424c:	f007 fc05 	bl	801ba5a <memset>
        if (reduceA != 0) {
 8014250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014254:	2b00      	cmp	r3, #0
 8014256:	d014      	beq.n	8014282 <sp_2048_mod_exp_32+0xb6>
            err = sp_2048_mod_32(t[1] + 32, a, m);
 8014258:	69bb      	ldr	r3, [r7, #24]
 801425a:	3380      	adds	r3, #128	; 0x80
 801425c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014260:	68b9      	ldr	r1, [r7, #8]
 8014262:	4618      	mov	r0, r3
 8014264:	f7ff ffa1 	bl	80141aa <sp_2048_mod_32>
 8014268:	6678      	str	r0, [r7, #100]	; 0x64
            if (err == MP_OKAY) {
 801426a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801426c:	2b00      	cmp	r3, #0
 801426e:	d117      	bne.n	80142a0 <sp_2048_mod_exp_32+0xd4>
                err = sp_2048_mod_32(t[1], t[1], m);
 8014270:	69bb      	ldr	r3, [r7, #24]
 8014272:	69b9      	ldr	r1, [r7, #24]
 8014274:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014278:	4618      	mov	r0, r3
 801427a:	f7ff ff96 	bl	80141aa <sp_2048_mod_32>
 801427e:	6678      	str	r0, [r7, #100]	; 0x64
 8014280:	e00e      	b.n	80142a0 <sp_2048_mod_exp_32+0xd4>
            }
        }
        else {
            XMEMCPY(t[1] + 32, a, sizeof(sp_digit) * 32);
 8014282:	69bb      	ldr	r3, [r7, #24]
 8014284:	3380      	adds	r3, #128	; 0x80
 8014286:	2280      	movs	r2, #128	; 0x80
 8014288:	68b9      	ldr	r1, [r7, #8]
 801428a:	4618      	mov	r0, r3
 801428c:	f007 fbc1 	bl	801ba12 <memcpy>
            err = sp_2048_mod_32(t[1], t[1], m);
 8014290:	69bb      	ldr	r3, [r7, #24]
 8014292:	69b9      	ldr	r1, [r7, #24]
 8014294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014298:	4618      	mov	r0, r3
 801429a:	f7ff ff86 	bl	80141aa <sp_2048_mod_32>
 801429e:	6678      	str	r0, [r7, #100]	; 0x64
        }
    }

    if (err == MP_OKAY) {
 80142a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	f040 816c 	bne.w	8014580 <sp_2048_mod_exp_32+0x3b4>
        sp_2048_mont_sqr_32(t[ 2], t[ 1], m, mp);
 80142a8:	69f8      	ldr	r0, [r7, #28]
 80142aa:	69b9      	ldr	r1, [r7, #24]
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80142b2:	f7ff fda5 	bl	8013e00 <sp_2048_mont_sqr_32>
        sp_2048_mont_mul_32(t[ 3], t[ 2], t[ 1], m, mp);
 80142b6:	6a38      	ldr	r0, [r7, #32]
 80142b8:	69f9      	ldr	r1, [r7, #28]
 80142ba:	69ba      	ldr	r2, [r7, #24]
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	9300      	str	r3, [sp, #0]
 80142c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80142c4:	f7ff fd87 	bl	8013dd6 <sp_2048_mont_mul_32>
        sp_2048_mont_sqr_32(t[ 4], t[ 2], m, mp);
 80142c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142ca:	69f9      	ldr	r1, [r7, #28]
 80142cc:	693b      	ldr	r3, [r7, #16]
 80142ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80142d2:	f7ff fd95 	bl	8013e00 <sp_2048_mont_sqr_32>
        sp_2048_mont_mul_32(t[ 5], t[ 3], t[ 2], m, mp);
 80142d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142d8:	6a39      	ldr	r1, [r7, #32]
 80142da:	69fa      	ldr	r2, [r7, #28]
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80142e4:	f7ff fd77 	bl	8013dd6 <sp_2048_mont_mul_32>
        sp_2048_mont_sqr_32(t[ 6], t[ 3], m, mp);
 80142e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142ea:	6a39      	ldr	r1, [r7, #32]
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80142f2:	f7ff fd85 	bl	8013e00 <sp_2048_mont_sqr_32>
        sp_2048_mont_mul_32(t[ 7], t[ 4], t[ 3], m, mp);
 80142f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80142fa:	6a3a      	ldr	r2, [r7, #32]
 80142fc:	693b      	ldr	r3, [r7, #16]
 80142fe:	9300      	str	r3, [sp, #0]
 8014300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014304:	f7ff fd67 	bl	8013dd6 <sp_2048_mont_mul_32>
        sp_2048_mont_sqr_32(t[ 8], t[ 4], m, mp);
 8014308:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801430a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014312:	f7ff fd75 	bl	8013e00 <sp_2048_mont_sqr_32>
        sp_2048_mont_mul_32(t[ 9], t[ 5], t[ 4], m, mp);
 8014316:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801431a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	9300      	str	r3, [sp, #0]
 8014320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014324:	f7ff fd57 	bl	8013dd6 <sp_2048_mont_mul_32>
        sp_2048_mont_sqr_32(t[10], t[ 5], m, mp);
 8014328:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801432a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014332:	f7ff fd65 	bl	8013e00 <sp_2048_mont_sqr_32>
        sp_2048_mont_mul_32(t[11], t[ 6], t[ 5], m, mp);
 8014336:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801433a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	9300      	str	r3, [sp, #0]
 8014340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014344:	f7ff fd47 	bl	8013dd6 <sp_2048_mont_mul_32>
        sp_2048_mont_sqr_32(t[12], t[ 6], m, mp);
 8014348:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801434a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014352:	f7ff fd55 	bl	8013e00 <sp_2048_mont_sqr_32>
        sp_2048_mont_mul_32(t[13], t[ 7], t[ 6], m, mp);
 8014356:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801435a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	9300      	str	r3, [sp, #0]
 8014360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014364:	f7ff fd37 	bl	8013dd6 <sp_2048_mont_mul_32>
        sp_2048_mont_sqr_32(t[14], t[ 7], m, mp);
 8014368:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801436a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014372:	f7ff fd45 	bl	8013e00 <sp_2048_mont_sqr_32>
        sp_2048_mont_mul_32(t[15], t[ 8], t[ 7], m, mp);
 8014376:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014378:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801437a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	9300      	str	r3, [sp, #0]
 8014380:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014384:	f7ff fd27 	bl	8013dd6 <sp_2048_mont_mul_32>

        i = (bits - 1) / 32;
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	3b01      	subs	r3, #1
 801438c:	2b00      	cmp	r3, #0
 801438e:	da00      	bge.n	8014392 <sp_2048_mod_exp_32+0x1c6>
 8014390:	331f      	adds	r3, #31
 8014392:	115b      	asrs	r3, r3, #5
 8014394:	673b      	str	r3, [r7, #112]	; 0x70
        n = e[i--];
 8014396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014398:	1e5a      	subs	r2, r3, #1
 801439a:	673a      	str	r2, [r7, #112]	; 0x70
 801439c:	009b      	lsls	r3, r3, #2
 801439e:	687a      	ldr	r2, [r7, #4]
 80143a0:	4413      	add	r3, r2
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	677b      	str	r3, [r7, #116]	; 0x74
        c = bits & 31;
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	f003 031f 	and.w	r3, r3, #31
 80143ac:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (c == 0) {
 80143ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d101      	bne.n	80143b8 <sp_2048_mod_exp_32+0x1ec>
            c = 32;
 80143b4:	2320      	movs	r3, #32
 80143b6:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
        c -= bits % 4;
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	425a      	negs	r2, r3
 80143bc:	f003 0303 	and.w	r3, r3, #3
 80143c0:	f002 0203 	and.w	r2, r2, #3
 80143c4:	bf58      	it	pl
 80143c6:	4253      	negpl	r3, r2
 80143c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80143ca:	1ad3      	subs	r3, r2, r3
 80143cc:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (c == 32) {
 80143ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80143d0:	2b20      	cmp	r3, #32
 80143d2:	d101      	bne.n	80143d8 <sp_2048_mod_exp_32+0x20c>
            c = 28;
 80143d4:	231c      	movs	r3, #28
 80143d6:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
        if (c < 0) {
 80143d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80143da:	2b00      	cmp	r3, #0
 80143dc:	da23      	bge.n	8014426 <sp_2048_mod_exp_32+0x25a>
            /* Number of bits in top word is less than number needed. */
            c = -c;
 80143de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80143e0:	425b      	negs	r3, r3
 80143e2:	66fb      	str	r3, [r7, #108]	; 0x6c
            y = (int)(n << c);
 80143e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80143e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80143e8:	fa02 f303 	lsl.w	r3, r2, r3
 80143ec:	66bb      	str	r3, [r7, #104]	; 0x68
            n = e[i--];
 80143ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143f0:	1e5a      	subs	r2, r3, #1
 80143f2:	673a      	str	r2, [r7, #112]	; 0x70
 80143f4:	009b      	lsls	r3, r3, #2
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	4413      	add	r3, r2
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	677b      	str	r3, [r7, #116]	; 0x74
            y |= (int)(n >> (64 - c));
 80143fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014400:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8014404:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014406:	fa22 f303 	lsr.w	r3, r2, r3
 801440a:	461a      	mov	r2, r3
 801440c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801440e:	4313      	orrs	r3, r2
 8014410:	66bb      	str	r3, [r7, #104]	; 0x68
            n <<= c;
 8014412:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014416:	fa02 f303 	lsl.w	r3, r2, r3
 801441a:	677b      	str	r3, [r7, #116]	; 0x74
            c = 64 - c;
 801441c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801441e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8014422:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014424:	e00b      	b.n	801443e <sp_2048_mod_exp_32+0x272>
        }
        else {
            y = (int)(n >> c);
 8014426:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801442a:	fa22 f303 	lsr.w	r3, r2, r3
 801442e:	66bb      	str	r3, [r7, #104]	; 0x68
            n <<= 32 - c;
 8014430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014432:	f1c3 0320 	rsb	r3, r3, #32
 8014436:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014438:	fa02 f303 	lsl.w	r3, r2, r3
 801443c:	677b      	str	r3, [r7, #116]	; 0x74
        }
        XMEMCPY(r, t[y], sizeof(sp_digit) * 32);
 801443e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8014446:	4413      	add	r3, r2
 8014448:	f853 3c64 	ldr.w	r3, [r3, #-100]
 801444c:	2280      	movs	r2, #128	; 0x80
 801444e:	4619      	mov	r1, r3
 8014450:	68f8      	ldr	r0, [r7, #12]
 8014452:	f007 fade 	bl	801ba12 <memcpy>
        for (; i>=0 || c>=4; ) {
 8014456:	e06d      	b.n	8014534 <sp_2048_mod_exp_32+0x368>
            if (c == 0) {
 8014458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801445a:	2b00      	cmp	r3, #0
 801445c:	d110      	bne.n	8014480 <sp_2048_mod_exp_32+0x2b4>
                n = e[i--];
 801445e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014460:	1e5a      	subs	r2, r3, #1
 8014462:	673a      	str	r2, [r7, #112]	; 0x70
 8014464:	009b      	lsls	r3, r3, #2
 8014466:	687a      	ldr	r2, [r7, #4]
 8014468:	4413      	add	r3, r2
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	677b      	str	r3, [r7, #116]	; 0x74
                y = (int)(n >> 28);
 801446e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014470:	0f1b      	lsrs	r3, r3, #28
 8014472:	66bb      	str	r3, [r7, #104]	; 0x68
                n <<= 4;
 8014474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014476:	011b      	lsls	r3, r3, #4
 8014478:	677b      	str	r3, [r7, #116]	; 0x74
                c = 28;
 801447a:	231c      	movs	r3, #28
 801447c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801447e:	e02e      	b.n	80144de <sp_2048_mod_exp_32+0x312>
            }
            else if (c < 4) {
 8014480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014482:	2b03      	cmp	r3, #3
 8014484:	dc22      	bgt.n	80144cc <sp_2048_mod_exp_32+0x300>
                y = (int)(n >> 28);
 8014486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014488:	0f1b      	lsrs	r3, r3, #28
 801448a:	66bb      	str	r3, [r7, #104]	; 0x68
                n = e[i--];
 801448c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801448e:	1e5a      	subs	r2, r3, #1
 8014490:	673a      	str	r2, [r7, #112]	; 0x70
 8014492:	009b      	lsls	r3, r3, #2
 8014494:	687a      	ldr	r2, [r7, #4]
 8014496:	4413      	add	r3, r2
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	677b      	str	r3, [r7, #116]	; 0x74
                c = 4 - c;
 801449c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801449e:	f1c3 0304 	rsb	r3, r3, #4
 80144a2:	66fb      	str	r3, [r7, #108]	; 0x6c
                y |= (int)(n >> (32 - c));
 80144a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80144a6:	f1c3 0320 	rsb	r3, r3, #32
 80144aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80144ac:	fa22 f303 	lsr.w	r3, r2, r3
 80144b0:	461a      	mov	r2, r3
 80144b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144b4:	4313      	orrs	r3, r2
 80144b6:	66bb      	str	r3, [r7, #104]	; 0x68
                n <<= c;
 80144b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80144ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80144bc:	fa02 f303 	lsl.w	r3, r2, r3
 80144c0:	677b      	str	r3, [r7, #116]	; 0x74
                c = 32 - c;
 80144c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80144c4:	f1c3 0320 	rsb	r3, r3, #32
 80144c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80144ca:	e008      	b.n	80144de <sp_2048_mod_exp_32+0x312>
            }
            else {
                y = (int)((n >> 28) & 0xf);
 80144cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80144ce:	0f1b      	lsrs	r3, r3, #28
 80144d0:	66bb      	str	r3, [r7, #104]	; 0x68
                n <<= 4;
 80144d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80144d4:	011b      	lsls	r3, r3, #4
 80144d6:	677b      	str	r3, [r7, #116]	; 0x74
                c -= 4;
 80144d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80144da:	3b04      	subs	r3, #4
 80144dc:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            sp_2048_mont_sqr_32(r, r, m, mp);
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80144e4:	68f9      	ldr	r1, [r7, #12]
 80144e6:	68f8      	ldr	r0, [r7, #12]
 80144e8:	f7ff fc8a 	bl	8013e00 <sp_2048_mont_sqr_32>
            sp_2048_mont_sqr_32(r, r, m, mp);
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80144f2:	68f9      	ldr	r1, [r7, #12]
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	f7ff fc83 	bl	8013e00 <sp_2048_mont_sqr_32>
            sp_2048_mont_sqr_32(r, r, m, mp);
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014500:	68f9      	ldr	r1, [r7, #12]
 8014502:	68f8      	ldr	r0, [r7, #12]
 8014504:	f7ff fc7c 	bl	8013e00 <sp_2048_mont_sqr_32>
            sp_2048_mont_sqr_32(r, r, m, mp);
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801450e:	68f9      	ldr	r1, [r7, #12]
 8014510:	68f8      	ldr	r0, [r7, #12]
 8014512:	f7ff fc75 	bl	8013e00 <sp_2048_mont_sqr_32>

            sp_2048_mont_mul_32(r, r, t[y], m, mp);
 8014516:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801451e:	4413      	add	r3, r2
 8014520:	f853 2c64 	ldr.w	r2, [r3, #-100]
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	9300      	str	r3, [sp, #0]
 8014528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801452c:	68f9      	ldr	r1, [r7, #12]
 801452e:	68f8      	ldr	r0, [r7, #12]
 8014530:	f7ff fc51 	bl	8013dd6 <sp_2048_mont_mul_32>
        for (; i>=0 || c>=4; ) {
 8014534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014536:	2b00      	cmp	r3, #0
 8014538:	da8e      	bge.n	8014458 <sp_2048_mod_exp_32+0x28c>
 801453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801453c:	2b03      	cmp	r3, #3
 801453e:	dc8b      	bgt.n	8014458 <sp_2048_mod_exp_32+0x28c>
        }

        XMEMSET(&r[32], 0, sizeof(sp_digit) * 32U);
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	3380      	adds	r3, #128	; 0x80
 8014544:	2280      	movs	r2, #128	; 0x80
 8014546:	2100      	movs	r1, #0
 8014548:	4618      	mov	r0, r3
 801454a:	f007 fa86 	bl	801ba5a <memset>
        sp_2048_mont_reduce_32(r, m, mp);
 801454e:	693b      	ldr	r3, [r7, #16]
 8014550:	461a      	mov	r2, r3
 8014552:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8014556:	68f8      	ldr	r0, [r7, #12]
 8014558:	f7ff fbc0 	bl	8013cdc <sp_2048_mont_reduce_32>

        mask = 0 - (sp_2048_cmp_32(r, m) >= 0);
 801455c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8014560:	68f8      	ldr	r0, [r7, #12]
 8014562:	f7ff fcd9 	bl	8013f18 <sp_2048_cmp_32>
 8014566:	4603      	mov	r3, r0
 8014568:	43db      	mvns	r3, r3
 801456a:	0fdb      	lsrs	r3, r3, #31
 801456c:	b2db      	uxtb	r3, r3
 801456e:	425b      	negs	r3, r3
 8014570:	65bb      	str	r3, [r7, #88]	; 0x58
        sp_2048_cond_sub_32(r, r, m, mask);
 8014572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014574:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014578:	68f9      	ldr	r1, [r7, #12]
 801457a:	68f8      	ldr	r0, [r7, #12]
 801457c:	f7ff fb81 	bl	8013c82 <sp_2048_cond_sub_32>
    }

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (td != NULL) {
 8014580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014582:	2b00      	cmp	r3, #0
 8014584:	d007      	beq.n	8014596 <sp_2048_mod_exp_32+0x3ca>
        XFREE(td, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8014586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014588:	657b      	str	r3, [r7, #84]	; 0x54
 801458a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801458c:	2b00      	cmp	r3, #0
 801458e:	d002      	beq.n	8014596 <sp_2048_mod_exp_32+0x3ca>
 8014590:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014592:	f7fc ff7f 	bl	8011494 <wolfSSL_Free>
    }
#endif

    return err;
 8014596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8014598:	4618      	mov	r0, r3
 801459a:	3778      	adds	r7, #120	; 0x78
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <sp_2048_cond_sub_64>:
 * b  A single precision number to subtract.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_2048_cond_sub_64(sp_digit* r, const sp_digit* a,
        const sp_digit* b, sp_digit m)
{
 80145a0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80145a4:	b086      	sub	sp, #24
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	60f8      	str	r0, [r7, #12]
 80145aa:	60b9      	str	r1, [r7, #8]
 80145ac:	607a      	str	r2, [r7, #4]
 80145ae:	603b      	str	r3, [r7, #0]
    sp_digit c = 0;
 80145b0:	2300      	movs	r3, #0
 80145b2:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 80145b4:	68fa      	ldr	r2, [r7, #12]
 80145b6:	68b9      	ldr	r1, [r7, #8]
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	683c      	ldr	r4, [r7, #0]
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	f04f 0501 	mov.w	r5, #1
 80145c2:	ea4f 2505 	mov.w	r5, r5, lsl #8
 80145c6:	46a9      	mov	r9, r5
 80145c8:	f04f 0800 	mov.w	r8, #0
 80145cc:	f850 6008 	ldr.w	r6, [r0, r8]
 80145d0:	ea06 0604 	and.w	r6, r6, r4
 80145d4:	f04f 0500 	mov.w	r5, #0
 80145d8:	1aed      	subs	r5, r5, r3
 80145da:	f851 5008 	ldr.w	r5, [r1, r8]
 80145de:	41b5      	sbcs	r5, r6
 80145e0:	419b      	sbcs	r3, r3
 80145e2:	f842 5008 	str.w	r5, [r2, r8]
 80145e6:	f108 0804 	add.w	r8, r8, #4
 80145ea:	45c8      	cmp	r8, r9
 80145ec:	dbee      	blt.n	80145cc <sp_2048_cond_sub_64+0x2c>
 80145ee:	617b      	str	r3, [r7, #20]
        : [c] "+r" (c)
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
 80145f0:	697b      	ldr	r3, [r7, #20]
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3718      	adds	r7, #24
 80145f6:	46bd      	mov	sp, r7
 80145f8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80145fc:	4770      	bx	lr

080145fe <sp_2048_mont_reduce_64>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_2048_mont_reduce_64(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 80145fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014602:	b087      	sub	sp, #28
 8014604:	af00      	add	r7, sp, #0
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	60b9      	str	r1, [r7, #8]
 801460a:	607a      	str	r2, [r7, #4]
    sp_digit ca = 0;
 801460c:	2300      	movs	r3, #0
 801460e:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8014610:	68b9      	ldr	r1, [r7, #8]
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	697a      	ldr	r2, [r7, #20]
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	4681      	mov	r9, r0
 801461a:	468c      	mov	ip, r1
 801461c:	469a      	mov	sl, r3
 801461e:	f04f 0400 	mov.w	r4, #0
 8014622:	f50a 7b80 	add.w	fp, sl, #256	; 0x100
 8014626:	4648      	mov	r0, r9
 8014628:	f8da 3000 	ldr.w	r3, [sl]
 801462c:	fb00 f003 	mul.w	r0, r0, r3
 8014630:	4661      	mov	r1, ip
 8014632:	f10a 0ef8 	add.w	lr, sl, #248	; 0xf8
 8014636:	f8da 3000 	ldr.w	r3, [sl]
 801463a:	f04f 0500 	mov.w	r5, #0
 801463e:	f851 8b04 	ldr.w	r8, [r1], #4
 8014642:	fba0 6808 	umull	r6, r8, r0, r8
 8014646:	199b      	adds	r3, r3, r6
 8014648:	eb45 0508 	adc.w	r5, r5, r8
 801464c:	18e4      	adds	r4, r4, r3
 801464e:	f145 0500 	adc.w	r5, r5, #0
 8014652:	f84a 4b04 	str.w	r4, [sl], #4
 8014656:	f8da 3000 	ldr.w	r3, [sl]
 801465a:	f04f 0400 	mov.w	r4, #0
 801465e:	f851 8b04 	ldr.w	r8, [r1], #4
 8014662:	fba0 6808 	umull	r6, r8, r0, r8
 8014666:	199b      	adds	r3, r3, r6
 8014668:	eb44 0408 	adc.w	r4, r4, r8
 801466c:	18ed      	adds	r5, r5, r3
 801466e:	f144 0400 	adc.w	r4, r4, #0
 8014672:	f84a 5b04 	str.w	r5, [sl], #4
 8014676:	45f2      	cmp	sl, lr
 8014678:	dbdd      	blt.n	8014636 <sp_2048_mont_reduce_64+0x38>
 801467a:	f8da 3000 	ldr.w	r3, [sl]
 801467e:	f04f 0500 	mov.w	r5, #0
 8014682:	f851 8b04 	ldr.w	r8, [r1], #4
 8014686:	fba0 6808 	umull	r6, r8, r0, r8
 801468a:	199b      	adds	r3, r3, r6
 801468c:	eb45 0508 	adc.w	r5, r5, r8
 8014690:	18e4      	adds	r4, r4, r3
 8014692:	f145 0500 	adc.w	r5, r5, #0
 8014696:	f84a 4b04 	str.w	r4, [sl], #4
 801469a:	4614      	mov	r4, r2
 801469c:	f04f 0200 	mov.w	r2, #0
 80146a0:	f8d1 8000 	ldr.w	r8, [r1]
 80146a4:	fba0 6808 	umull	r6, r8, r0, r8
 80146a8:	19ad      	adds	r5, r5, r6
 80146aa:	eb54 0408 	adcs.w	r4, r4, r8
 80146ae:	f142 0200 	adc.w	r2, r2, #0
 80146b2:	f8da 6000 	ldr.w	r6, [sl]
 80146b6:	f8da 8004 	ldr.w	r8, [sl, #4]
 80146ba:	1976      	adds	r6, r6, r5
 80146bc:	eb58 0804 	adcs.w	r8, r8, r4
 80146c0:	f142 0200 	adc.w	r2, r2, #0
 80146c4:	f8ca 6000 	str.w	r6, [sl]
 80146c8:	f8ca 8004 	str.w	r8, [sl, #4]
 80146cc:	f1aa 0af8 	sub.w	sl, sl, #248	; 0xf8
 80146d0:	45da      	cmp	sl, fp
 80146d2:	dba8      	blt.n	8014626 <sp_2048_mont_reduce_64+0x28>
 80146d4:	4653      	mov	r3, sl
 80146d6:	4661      	mov	r1, ip
 80146d8:	617a      	str	r2, [r7, #20]
 80146da:	60fb      	str	r3, [r7, #12]
        : [ca] "+r" (ca), [a] "+r" (a)
        : [m] "r" (m), [mp] "r" (mp)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    sp_2048_cond_sub_64(a - 64, a, m, (sp_digit)0 - ca);
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	f5a3 7080 	sub.w	r0, r3, #256	; 0x100
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	425b      	negs	r3, r3
 80146e6:	68ba      	ldr	r2, [r7, #8]
 80146e8:	68f9      	ldr	r1, [r7, #12]
 80146ea:	f7ff ff59 	bl	80145a0 <sp_2048_cond_sub_64>
}
 80146ee:	bf00      	nop
 80146f0:	371c      	adds	r7, #28
 80146f2:	46bd      	mov	sp, r7
 80146f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080146f8 <sp_2048_mont_mul_64>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
static void sp_2048_mont_mul_64(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m, sp_digit mp)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b084      	sub	sp, #16
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	60f8      	str	r0, [r7, #12]
 8014700:	60b9      	str	r1, [r7, #8]
 8014702:	607a      	str	r2, [r7, #4]
 8014704:	603b      	str	r3, [r7, #0]
    sp_2048_mul_64(r, a, b);
 8014706:	687a      	ldr	r2, [r7, #4]
 8014708:	68b9      	ldr	r1, [r7, #8]
 801470a:	68f8      	ldr	r0, [r7, #12]
 801470c:	f7fe ffea 	bl	80136e4 <sp_2048_mul_64>
    sp_2048_mont_reduce_64(r, m, mp);
 8014710:	69ba      	ldr	r2, [r7, #24]
 8014712:	6839      	ldr	r1, [r7, #0]
 8014714:	68f8      	ldr	r0, [r7, #12]
 8014716:	f7ff ff72 	bl	80145fe <sp_2048_mont_reduce_64>
}
 801471a:	bf00      	nop
 801471c:	3710      	adds	r7, #16
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <sp_2048_mont_sqr_64>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
static void sp_2048_mont_sqr_64(sp_digit* r, const sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8014722:	b580      	push	{r7, lr}
 8014724:	b084      	sub	sp, #16
 8014726:	af00      	add	r7, sp, #0
 8014728:	60f8      	str	r0, [r7, #12]
 801472a:	60b9      	str	r1, [r7, #8]
 801472c:	607a      	str	r2, [r7, #4]
 801472e:	603b      	str	r3, [r7, #0]
    sp_2048_sqr_64(r, a);
 8014730:	68b9      	ldr	r1, [r7, #8]
 8014732:	68f8      	ldr	r0, [r7, #12]
 8014734:	f7ff f847 	bl	80137c6 <sp_2048_sqr_64>
    sp_2048_mont_reduce_64(r, m, mp);
 8014738:	683a      	ldr	r2, [r7, #0]
 801473a:	6879      	ldr	r1, [r7, #4]
 801473c:	68f8      	ldr	r0, [r7, #12]
 801473e:	f7ff ff5e 	bl	80145fe <sp_2048_mont_reduce_64>
}
 8014742:	bf00      	nop
 8014744:	3710      	adds	r7, #16
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}

0801474a <div_2048_word_64>:
 *
 * Note that this is an approximate div. It may give an answer 1 larger.
 */
SP_NOINLINE static sp_digit div_2048_word_64(sp_digit d1, sp_digit d0,
        sp_digit div)
{
 801474a:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801474e:	b087      	sub	sp, #28
 8014750:	af00      	add	r7, sp, #0
 8014752:	60f8      	str	r0, [r7, #12]
 8014754:	60b9      	str	r1, [r7, #8]
 8014756:	607a      	str	r2, [r7, #4]
    sp_digit r = 0;
 8014758:	2300      	movs	r3, #0
 801475a:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 801475c:	68fa      	ldr	r2, [r7, #12]
 801475e:	68b9      	ldr	r1, [r7, #8]
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	ea4f 4610 	mov.w	r6, r0, lsr #16
 8014768:	f106 0601 	add.w	r6, r6, #1
 801476c:	fbb2 f4f6 	udiv	r4, r2, r6
 8014770:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8014774:	fba0 4508 	umull	r4, r5, r0, r8
 8014778:	1b09      	subs	r1, r1, r4
 801477a:	eb62 0205 	sbc.w	r2, r2, r5
 801477e:	fbb2 f5f6 	udiv	r5, r2, r6
 8014782:	ea4f 4405 	mov.w	r4, r5, lsl #16
 8014786:	44a0      	add	r8, r4
 8014788:	fba0 4504 	umull	r4, r5, r0, r4
 801478c:	1b09      	subs	r1, r1, r4
 801478e:	eb62 0205 	sbc.w	r2, r2, r5
 8014792:	ea4f 4402 	mov.w	r4, r2, lsl #16
 8014796:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 801479a:	fbb4 f4f6 	udiv	r4, r4, r6
 801479e:	44a0      	add	r8, r4
 80147a0:	fba0 4504 	umull	r4, r5, r0, r4
 80147a4:	1b09      	subs	r1, r1, r4
 80147a6:	eb62 0205 	sbc.w	r2, r2, r5
 80147aa:	ea4f 4402 	mov.w	r4, r2, lsl #16
 80147ae:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 80147b2:	fbb4 f4f6 	udiv	r4, r4, r6
 80147b6:	44a0      	add	r8, r4
 80147b8:	fba0 4504 	umull	r4, r5, r0, r4
 80147bc:	1b09      	subs	r1, r1, r4
 80147be:	eb62 0205 	sbc.w	r2, r2, r5
 80147c2:	fbb1 f4f0 	udiv	r4, r1, r0
 80147c6:	44a0      	add	r8, r4
 80147c8:	4643      	mov	r3, r8
 80147ca:	617b      	str	r3, [r7, #20]
        "mov	%[r], r8\n\t"
        : [r] "+r" (r)
        : [d1] "r" (d1), [d0] "r" (d0), [div] "r" (div)
        : "r4", "r5", "r6", "r8"
    );
    return r;
 80147cc:	697b      	ldr	r3, [r7, #20]
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	371c      	adds	r7, #28
 80147d2:	46bd      	mov	sp, r7
 80147d4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80147d8:	4770      	bx	lr

080147da <sp_2048_cmp_64>:
 * b  A single precision integer.
 * return -ve, 0 or +ve if a is less than, equal to or greater than b
 * respectively.
 */
SP_NOINLINE static int32_t sp_2048_cmp_64(const sp_digit* a, const sp_digit* b)
{
 80147da:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80147de:	b085      	sub	sp, #20
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]
    sp_digit r = 0;
 80147e6:	2300      	movs	r3, #0
 80147e8:	60fb      	str	r3, [r7, #12]


    __asm__ __volatile__ (
 80147ea:	6879      	ldr	r1, [r7, #4]
 80147ec:	6838      	ldr	r0, [r7, #0]
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	461a      	mov	r2, r3
 80147f2:	f04f 0300 	mov.w	r3, #0
 80147f6:	ea6f 0303 	mvn.w	r3, r3
 80147fa:	f04f 06fc 	mov.w	r6, #252	; 0xfc
 80147fe:	f851 8006 	ldr.w	r8, [r1, r6]
 8014802:	5985      	ldr	r5, [r0, r6]
 8014804:	ea08 0803 	and.w	r8, r8, r3
 8014808:	ea05 0503 	and.w	r5, r5, r3
 801480c:	4644      	mov	r4, r8
 801480e:	ebb8 0805 	subs.w	r8, r8, r5
 8014812:	eb68 0808 	sbc.w	r8, r8, r8
 8014816:	4442      	add	r2, r8
 8014818:	ea6f 0808 	mvn.w	r8, r8
 801481c:	ea03 0308 	and.w	r3, r3, r8
 8014820:	1b2d      	subs	r5, r5, r4
 8014822:	eb68 0808 	sbc.w	r8, r8, r8
 8014826:	eba2 0208 	sub.w	r2, r2, r8
 801482a:	ea6f 0808 	mvn.w	r8, r8
 801482e:	ea03 0308 	and.w	r3, r3, r8
 8014832:	f1a6 0604 	sub.w	r6, r6, #4
 8014836:	2e00      	cmp	r6, #0
 8014838:	dae1      	bge.n	80147fe <sp_2048_cmp_64+0x24>
 801483a:	60fa      	str	r2, [r7, #12]
        : [r] "+r" (r)
        : [a] "r" (a), [b] "r" (b)
        : "r3", "r4", "r5", "r6", "r8"
    );

    return r;
 801483c:	68fb      	ldr	r3, [r7, #12]
}
 801483e:	4618      	mov	r0, r3
 8014840:	3714      	adds	r7, #20
 8014842:	46bd      	mov	sp, r7
 8014844:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8014848:	4770      	bx	lr

0801484a <sp_2048_div_64_cond>:
 * r  Remainder from the division.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_2048_div_64_cond(const sp_digit* a, const sp_digit* d, sp_digit* m,
        sp_digit* r)
{
 801484a:	b590      	push	{r4, r7, lr}
 801484c:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
 8014850:	af00      	add	r7, sp, #0
 8014852:	f107 040c 	add.w	r4, r7, #12
 8014856:	6020      	str	r0, [r4, #0]
 8014858:	f107 0008 	add.w	r0, r7, #8
 801485c:	6001      	str	r1, [r0, #0]
 801485e:	1d39      	adds	r1, r7, #4
 8014860:	600a      	str	r2, [r1, #0]
 8014862:	463a      	mov	r2, r7
 8014864:	6013      	str	r3, [r2, #0]
    sp_digit div, r1;
    int i;

    (void)m;

    div = d[63];
 8014866:	f107 0308 	add.w	r3, r7, #8
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014870:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    XMEMCPY(t1, a, sizeof(*t1) * 2 * 64);
 8014874:	f107 030c 	add.w	r3, r7, #12
 8014878:	f507 708c 	add.w	r0, r7, #280	; 0x118
 801487c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014880:	6819      	ldr	r1, [r3, #0]
 8014882:	f007 f8c6 	bl	801ba12 <memcpy>
    for (i=63; i>=0; i--) {
 8014886:	233f      	movs	r3, #63	; 0x3f
 8014888:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 801488c:	e0c1      	b.n	8014a12 <sp_2048_div_64_cond+0x1c8>
        sp_digit hi = t1[64 + i] - (t1[64 + i] == div);
 801488e:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8014892:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8014896:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801489a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801489e:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 80148a2:	f102 0140 	add.w	r1, r2, #64	; 0x40
 80148a6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80148aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80148ae:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 80148b2:	4291      	cmp	r1, r2
 80148b4:	bf0c      	ite	eq
 80148b6:	2201      	moveq	r2, #1
 80148b8:	2200      	movne	r2, #0
 80148ba:	b2d2      	uxtb	r2, r2
 80148bc:	1a9b      	subs	r3, r3, r2
 80148be:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
        r1 = div_2048_word_64(hi, t1[64 + i - 1], div);
 80148c2:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80148c6:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 80148ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80148ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148d2:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 80148d6:	4619      	mov	r1, r3
 80148d8:	f8d7 0318 	ldr.w	r0, [r7, #792]	; 0x318
 80148dc:	f7ff ff35 	bl	801474a <div_2048_word_64>
 80148e0:	f8c7 031c 	str.w	r0, [r7, #796]	; 0x31c

        sp_2048_mul_d_64(t2, d, r1);
 80148e4:	f107 0308 	add.w	r3, r7, #8
 80148e8:	f107 0014 	add.w	r0, r7, #20
 80148ec:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 80148f0:	6819      	ldr	r1, [r3, #0]
 80148f2:	f7ff f984 	bl	8013bfe <sp_2048_mul_d_64>
        t1[64 + i] += sp_2048_sub_in_place_64(&t1[i], t2);
 80148f6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80148fa:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80148fe:	009b      	lsls	r3, r3, #2
 8014900:	4413      	add	r3, r2
 8014902:	f107 0214 	add.w	r2, r7, #20
 8014906:	4611      	mov	r1, r2
 8014908:	4618      	mov	r0, r3
 801490a:	f7fe febd 	bl	8013688 <sp_2048_sub_in_place_64>
 801490e:	4601      	mov	r1, r0
 8014910:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8014914:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8014918:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801491c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014920:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8014924:	3240      	adds	r2, #64	; 0x40
 8014926:	4419      	add	r1, r3
 8014928:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801492c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        t1[64 + i] -= t2[64];
 8014930:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8014934:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8014938:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801493c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014940:	f107 0314 	add.w	r3, r7, #20
 8014944:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8014948:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 801494c:	3240      	adds	r2, #64	; 0x40
 801494e:	1ac9      	subs	r1, r1, r3
 8014950:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (t1[64 + i] != 0) {
 8014958:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801495c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8014960:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d04d      	beq.n	8014a08 <sp_2048_div_64_cond+0x1be>
            t1[64 + i] += sp_2048_add_64(&t1[i], &t1[i], d);
 801496c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8014970:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8014974:	009b      	lsls	r3, r3, #2
 8014976:	18d0      	adds	r0, r2, r3
 8014978:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801497c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8014980:	009b      	lsls	r3, r3, #2
 8014982:	18d1      	adds	r1, r2, r3
 8014984:	f107 0308 	add.w	r3, r7, #8
 8014988:	681a      	ldr	r2, [r3, #0]
 801498a:	f7fe fe4c 	bl	8013626 <sp_2048_add_64>
 801498e:	4601      	mov	r1, r0
 8014990:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8014994:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8014998:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801499c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149a0:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 80149a4:	3240      	adds	r2, #64	; 0x40
 80149a6:	4419      	add	r1, r3
 80149a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80149ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if (t1[64 + i] != 0)
 80149b0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80149b4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80149b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80149bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d021      	beq.n	8014a08 <sp_2048_div_64_cond+0x1be>
                t1[64 + i] += sp_2048_add_64(&t1[i], &t1[i], d);
 80149c4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80149c8:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	18d0      	adds	r0, r2, r3
 80149d0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80149d4:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80149d8:	009b      	lsls	r3, r3, #2
 80149da:	18d1      	adds	r1, r2, r3
 80149dc:	f107 0308 	add.w	r3, r7, #8
 80149e0:	681a      	ldr	r2, [r3, #0]
 80149e2:	f7fe fe20 	bl	8013626 <sp_2048_add_64>
 80149e6:	4601      	mov	r1, r0
 80149e8:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80149ec:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80149f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80149f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149f8:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 80149fc:	3240      	adds	r2, #64	; 0x40
 80149fe:	4419      	add	r1, r3
 8014a00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i=63; i>=0; i--) {
 8014a08:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8014a0c:	3b01      	subs	r3, #1
 8014a0e:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8014a12:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	f6bf af39 	bge.w	801488e <sp_2048_div_64_cond+0x44>
        }
    }

    r1 = sp_2048_cmp_64(t1, d) >= 0;
 8014a1c:	f107 0308 	add.w	r3, r7, #8
 8014a20:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8014a24:	6819      	ldr	r1, [r3, #0]
 8014a26:	4610      	mov	r0, r2
 8014a28:	f7ff fed7 	bl	80147da <sp_2048_cmp_64>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	43db      	mvns	r3, r3
 8014a30:	0fdb      	lsrs	r3, r3, #31
 8014a32:	b2db      	uxtb	r3, r3
 8014a34:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    sp_2048_cond_sub_64(r, t1, d, (sp_digit)0 - r1);
 8014a38:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8014a3c:	425b      	negs	r3, r3
 8014a3e:	f107 0208 	add.w	r2, r7, #8
 8014a42:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8014a46:	4638      	mov	r0, r7
 8014a48:	6812      	ldr	r2, [r2, #0]
 8014a4a:	6800      	ldr	r0, [r0, #0]
 8014a4c:	f7ff fda8 	bl	80145a0 <sp_2048_cond_sub_64>

    return MP_OKAY;
 8014a50:	2300      	movs	r3, #0
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	f507 774b 	add.w	r7, r7, #812	; 0x32c
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd90      	pop	{r4, r7, pc}

08014a5c <sp_2048_mod_64_cond>:
 * a  A single precision number that is to be reduced.
 * m  A single precision number that is the modulus to reduce with.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_2048_mod_64_cond(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b084      	sub	sp, #16
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	607a      	str	r2, [r7, #4]
    return sp_2048_div_64_cond(a, m, NULL, r);
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	6879      	ldr	r1, [r7, #4]
 8014a6e:	68b8      	ldr	r0, [r7, #8]
 8014a70:	f7ff feeb 	bl	801484a <sp_2048_div_64_cond>
 8014a74:	4603      	mov	r3, r0
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3710      	adds	r7, #16
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <sp_RsaPublic_2048>:
 * returns 0 on success, MP_TO_E when the outLen is too small, MP_READ_E when
 * an array is too long and MEMORY_E when dynamic memory allocation fails.
 */
int sp_RsaPublic_2048(const byte* in, word32 inLen, mp_int* em, mp_int* mm,
    byte* out, word32* outLen)
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b090      	sub	sp, #64	; 0x40
 8014a82:	af02      	add	r7, sp, #8
 8014a84:	60f8      	str	r0, [r7, #12]
 8014a86:	60b9      	str	r1, [r7, #8]
 8014a88:	607a      	str	r2, [r7, #4]
 8014a8a:	603b      	str	r3, [r7, #0]
#if (!defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SMALL_STACK)) || defined(WOLFSSL_SP_NO_MALLOC)
    sp_digit a[128], m[64], r[128];
#else
    sp_digit* d = NULL;
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	637b      	str	r3, [r7, #52]	; 0x34
    sp_digit* a = NULL;
 8014a90:	2300      	movs	r3, #0
 8014a92:	633b      	str	r3, [r7, #48]	; 0x30
    sp_digit* m = NULL;
 8014a94:	2300      	movs	r3, #0
 8014a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    sp_digit* r = NULL;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    sp_digit *ah = NULL;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	627b      	str	r3, [r7, #36]	; 0x24
    sp_digit e[1];
    int err = MP_OKAY;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	623b      	str	r3, [r7, #32]

    if (*outLen < 256) {
 8014aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	2bff      	cmp	r3, #255	; 0xff
 8014aaa:	d803      	bhi.n	8014ab4 <sp_RsaPublic_2048+0x36>
        err = MP_TO_E;
 8014aac:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8014ab0:	623b      	str	r3, [r7, #32]
 8014ab2:	e021      	b.n	8014af8 <sp_RsaPublic_2048+0x7a>
    }
    else if (mp_count_bits(em) > 32 || inLen > 256 ||
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	f006 fb3f 	bl	801b138 <sp_count_bits>
 8014aba:	4603      	mov	r3, r0
 8014abc:	2b20      	cmp	r3, #32
 8014abe:	dc0a      	bgt.n	8014ad6 <sp_RsaPublic_2048+0x58>
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ac6:	d806      	bhi.n	8014ad6 <sp_RsaPublic_2048+0x58>
                                                     mp_count_bits(mm) != 2048) {
 8014ac8:	6838      	ldr	r0, [r7, #0]
 8014aca:	f006 fb35 	bl	801b138 <sp_count_bits>
 8014ace:	4603      	mov	r3, r0
    else if (mp_count_bits(em) > 32 || inLen > 256 ||
 8014ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014ad4:	d003      	beq.n	8014ade <sp_RsaPublic_2048+0x60>
        err = MP_READ_E;
 8014ad6:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8014ada:	623b      	str	r3, [r7, #32]
 8014adc:	e00c      	b.n	8014af8 <sp_RsaPublic_2048+0x7a>
    }
    else if (mp_iseven(mm)) {
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d008      	beq.n	8014af8 <sp_RsaPublic_2048+0x7a>
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	689b      	ldr	r3, [r3, #8]
 8014aea:	f003 0301 	and.w	r3, r3, #1
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d102      	bne.n	8014af8 <sp_RsaPublic_2048+0x7a>
        err = MP_VAL;
 8014af2:	f06f 0302 	mvn.w	r3, #2
 8014af6:	623b      	str	r3, [r7, #32]
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (err == MP_OKAY) {
 8014af8:	6a3b      	ldr	r3, [r7, #32]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d10a      	bne.n	8014b14 <sp_RsaPublic_2048+0x96>
        d = (sp_digit*)XMALLOC(sizeof(sp_digit) * 64 * 5, NULL,
 8014afe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8014b02:	f7fc fcab 	bl	801145c <wolfSSL_Malloc>
 8014b06:	6378      	str	r0, [r7, #52]	; 0x34
                                                              DYNAMIC_TYPE_RSA);
        if (d == NULL)
 8014b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d102      	bne.n	8014b14 <sp_RsaPublic_2048+0x96>
            err = MEMORY_E;
 8014b0e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8014b12:	623b      	str	r3, [r7, #32]
    }

    if (err == MP_OKAY) {
 8014b14:	6a3b      	ldr	r3, [r7, #32]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d109      	bne.n	8014b2e <sp_RsaPublic_2048+0xb0>
        a = d;
 8014b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b1c:	633b      	str	r3, [r7, #48]	; 0x30
        r = a + 64 * 2;
 8014b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b20:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014b24:	62bb      	str	r3, [r7, #40]	; 0x28
        m = r + 64 * 2;
 8014b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
#endif

    if (err == MP_OKAY) {
 8014b2e:	6a3b      	ldr	r3, [r7, #32]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d112      	bne.n	8014b5a <sp_RsaPublic_2048+0xdc>
        ah = a + 64;
 8014b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014b3a:	627b      	str	r3, [r7, #36]	; 0x24

        sp_2048_from_bin(ah, 64, in, inLen);
 8014b3c:	68bb      	ldr	r3, [r7, #8]
 8014b3e:	68fa      	ldr	r2, [r7, #12]
 8014b40:	2140      	movs	r1, #64	; 0x40
 8014b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b44:	f7fe fc68 	bl	8013418 <sp_2048_from_bin>
#if DIGIT_BIT >= 32
        e[0] = em->dp[0];
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	689b      	ldr	r3, [r3, #8]
 8014b4c:	617b      	str	r3, [r7, #20]
        e[0] = em->dp[0];
        if (em->used > 1) {
            e[0] |= ((sp_digit)em->dp[1]) << DIGIT_BIT;
        }
#endif
        if (e[0] == 0) {
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d102      	bne.n	8014b5a <sp_RsaPublic_2048+0xdc>
            err = MP_EXPTMOD_E;
 8014b54:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8014b58:	623b      	str	r3, [r7, #32]
        }
    }
    if (err == MP_OKAY) {
 8014b5a:	6a3b      	ldr	r3, [r7, #32]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	f040 80a7 	bne.w	8014cb0 <sp_RsaPublic_2048+0x232>
        sp_2048_from_mp(m, 64, mm);
 8014b62:	683a      	ldr	r2, [r7, #0]
 8014b64:	2140      	movs	r1, #64	; 0x40
 8014b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b68:	f7fe fcc7 	bl	80134fa <sp_2048_from_mp>

        if (e[0] == 0x3) {
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	2b03      	cmp	r3, #3
 8014b70:	d11c      	bne.n	8014bac <sp_RsaPublic_2048+0x12e>
            if (err == MP_OKAY) {
 8014b72:	6a3b      	ldr	r3, [r7, #32]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d109      	bne.n	8014b8c <sp_RsaPublic_2048+0x10e>
                sp_2048_sqr_64(r, ah);
 8014b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b7c:	f7fe fe23 	bl	80137c6 <sp_2048_sqr_64>
                err = sp_2048_mod_64_cond(r, r, m);
 8014b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b86:	f7ff ff69 	bl	8014a5c <sp_2048_mod_64_cond>
 8014b8a:	6238      	str	r0, [r7, #32]
            }
            if (err == MP_OKAY) {
 8014b8c:	6a3b      	ldr	r3, [r7, #32]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	f040 808e 	bne.w	8014cb0 <sp_RsaPublic_2048+0x232>
                sp_2048_mul_64(r, ah, r);
 8014b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b9a:	f7fe fda3 	bl	80136e4 <sp_2048_mul_64>
                err = sp_2048_mod_64_cond(r, r, m);
 8014b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ba4:	f7ff ff5a 	bl	8014a5c <sp_2048_mod_64_cond>
 8014ba8:	6238      	str	r0, [r7, #32]
 8014baa:	e081      	b.n	8014cb0 <sp_RsaPublic_2048+0x232>
        }
        else {
            int i;
            sp_digit mp;

            sp_2048_mont_setup(m, &mp);
 8014bac:	f107 0310 	add.w	r3, r7, #16
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014bb4:	f7fe ffeb 	bl	8013b8e <sp_2048_mont_setup>

            /* Convert to Montgomery form. */
            XMEMSET(a, 0, sizeof(sp_digit) * 64);
 8014bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014bbc:	2100      	movs	r1, #0
 8014bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bc0:	f006 ff4b 	bl	801ba5a <memset>
            err = sp_2048_mod_64_cond(a, a, m);
 8014bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bca:	f7ff ff47 	bl	8014a5c <sp_2048_mod_64_cond>
 8014bce:	6238      	str	r0, [r7, #32]

            if (err == MP_OKAY) {
 8014bd0:	6a3b      	ldr	r3, [r7, #32]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d16c      	bne.n	8014cb0 <sp_RsaPublic_2048+0x232>
                for (i = 31; i >= 0; i--) {
 8014bd6:	231f      	movs	r3, #31
 8014bd8:	61fb      	str	r3, [r7, #28]
 8014bda:	e008      	b.n	8014bee <sp_RsaPublic_2048+0x170>
                    if (e[0] >> i) {
 8014bdc:	697a      	ldr	r2, [r7, #20]
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	fa22 f303 	lsr.w	r3, r2, r3
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d106      	bne.n	8014bf6 <sp_RsaPublic_2048+0x178>
                for (i = 31; i >= 0; i--) {
 8014be8:	69fb      	ldr	r3, [r7, #28]
 8014bea:	3b01      	subs	r3, #1
 8014bec:	61fb      	str	r3, [r7, #28]
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	daf3      	bge.n	8014bdc <sp_RsaPublic_2048+0x15e>
 8014bf4:	e000      	b.n	8014bf8 <sp_RsaPublic_2048+0x17a>
                        break;
 8014bf6:	bf00      	nop
                    }
                }

                XMEMCPY(r, a, sizeof(sp_digit) * 64);
 8014bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c00:	f006 ff07 	bl	801ba12 <memcpy>
                for (i--; i>=0; i--) {
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	3b01      	subs	r3, #1
 8014c08:	61fb      	str	r3, [r7, #28]
 8014c0a:	e018      	b.n	8014c3e <sp_RsaPublic_2048+0x1c0>
                    sp_2048_mont_sqr_64(r, r, m, mp);
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c14:	f7ff fd85 	bl	8014722 <sp_2048_mont_sqr_64>
                    if (((e[0] >> i) & 1) == 1) {
 8014c18:	697a      	ldr	r2, [r7, #20]
 8014c1a:	69fb      	ldr	r3, [r7, #28]
 8014c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8014c20:	f003 0301 	and.w	r3, r3, #1
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d007      	beq.n	8014c38 <sp_RsaPublic_2048+0x1ba>
                        sp_2048_mont_mul_64(r, r, a, m, mp);
 8014c28:	693b      	ldr	r3, [r7, #16]
 8014c2a:	9300      	str	r3, [sp, #0]
 8014c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c34:	f7ff fd60 	bl	80146f8 <sp_2048_mont_mul_64>
                for (i--; i>=0; i--) {
 8014c38:	69fb      	ldr	r3, [r7, #28]
 8014c3a:	3b01      	subs	r3, #1
 8014c3c:	61fb      	str	r3, [r7, #28]
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	dae3      	bge.n	8014c0c <sp_RsaPublic_2048+0x18e>
                    }
                }
                XMEMSET(&r[64], 0, sizeof(sp_digit) * 64);
 8014c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c4e:	2100      	movs	r1, #0
 8014c50:	4618      	mov	r0, r3
 8014c52:	f006 ff02 	bl	801ba5a <memset>
                sp_2048_mont_reduce_64(r, m, mp);
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	461a      	mov	r2, r3
 8014c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c5e:	f7ff fcce 	bl	80145fe <sp_2048_mont_reduce_64>

                for (i = 63; i > 0; i--) {
 8014c62:	233f      	movs	r3, #63	; 0x3f
 8014c64:	61fb      	str	r3, [r7, #28]
 8014c66:	e00e      	b.n	8014c86 <sp_RsaPublic_2048+0x208>
                    if (r[i] != m[i]) {
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	009b      	lsls	r3, r3, #2
 8014c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c6e:	4413      	add	r3, r2
 8014c70:	681a      	ldr	r2, [r3, #0]
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	009b      	lsls	r3, r3, #2
 8014c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c78:	440b      	add	r3, r1
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d106      	bne.n	8014c8e <sp_RsaPublic_2048+0x210>
                for (i = 63; i > 0; i--) {
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	3b01      	subs	r3, #1
 8014c84:	61fb      	str	r3, [r7, #28]
 8014c86:	69fb      	ldr	r3, [r7, #28]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	dced      	bgt.n	8014c68 <sp_RsaPublic_2048+0x1ea>
 8014c8c:	e000      	b.n	8014c90 <sp_RsaPublic_2048+0x212>
                        break;
 8014c8e:	bf00      	nop
                    }
                }
                if (r[i] >= m[i]) {
 8014c90:	69fb      	ldr	r3, [r7, #28]
 8014c92:	009b      	lsls	r3, r3, #2
 8014c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c96:	4413      	add	r3, r2
 8014c98:	681a      	ldr	r2, [r3, #0]
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	009b      	lsls	r3, r3, #2
 8014c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ca0:	440b      	add	r3, r1
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d303      	bcc.n	8014cb0 <sp_RsaPublic_2048+0x232>
                    sp_2048_sub_in_place_64(r, m);
 8014ca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014cac:	f7fe fcec 	bl	8013688 <sp_2048_sub_in_place_64>
                }
            }
        }
    }

    if (err == MP_OKAY) {
 8014cb0:	6a3b      	ldr	r3, [r7, #32]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d107      	bne.n	8014cc6 <sp_RsaPublic_2048+0x248>
        sp_2048_to_bin(r, out);
 8014cb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014cba:	f7fe fc43 	bl	8013544 <sp_2048_to_bin>
        *outLen = 256;
 8014cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014cc4:	601a      	str	r2, [r3, #0]
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (d != NULL) {
 8014cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d007      	beq.n	8014cdc <sp_RsaPublic_2048+0x25e>
        XFREE(d, NULL, DYNAMIC_TYPE_RSA);
 8014ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cce:	61bb      	str	r3, [r7, #24]
 8014cd0:	69bb      	ldr	r3, [r7, #24]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d002      	beq.n	8014cdc <sp_RsaPublic_2048+0x25e>
 8014cd6:	69b8      	ldr	r0, [r7, #24]
 8014cd8:	f7fc fbdc 	bl	8011494 <wolfSSL_Free>
    }
#endif

    return err;
 8014cdc:	6a3b      	ldr	r3, [r7, #32]
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3738      	adds	r7, #56	; 0x38
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}

08014ce6 <sp_2048_cond_add_32>:
 * b  A single precision number to add.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_2048_cond_add_32(sp_digit* r, const sp_digit* a, const sp_digit* b,
        sp_digit m)
{
 8014ce6:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8014cea:	b086      	sub	sp, #24
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	60f8      	str	r0, [r7, #12]
 8014cf0:	60b9      	str	r1, [r7, #8]
 8014cf2:	607a      	str	r2, [r7, #4]
 8014cf4:	603b      	str	r3, [r7, #0]
    sp_digit c = 0;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8014cfa:	68fa      	ldr	r2, [r7, #12]
 8014cfc:	68b9      	ldr	r1, [r7, #8]
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	683c      	ldr	r4, [r7, #0]
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	f04f 0580 	mov.w	r5, #128	; 0x80
 8014d08:	46a9      	mov	r9, r5
 8014d0a:	f04f 0800 	mov.w	r8, #0
 8014d0e:	f850 6008 	ldr.w	r6, [r0, r8]
 8014d12:	ea06 0604 	and.w	r6, r6, r4
 8014d16:	f113 35ff 	adds.w	r5, r3, #4294967295
 8014d1a:	f851 5008 	ldr.w	r5, [r1, r8]
 8014d1e:	4175      	adcs	r5, r6
 8014d20:	f04f 0300 	mov.w	r3, #0
 8014d24:	415b      	adcs	r3, r3
 8014d26:	f842 5008 	str.w	r5, [r2, r8]
 8014d2a:	f108 0804 	add.w	r8, r8, #4
 8014d2e:	45c8      	cmp	r8, r9
 8014d30:	dbed      	blt.n	8014d0e <sp_2048_cond_add_32+0x28>
 8014d32:	617b      	str	r3, [r7, #20]
        : [c] "+r" (c)
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
 8014d34:	697b      	ldr	r3, [r7, #20]
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3718      	adds	r7, #24
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8014d40:	4770      	bx	lr

08014d42 <sp_RsaPrivate_2048>:
 * an array is too long and MEMORY_E when dynamic memory allocation fails.
 */
int sp_RsaPrivate_2048(const byte* in, word32 inLen, mp_int* dm,
    mp_int* pm, mp_int* qm, mp_int* dpm, mp_int* dqm, mp_int* qim, mp_int* mm,
    byte* out, word32* outLen)
{
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b094      	sub	sp, #80	; 0x50
 8014d46:	af02      	add	r7, sp, #8
 8014d48:	60f8      	str	r0, [r7, #12]
 8014d4a:	60b9      	str	r1, [r7, #8]
 8014d4c:	607a      	str	r2, [r7, #4]
 8014d4e:	603b      	str	r3, [r7, #0]
#if (!defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SMALL_STACK)) || defined(WOLFSSL_SP_NO_MALLOC)
    sp_digit a[64 * 2];
    sp_digit p[32], q[32], dp[32];
    sp_digit tmpa[64], tmpb[64];
#else
    sp_digit* t = NULL;
 8014d50:	2300      	movs	r3, #0
 8014d52:	647b      	str	r3, [r7, #68]	; 0x44
    sp_digit* a = NULL;
 8014d54:	2300      	movs	r3, #0
 8014d56:	643b      	str	r3, [r7, #64]	; 0x40
    sp_digit* p = NULL;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sp_digit* q = NULL;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	63bb      	str	r3, [r7, #56]	; 0x38
    sp_digit* dp = NULL;
 8014d60:	2300      	movs	r3, #0
 8014d62:	637b      	str	r3, [r7, #52]	; 0x34
    sp_digit* tmpa = NULL;
 8014d64:	2300      	movs	r3, #0
 8014d66:	633b      	str	r3, [r7, #48]	; 0x30
    sp_digit* tmpb = NULL;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
    sp_digit* r = NULL;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    sp_digit* qi = NULL;
 8014d70:	2300      	movs	r3, #0
 8014d72:	627b      	str	r3, [r7, #36]	; 0x24
    sp_digit* dq = NULL;
 8014d74:	2300      	movs	r3, #0
 8014d76:	623b      	str	r3, [r7, #32]
    sp_digit c;
    int err = MP_OKAY;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	61fb      	str	r3, [r7, #28]

    (void)dm;
    (void)mm;

    if (*outLen < 256) {
 8014d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	2bff      	cmp	r3, #255	; 0xff
 8014d82:	d803      	bhi.n	8014d8c <sp_RsaPrivate_2048+0x4a>
        err = MP_TO_E;
 8014d84:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8014d88:	61fb      	str	r3, [r7, #28]
 8014d8a:	e01b      	b.n	8014dc4 <sp_RsaPrivate_2048+0x82>
    }
    else if (inLen > 256 || mp_count_bits(mm) != 2048) {
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d92:	d806      	bhi.n	8014da2 <sp_RsaPrivate_2048+0x60>
 8014d94:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8014d96:	f006 f9cf 	bl	801b138 <sp_count_bits>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014da0:	d003      	beq.n	8014daa <sp_RsaPrivate_2048+0x68>
        err = MP_READ_E;
 8014da2:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8014da6:	61fb      	str	r3, [r7, #28]
 8014da8:	e00c      	b.n	8014dc4 <sp_RsaPrivate_2048+0x82>
    }
    else if (mp_iseven(mm)) {
 8014daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d008      	beq.n	8014dc4 <sp_RsaPrivate_2048+0x82>
 8014db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014db4:	689b      	ldr	r3, [r3, #8]
 8014db6:	f003 0301 	and.w	r3, r3, #1
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d102      	bne.n	8014dc4 <sp_RsaPrivate_2048+0x82>
        err = MP_VAL;
 8014dbe:	f06f 0302 	mvn.w	r3, #2
 8014dc2:	61fb      	str	r3, [r7, #28]
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (err == MP_OKAY) {
 8014dc4:	69fb      	ldr	r3, [r7, #28]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d10a      	bne.n	8014de0 <sp_RsaPrivate_2048+0x9e>
        t = (sp_digit*)XMALLOC(sizeof(sp_digit) * 32 * 11, NULL,
 8014dca:	f44f 60b0 	mov.w	r0, #1408	; 0x580
 8014dce:	f7fc fb45 	bl	801145c <wolfSSL_Malloc>
 8014dd2:	6478      	str	r0, [r7, #68]	; 0x44
                                                              DYNAMIC_TYPE_RSA);
        if (t == NULL)
 8014dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d102      	bne.n	8014de0 <sp_RsaPrivate_2048+0x9e>
            err = MEMORY_E;
 8014dda:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8014dde:	61fb      	str	r3, [r7, #28]
    }
    if (err == MP_OKAY) {
 8014de0:	69fb      	ldr	r3, [r7, #28]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d11a      	bne.n	8014e1c <sp_RsaPrivate_2048+0xda>
        a = t;
 8014de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014de8:	643b      	str	r3, [r7, #64]	; 0x40
        p = a + 64 * 2;
 8014dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        q = p + 32;
 8014df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014df4:	3380      	adds	r3, #128	; 0x80
 8014df6:	63bb      	str	r3, [r7, #56]	; 0x38
        qi = dq = dp = q + 32;
 8014df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dfa:	3380      	adds	r3, #128	; 0x80
 8014dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8014dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e00:	623b      	str	r3, [r7, #32]
 8014e02:	6a3b      	ldr	r3, [r7, #32]
 8014e04:	627b      	str	r3, [r7, #36]	; 0x24
        tmpa = qi + 32;
 8014e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e08:	3380      	adds	r3, #128	; 0x80
 8014e0a:	633b      	str	r3, [r7, #48]	; 0x30
        tmpb = tmpa + 64;
 8014e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014e12:	62fb      	str	r3, [r7, #44]	; 0x2c

        r = t + 64;
 8014e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#else
#endif

    if (err == MP_OKAY) {
 8014e1c:	69fb      	ldr	r3, [r7, #28]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d120      	bne.n	8014e64 <sp_RsaPrivate_2048+0x122>
#if (!defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SMALL_STACK)) || defined(WOLFSSL_SP_NO_MALLOC)
        r = a;
        qi = dq = dp;
#endif
        sp_2048_from_bin(a, 64, in, inLen);
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	68fa      	ldr	r2, [r7, #12]
 8014e26:	2140      	movs	r1, #64	; 0x40
 8014e28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014e2a:	f7fe faf5 	bl	8013418 <sp_2048_from_bin>
        sp_2048_from_mp(p, 32, pm);
 8014e2e:	683a      	ldr	r2, [r7, #0]
 8014e30:	2120      	movs	r1, #32
 8014e32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014e34:	f7fe fb61 	bl	80134fa <sp_2048_from_mp>
        sp_2048_from_mp(q, 32, qm);
 8014e38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014e3a:	2120      	movs	r1, #32
 8014e3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014e3e:	f7fe fb5c 	bl	80134fa <sp_2048_from_mp>
        sp_2048_from_mp(dp, 32, dpm);
 8014e42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014e44:	2120      	movs	r1, #32
 8014e46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014e48:	f7fe fb57 	bl	80134fa <sp_2048_from_mp>

        err = sp_2048_mod_exp_32(tmpa, a, dp, 1024, p, 1);
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	9301      	str	r3, [sp, #4]
 8014e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e52:	9300      	str	r3, [sp, #0]
 8014e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e5e:	f7ff f9b5 	bl	80141cc <sp_2048_mod_exp_32>
 8014e62:	61f8      	str	r0, [r7, #28]
    }
    if (err == MP_OKAY) {
 8014e64:	69fb      	ldr	r3, [r7, #28]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d110      	bne.n	8014e8c <sp_RsaPrivate_2048+0x14a>
        sp_2048_from_mp(dq, 32, dqm);
 8014e6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e6c:	2120      	movs	r1, #32
 8014e6e:	6a38      	ldr	r0, [r7, #32]
 8014e70:	f7fe fb43 	bl	80134fa <sp_2048_from_mp>
        err = sp_2048_mod_exp_32(tmpb, a, dq, 1024, q, 1);
 8014e74:	2301      	movs	r3, #1
 8014e76:	9301      	str	r3, [sp, #4]
 8014e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e7a:	9300      	str	r3, [sp, #0]
 8014e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e80:	6a3a      	ldr	r2, [r7, #32]
 8014e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014e86:	f7ff f9a1 	bl	80141cc <sp_2048_mod_exp_32>
 8014e8a:	61f8      	str	r0, [r7, #28]
    }

    if (err == MP_OKAY) {
 8014e8c:	69fb      	ldr	r3, [r7, #28]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d124      	bne.n	8014edc <sp_RsaPrivate_2048+0x19a>
        c = sp_2048_sub_in_place_32(tmpa, tmpb);
 8014e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e96:	f7fe fd6a 	bl	801396e <sp_2048_sub_in_place_32>
 8014e9a:	61b8      	str	r0, [r7, #24]
        c += sp_2048_cond_add_32(tmpa, tmpa, p, c);
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ea4:	f7ff ff1f 	bl	8014ce6 <sp_2048_cond_add_32>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	4413      	add	r3, r2
 8014eae:	61bb      	str	r3, [r7, #24]
        sp_2048_cond_add_32(tmpa, tmpa, p, c);
 8014eb0:	69bb      	ldr	r3, [r7, #24]
 8014eb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014eb8:	f7ff ff15 	bl	8014ce6 <sp_2048_cond_add_32>

        sp_2048_from_mp(qi, 32, qim);
 8014ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014ebe:	2120      	movs	r1, #32
 8014ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ec2:	f7fe fb1a 	bl	80134fa <sp_2048_from_mp>
        sp_2048_mul_32(tmpa, tmpa, qi);
 8014ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ecc:	f7fe fd7d 	bl	80139ca <sp_2048_mul_32>
        err = sp_2048_mod_32(tmpa, tmpa, p);
 8014ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ed6:	f7ff f968 	bl	80141aa <sp_2048_mod_32>
 8014eda:	61f8      	str	r0, [r7, #28]
    }

    if (err == MP_OKAY) {
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d118      	bne.n	8014f14 <sp_RsaPrivate_2048+0x1d2>
        sp_2048_mul_32(tmpa, q, tmpa);
 8014ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ee4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ee8:	f7fe fd6f 	bl	80139ca <sp_2048_mul_32>
        XMEMSET(&tmpb[32], 0, sizeof(sp_digit) * 32);
 8014eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eee:	3380      	adds	r3, #128	; 0x80
 8014ef0:	2280      	movs	r2, #128	; 0x80
 8014ef2:	2100      	movs	r1, #0
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f006 fdb0 	bl	801ba5a <memset>
        sp_2048_add_64(r, tmpb, tmpa);
 8014efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014efc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f00:	f7fe fb91 	bl	8013626 <sp_2048_add_64>

        sp_2048_to_bin(r, out);
 8014f04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f08:	f7fe fb1c 	bl	8013544 <sp_2048_to_bin>
        *outLen = 256;
 8014f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014f12:	601a      	str	r2, [r3, #0]
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (t != NULL) {
 8014f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d00d      	beq.n	8014f36 <sp_RsaPrivate_2048+0x1f4>
        XMEMSET(t, 0, sizeof(sp_digit) * 32 * 11);
 8014f1a:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8014f1e:	2100      	movs	r1, #0
 8014f20:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014f22:	f006 fd9a 	bl	801ba5a <memset>
        XFREE(t, NULL, DYNAMIC_TYPE_RSA);
 8014f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f28:	617b      	str	r3, [r7, #20]
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d002      	beq.n	8014f36 <sp_RsaPrivate_2048+0x1f4>
 8014f30:	6978      	ldr	r0, [r7, #20]
 8014f32:	f7fc faaf 	bl	8011494 <wolfSSL_Free>
    XMEMSET(p,    0, sizeof(p));
    XMEMSET(q,    0, sizeof(q));
    XMEMSET(dp,   0, sizeof(dp));
#endif
#endif /* SP_RSA_PRIVATE_EXP_D || RSA_LOW_MEM */
    return err;
 8014f36:	69fb      	ldr	r3, [r7, #28]
}
 8014f38:	4618      	mov	r0, r3
 8014f3a:	3748      	adds	r7, #72	; 0x48
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}

08014f40 <sp_3072_from_bin>:
 * size  Maximum number of bytes to convert
 * a  Byte array.
 * n  Number of bytes in array to read.
 */
static void sp_3072_from_bin(sp_digit* r, int size, const byte* a, int n)
{
 8014f40:	b480      	push	{r7}
 8014f42:	b089      	sub	sp, #36	; 0x24
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	60f8      	str	r0, [r7, #12]
 8014f48:	60b9      	str	r1, [r7, #8]
 8014f4a:	607a      	str	r2, [r7, #4]
 8014f4c:	603b      	str	r3, [r7, #0]
    int i, j = 0;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	61bb      	str	r3, [r7, #24]
    word32 s = 0;
 8014f52:	2300      	movs	r3, #0
 8014f54:	617b      	str	r3, [r7, #20]

    r[0] = 0;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	601a      	str	r2, [r3, #0]
    for (i = n-1; i >= 0; i--) {
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	3b01      	subs	r3, #1
 8014f60:	61fb      	str	r3, [r7, #28]
 8014f62:	e042      	b.n	8014fea <sp_3072_from_bin+0xaa>
        r[j] |= (((sp_digit)a[i]) << s);
 8014f64:	69bb      	ldr	r3, [r7, #24]
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	68fa      	ldr	r2, [r7, #12]
 8014f6a:	4413      	add	r3, r2
 8014f6c:	6819      	ldr	r1, [r3, #0]
 8014f6e:	69fb      	ldr	r3, [r7, #28]
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	4413      	add	r3, r2
 8014f74:	781b      	ldrb	r3, [r3, #0]
 8014f76:	461a      	mov	r2, r3
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	409a      	lsls	r2, r3
 8014f7c:	69bb      	ldr	r3, [r7, #24]
 8014f7e:	009b      	lsls	r3, r3, #2
 8014f80:	68f8      	ldr	r0, [r7, #12]
 8014f82:	4403      	add	r3, r0
 8014f84:	430a      	orrs	r2, r1
 8014f86:	601a      	str	r2, [r3, #0]
        if (s >= 24U) {
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	2b17      	cmp	r3, #23
 8014f8c:	d927      	bls.n	8014fde <sp_3072_from_bin+0x9e>
            r[j] &= 0xffffffff;
 8014f8e:	69bb      	ldr	r3, [r7, #24]
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	68fa      	ldr	r2, [r7, #12]
 8014f94:	441a      	add	r2, r3
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	009b      	lsls	r3, r3, #2
 8014f9a:	68f9      	ldr	r1, [r7, #12]
 8014f9c:	440b      	add	r3, r1
 8014f9e:	6812      	ldr	r2, [r2, #0]
 8014fa0:	601a      	str	r2, [r3, #0]
            s = 32U - s;
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	f1c3 0320 	rsb	r3, r3, #32
 8014fa8:	617b      	str	r3, [r7, #20]
            if (j + 1 >= size) {
 8014faa:	69bb      	ldr	r3, [r7, #24]
 8014fac:	3301      	adds	r3, #1
 8014fae:	68ba      	ldr	r2, [r7, #8]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	dd1e      	ble.n	8014ff2 <sp_3072_from_bin+0xb2>
                break;
            }
            r[++j] = (sp_digit)a[i] >> s;
 8014fb4:	69fb      	ldr	r3, [r7, #28]
 8014fb6:	687a      	ldr	r2, [r7, #4]
 8014fb8:	4413      	add	r3, r2
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	4619      	mov	r1, r3
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	61bb      	str	r3, [r7, #24]
 8014fc4:	69bb      	ldr	r3, [r7, #24]
 8014fc6:	009b      	lsls	r3, r3, #2
 8014fc8:	68fa      	ldr	r2, [r7, #12]
 8014fca:	4413      	add	r3, r2
 8014fcc:	697a      	ldr	r2, [r7, #20]
 8014fce:	fa21 f202 	lsr.w	r2, r1, r2
 8014fd2:	601a      	str	r2, [r3, #0]
            s = 8U - s;
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	f1c3 0308 	rsb	r3, r3, #8
 8014fda:	617b      	str	r3, [r7, #20]
 8014fdc:	e002      	b.n	8014fe4 <sp_3072_from_bin+0xa4>
        }
        else {
            s += 8U;
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	3308      	adds	r3, #8
 8014fe2:	617b      	str	r3, [r7, #20]
    for (i = n-1; i >= 0; i--) {
 8014fe4:	69fb      	ldr	r3, [r7, #28]
 8014fe6:	3b01      	subs	r3, #1
 8014fe8:	61fb      	str	r3, [r7, #28]
 8014fea:	69fb      	ldr	r3, [r7, #28]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	dab9      	bge.n	8014f64 <sp_3072_from_bin+0x24>
 8014ff0:	e000      	b.n	8014ff4 <sp_3072_from_bin+0xb4>
                break;
 8014ff2:	bf00      	nop
        }
    }

    for (j++; j < size; j++) {
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	61bb      	str	r3, [r7, #24]
 8014ffa:	e008      	b.n	801500e <sp_3072_from_bin+0xce>
        r[j] = 0;
 8014ffc:	69bb      	ldr	r3, [r7, #24]
 8014ffe:	009b      	lsls	r3, r3, #2
 8015000:	68fa      	ldr	r2, [r7, #12]
 8015002:	4413      	add	r3, r2
 8015004:	2200      	movs	r2, #0
 8015006:	601a      	str	r2, [r3, #0]
    for (j++; j < size; j++) {
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	3301      	adds	r3, #1
 801500c:	61bb      	str	r3, [r7, #24]
 801500e:	69ba      	ldr	r2, [r7, #24]
 8015010:	68bb      	ldr	r3, [r7, #8]
 8015012:	429a      	cmp	r2, r3
 8015014:	dbf2      	blt.n	8014ffc <sp_3072_from_bin+0xbc>
    }
}
 8015016:	bf00      	nop
 8015018:	3724      	adds	r7, #36	; 0x24
 801501a:	46bd      	mov	sp, r7
 801501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015020:	4770      	bx	lr

08015022 <sp_3072_from_mp>:
 * r  A single precision integer.
 * size  Maximum number of bytes to convert
 * a  A multi-precision integer.
 */
static void sp_3072_from_mp(sp_digit* r, int size, const mp_int* a)
{
 8015022:	b580      	push	{r7, lr}
 8015024:	b086      	sub	sp, #24
 8015026:	af00      	add	r7, sp, #0
 8015028:	60f8      	str	r0, [r7, #12]
 801502a:	60b9      	str	r1, [r7, #8]
 801502c:	607a      	str	r2, [r7, #4]
#if DIGIT_BIT == 32
    int j;

    XMEMCPY(r, a->dp, sizeof(sp_digit) * a->used);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f103 0108 	add.w	r1, r3, #8
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	009b      	lsls	r3, r3, #2
 801503a:	461a      	mov	r2, r3
 801503c:	68f8      	ldr	r0, [r7, #12]
 801503e:	f006 fce8 	bl	801ba12 <memcpy>

    for (j = a->used; j < size; j++) {
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	617b      	str	r3, [r7, #20]
 8015048:	e008      	b.n	801505c <sp_3072_from_mp+0x3a>
        r[j] = 0;
 801504a:	697b      	ldr	r3, [r7, #20]
 801504c:	009b      	lsls	r3, r3, #2
 801504e:	68fa      	ldr	r2, [r7, #12]
 8015050:	4413      	add	r3, r2
 8015052:	2200      	movs	r2, #0
 8015054:	601a      	str	r2, [r3, #0]
    for (j = a->used; j < size; j++) {
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	3301      	adds	r3, #1
 801505a:	617b      	str	r3, [r7, #20]
 801505c:	697a      	ldr	r2, [r7, #20]
 801505e:	68bb      	ldr	r3, [r7, #8]
 8015060:	429a      	cmp	r2, r3
 8015062:	dbf2      	blt.n	801504a <sp_3072_from_mp+0x28>

    for (j++; j < size; j++) {
        r[j] = 0;
    }
#endif
}
 8015064:	bf00      	nop
 8015066:	3718      	adds	r7, #24
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}

0801506c <sp_3072_to_bin>:
 *
 * r  A single precision integer.
 * a  Byte array.
 */
static void sp_3072_to_bin(sp_digit* r, byte* a)
{
 801506c:	b480      	push	{r7}
 801506e:	b087      	sub	sp, #28
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	6039      	str	r1, [r7, #0]
    int i, j, s = 0, b;
 8015076:	2300      	movs	r3, #0
 8015078:	60fb      	str	r3, [r7, #12]

    j = 3072 / 8 - 1;
 801507a:	f240 137f 	movw	r3, #383	; 0x17f
 801507e:	613b      	str	r3, [r7, #16]
    a[j] = 0;
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	683a      	ldr	r2, [r7, #0]
 8015084:	4413      	add	r3, r2
 8015086:	2200      	movs	r2, #0
 8015088:	701a      	strb	r2, [r3, #0]
    for (i=0; i<96 && j>=0; i++) {
 801508a:	2300      	movs	r3, #0
 801508c:	617b      	str	r3, [r7, #20]
 801508e:	e051      	b.n	8015134 <sp_3072_to_bin+0xc8>
        b = 0;
 8015090:	2300      	movs	r3, #0
 8015092:	60bb      	str	r3, [r7, #8]
        /* lint allow cast of mismatch sp_digit and int */
        a[j--] |= (byte)(r[i] << s); /*lint !e9033*/
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	1e5a      	subs	r2, r3, #1
 8015098:	613a      	str	r2, [r7, #16]
 801509a:	4619      	mov	r1, r3
 801509c:	683a      	ldr	r2, [r7, #0]
 801509e:	440a      	add	r2, r1
 80150a0:	7811      	ldrb	r1, [r2, #0]
 80150a2:	697a      	ldr	r2, [r7, #20]
 80150a4:	0092      	lsls	r2, r2, #2
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	4402      	add	r2, r0
 80150aa:	6810      	ldr	r0, [r2, #0]
 80150ac:	68fa      	ldr	r2, [r7, #12]
 80150ae:	fa00 f202 	lsl.w	r2, r0, r2
 80150b2:	b2d2      	uxtb	r2, r2
 80150b4:	4618      	mov	r0, r3
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	4403      	add	r3, r0
 80150ba:	430a      	orrs	r2, r1
 80150bc:	b2d2      	uxtb	r2, r2
 80150be:	701a      	strb	r2, [r3, #0]
        b += 8 - s;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	f1c3 0308 	rsb	r3, r3, #8
 80150c6:	68ba      	ldr	r2, [r7, #8]
 80150c8:	4413      	add	r3, r2
 80150ca:	60bb      	str	r3, [r7, #8]
        if (j < 0) {
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	db37      	blt.n	8015142 <sp_3072_to_bin+0xd6>
            break;
        }
        while (b < 32) {
 80150d2:	e015      	b.n	8015100 <sp_3072_to_bin+0x94>
            a[j--] = (byte)(r[i] >> b);
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	009b      	lsls	r3, r3, #2
 80150d8:	687a      	ldr	r2, [r7, #4]
 80150da:	4413      	add	r3, r2
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	fa22 f103 	lsr.w	r1, r2, r3
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	1e5a      	subs	r2, r3, #1
 80150e8:	613a      	str	r2, [r7, #16]
 80150ea:	461a      	mov	r2, r3
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	4413      	add	r3, r2
 80150f0:	b2ca      	uxtb	r2, r1
 80150f2:	701a      	strb	r2, [r3, #0]
            b += 8;
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	3308      	adds	r3, #8
 80150f8:	60bb      	str	r3, [r7, #8]
            if (j < 0) {
 80150fa:	693b      	ldr	r3, [r7, #16]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	db03      	blt.n	8015108 <sp_3072_to_bin+0x9c>
        while (b < 32) {
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	2b1f      	cmp	r3, #31
 8015104:	dde6      	ble.n	80150d4 <sp_3072_to_bin+0x68>
 8015106:	e000      	b.n	801510a <sp_3072_to_bin+0x9e>
                break;
 8015108:	bf00      	nop
            }
        }
        s = 8 - (b - 32);
 801510a:	68bb      	ldr	r3, [r7, #8]
 801510c:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8015110:	60fb      	str	r3, [r7, #12]
        if (j >= 0) {
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	2b00      	cmp	r3, #0
 8015116:	db04      	blt.n	8015122 <sp_3072_to_bin+0xb6>
            a[j] = 0;
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	683a      	ldr	r2, [r7, #0]
 801511c:	4413      	add	r3, r2
 801511e:	2200      	movs	r2, #0
 8015120:	701a      	strb	r2, [r3, #0]
        }
        if (s != 0) {
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d002      	beq.n	801512e <sp_3072_to_bin+0xc2>
            j++;
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	3301      	adds	r3, #1
 801512c:	613b      	str	r3, [r7, #16]
    for (i=0; i<96 && j>=0; i++) {
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	3301      	adds	r3, #1
 8015132:	617b      	str	r3, [r7, #20]
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	2b5f      	cmp	r3, #95	; 0x5f
 8015138:	dc04      	bgt.n	8015144 <sp_3072_to_bin+0xd8>
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	2b00      	cmp	r3, #0
 801513e:	daa7      	bge.n	8015090 <sp_3072_to_bin+0x24>
        }
    }
}
 8015140:	e000      	b.n	8015144 <sp_3072_to_bin+0xd8>
            break;
 8015142:	bf00      	nop
}
 8015144:	bf00      	nop
 8015146:	371c      	adds	r7, #28
 8015148:	46bd      	mov	sp, r7
 801514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514e:	4770      	bx	lr

08015150 <sp_3072_add_96>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_3072_add_96(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8015150:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8015154:	b087      	sub	sp, #28
 8015156:	af00      	add	r7, sp, #0
 8015158:	60f8      	str	r0, [r7, #12]
 801515a:	60b9      	str	r1, [r7, #8]
 801515c:	607a      	str	r2, [r7, #4]
    sp_digit c = 0;
 801515e:	2300      	movs	r3, #0
 8015160:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8015162:	6978      	ldr	r0, [r7, #20]
 8015164:	68f9      	ldr	r1, [r7, #12]
 8015166:	68ba      	ldr	r2, [r7, #8]
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	4616      	mov	r6, r2
 801516c:	f04f 0800 	mov.w	r8, #0
 8015170:	f506 76c0 	add.w	r6, r6, #384	; 0x180
 8015174:	f1a8 0801 	sub.w	r8, r8, #1
 8015178:	eb10 0008 	adds.w	r0, r0, r8
 801517c:	6814      	ldr	r4, [r2, #0]
 801517e:	681d      	ldr	r5, [r3, #0]
 8015180:	416c      	adcs	r4, r5
 8015182:	600c      	str	r4, [r1, #0]
 8015184:	f04f 0000 	mov.w	r0, #0
 8015188:	eb40 0000 	adc.w	r0, r0, r0
 801518c:	f102 0204 	add.w	r2, r2, #4
 8015190:	f103 0304 	add.w	r3, r3, #4
 8015194:	f101 0104 	add.w	r1, r1, #4
 8015198:	42b2      	cmp	r2, r6
 801519a:	d1ed      	bne.n	8015178 <sp_3072_add_96+0x28>
 801519c:	6178      	str	r0, [r7, #20]
 801519e:	60f9      	str	r1, [r7, #12]
 80151a0:	60ba      	str	r2, [r7, #8]
 80151a2:	607b      	str	r3, [r7, #4]
        : [c] "+r" (c), [r] "+r" (r), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r4", "r5", "r6", "r8"
    );

    return c;
 80151a4:	697b      	ldr	r3, [r7, #20]
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	371c      	adds	r7, #28
 80151aa:	46bd      	mov	sp, r7
 80151ac:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80151b0:	4770      	bx	lr

080151b2 <sp_3072_sub_in_place_96>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_3072_sub_in_place_96(sp_digit* a,
        const sp_digit* b)
{
 80151b2:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80151b6:	b085      	sub	sp, #20
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	6039      	str	r1, [r7, #0]
    sp_digit c = 0;
 80151be:	2300      	movs	r3, #0
 80151c0:	60fb      	str	r3, [r7, #12]
    __asm__ __volatile__ (
 80151c2:	68f9      	ldr	r1, [r7, #12]
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	4608      	mov	r0, r1
 80151ca:	4611      	mov	r1, r2
 80151cc:	461a      	mov	r2, r3
 80151ce:	4688      	mov	r8, r1
 80151d0:	f508 78c0 	add.w	r8, r8, #384	; 0x180
 80151d4:	f04f 0500 	mov.w	r5, #0
 80151d8:	1a2d      	subs	r5, r5, r0
 80151da:	680b      	ldr	r3, [r1, #0]
 80151dc:	684c      	ldr	r4, [r1, #4]
 80151de:	6815      	ldr	r5, [r2, #0]
 80151e0:	6856      	ldr	r6, [r2, #4]
 80151e2:	41ab      	sbcs	r3, r5
 80151e4:	41b4      	sbcs	r4, r6
 80151e6:	600b      	str	r3, [r1, #0]
 80151e8:	604c      	str	r4, [r1, #4]
 80151ea:	eb60 0000 	sbc.w	r0, r0, r0
 80151ee:	f101 0108 	add.w	r1, r1, #8
 80151f2:	f102 0208 	add.w	r2, r2, #8
 80151f6:	4541      	cmp	r1, r8
 80151f8:	d1ec      	bne.n	80151d4 <sp_3072_sub_in_place_96+0x22>
 80151fa:	60f8      	str	r0, [r7, #12]
 80151fc:	6079      	str	r1, [r7, #4]
 80151fe:	603a      	str	r2, [r7, #0]
        : [c] "+r" (c), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );

    return c;
 8015200:	68fb      	ldr	r3, [r7, #12]
}
 8015202:	4618      	mov	r0, r3
 8015204:	3714      	adds	r7, #20
 8015206:	46bd      	mov	sp, r7
 8015208:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801520c:	4770      	bx	lr

0801520e <sp_3072_mul_96>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static void sp_3072_mul_96(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 801520e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015212:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8015216:	af00      	add	r7, sp, #0
 8015218:	f107 030c 	add.w	r3, r7, #12
 801521c:	6018      	str	r0, [r3, #0]
 801521e:	f107 0308 	add.w	r3, r7, #8
 8015222:	6019      	str	r1, [r3, #0]
 8015224:	1d3b      	adds	r3, r7, #4
 8015226:	601a      	str	r2, [r3, #0]
    sp_digit tmp_arr[96 * 2];
    sp_digit* tmp = tmp_arr;
 8015228:	f107 0314 	add.w	r3, r7, #20
 801522c:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
    __asm__ __volatile__ (
 8015230:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8015234:	f107 0308 	add.w	r3, r7, #8
 8015238:	6819      	ldr	r1, [r3, #0]
 801523a:	1d3b      	adds	r3, r7, #4
 801523c:	6818      	ldr	r0, [r3, #0]
 801523e:	f04f 0300 	mov.w	r3, #0
 8015242:	f04f 0400 	mov.w	r4, #0
 8015246:	4699      	mov	r9, r3
 8015248:	4694      	mov	ip, r2
 801524a:	468a      	mov	sl, r1
 801524c:	4683      	mov	fp, r0
 801524e:	f04f 0601 	mov.w	r6, #1
 8015252:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8015256:	f106 0680 	add.w	r6, r6, #128	; 0x80
 801525a:	4456      	add	r6, sl
 801525c:	46b6      	mov	lr, r6
 801525e:	f04f 0200 	mov.w	r2, #0
 8015262:	f04f 0500 	mov.w	r5, #0
 8015266:	f04f 0601 	mov.w	r6, #1
 801526a:	ea4f 2606 	mov.w	r6, r6, lsl #8
 801526e:	f106 067c 	add.w	r6, r6, #124	; 0x7c
 8015272:	4649      	mov	r1, r9
 8015274:	1b89      	subs	r1, r1, r6
 8015276:	eb66 0606 	sbc.w	r6, r6, r6
 801527a:	ea6f 0606 	mvn.w	r6, r6
 801527e:	ea01 0106 	and.w	r1, r1, r6
 8015282:	4648      	mov	r0, r9
 8015284:	eba0 0001 	sub.w	r0, r0, r1
 8015288:	4451      	add	r1, sl
 801528a:	4458      	add	r0, fp
 801528c:	680e      	ldr	r6, [r1, #0]
 801528e:	f8d0 8000 	ldr.w	r8, [r0]
 8015292:	fba6 6808 	umull	r6, r8, r6, r8
 8015296:	199b      	adds	r3, r3, r6
 8015298:	eb54 0408 	adcs.w	r4, r4, r8
 801529c:	eb45 0502 	adc.w	r5, r5, r2
 80152a0:	f101 0104 	add.w	r1, r1, #4
 80152a4:	f1a0 0004 	sub.w	r0, r0, #4
 80152a8:	4571      	cmp	r1, lr
 80152aa:	d003      	beq.n	80152b4 <sp_3072_mul_96+0xa6>
 80152ac:	464e      	mov	r6, r9
 80152ae:	4456      	add	r6, sl
 80152b0:	42b1      	cmp	r1, r6
 80152b2:	ddeb      	ble.n	801528c <sp_3072_mul_96+0x7e>
 80152b4:	4662      	mov	r2, ip
 80152b6:	46c8      	mov	r8, r9
 80152b8:	f842 3008 	str.w	r3, [r2, r8]
 80152bc:	4623      	mov	r3, r4
 80152be:	462c      	mov	r4, r5
 80152c0:	f108 0804 	add.w	r8, r8, #4
 80152c4:	46c1      	mov	r9, r8
 80152c6:	f04f 0602 	mov.w	r6, #2
 80152ca:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80152ce:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
 80152d2:	45b0      	cmp	r8, r6
 80152d4:	ddc3      	ble.n	801525e <sp_3072_mul_96+0x50>
 80152d6:	f842 3008 	str.w	r3, [r2, r8]
 80152da:	4651      	mov	r1, sl
 80152dc:	4658      	mov	r0, fp
        :
        : [r] "r" (tmp), [a] "r" (a), [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    XMEMCPY(r, tmp_arr, sizeof(tmp_arr));
 80152de:	f107 0114 	add.w	r1, r7, #20
 80152e2:	f107 030c 	add.w	r3, r7, #12
 80152e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80152ea:	6818      	ldr	r0, [r3, #0]
 80152ec:	f006 fb91 	bl	801ba12 <memcpy>
}
 80152f0:	bf00      	nop
 80152f2:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 80152f6:	46bd      	mov	sp, r7
 80152f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152fc <sp_3072_sqr_96>:
 *
 * r  A single precision integer.
 * a  A single precision integer.
 */
SP_NOINLINE static void sp_3072_sqr_96(sp_digit* r, const sp_digit* a)
{
 80152fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015300:	b082      	sub	sp, #8
 8015302:	af00      	add	r7, sp, #0
 8015304:	6078      	str	r0, [r7, #4]
 8015306:	6039      	str	r1, [r7, #0]
    __asm__ __volatile__ (
 8015308:	6879      	ldr	r1, [r7, #4]
 801530a:	6838      	ldr	r0, [r7, #0]
 801530c:	f04f 0300 	mov.w	r3, #0
 8015310:	f04f 0400 	mov.w	r4, #0
 8015314:	f04f 0500 	mov.w	r5, #0
 8015318:	4699      	mov	r9, r3
 801531a:	468c      	mov	ip, r1
 801531c:	f04f 0603 	mov.w	r6, #3
 8015320:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8015324:	f1c6 0600 	rsb	r6, r6, #0
 8015328:	44b5      	add	sp, r6
 801532a:	46eb      	mov	fp, sp
 801532c:	4682      	mov	sl, r0
 801532e:	f04f 0100 	mov.w	r1, #0
 8015332:	f04f 0601 	mov.w	r6, #1
 8015336:	ea4f 2606 	mov.w	r6, r6, lsl #8
 801533a:	f106 067c 	add.w	r6, r6, #124	; 0x7c
 801533e:	4648      	mov	r0, r9
 8015340:	1b80      	subs	r0, r0, r6
 8015342:	eb66 0606 	sbc.w	r6, r6, r6
 8015346:	ea6f 0606 	mvn.w	r6, r6
 801534a:	ea00 0006 	and.w	r0, r0, r6
 801534e:	464a      	mov	r2, r9
 8015350:	eba2 0200 	sub.w	r2, r2, r0
 8015354:	4450      	add	r0, sl
 8015356:	4452      	add	r2, sl
 8015358:	4282      	cmp	r2, r0
 801535a:	d00f      	beq.n	801537c <sp_3072_sqr_96+0x80>
 801535c:	6806      	ldr	r6, [r0, #0]
 801535e:	f8d2 8000 	ldr.w	r8, [r2]
 8015362:	fba6 6808 	umull	r6, r8, r6, r8
 8015366:	199b      	adds	r3, r3, r6
 8015368:	eb54 0408 	adcs.w	r4, r4, r8
 801536c:	eb45 0501 	adc.w	r5, r5, r1
 8015370:	199b      	adds	r3, r3, r6
 8015372:	eb54 0408 	adcs.w	r4, r4, r8
 8015376:	eb45 0501 	adc.w	r5, r5, r1
 801537a:	e007      	b.n	801538c <sp_3072_sqr_96+0x90>
 801537c:	6806      	ldr	r6, [r0, #0]
 801537e:	fba6 6806 	umull	r6, r8, r6, r6
 8015382:	199b      	adds	r3, r3, r6
 8015384:	eb54 0408 	adcs.w	r4, r4, r8
 8015388:	eb45 0501 	adc.w	r5, r5, r1
 801538c:	f100 0004 	add.w	r0, r0, #4
 8015390:	f1a2 0204 	sub.w	r2, r2, #4
 8015394:	f04f 0601 	mov.w	r6, #1
 8015398:	ea4f 2606 	mov.w	r6, r6, lsl #8
 801539c:	f106 0680 	add.w	r6, r6, #128	; 0x80
 80153a0:	4456      	add	r6, sl
 80153a2:	42b0      	cmp	r0, r6
 80153a4:	d005      	beq.n	80153b2 <sp_3072_sqr_96+0xb6>
 80153a6:	4290      	cmp	r0, r2
 80153a8:	dc03      	bgt.n	80153b2 <sp_3072_sqr_96+0xb6>
 80153aa:	46c8      	mov	r8, r9
 80153ac:	44d0      	add	r8, sl
 80153ae:	4540      	cmp	r0, r8
 80153b0:	ddd2      	ble.n	8015358 <sp_3072_sqr_96+0x5c>
 80153b2:	4659      	mov	r1, fp
 80153b4:	46c8      	mov	r8, r9
 80153b6:	f841 3008 	str.w	r3, [r1, r8]
 80153ba:	4623      	mov	r3, r4
 80153bc:	462c      	mov	r4, r5
 80153be:	f04f 0500 	mov.w	r5, #0
 80153c2:	f108 0804 	add.w	r8, r8, #4
 80153c6:	46c1      	mov	r9, r8
 80153c8:	f04f 0602 	mov.w	r6, #2
 80153cc:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80153d0:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
 80153d4:	45b0      	cmp	r8, r6
 80153d6:	ddaa      	ble.n	801532e <sp_3072_sqr_96+0x32>
 80153d8:	4650      	mov	r0, sl
 80153da:	f841 3008 	str.w	r3, [r1, r8]
 80153de:	4661      	mov	r1, ip
 80153e0:	4658      	mov	r0, fp
 80153e2:	f04f 0302 	mov.w	r3, #2
 80153e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80153ea:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 80153ee:	58c6      	ldr	r6, [r0, r3]
 80153f0:	50ce      	str	r6, [r1, r3]
 80153f2:	3b04      	subs	r3, #4
 80153f4:	dafb      	bge.n	80153ee <sp_3072_sqr_96+0xf2>
 80153f6:	f04f 0603 	mov.w	r6, #3
 80153fa:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80153fe:	44b5      	add	sp, r6
        "add	sp, sp, r6\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12"
    );
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801540a:	4770      	bx	lr

0801540c <sp_3072_mask_48>:
 * r  A single precision integer.
 * a  A single precision integer.
 * m  Mask to AND against each digit.
 */
static void sp_3072_mask_48(sp_digit* r, const sp_digit* a, sp_digit m)
{
 801540c:	b480      	push	{r7}
 801540e:	b087      	sub	sp, #28
 8015410:	af00      	add	r7, sp, #0
 8015412:	60f8      	str	r0, [r7, #12]
 8015414:	60b9      	str	r1, [r7, #8]
 8015416:	607a      	str	r2, [r7, #4]
    int i;

    for (i=0; i<48; i++) {
 8015418:	2300      	movs	r3, #0
 801541a:	617b      	str	r3, [r7, #20]
 801541c:	e00e      	b.n	801543c <sp_3072_mask_48+0x30>
        r[i] = a[i] & m;
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	009b      	lsls	r3, r3, #2
 8015422:	68ba      	ldr	r2, [r7, #8]
 8015424:	4413      	add	r3, r2
 8015426:	6819      	ldr	r1, [r3, #0]
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	009b      	lsls	r3, r3, #2
 801542c:	68fa      	ldr	r2, [r7, #12]
 801542e:	4413      	add	r3, r2
 8015430:	687a      	ldr	r2, [r7, #4]
 8015432:	400a      	ands	r2, r1
 8015434:	601a      	str	r2, [r3, #0]
    for (i=0; i<48; i++) {
 8015436:	697b      	ldr	r3, [r7, #20]
 8015438:	3301      	adds	r3, #1
 801543a:	617b      	str	r3, [r7, #20]
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	2b2f      	cmp	r3, #47	; 0x2f
 8015440:	dded      	ble.n	801541e <sp_3072_mask_48+0x12>
    }
}
 8015442:	bf00      	nop
 8015444:	371c      	adds	r7, #28
 8015446:	46bd      	mov	sp, r7
 8015448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544c:	4770      	bx	lr

0801544e <sp_3072_add_48>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_3072_add_48(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 801544e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8015452:	b087      	sub	sp, #28
 8015454:	af00      	add	r7, sp, #0
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	607a      	str	r2, [r7, #4]
    sp_digit c = 0;
 801545c:	2300      	movs	r3, #0
 801545e:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8015460:	6978      	ldr	r0, [r7, #20]
 8015462:	68f9      	ldr	r1, [r7, #12]
 8015464:	68ba      	ldr	r2, [r7, #8]
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	4616      	mov	r6, r2
 801546a:	f04f 0800 	mov.w	r8, #0
 801546e:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
 8015472:	f1a8 0801 	sub.w	r8, r8, #1
 8015476:	eb10 0008 	adds.w	r0, r0, r8
 801547a:	6814      	ldr	r4, [r2, #0]
 801547c:	681d      	ldr	r5, [r3, #0]
 801547e:	416c      	adcs	r4, r5
 8015480:	600c      	str	r4, [r1, #0]
 8015482:	f04f 0000 	mov.w	r0, #0
 8015486:	eb40 0000 	adc.w	r0, r0, r0
 801548a:	f102 0204 	add.w	r2, r2, #4
 801548e:	f103 0304 	add.w	r3, r3, #4
 8015492:	f101 0104 	add.w	r1, r1, #4
 8015496:	42b2      	cmp	r2, r6
 8015498:	d1ed      	bne.n	8015476 <sp_3072_add_48+0x28>
 801549a:	6178      	str	r0, [r7, #20]
 801549c:	60f9      	str	r1, [r7, #12]
 801549e:	60ba      	str	r2, [r7, #8]
 80154a0:	607b      	str	r3, [r7, #4]
        : [c] "+r" (c), [r] "+r" (r), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r4", "r5", "r6", "r8"
    );

    return c;
 80154a2:	697b      	ldr	r3, [r7, #20]
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	371c      	adds	r7, #28
 80154a8:	46bd      	mov	sp, r7
 80154aa:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80154ae:	4770      	bx	lr

080154b0 <sp_3072_sub_in_place_48>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_3072_sub_in_place_48(sp_digit* a,
        const sp_digit* b)
{
 80154b0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80154b4:	b085      	sub	sp, #20
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6078      	str	r0, [r7, #4]
 80154ba:	6039      	str	r1, [r7, #0]
    sp_digit c = 0;
 80154bc:	2300      	movs	r3, #0
 80154be:	60fb      	str	r3, [r7, #12]
    __asm__ __volatile__ (
 80154c0:	68f9      	ldr	r1, [r7, #12]
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	4608      	mov	r0, r1
 80154c8:	4611      	mov	r1, r2
 80154ca:	461a      	mov	r2, r3
 80154cc:	4688      	mov	r8, r1
 80154ce:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
 80154d2:	f04f 0500 	mov.w	r5, #0
 80154d6:	1a2d      	subs	r5, r5, r0
 80154d8:	680b      	ldr	r3, [r1, #0]
 80154da:	684c      	ldr	r4, [r1, #4]
 80154dc:	6815      	ldr	r5, [r2, #0]
 80154de:	6856      	ldr	r6, [r2, #4]
 80154e0:	41ab      	sbcs	r3, r5
 80154e2:	41b4      	sbcs	r4, r6
 80154e4:	600b      	str	r3, [r1, #0]
 80154e6:	604c      	str	r4, [r1, #4]
 80154e8:	eb60 0000 	sbc.w	r0, r0, r0
 80154ec:	f101 0108 	add.w	r1, r1, #8
 80154f0:	f102 0208 	add.w	r2, r2, #8
 80154f4:	4541      	cmp	r1, r8
 80154f6:	d1ec      	bne.n	80154d2 <sp_3072_sub_in_place_48+0x22>
 80154f8:	60f8      	str	r0, [r7, #12]
 80154fa:	6079      	str	r1, [r7, #4]
 80154fc:	603a      	str	r2, [r7, #0]
        : [c] "+r" (c), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );

    return c;
 80154fe:	68fb      	ldr	r3, [r7, #12]
}
 8015500:	4618      	mov	r0, r3
 8015502:	3714      	adds	r7, #20
 8015504:	46bd      	mov	sp, r7
 8015506:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801550a:	4770      	bx	lr

0801550c <sp_3072_mul_48>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static void sp_3072_mul_48(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 801550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015510:	b0e7      	sub	sp, #412	; 0x19c
 8015512:	af00      	add	r7, sp, #0
 8015514:	f107 030c 	add.w	r3, r7, #12
 8015518:	6018      	str	r0, [r3, #0]
 801551a:	f107 0308 	add.w	r3, r7, #8
 801551e:	6019      	str	r1, [r3, #0]
 8015520:	1d3b      	adds	r3, r7, #4
 8015522:	601a      	str	r2, [r3, #0]
    sp_digit tmp_arr[48 * 2];
    sp_digit* tmp = tmp_arr;
 8015524:	f107 0314 	add.w	r3, r7, #20
 8015528:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    __asm__ __volatile__ (
 801552c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8015530:	f107 0308 	add.w	r3, r7, #8
 8015534:	6819      	ldr	r1, [r3, #0]
 8015536:	1d3b      	adds	r3, r7, #4
 8015538:	6818      	ldr	r0, [r3, #0]
 801553a:	f04f 0300 	mov.w	r3, #0
 801553e:	f04f 0400 	mov.w	r4, #0
 8015542:	4699      	mov	r9, r3
 8015544:	4694      	mov	ip, r2
 8015546:	468a      	mov	sl, r1
 8015548:	4683      	mov	fp, r0
 801554a:	f04f 06c0 	mov.w	r6, #192	; 0xc0
 801554e:	4456      	add	r6, sl
 8015550:	46b6      	mov	lr, r6
 8015552:	f04f 0200 	mov.w	r2, #0
 8015556:	f04f 0500 	mov.w	r5, #0
 801555a:	f04f 06bc 	mov.w	r6, #188	; 0xbc
 801555e:	4649      	mov	r1, r9
 8015560:	1b89      	subs	r1, r1, r6
 8015562:	eb66 0606 	sbc.w	r6, r6, r6
 8015566:	ea6f 0606 	mvn.w	r6, r6
 801556a:	ea01 0106 	and.w	r1, r1, r6
 801556e:	4648      	mov	r0, r9
 8015570:	eba0 0001 	sub.w	r0, r0, r1
 8015574:	4451      	add	r1, sl
 8015576:	4458      	add	r0, fp
 8015578:	680e      	ldr	r6, [r1, #0]
 801557a:	f8d0 8000 	ldr.w	r8, [r0]
 801557e:	fba6 6808 	umull	r6, r8, r6, r8
 8015582:	199b      	adds	r3, r3, r6
 8015584:	eb54 0408 	adcs.w	r4, r4, r8
 8015588:	eb45 0502 	adc.w	r5, r5, r2
 801558c:	f101 0104 	add.w	r1, r1, #4
 8015590:	f1a0 0004 	sub.w	r0, r0, #4
 8015594:	4571      	cmp	r1, lr
 8015596:	d003      	beq.n	80155a0 <sp_3072_mul_48+0x94>
 8015598:	464e      	mov	r6, r9
 801559a:	4456      	add	r6, sl
 801559c:	42b1      	cmp	r1, r6
 801559e:	ddeb      	ble.n	8015578 <sp_3072_mul_48+0x6c>
 80155a0:	4662      	mov	r2, ip
 80155a2:	46c8      	mov	r8, r9
 80155a4:	f842 3008 	str.w	r3, [r2, r8]
 80155a8:	4623      	mov	r3, r4
 80155aa:	462c      	mov	r4, r5
 80155ac:	f108 0804 	add.w	r8, r8, #4
 80155b0:	46c1      	mov	r9, r8
 80155b2:	f04f 0601 	mov.w	r6, #1
 80155b6:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80155ba:	f106 0678 	add.w	r6, r6, #120	; 0x78
 80155be:	45b0      	cmp	r8, r6
 80155c0:	ddc7      	ble.n	8015552 <sp_3072_mul_48+0x46>
 80155c2:	f842 3008 	str.w	r3, [r2, r8]
 80155c6:	4651      	mov	r1, sl
 80155c8:	4658      	mov	r0, fp
        :
        : [r] "r" (tmp), [a] "r" (a), [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    XMEMCPY(r, tmp_arr, sizeof(tmp_arr));
 80155ca:	f107 0114 	add.w	r1, r7, #20
 80155ce:	f107 030c 	add.w	r3, r7, #12
 80155d2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80155d6:	6818      	ldr	r0, [r3, #0]
 80155d8:	f006 fa1b 	bl	801ba12 <memcpy>
}
 80155dc:	bf00      	nop
 80155de:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80155e2:	46bd      	mov	sp, r7
 80155e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080155e8 <sp_3072_sqr_48>:
 *
 * r  A single precision integer.
 * a  A single precision integer.
 */
SP_NOINLINE static void sp_3072_sqr_48(sp_digit* r, const sp_digit* a)
{
 80155e8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80155ec:	b082      	sub	sp, #8
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	6078      	str	r0, [r7, #4]
 80155f2:	6039      	str	r1, [r7, #0]
    __asm__ __volatile__ (
 80155f4:	6879      	ldr	r1, [r7, #4]
 80155f6:	6838      	ldr	r0, [r7, #0]
 80155f8:	f04f 0300 	mov.w	r3, #0
 80155fc:	f04f 0400 	mov.w	r4, #0
 8015600:	f04f 0500 	mov.w	r5, #0
 8015604:	4699      	mov	r9, r3
 8015606:	468c      	mov	ip, r1
 8015608:	f04f 0601 	mov.w	r6, #1
 801560c:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8015610:	f106 0680 	add.w	r6, r6, #128	; 0x80
 8015614:	f1c6 0600 	rsb	r6, r6, #0
 8015618:	44b5      	add	sp, r6
 801561a:	46eb      	mov	fp, sp
 801561c:	4682      	mov	sl, r0
 801561e:	f04f 0100 	mov.w	r1, #0
 8015622:	f04f 06bc 	mov.w	r6, #188	; 0xbc
 8015626:	4648      	mov	r0, r9
 8015628:	1b80      	subs	r0, r0, r6
 801562a:	eb66 0606 	sbc.w	r6, r6, r6
 801562e:	ea6f 0606 	mvn.w	r6, r6
 8015632:	ea00 0006 	and.w	r0, r0, r6
 8015636:	464a      	mov	r2, r9
 8015638:	eba2 0200 	sub.w	r2, r2, r0
 801563c:	4450      	add	r0, sl
 801563e:	4452      	add	r2, sl
 8015640:	4282      	cmp	r2, r0
 8015642:	d00f      	beq.n	8015664 <sp_3072_sqr_48+0x7c>
 8015644:	6806      	ldr	r6, [r0, #0]
 8015646:	f8d2 8000 	ldr.w	r8, [r2]
 801564a:	fba6 6808 	umull	r6, r8, r6, r8
 801564e:	199b      	adds	r3, r3, r6
 8015650:	eb54 0408 	adcs.w	r4, r4, r8
 8015654:	eb45 0501 	adc.w	r5, r5, r1
 8015658:	199b      	adds	r3, r3, r6
 801565a:	eb54 0408 	adcs.w	r4, r4, r8
 801565e:	eb45 0501 	adc.w	r5, r5, r1
 8015662:	e007      	b.n	8015674 <sp_3072_sqr_48+0x8c>
 8015664:	6806      	ldr	r6, [r0, #0]
 8015666:	fba6 6806 	umull	r6, r8, r6, r6
 801566a:	199b      	adds	r3, r3, r6
 801566c:	eb54 0408 	adcs.w	r4, r4, r8
 8015670:	eb45 0501 	adc.w	r5, r5, r1
 8015674:	f100 0004 	add.w	r0, r0, #4
 8015678:	f1a2 0204 	sub.w	r2, r2, #4
 801567c:	f04f 06c0 	mov.w	r6, #192	; 0xc0
 8015680:	4456      	add	r6, sl
 8015682:	42b0      	cmp	r0, r6
 8015684:	d005      	beq.n	8015692 <sp_3072_sqr_48+0xaa>
 8015686:	4290      	cmp	r0, r2
 8015688:	dc03      	bgt.n	8015692 <sp_3072_sqr_48+0xaa>
 801568a:	46c8      	mov	r8, r9
 801568c:	44d0      	add	r8, sl
 801568e:	4540      	cmp	r0, r8
 8015690:	ddd6      	ble.n	8015640 <sp_3072_sqr_48+0x58>
 8015692:	4659      	mov	r1, fp
 8015694:	46c8      	mov	r8, r9
 8015696:	f841 3008 	str.w	r3, [r1, r8]
 801569a:	4623      	mov	r3, r4
 801569c:	462c      	mov	r4, r5
 801569e:	f04f 0500 	mov.w	r5, #0
 80156a2:	f108 0804 	add.w	r8, r8, #4
 80156a6:	46c1      	mov	r9, r8
 80156a8:	f04f 0601 	mov.w	r6, #1
 80156ac:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80156b0:	f106 0678 	add.w	r6, r6, #120	; 0x78
 80156b4:	45b0      	cmp	r8, r6
 80156b6:	ddb2      	ble.n	801561e <sp_3072_sqr_48+0x36>
 80156b8:	4650      	mov	r0, sl
 80156ba:	f841 3008 	str.w	r3, [r1, r8]
 80156be:	4661      	mov	r1, ip
 80156c0:	4658      	mov	r0, fp
 80156c2:	f04f 0301 	mov.w	r3, #1
 80156c6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80156ca:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80156ce:	58c6      	ldr	r6, [r0, r3]
 80156d0:	50ce      	str	r6, [r1, r3]
 80156d2:	3b04      	subs	r3, #4
 80156d4:	dafb      	bge.n	80156ce <sp_3072_sqr_48+0xe6>
 80156d6:	f04f 0601 	mov.w	r6, #1
 80156da:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80156de:	f106 0680 	add.w	r6, r6, #128	; 0x80
 80156e2:	44b5      	add	sp, r6
        "add	sp, sp, r6\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12"
    );
}
 80156e4:	bf00      	nop
 80156e6:	3708      	adds	r7, #8
 80156e8:	46bd      	mov	sp, r7
 80156ea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80156ee:	4770      	bx	lr

080156f0 <sp_3072_mont_setup>:
 *
 * a    A single precision number.
 * rho  Bottom word of inverse.
 */
static void sp_3072_mont_setup(const sp_digit* a, sp_digit* rho)
{
 80156f0:	b480      	push	{r7}
 80156f2:	b085      	sub	sp, #20
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	6039      	str	r1, [r7, #0]
    sp_digit x, b;

    b = a[0];
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	60fb      	str	r3, [r7, #12]
    x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	3302      	adds	r3, #2
 8015704:	005b      	lsls	r3, r3, #1
 8015706:	f003 0308 	and.w	r3, r3, #8
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	4413      	add	r3, r2
 801570e:	60bb      	str	r3, [r7, #8]
    x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	68ba      	ldr	r2, [r7, #8]
 8015714:	fb02 f303 	mul.w	r3, r2, r3
 8015718:	f1c3 0202 	rsb	r2, r3, #2
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	fb02 f303 	mul.w	r3, r2, r3
 8015722:	60bb      	str	r3, [r7, #8]
    x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	68ba      	ldr	r2, [r7, #8]
 8015728:	fb02 f303 	mul.w	r3, r2, r3
 801572c:	f1c3 0202 	rsb	r2, r3, #2
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	fb02 f303 	mul.w	r3, r2, r3
 8015736:	60bb      	str	r3, [r7, #8]
    x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	68ba      	ldr	r2, [r7, #8]
 801573c:	fb02 f303 	mul.w	r3, r2, r3
 8015740:	f1c3 0202 	rsb	r2, r3, #2
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	fb02 f303 	mul.w	r3, r2, r3
 801574a:	60bb      	str	r3, [r7, #8]

    /* rho = -1/m mod b */
    *rho = -x;
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	425a      	negs	r2, r3
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	601a      	str	r2, [r3, #0]
}
 8015754:	bf00      	nop
 8015756:	3714      	adds	r7, #20
 8015758:	46bd      	mov	sp, r7
 801575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575e:	4770      	bx	lr

08015760 <sp_3072_mul_d_96>:
 * a  A single precision integer.
 * b  A single precision digit.
 */
SP_NOINLINE static void sp_3072_mul_d_96(sp_digit* r, const sp_digit* a,
        sp_digit b)
{
 8015760:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8015764:	b084      	sub	sp, #16
 8015766:	af00      	add	r7, sp, #0
 8015768:	60f8      	str	r0, [r7, #12]
 801576a:	60b9      	str	r1, [r7, #8]
 801576c:	607a      	str	r2, [r7, #4]
    __asm__ __volatile__ (
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	68fa      	ldr	r2, [r7, #12]
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	4611      	mov	r1, r2
 8015776:	461a      	mov	r2, r3
 8015778:	f502 79c0 	add.w	r9, r2, #384	; 0x180
 801577c:	f852 6b04 	ldr.w	r6, [r2], #4
 8015780:	fba6 5300 	umull	r5, r3, r6, r0
 8015784:	f04f 0400 	mov.w	r4, #0
 8015788:	f841 5b04 	str.w	r5, [r1], #4
 801578c:	f04f 0500 	mov.w	r5, #0
 8015790:	f852 6b04 	ldr.w	r6, [r2], #4
 8015794:	fba6 6800 	umull	r6, r8, r6, r0
 8015798:	199b      	adds	r3, r3, r6
 801579a:	eb54 0408 	adcs.w	r4, r4, r8
 801579e:	f145 0500 	adc.w	r5, r5, #0
 80157a2:	f841 3b04 	str.w	r3, [r1], #4
 80157a6:	4623      	mov	r3, r4
 80157a8:	462c      	mov	r4, r5
 80157aa:	454a      	cmp	r2, r9
 80157ac:	dbee      	blt.n	801578c <sp_3072_mul_d_96+0x2c>
 80157ae:	600b      	str	r3, [r1, #0]
 80157b0:	60f9      	str	r1, [r7, #12]
 80157b2:	60ba      	str	r2, [r7, #8]
        "str	r3, [%[r]]\n\t"
        : [r] "+r" (r), [a] "+r" (a)
        : [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9"
    );
}
 80157b4:	bf00      	nop
 80157b6:	3710      	adds	r7, #16
 80157b8:	46bd      	mov	sp, r7
 80157ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80157be:	4770      	bx	lr

080157c0 <sp_3072_mont_norm_48>:
 *
 * r  A single precision number.
 * m  A single precision number.
 */
static void sp_3072_mont_norm_48(sp_digit* r, const sp_digit* m)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	6039      	str	r1, [r7, #0]
    XMEMSET(r, 0, sizeof(sp_digit) * 48);
 80157ca:	22c0      	movs	r2, #192	; 0xc0
 80157cc:	2100      	movs	r1, #0
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f006 f943 	bl	801ba5a <memset>

    /* r = 2^n mod m */
    sp_3072_sub_in_place_48(r, m);
 80157d4:	6839      	ldr	r1, [r7, #0]
 80157d6:	6878      	ldr	r0, [r7, #4]
 80157d8:	f7ff fe6a 	bl	80154b0 <sp_3072_sub_in_place_48>
}
 80157dc:	bf00      	nop
 80157de:	3708      	adds	r7, #8
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <sp_3072_cond_sub_48>:
 * b  A single precision number to subtract.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_3072_cond_sub_48(sp_digit* r, const sp_digit* a,
        const sp_digit* b, sp_digit m)
{
 80157e4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80157e8:	b086      	sub	sp, #24
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	60f8      	str	r0, [r7, #12]
 80157ee:	60b9      	str	r1, [r7, #8]
 80157f0:	607a      	str	r2, [r7, #4]
 80157f2:	603b      	str	r3, [r7, #0]
    sp_digit c = 0;
 80157f4:	2300      	movs	r3, #0
 80157f6:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 80157f8:	68fa      	ldr	r2, [r7, #12]
 80157fa:	68b9      	ldr	r1, [r7, #8]
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	683c      	ldr	r4, [r7, #0]
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	f04f 05c0 	mov.w	r5, #192	; 0xc0
 8015806:	46a9      	mov	r9, r5
 8015808:	f04f 0800 	mov.w	r8, #0
 801580c:	f850 6008 	ldr.w	r6, [r0, r8]
 8015810:	ea06 0604 	and.w	r6, r6, r4
 8015814:	f04f 0500 	mov.w	r5, #0
 8015818:	1aed      	subs	r5, r5, r3
 801581a:	f851 5008 	ldr.w	r5, [r1, r8]
 801581e:	41b5      	sbcs	r5, r6
 8015820:	419b      	sbcs	r3, r3
 8015822:	f842 5008 	str.w	r5, [r2, r8]
 8015826:	f108 0804 	add.w	r8, r8, #4
 801582a:	45c8      	cmp	r8, r9
 801582c:	dbee      	blt.n	801580c <sp_3072_cond_sub_48+0x28>
 801582e:	617b      	str	r3, [r7, #20]
        : [c] "+r" (c)
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
 8015830:	697b      	ldr	r3, [r7, #20]
}
 8015832:	4618      	mov	r0, r3
 8015834:	3718      	adds	r7, #24
 8015836:	46bd      	mov	sp, r7
 8015838:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801583c:	4770      	bx	lr

0801583e <sp_3072_mont_reduce_48>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_3072_mont_reduce_48(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 801583e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015842:	b087      	sub	sp, #28
 8015844:	af00      	add	r7, sp, #0
 8015846:	60f8      	str	r0, [r7, #12]
 8015848:	60b9      	str	r1, [r7, #8]
 801584a:	607a      	str	r2, [r7, #4]
    sp_digit ca = 0;
 801584c:	2300      	movs	r3, #0
 801584e:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8015850:	68b9      	ldr	r1, [r7, #8]
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	697a      	ldr	r2, [r7, #20]
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	4681      	mov	r9, r0
 801585a:	468c      	mov	ip, r1
 801585c:	469a      	mov	sl, r3
 801585e:	f04f 0400 	mov.w	r4, #0
 8015862:	f10a 0bc0 	add.w	fp, sl, #192	; 0xc0
 8015866:	4648      	mov	r0, r9
 8015868:	f8da 3000 	ldr.w	r3, [sl]
 801586c:	fb00 f003 	mul.w	r0, r0, r3
 8015870:	4661      	mov	r1, ip
 8015872:	f10a 0eb8 	add.w	lr, sl, #184	; 0xb8
 8015876:	f8da 3000 	ldr.w	r3, [sl]
 801587a:	f04f 0500 	mov.w	r5, #0
 801587e:	f851 8b04 	ldr.w	r8, [r1], #4
 8015882:	fba0 6808 	umull	r6, r8, r0, r8
 8015886:	199b      	adds	r3, r3, r6
 8015888:	eb45 0508 	adc.w	r5, r5, r8
 801588c:	18e4      	adds	r4, r4, r3
 801588e:	f145 0500 	adc.w	r5, r5, #0
 8015892:	f84a 4b04 	str.w	r4, [sl], #4
 8015896:	f8da 3000 	ldr.w	r3, [sl]
 801589a:	f04f 0400 	mov.w	r4, #0
 801589e:	f851 8b04 	ldr.w	r8, [r1], #4
 80158a2:	fba0 6808 	umull	r6, r8, r0, r8
 80158a6:	199b      	adds	r3, r3, r6
 80158a8:	eb44 0408 	adc.w	r4, r4, r8
 80158ac:	18ed      	adds	r5, r5, r3
 80158ae:	f144 0400 	adc.w	r4, r4, #0
 80158b2:	f84a 5b04 	str.w	r5, [sl], #4
 80158b6:	45f2      	cmp	sl, lr
 80158b8:	dbdd      	blt.n	8015876 <sp_3072_mont_reduce_48+0x38>
 80158ba:	f8da 3000 	ldr.w	r3, [sl]
 80158be:	f04f 0500 	mov.w	r5, #0
 80158c2:	f851 8b04 	ldr.w	r8, [r1], #4
 80158c6:	fba0 6808 	umull	r6, r8, r0, r8
 80158ca:	199b      	adds	r3, r3, r6
 80158cc:	eb45 0508 	adc.w	r5, r5, r8
 80158d0:	18e4      	adds	r4, r4, r3
 80158d2:	f145 0500 	adc.w	r5, r5, #0
 80158d6:	f84a 4b04 	str.w	r4, [sl], #4
 80158da:	4614      	mov	r4, r2
 80158dc:	f04f 0200 	mov.w	r2, #0
 80158e0:	f8d1 8000 	ldr.w	r8, [r1]
 80158e4:	fba0 6808 	umull	r6, r8, r0, r8
 80158e8:	19ad      	adds	r5, r5, r6
 80158ea:	eb54 0408 	adcs.w	r4, r4, r8
 80158ee:	f142 0200 	adc.w	r2, r2, #0
 80158f2:	f8da 6000 	ldr.w	r6, [sl]
 80158f6:	f8da 8004 	ldr.w	r8, [sl, #4]
 80158fa:	1976      	adds	r6, r6, r5
 80158fc:	eb58 0804 	adcs.w	r8, r8, r4
 8015900:	f142 0200 	adc.w	r2, r2, #0
 8015904:	f8ca 6000 	str.w	r6, [sl]
 8015908:	f8ca 8004 	str.w	r8, [sl, #4]
 801590c:	f1aa 0ab8 	sub.w	sl, sl, #184	; 0xb8
 8015910:	45da      	cmp	sl, fp
 8015912:	dba8      	blt.n	8015866 <sp_3072_mont_reduce_48+0x28>
 8015914:	4653      	mov	r3, sl
 8015916:	4661      	mov	r1, ip
 8015918:	617a      	str	r2, [r7, #20]
 801591a:	60fb      	str	r3, [r7, #12]
        : [ca] "+r" (ca), [a] "+r" (a)
        : [m] "r" (m), [mp] "r" (mp)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    sp_3072_cond_sub_48(a - 48, a, m, (sp_digit)0 - ca);
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	f1a3 00c0 	sub.w	r0, r3, #192	; 0xc0
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	425b      	negs	r3, r3
 8015926:	68ba      	ldr	r2, [r7, #8]
 8015928:	68f9      	ldr	r1, [r7, #12]
 801592a:	f7ff ff5b 	bl	80157e4 <sp_3072_cond_sub_48>
}
 801592e:	bf00      	nop
 8015930:	371c      	adds	r7, #28
 8015932:	46bd      	mov	sp, r7
 8015934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015938 <sp_3072_mont_mul_48>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
static void sp_3072_mont_mul_48(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m, sp_digit mp)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b084      	sub	sp, #16
 801593c:	af00      	add	r7, sp, #0
 801593e:	60f8      	str	r0, [r7, #12]
 8015940:	60b9      	str	r1, [r7, #8]
 8015942:	607a      	str	r2, [r7, #4]
 8015944:	603b      	str	r3, [r7, #0]
    sp_3072_mul_48(r, a, b);
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	68b9      	ldr	r1, [r7, #8]
 801594a:	68f8      	ldr	r0, [r7, #12]
 801594c:	f7ff fdde 	bl	801550c <sp_3072_mul_48>
    sp_3072_mont_reduce_48(r, m, mp);
 8015950:	69ba      	ldr	r2, [r7, #24]
 8015952:	6839      	ldr	r1, [r7, #0]
 8015954:	68f8      	ldr	r0, [r7, #12]
 8015956:	f7ff ff72 	bl	801583e <sp_3072_mont_reduce_48>
}
 801595a:	bf00      	nop
 801595c:	3710      	adds	r7, #16
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}

08015962 <sp_3072_mont_sqr_48>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
static void sp_3072_mont_sqr_48(sp_digit* r, const sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8015962:	b580      	push	{r7, lr}
 8015964:	b084      	sub	sp, #16
 8015966:	af00      	add	r7, sp, #0
 8015968:	60f8      	str	r0, [r7, #12]
 801596a:	60b9      	str	r1, [r7, #8]
 801596c:	607a      	str	r2, [r7, #4]
 801596e:	603b      	str	r3, [r7, #0]
    sp_3072_sqr_48(r, a);
 8015970:	68b9      	ldr	r1, [r7, #8]
 8015972:	68f8      	ldr	r0, [r7, #12]
 8015974:	f7ff fe38 	bl	80155e8 <sp_3072_sqr_48>
    sp_3072_mont_reduce_48(r, m, mp);
 8015978:	683a      	ldr	r2, [r7, #0]
 801597a:	6879      	ldr	r1, [r7, #4]
 801597c:	68f8      	ldr	r0, [r7, #12]
 801597e:	f7ff ff5e 	bl	801583e <sp_3072_mont_reduce_48>
}
 8015982:	bf00      	nop
 8015984:	3710      	adds	r7, #16
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}

0801598a <sp_3072_mul_d_48>:
 * a  A single precision integer.
 * b  A single precision digit.
 */
SP_NOINLINE static void sp_3072_mul_d_48(sp_digit* r, const sp_digit* a,
        sp_digit b)
{
 801598a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	60f8      	str	r0, [r7, #12]
 8015994:	60b9      	str	r1, [r7, #8]
 8015996:	607a      	str	r2, [r7, #4]
    __asm__ __volatile__ (
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	68fa      	ldr	r2, [r7, #12]
 801599c:	68bb      	ldr	r3, [r7, #8]
 801599e:	4611      	mov	r1, r2
 80159a0:	461a      	mov	r2, r3
 80159a2:	f102 09c0 	add.w	r9, r2, #192	; 0xc0
 80159a6:	f852 6b04 	ldr.w	r6, [r2], #4
 80159aa:	fba6 5300 	umull	r5, r3, r6, r0
 80159ae:	f04f 0400 	mov.w	r4, #0
 80159b2:	f841 5b04 	str.w	r5, [r1], #4
 80159b6:	f04f 0500 	mov.w	r5, #0
 80159ba:	f852 6b04 	ldr.w	r6, [r2], #4
 80159be:	fba6 6800 	umull	r6, r8, r6, r0
 80159c2:	199b      	adds	r3, r3, r6
 80159c4:	eb54 0408 	adcs.w	r4, r4, r8
 80159c8:	f145 0500 	adc.w	r5, r5, #0
 80159cc:	f841 3b04 	str.w	r3, [r1], #4
 80159d0:	4623      	mov	r3, r4
 80159d2:	462c      	mov	r4, r5
 80159d4:	454a      	cmp	r2, r9
 80159d6:	dbee      	blt.n	80159b6 <sp_3072_mul_d_48+0x2c>
 80159d8:	600b      	str	r3, [r1, #0]
 80159da:	60f9      	str	r1, [r7, #12]
 80159dc:	60ba      	str	r2, [r7, #8]
        "str	r3, [%[r]]\n\t"
        : [r] "+r" (r), [a] "+r" (a)
        : [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9"
    );
}
 80159de:	bf00      	nop
 80159e0:	3710      	adds	r7, #16
 80159e2:	46bd      	mov	sp, r7
 80159e4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80159e8:	4770      	bx	lr

080159ea <div_3072_word_48>:
 *
 * Note that this is an approximate div. It may give an answer 1 larger.
 */
SP_NOINLINE static sp_digit div_3072_word_48(sp_digit d1, sp_digit d0,
        sp_digit div)
{
 80159ea:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80159ee:	b087      	sub	sp, #28
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	60f8      	str	r0, [r7, #12]
 80159f4:	60b9      	str	r1, [r7, #8]
 80159f6:	607a      	str	r2, [r7, #4]
    sp_digit r = 0;
 80159f8:	2300      	movs	r3, #0
 80159fa:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 80159fc:	68fa      	ldr	r2, [r7, #12]
 80159fe:	68b9      	ldr	r1, [r7, #8]
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	ea4f 4610 	mov.w	r6, r0, lsr #16
 8015a08:	f106 0601 	add.w	r6, r6, #1
 8015a0c:	fbb2 f4f6 	udiv	r4, r2, r6
 8015a10:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8015a14:	fba0 4508 	umull	r4, r5, r0, r8
 8015a18:	1b09      	subs	r1, r1, r4
 8015a1a:	eb62 0205 	sbc.w	r2, r2, r5
 8015a1e:	fbb2 f5f6 	udiv	r5, r2, r6
 8015a22:	ea4f 4405 	mov.w	r4, r5, lsl #16
 8015a26:	44a0      	add	r8, r4
 8015a28:	fba0 4504 	umull	r4, r5, r0, r4
 8015a2c:	1b09      	subs	r1, r1, r4
 8015a2e:	eb62 0205 	sbc.w	r2, r2, r5
 8015a32:	ea4f 4402 	mov.w	r4, r2, lsl #16
 8015a36:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8015a3a:	fbb4 f4f6 	udiv	r4, r4, r6
 8015a3e:	44a0      	add	r8, r4
 8015a40:	fba0 4504 	umull	r4, r5, r0, r4
 8015a44:	1b09      	subs	r1, r1, r4
 8015a46:	eb62 0205 	sbc.w	r2, r2, r5
 8015a4a:	ea4f 4402 	mov.w	r4, r2, lsl #16
 8015a4e:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8015a52:	fbb4 f4f6 	udiv	r4, r4, r6
 8015a56:	44a0      	add	r8, r4
 8015a58:	fba0 4504 	umull	r4, r5, r0, r4
 8015a5c:	1b09      	subs	r1, r1, r4
 8015a5e:	eb62 0205 	sbc.w	r2, r2, r5
 8015a62:	fbb1 f4f0 	udiv	r4, r1, r0
 8015a66:	44a0      	add	r8, r4
 8015a68:	4643      	mov	r3, r8
 8015a6a:	617b      	str	r3, [r7, #20]
        "mov	%[r], r8\n\t"
        : [r] "+r" (r)
        : [d1] "r" (d1), [d0] "r" (d0), [div] "r" (div)
        : "r4", "r5", "r6", "r8"
    );
    return r;
 8015a6c:	697b      	ldr	r3, [r7, #20]
}
 8015a6e:	4618      	mov	r0, r3
 8015a70:	371c      	adds	r7, #28
 8015a72:	46bd      	mov	sp, r7
 8015a74:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8015a78:	4770      	bx	lr

08015a7a <sp_3072_cmp_48>:
 * b  A single precision integer.
 * return -ve, 0 or +ve if a is less than, equal to or greater than b
 * respectively.
 */
SP_NOINLINE static int32_t sp_3072_cmp_48(const sp_digit* a, const sp_digit* b)
{
 8015a7a:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8015a7e:	b085      	sub	sp, #20
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	6039      	str	r1, [r7, #0]
    sp_digit r = 0;
 8015a86:	2300      	movs	r3, #0
 8015a88:	60fb      	str	r3, [r7, #12]


    __asm__ __volatile__ (
 8015a8a:	6879      	ldr	r1, [r7, #4]
 8015a8c:	6838      	ldr	r0, [r7, #0]
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	461a      	mov	r2, r3
 8015a92:	f04f 0300 	mov.w	r3, #0
 8015a96:	ea6f 0303 	mvn.w	r3, r3
 8015a9a:	f04f 06bc 	mov.w	r6, #188	; 0xbc
 8015a9e:	f851 8006 	ldr.w	r8, [r1, r6]
 8015aa2:	5985      	ldr	r5, [r0, r6]
 8015aa4:	ea08 0803 	and.w	r8, r8, r3
 8015aa8:	ea05 0503 	and.w	r5, r5, r3
 8015aac:	4644      	mov	r4, r8
 8015aae:	ebb8 0805 	subs.w	r8, r8, r5
 8015ab2:	eb68 0808 	sbc.w	r8, r8, r8
 8015ab6:	4442      	add	r2, r8
 8015ab8:	ea6f 0808 	mvn.w	r8, r8
 8015abc:	ea03 0308 	and.w	r3, r3, r8
 8015ac0:	1b2d      	subs	r5, r5, r4
 8015ac2:	eb68 0808 	sbc.w	r8, r8, r8
 8015ac6:	eba2 0208 	sub.w	r2, r2, r8
 8015aca:	ea6f 0808 	mvn.w	r8, r8
 8015ace:	ea03 0308 	and.w	r3, r3, r8
 8015ad2:	f1a6 0604 	sub.w	r6, r6, #4
 8015ad6:	2e00      	cmp	r6, #0
 8015ad8:	dae1      	bge.n	8015a9e <sp_3072_cmp_48+0x24>
 8015ada:	60fa      	str	r2, [r7, #12]
        : [r] "+r" (r)
        : [a] "r" (a), [b] "r" (b)
        : "r3", "r4", "r5", "r6", "r8"
    );

    return r;
 8015adc:	68fb      	ldr	r3, [r7, #12]
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3714      	adds	r7, #20
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8015ae8:	4770      	bx	lr

08015aea <sp_3072_div_48>:
 * r  Remainder from the division.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_3072_div_48(const sp_digit* a, const sp_digit* d, sp_digit* m,
        sp_digit* r)
{
 8015aea:	b590      	push	{r4, r7, lr}
 8015aec:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	f107 040c 	add.w	r4, r7, #12
 8015af6:	6020      	str	r0, [r4, #0]
 8015af8:	f107 0008 	add.w	r0, r7, #8
 8015afc:	6001      	str	r1, [r0, #0]
 8015afe:	1d39      	adds	r1, r7, #4
 8015b00:	600a      	str	r2, [r1, #0]
 8015b02:	463a      	mov	r2, r7
 8015b04:	6013      	str	r3, [r2, #0]
    sp_digit div, r1;
    int i;

    (void)m;

    div = d[47];
 8015b06:	f107 0308 	add.w	r3, r7, #8
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015b10:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    XMEMCPY(t1, a, sizeof(*t1) * 2 * 48);
 8015b14:	f107 030c 	add.w	r3, r7, #12
 8015b18:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8015b1c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8015b20:	6819      	ldr	r1, [r3, #0]
 8015b22:	f005 ff76 	bl	801ba12 <memcpy>
    for (i=47; i>=0; i--) {
 8015b26:	232f      	movs	r3, #47	; 0x2f
 8015b28:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8015b2c:	e0cb      	b.n	8015cc6 <sp_3072_div_48+0x1dc>
        sp_digit hi = t1[48 + i] - (t1[48 + i] == div);
 8015b2e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015b32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015b36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b3e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8015b42:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8015b46:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8015b4a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8015b4e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8015b52:	4291      	cmp	r1, r2
 8015b54:	bf0c      	ite	eq
 8015b56:	2201      	moveq	r2, #1
 8015b58:	2200      	movne	r2, #0
 8015b5a:	b2d2      	uxtb	r2, r2
 8015b5c:	1a9b      	subs	r3, r3, r2
 8015b5e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
        r1 = div_3072_word_48(hi, t1[48 + i - 1], div);
 8015b62:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015b66:	f103 022f 	add.w	r2, r3, #47	; 0x2f
 8015b6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b72:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8015b76:	4619      	mov	r1, r3
 8015b78:	f8d7 0258 	ldr.w	r0, [r7, #600]	; 0x258
 8015b7c:	f7ff ff35 	bl	80159ea <div_3072_word_48>
 8015b80:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c

        sp_3072_mul_d_48(t2, d, r1);
 8015b84:	f107 0308 	add.w	r3, r7, #8
 8015b88:	f107 0014 	add.w	r0, r7, #20
 8015b8c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8015b90:	6819      	ldr	r1, [r3, #0]
 8015b92:	f7ff fefa 	bl	801598a <sp_3072_mul_d_48>
        t1[48 + i] += sp_3072_sub_in_place_48(&t1[i], t2);
 8015b96:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8015b9a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015b9e:	009b      	lsls	r3, r3, #2
 8015ba0:	4413      	add	r3, r2
 8015ba2:	f107 0214 	add.w	r2, r7, #20
 8015ba6:	4611      	mov	r1, r2
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f7ff fc81 	bl	80154b0 <sp_3072_sub_in_place_48>
 8015bae:	4601      	mov	r1, r0
 8015bb0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015bb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015bb8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bc0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8015bc4:	3230      	adds	r2, #48	; 0x30
 8015bc6:	4419      	add	r1, r3
 8015bc8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        t1[48 + i] -= t2[48];
 8015bd0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015bd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015bd8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015be0:	f107 0314 	add.w	r3, r7, #20
 8015be4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015be8:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8015bec:	3230      	adds	r2, #48	; 0x30
 8015bee:	1ac9      	subs	r1, r1, r3
 8015bf0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        sp_3072_mask_48(t2, d, t1[48 + i]);
 8015bf8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015bfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015c00:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015c04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015c08:	f107 0308 	add.w	r3, r7, #8
 8015c0c:	f107 0014 	add.w	r0, r7, #20
 8015c10:	6819      	ldr	r1, [r3, #0]
 8015c12:	f7ff fbfb 	bl	801540c <sp_3072_mask_48>
        t1[48 + i] += sp_3072_add_48(&t1[i], &t1[i], t2);
 8015c16:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8015c1a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015c1e:	009b      	lsls	r3, r3, #2
 8015c20:	18d0      	adds	r0, r2, r3
 8015c22:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8015c26:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015c2a:	009b      	lsls	r3, r3, #2
 8015c2c:	4413      	add	r3, r2
 8015c2e:	f107 0214 	add.w	r2, r7, #20
 8015c32:	4619      	mov	r1, r3
 8015c34:	f7ff fc0b 	bl	801544e <sp_3072_add_48>
 8015c38:	4601      	mov	r1, r0
 8015c3a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015c3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015c42:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c4a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8015c4e:	3230      	adds	r2, #48	; 0x30
 8015c50:	4419      	add	r1, r3
 8015c52:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        sp_3072_mask_48(t2, d, t1[48 + i]);
 8015c5a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015c5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015c62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015c66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015c6a:	f107 0308 	add.w	r3, r7, #8
 8015c6e:	f107 0014 	add.w	r0, r7, #20
 8015c72:	6819      	ldr	r1, [r3, #0]
 8015c74:	f7ff fbca 	bl	801540c <sp_3072_mask_48>
        t1[48 + i] += sp_3072_add_48(&t1[i], &t1[i], t2);
 8015c78:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8015c7c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	18d0      	adds	r0, r2, r3
 8015c84:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8015c88:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015c8c:	009b      	lsls	r3, r3, #2
 8015c8e:	4413      	add	r3, r2
 8015c90:	f107 0214 	add.w	r2, r7, #20
 8015c94:	4619      	mov	r1, r3
 8015c96:	f7ff fbda 	bl	801544e <sp_3072_add_48>
 8015c9a:	4601      	mov	r1, r0
 8015c9c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015ca0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ca4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cac:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8015cb0:	3230      	adds	r2, #48	; 0x30
 8015cb2:	4419      	add	r1, r3
 8015cb4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i=47; i>=0; i--) {
 8015cbc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015cc0:	3b01      	subs	r3, #1
 8015cc2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8015cc6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	f6bf af2f 	bge.w	8015b2e <sp_3072_div_48+0x44>
    }

    r1 = sp_3072_cmp_48(t1, d) >= 0;
 8015cd0:	f107 0308 	add.w	r3, r7, #8
 8015cd4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8015cd8:	6819      	ldr	r1, [r3, #0]
 8015cda:	4610      	mov	r0, r2
 8015cdc:	f7ff fecd 	bl	8015a7a <sp_3072_cmp_48>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	43db      	mvns	r3, r3
 8015ce4:	0fdb      	lsrs	r3, r3, #31
 8015ce6:	b2db      	uxtb	r3, r3
 8015ce8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    sp_3072_cond_sub_48(r, t1, d, (sp_digit)0 - r1);
 8015cec:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8015cf0:	425b      	negs	r3, r3
 8015cf2:	f107 0208 	add.w	r2, r7, #8
 8015cf6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8015cfa:	4638      	mov	r0, r7
 8015cfc:	6812      	ldr	r2, [r2, #0]
 8015cfe:	6800      	ldr	r0, [r0, #0]
 8015d00:	f7ff fd70 	bl	80157e4 <sp_3072_cond_sub_48>

    return MP_OKAY;
 8015d04:	2300      	movs	r3, #0
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd90      	pop	{r4, r7, pc}

08015d10 <sp_3072_mod_48>:
 * a  A single precision number that is to be reduced.
 * m  A single precision number that is the modulus to reduce with.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_3072_mod_48(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	607a      	str	r2, [r7, #4]
    return sp_3072_div_48(a, m, NULL, r);
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	6879      	ldr	r1, [r7, #4]
 8015d22:	68b8      	ldr	r0, [r7, #8]
 8015d24:	f7ff fee1 	bl	8015aea <sp_3072_div_48>
 8015d28:	4603      	mov	r3, r0
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3710      	adds	r7, #16
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}

08015d32 <sp_3072_mod_exp_48>:
 * m     A single precision number that is the modulus.
 * returns 0 on success and MEMORY_E on dynamic memory allocation failure.
 */
static int sp_3072_mod_exp_48(sp_digit* r, const sp_digit* a, const sp_digit* e,
        int bits, const sp_digit* m, int reduceA)
{
 8015d32:	b580      	push	{r7, lr}
 8015d34:	b0a0      	sub	sp, #128	; 0x80
 8015d36:	af02      	add	r7, sp, #8
 8015d38:	60f8      	str	r0, [r7, #12]
 8015d3a:	60b9      	str	r1, [r7, #8]
 8015d3c:	607a      	str	r2, [r7, #4]
 8015d3e:	603b      	str	r3, [r7, #0]
#else
    sp_digit td[16 * 96];
#endif
    sp_digit* t[16];
    sp_digit* norm;
    sp_digit mp = 1;
 8015d40:	2301      	movs	r3, #1
 8015d42:	613b      	str	r3, [r7, #16]
    sp_digit n;
    sp_digit mask;
    int i;
    int c, y;
    int err = MP_OKAY;
 8015d44:	2300      	movs	r3, #0
 8015d46:	667b      	str	r3, [r7, #100]	; 0x64

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
    td = (sp_digit*)XMALLOC(sizeof(sp_digit) * (16 * 96), NULL,
 8015d48:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8015d4c:	f7fb fb86 	bl	801145c <wolfSSL_Malloc>
 8015d50:	6638      	str	r0, [r7, #96]	; 0x60
                            DYNAMIC_TYPE_TMP_BUFFER);
    if (td == NULL) {
 8015d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d102      	bne.n	8015d5e <sp_3072_mod_exp_48+0x2c>
        err = MEMORY_E;
 8015d58:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8015d5c:	667b      	str	r3, [r7, #100]	; 0x64
    }
#endif

    if (err == MP_OKAY) {
 8015d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d153      	bne.n	8015e0c <sp_3072_mod_exp_48+0xda>
        norm = td;
 8015d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d66:	65fb      	str	r3, [r7, #92]	; 0x5c
        for (i=0; i<16; i++) {
 8015d68:	2300      	movs	r3, #0
 8015d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8015d6c:	e011      	b.n	8015d92 <sp_3072_mod_exp_48+0x60>
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
            t[i] = td + i * 96;
 8015d6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015d70:	4613      	mov	r3, r2
 8015d72:	005b      	lsls	r3, r3, #1
 8015d74:	4413      	add	r3, r2
 8015d76:	01db      	lsls	r3, r3, #7
 8015d78:	461a      	mov	r2, r3
 8015d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d7c:	441a      	add	r2, r3
 8015d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d80:	009b      	lsls	r3, r3, #2
 8015d82:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8015d86:	440b      	add	r3, r1
 8015d88:	f843 2c64 	str.w	r2, [r3, #-100]
        for (i=0; i<16; i++) {
 8015d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d8e:	3301      	adds	r3, #1
 8015d90:	673b      	str	r3, [r7, #112]	; 0x70
 8015d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d94:	2b0f      	cmp	r3, #15
 8015d96:	ddea      	ble.n	8015d6e <sp_3072_mod_exp_48+0x3c>
#else
            t[i] = &td[i * 96];
#endif
        }

        sp_3072_mont_setup(m, &mp);
 8015d98:	f107 0310 	add.w	r3, r7, #16
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8015da2:	f7ff fca5 	bl	80156f0 <sp_3072_mont_setup>
        sp_3072_mont_norm_48(norm, m);
 8015da6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8015daa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8015dac:	f7ff fd08 	bl	80157c0 <sp_3072_mont_norm_48>

        XMEMSET(t[1], 0, sizeof(sp_digit) * 48U);
 8015db0:	69bb      	ldr	r3, [r7, #24]
 8015db2:	22c0      	movs	r2, #192	; 0xc0
 8015db4:	2100      	movs	r1, #0
 8015db6:	4618      	mov	r0, r3
 8015db8:	f005 fe4f 	bl	801ba5a <memset>
        if (reduceA != 0) {
 8015dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d014      	beq.n	8015dee <sp_3072_mod_exp_48+0xbc>
            err = sp_3072_mod_48(t[1] + 48, a, m);
 8015dc4:	69bb      	ldr	r3, [r7, #24]
 8015dc6:	33c0      	adds	r3, #192	; 0xc0
 8015dc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015dcc:	68b9      	ldr	r1, [r7, #8]
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7ff ff9e 	bl	8015d10 <sp_3072_mod_48>
 8015dd4:	6678      	str	r0, [r7, #100]	; 0x64
            if (err == MP_OKAY) {
 8015dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d117      	bne.n	8015e0c <sp_3072_mod_exp_48+0xda>
                err = sp_3072_mod_48(t[1], t[1], m);
 8015ddc:	69bb      	ldr	r3, [r7, #24]
 8015dde:	69b9      	ldr	r1, [r7, #24]
 8015de0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7ff ff93 	bl	8015d10 <sp_3072_mod_48>
 8015dea:	6678      	str	r0, [r7, #100]	; 0x64
 8015dec:	e00e      	b.n	8015e0c <sp_3072_mod_exp_48+0xda>
            }
        }
        else {
            XMEMCPY(t[1] + 48, a, sizeof(sp_digit) * 48);
 8015dee:	69bb      	ldr	r3, [r7, #24]
 8015df0:	33c0      	adds	r3, #192	; 0xc0
 8015df2:	22c0      	movs	r2, #192	; 0xc0
 8015df4:	68b9      	ldr	r1, [r7, #8]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f005 fe0b 	bl	801ba12 <memcpy>
            err = sp_3072_mod_48(t[1], t[1], m);
 8015dfc:	69bb      	ldr	r3, [r7, #24]
 8015dfe:	69b9      	ldr	r1, [r7, #24]
 8015e00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7ff ff83 	bl	8015d10 <sp_3072_mod_48>
 8015e0a:	6678      	str	r0, [r7, #100]	; 0x64
        }
    }

    if (err == MP_OKAY) {
 8015e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	f040 816c 	bne.w	80160ec <sp_3072_mod_exp_48+0x3ba>
        sp_3072_mont_sqr_48(t[ 2], t[ 1], m, mp);
 8015e14:	69f8      	ldr	r0, [r7, #28]
 8015e16:	69b9      	ldr	r1, [r7, #24]
 8015e18:	693b      	ldr	r3, [r7, #16]
 8015e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015e1e:	f7ff fda0 	bl	8015962 <sp_3072_mont_sqr_48>
        sp_3072_mont_mul_48(t[ 3], t[ 2], t[ 1], m, mp);
 8015e22:	6a38      	ldr	r0, [r7, #32]
 8015e24:	69f9      	ldr	r1, [r7, #28]
 8015e26:	69ba      	ldr	r2, [r7, #24]
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	9300      	str	r3, [sp, #0]
 8015e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015e30:	f7ff fd82 	bl	8015938 <sp_3072_mont_mul_48>
        sp_3072_mont_sqr_48(t[ 4], t[ 2], m, mp);
 8015e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e36:	69f9      	ldr	r1, [r7, #28]
 8015e38:	693b      	ldr	r3, [r7, #16]
 8015e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015e3e:	f7ff fd90 	bl	8015962 <sp_3072_mont_sqr_48>
        sp_3072_mont_mul_48(t[ 5], t[ 3], t[ 2], m, mp);
 8015e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e44:	6a39      	ldr	r1, [r7, #32]
 8015e46:	69fa      	ldr	r2, [r7, #28]
 8015e48:	693b      	ldr	r3, [r7, #16]
 8015e4a:	9300      	str	r3, [sp, #0]
 8015e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015e50:	f7ff fd72 	bl	8015938 <sp_3072_mont_mul_48>
        sp_3072_mont_sqr_48(t[ 6], t[ 3], m, mp);
 8015e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e56:	6a39      	ldr	r1, [r7, #32]
 8015e58:	693b      	ldr	r3, [r7, #16]
 8015e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015e5e:	f7ff fd80 	bl	8015962 <sp_3072_mont_sqr_48>
        sp_3072_mont_mul_48(t[ 7], t[ 4], t[ 3], m, mp);
 8015e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e66:	6a3a      	ldr	r2, [r7, #32]
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	9300      	str	r3, [sp, #0]
 8015e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015e70:	f7ff fd62 	bl	8015938 <sp_3072_mont_mul_48>
        sp_3072_mont_sqr_48(t[ 8], t[ 4], m, mp);
 8015e74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015e7e:	f7ff fd70 	bl	8015962 <sp_3072_mont_sqr_48>
        sp_3072_mont_mul_48(t[ 9], t[ 5], t[ 4], m, mp);
 8015e82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e88:	693b      	ldr	r3, [r7, #16]
 8015e8a:	9300      	str	r3, [sp, #0]
 8015e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015e90:	f7ff fd52 	bl	8015938 <sp_3072_mont_mul_48>
        sp_3072_mont_sqr_48(t[10], t[ 5], m, mp);
 8015e94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015e9e:	f7ff fd60 	bl	8015962 <sp_3072_mont_sqr_48>
        sp_3072_mont_mul_48(t[11], t[ 6], t[ 5], m, mp);
 8015ea2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015ea4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ea8:	693b      	ldr	r3, [r7, #16]
 8015eaa:	9300      	str	r3, [sp, #0]
 8015eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015eb0:	f7ff fd42 	bl	8015938 <sp_3072_mont_mul_48>
        sp_3072_mont_sqr_48(t[12], t[ 6], m, mp);
 8015eb4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015ebe:	f7ff fd50 	bl	8015962 <sp_3072_mont_sqr_48>
        sp_3072_mont_mul_48(t[13], t[ 7], t[ 6], m, mp);
 8015ec2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015ec4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ec8:	693b      	ldr	r3, [r7, #16]
 8015eca:	9300      	str	r3, [sp, #0]
 8015ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015ed0:	f7ff fd32 	bl	8015938 <sp_3072_mont_mul_48>
        sp_3072_mont_sqr_48(t[14], t[ 7], m, mp);
 8015ed4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015ed8:	693b      	ldr	r3, [r7, #16]
 8015eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015ede:	f7ff fd40 	bl	8015962 <sp_3072_mont_sqr_48>
        sp_3072_mont_mul_48(t[15], t[ 8], t[ 7], m, mp);
 8015ee2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015ee4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ee8:	693b      	ldr	r3, [r7, #16]
 8015eea:	9300      	str	r3, [sp, #0]
 8015eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015ef0:	f7ff fd22 	bl	8015938 <sp_3072_mont_mul_48>

        i = (bits - 1) / 32;
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	3b01      	subs	r3, #1
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	da00      	bge.n	8015efe <sp_3072_mod_exp_48+0x1cc>
 8015efc:	331f      	adds	r3, #31
 8015efe:	115b      	asrs	r3, r3, #5
 8015f00:	673b      	str	r3, [r7, #112]	; 0x70
        n = e[i--];
 8015f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015f04:	1e5a      	subs	r2, r3, #1
 8015f06:	673a      	str	r2, [r7, #112]	; 0x70
 8015f08:	009b      	lsls	r3, r3, #2
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	4413      	add	r3, r2
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	677b      	str	r3, [r7, #116]	; 0x74
        c = bits & 31;
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	f003 031f 	and.w	r3, r3, #31
 8015f18:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (c == 0) {
 8015f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d101      	bne.n	8015f24 <sp_3072_mod_exp_48+0x1f2>
            c = 32;
 8015f20:	2320      	movs	r3, #32
 8015f22:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
        c -= bits % 4;
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	425a      	negs	r2, r3
 8015f28:	f003 0303 	and.w	r3, r3, #3
 8015f2c:	f002 0203 	and.w	r2, r2, #3
 8015f30:	bf58      	it	pl
 8015f32:	4253      	negpl	r3, r2
 8015f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015f36:	1ad3      	subs	r3, r2, r3
 8015f38:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (c == 32) {
 8015f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f3c:	2b20      	cmp	r3, #32
 8015f3e:	d101      	bne.n	8015f44 <sp_3072_mod_exp_48+0x212>
            c = 28;
 8015f40:	231c      	movs	r3, #28
 8015f42:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
        if (c < 0) {
 8015f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	da23      	bge.n	8015f92 <sp_3072_mod_exp_48+0x260>
            /* Number of bits in top word is less than number needed. */
            c = -c;
 8015f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f4c:	425b      	negs	r3, r3
 8015f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
            y = (int)(n << c);
 8015f50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f54:	fa02 f303 	lsl.w	r3, r2, r3
 8015f58:	66bb      	str	r3, [r7, #104]	; 0x68
            n = e[i--];
 8015f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015f5c:	1e5a      	subs	r2, r3, #1
 8015f5e:	673a      	str	r2, [r7, #112]	; 0x70
 8015f60:	009b      	lsls	r3, r3, #2
 8015f62:	687a      	ldr	r2, [r7, #4]
 8015f64:	4413      	add	r3, r2
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	677b      	str	r3, [r7, #116]	; 0x74
            y |= (int)(n >> (64 - c));
 8015f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f6c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8015f70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015f72:	fa22 f303 	lsr.w	r3, r2, r3
 8015f76:	461a      	mov	r2, r3
 8015f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015f7a:	4313      	orrs	r3, r2
 8015f7c:	66bb      	str	r3, [r7, #104]	; 0x68
            n <<= c;
 8015f7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f82:	fa02 f303 	lsl.w	r3, r2, r3
 8015f86:	677b      	str	r3, [r7, #116]	; 0x74
            c = 64 - c;
 8015f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f8a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8015f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015f90:	e00b      	b.n	8015faa <sp_3072_mod_exp_48+0x278>
        }
        else {
            y = (int)(n >> c);
 8015f92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f96:	fa22 f303 	lsr.w	r3, r2, r3
 8015f9a:	66bb      	str	r3, [r7, #104]	; 0x68
            n <<= 32 - c;
 8015f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f9e:	f1c3 0320 	rsb	r3, r3, #32
 8015fa2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8015fa8:	677b      	str	r3, [r7, #116]	; 0x74
        }
        XMEMCPY(r, t[y], sizeof(sp_digit) * 48);
 8015faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015fac:	009b      	lsls	r3, r3, #2
 8015fae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8015fb2:	4413      	add	r3, r2
 8015fb4:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8015fb8:	22c0      	movs	r2, #192	; 0xc0
 8015fba:	4619      	mov	r1, r3
 8015fbc:	68f8      	ldr	r0, [r7, #12]
 8015fbe:	f005 fd28 	bl	801ba12 <memcpy>
        for (; i>=0 || c>=4; ) {
 8015fc2:	e06d      	b.n	80160a0 <sp_3072_mod_exp_48+0x36e>
            if (c == 0) {
 8015fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d110      	bne.n	8015fec <sp_3072_mod_exp_48+0x2ba>
                n = e[i--];
 8015fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015fcc:	1e5a      	subs	r2, r3, #1
 8015fce:	673a      	str	r2, [r7, #112]	; 0x70
 8015fd0:	009b      	lsls	r3, r3, #2
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	4413      	add	r3, r2
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	677b      	str	r3, [r7, #116]	; 0x74
                y = (int)(n >> 28);
 8015fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fdc:	0f1b      	lsrs	r3, r3, #28
 8015fde:	66bb      	str	r3, [r7, #104]	; 0x68
                n <<= 4;
 8015fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fe2:	011b      	lsls	r3, r3, #4
 8015fe4:	677b      	str	r3, [r7, #116]	; 0x74
                c = 28;
 8015fe6:	231c      	movs	r3, #28
 8015fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015fea:	e02e      	b.n	801604a <sp_3072_mod_exp_48+0x318>
            }
            else if (c < 4) {
 8015fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015fee:	2b03      	cmp	r3, #3
 8015ff0:	dc22      	bgt.n	8016038 <sp_3072_mod_exp_48+0x306>
                y = (int)(n >> 28);
 8015ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ff4:	0f1b      	lsrs	r3, r3, #28
 8015ff6:	66bb      	str	r3, [r7, #104]	; 0x68
                n = e[i--];
 8015ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015ffa:	1e5a      	subs	r2, r3, #1
 8015ffc:	673a      	str	r2, [r7, #112]	; 0x70
 8015ffe:	009b      	lsls	r3, r3, #2
 8016000:	687a      	ldr	r2, [r7, #4]
 8016002:	4413      	add	r3, r2
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	677b      	str	r3, [r7, #116]	; 0x74
                c = 4 - c;
 8016008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801600a:	f1c3 0304 	rsb	r3, r3, #4
 801600e:	66fb      	str	r3, [r7, #108]	; 0x6c
                y |= (int)(n >> (32 - c));
 8016010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016012:	f1c3 0320 	rsb	r3, r3, #32
 8016016:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016018:	fa22 f303 	lsr.w	r3, r2, r3
 801601c:	461a      	mov	r2, r3
 801601e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016020:	4313      	orrs	r3, r2
 8016022:	66bb      	str	r3, [r7, #104]	; 0x68
                n <<= c;
 8016024:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016028:	fa02 f303 	lsl.w	r3, r2, r3
 801602c:	677b      	str	r3, [r7, #116]	; 0x74
                c = 32 - c;
 801602e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016030:	f1c3 0320 	rsb	r3, r3, #32
 8016034:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016036:	e008      	b.n	801604a <sp_3072_mod_exp_48+0x318>
            }
            else {
                y = (int)((n >> 28) & 0xf);
 8016038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801603a:	0f1b      	lsrs	r3, r3, #28
 801603c:	66bb      	str	r3, [r7, #104]	; 0x68
                n <<= 4;
 801603e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016040:	011b      	lsls	r3, r3, #4
 8016042:	677b      	str	r3, [r7, #116]	; 0x74
                c -= 4;
 8016044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016046:	3b04      	subs	r3, #4
 8016048:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            sp_3072_mont_sqr_48(r, r, m, mp);
 801604a:	693b      	ldr	r3, [r7, #16]
 801604c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016050:	68f9      	ldr	r1, [r7, #12]
 8016052:	68f8      	ldr	r0, [r7, #12]
 8016054:	f7ff fc85 	bl	8015962 <sp_3072_mont_sqr_48>
            sp_3072_mont_sqr_48(r, r, m, mp);
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801605e:	68f9      	ldr	r1, [r7, #12]
 8016060:	68f8      	ldr	r0, [r7, #12]
 8016062:	f7ff fc7e 	bl	8015962 <sp_3072_mont_sqr_48>
            sp_3072_mont_sqr_48(r, r, m, mp);
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801606c:	68f9      	ldr	r1, [r7, #12]
 801606e:	68f8      	ldr	r0, [r7, #12]
 8016070:	f7ff fc77 	bl	8015962 <sp_3072_mont_sqr_48>
            sp_3072_mont_sqr_48(r, r, m, mp);
 8016074:	693b      	ldr	r3, [r7, #16]
 8016076:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801607a:	68f9      	ldr	r1, [r7, #12]
 801607c:	68f8      	ldr	r0, [r7, #12]
 801607e:	f7ff fc70 	bl	8015962 <sp_3072_mont_sqr_48>

            sp_3072_mont_mul_48(r, r, t[y], m, mp);
 8016082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016084:	009b      	lsls	r3, r3, #2
 8016086:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801608a:	4413      	add	r3, r2
 801608c:	f853 2c64 	ldr.w	r2, [r3, #-100]
 8016090:	693b      	ldr	r3, [r7, #16]
 8016092:	9300      	str	r3, [sp, #0]
 8016094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016098:	68f9      	ldr	r1, [r7, #12]
 801609a:	68f8      	ldr	r0, [r7, #12]
 801609c:	f7ff fc4c 	bl	8015938 <sp_3072_mont_mul_48>
        for (; i>=0 || c>=4; ) {
 80160a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	da8e      	bge.n	8015fc4 <sp_3072_mod_exp_48+0x292>
 80160a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80160a8:	2b03      	cmp	r3, #3
 80160aa:	dc8b      	bgt.n	8015fc4 <sp_3072_mod_exp_48+0x292>
        }

        XMEMSET(&r[48], 0, sizeof(sp_digit) * 48U);
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	33c0      	adds	r3, #192	; 0xc0
 80160b0:	22c0      	movs	r2, #192	; 0xc0
 80160b2:	2100      	movs	r1, #0
 80160b4:	4618      	mov	r0, r3
 80160b6:	f005 fcd0 	bl	801ba5a <memset>
        sp_3072_mont_reduce_48(r, m, mp);
 80160ba:	693b      	ldr	r3, [r7, #16]
 80160bc:	461a      	mov	r2, r3
 80160be:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80160c2:	68f8      	ldr	r0, [r7, #12]
 80160c4:	f7ff fbbb 	bl	801583e <sp_3072_mont_reduce_48>

        mask = 0 - (sp_3072_cmp_48(r, m) >= 0);
 80160c8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80160cc:	68f8      	ldr	r0, [r7, #12]
 80160ce:	f7ff fcd4 	bl	8015a7a <sp_3072_cmp_48>
 80160d2:	4603      	mov	r3, r0
 80160d4:	43db      	mvns	r3, r3
 80160d6:	0fdb      	lsrs	r3, r3, #31
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	425b      	negs	r3, r3
 80160dc:	65bb      	str	r3, [r7, #88]	; 0x58
        sp_3072_cond_sub_48(r, r, m, mask);
 80160de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80160e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80160e4:	68f9      	ldr	r1, [r7, #12]
 80160e6:	68f8      	ldr	r0, [r7, #12]
 80160e8:	f7ff fb7c 	bl	80157e4 <sp_3072_cond_sub_48>
    }

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (td != NULL) {
 80160ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d007      	beq.n	8016102 <sp_3072_mod_exp_48+0x3d0>
        XFREE(td, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80160f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160f4:	657b      	str	r3, [r7, #84]	; 0x54
 80160f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d002      	beq.n	8016102 <sp_3072_mod_exp_48+0x3d0>
 80160fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80160fe:	f7fb f9c9 	bl	8011494 <wolfSSL_Free>
    }
#endif

    return err;
 8016102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8016104:	4618      	mov	r0, r3
 8016106:	3778      	adds	r7, #120	; 0x78
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}

0801610c <sp_3072_cond_sub_96>:
 * b  A single precision number to subtract.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_3072_cond_sub_96(sp_digit* r, const sp_digit* a,
        const sp_digit* b, sp_digit m)
{
 801610c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8016110:	b086      	sub	sp, #24
 8016112:	af00      	add	r7, sp, #0
 8016114:	60f8      	str	r0, [r7, #12]
 8016116:	60b9      	str	r1, [r7, #8]
 8016118:	607a      	str	r2, [r7, #4]
 801611a:	603b      	str	r3, [r7, #0]
    sp_digit c = 0;
 801611c:	2300      	movs	r3, #0
 801611e:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8016120:	68fa      	ldr	r2, [r7, #12]
 8016122:	68b9      	ldr	r1, [r7, #8]
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	683c      	ldr	r4, [r7, #0]
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	f04f 0501 	mov.w	r5, #1
 801612e:	ea4f 2505 	mov.w	r5, r5, lsl #8
 8016132:	f105 0580 	add.w	r5, r5, #128	; 0x80
 8016136:	46a9      	mov	r9, r5
 8016138:	f04f 0800 	mov.w	r8, #0
 801613c:	f850 6008 	ldr.w	r6, [r0, r8]
 8016140:	ea06 0604 	and.w	r6, r6, r4
 8016144:	f04f 0500 	mov.w	r5, #0
 8016148:	1aed      	subs	r5, r5, r3
 801614a:	f851 5008 	ldr.w	r5, [r1, r8]
 801614e:	41b5      	sbcs	r5, r6
 8016150:	419b      	sbcs	r3, r3
 8016152:	f842 5008 	str.w	r5, [r2, r8]
 8016156:	f108 0804 	add.w	r8, r8, #4
 801615a:	45c8      	cmp	r8, r9
 801615c:	dbee      	blt.n	801613c <sp_3072_cond_sub_96+0x30>
 801615e:	617b      	str	r3, [r7, #20]
        : [c] "+r" (c)
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
 8016160:	697b      	ldr	r3, [r7, #20]
}
 8016162:	4618      	mov	r0, r3
 8016164:	3718      	adds	r7, #24
 8016166:	46bd      	mov	sp, r7
 8016168:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801616c:	4770      	bx	lr

0801616e <sp_3072_mont_reduce_96>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_3072_mont_reduce_96(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 801616e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016172:	b087      	sub	sp, #28
 8016174:	af00      	add	r7, sp, #0
 8016176:	60f8      	str	r0, [r7, #12]
 8016178:	60b9      	str	r1, [r7, #8]
 801617a:	607a      	str	r2, [r7, #4]
    sp_digit ca = 0;
 801617c:	2300      	movs	r3, #0
 801617e:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8016180:	68b9      	ldr	r1, [r7, #8]
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	697a      	ldr	r2, [r7, #20]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	4681      	mov	r9, r0
 801618a:	468c      	mov	ip, r1
 801618c:	469a      	mov	sl, r3
 801618e:	f04f 0400 	mov.w	r4, #0
 8016192:	f50a 7bc0 	add.w	fp, sl, #384	; 0x180
 8016196:	4648      	mov	r0, r9
 8016198:	f8da 3000 	ldr.w	r3, [sl]
 801619c:	fb00 f003 	mul.w	r0, r0, r3
 80161a0:	4661      	mov	r1, ip
 80161a2:	f50a 7ebc 	add.w	lr, sl, #376	; 0x178
 80161a6:	f8da 3000 	ldr.w	r3, [sl]
 80161aa:	f04f 0500 	mov.w	r5, #0
 80161ae:	f851 8b04 	ldr.w	r8, [r1], #4
 80161b2:	fba0 6808 	umull	r6, r8, r0, r8
 80161b6:	199b      	adds	r3, r3, r6
 80161b8:	eb45 0508 	adc.w	r5, r5, r8
 80161bc:	18e4      	adds	r4, r4, r3
 80161be:	f145 0500 	adc.w	r5, r5, #0
 80161c2:	f84a 4b04 	str.w	r4, [sl], #4
 80161c6:	f8da 3000 	ldr.w	r3, [sl]
 80161ca:	f04f 0400 	mov.w	r4, #0
 80161ce:	f851 8b04 	ldr.w	r8, [r1], #4
 80161d2:	fba0 6808 	umull	r6, r8, r0, r8
 80161d6:	199b      	adds	r3, r3, r6
 80161d8:	eb44 0408 	adc.w	r4, r4, r8
 80161dc:	18ed      	adds	r5, r5, r3
 80161de:	f144 0400 	adc.w	r4, r4, #0
 80161e2:	f84a 5b04 	str.w	r5, [sl], #4
 80161e6:	45f2      	cmp	sl, lr
 80161e8:	dbdd      	blt.n	80161a6 <sp_3072_mont_reduce_96+0x38>
 80161ea:	f8da 3000 	ldr.w	r3, [sl]
 80161ee:	f04f 0500 	mov.w	r5, #0
 80161f2:	f851 8b04 	ldr.w	r8, [r1], #4
 80161f6:	fba0 6808 	umull	r6, r8, r0, r8
 80161fa:	199b      	adds	r3, r3, r6
 80161fc:	eb45 0508 	adc.w	r5, r5, r8
 8016200:	18e4      	adds	r4, r4, r3
 8016202:	f145 0500 	adc.w	r5, r5, #0
 8016206:	f84a 4b04 	str.w	r4, [sl], #4
 801620a:	4614      	mov	r4, r2
 801620c:	f04f 0200 	mov.w	r2, #0
 8016210:	f8d1 8000 	ldr.w	r8, [r1]
 8016214:	fba0 6808 	umull	r6, r8, r0, r8
 8016218:	19ad      	adds	r5, r5, r6
 801621a:	eb54 0408 	adcs.w	r4, r4, r8
 801621e:	f142 0200 	adc.w	r2, r2, #0
 8016222:	f8da 6000 	ldr.w	r6, [sl]
 8016226:	f8da 8004 	ldr.w	r8, [sl, #4]
 801622a:	1976      	adds	r6, r6, r5
 801622c:	eb58 0804 	adcs.w	r8, r8, r4
 8016230:	f142 0200 	adc.w	r2, r2, #0
 8016234:	f8ca 6000 	str.w	r6, [sl]
 8016238:	f8ca 8004 	str.w	r8, [sl, #4]
 801623c:	f5aa 7abc 	sub.w	sl, sl, #376	; 0x178
 8016240:	45da      	cmp	sl, fp
 8016242:	dba8      	blt.n	8016196 <sp_3072_mont_reduce_96+0x28>
 8016244:	4653      	mov	r3, sl
 8016246:	4661      	mov	r1, ip
 8016248:	617a      	str	r2, [r7, #20]
 801624a:	60fb      	str	r3, [r7, #12]
        : [ca] "+r" (ca), [a] "+r" (a)
        : [m] "r" (m), [mp] "r" (mp)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    sp_3072_cond_sub_96(a - 96, a, m, (sp_digit)0 - ca);
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	425b      	negs	r3, r3
 8016256:	68ba      	ldr	r2, [r7, #8]
 8016258:	68f9      	ldr	r1, [r7, #12]
 801625a:	f7ff ff57 	bl	801610c <sp_3072_cond_sub_96>
}
 801625e:	bf00      	nop
 8016260:	371c      	adds	r7, #28
 8016262:	46bd      	mov	sp, r7
 8016264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016268 <sp_3072_mont_mul_96>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
static void sp_3072_mont_mul_96(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m, sp_digit mp)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b084      	sub	sp, #16
 801626c:	af00      	add	r7, sp, #0
 801626e:	60f8      	str	r0, [r7, #12]
 8016270:	60b9      	str	r1, [r7, #8]
 8016272:	607a      	str	r2, [r7, #4]
 8016274:	603b      	str	r3, [r7, #0]
    sp_3072_mul_96(r, a, b);
 8016276:	687a      	ldr	r2, [r7, #4]
 8016278:	68b9      	ldr	r1, [r7, #8]
 801627a:	68f8      	ldr	r0, [r7, #12]
 801627c:	f7fe ffc7 	bl	801520e <sp_3072_mul_96>
    sp_3072_mont_reduce_96(r, m, mp);
 8016280:	69ba      	ldr	r2, [r7, #24]
 8016282:	6839      	ldr	r1, [r7, #0]
 8016284:	68f8      	ldr	r0, [r7, #12]
 8016286:	f7ff ff72 	bl	801616e <sp_3072_mont_reduce_96>
}
 801628a:	bf00      	nop
 801628c:	3710      	adds	r7, #16
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}

08016292 <sp_3072_mont_sqr_96>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
static void sp_3072_mont_sqr_96(sp_digit* r, const sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8016292:	b580      	push	{r7, lr}
 8016294:	b084      	sub	sp, #16
 8016296:	af00      	add	r7, sp, #0
 8016298:	60f8      	str	r0, [r7, #12]
 801629a:	60b9      	str	r1, [r7, #8]
 801629c:	607a      	str	r2, [r7, #4]
 801629e:	603b      	str	r3, [r7, #0]
    sp_3072_sqr_96(r, a);
 80162a0:	68b9      	ldr	r1, [r7, #8]
 80162a2:	68f8      	ldr	r0, [r7, #12]
 80162a4:	f7ff f82a 	bl	80152fc <sp_3072_sqr_96>
    sp_3072_mont_reduce_96(r, m, mp);
 80162a8:	683a      	ldr	r2, [r7, #0]
 80162aa:	6879      	ldr	r1, [r7, #4]
 80162ac:	68f8      	ldr	r0, [r7, #12]
 80162ae:	f7ff ff5e 	bl	801616e <sp_3072_mont_reduce_96>
}
 80162b2:	bf00      	nop
 80162b4:	3710      	adds	r7, #16
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}

080162ba <div_3072_word_96>:
 *
 * Note that this is an approximate div. It may give an answer 1 larger.
 */
SP_NOINLINE static sp_digit div_3072_word_96(sp_digit d1, sp_digit d0,
        sp_digit div)
{
 80162ba:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80162be:	b087      	sub	sp, #28
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	60f8      	str	r0, [r7, #12]
 80162c4:	60b9      	str	r1, [r7, #8]
 80162c6:	607a      	str	r2, [r7, #4]
    sp_digit r = 0;
 80162c8:	2300      	movs	r3, #0
 80162ca:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 80162cc:	68fa      	ldr	r2, [r7, #12]
 80162ce:	68b9      	ldr	r1, [r7, #8]
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	697b      	ldr	r3, [r7, #20]
 80162d4:	ea4f 4610 	mov.w	r6, r0, lsr #16
 80162d8:	f106 0601 	add.w	r6, r6, #1
 80162dc:	fbb2 f4f6 	udiv	r4, r2, r6
 80162e0:	ea4f 4804 	mov.w	r8, r4, lsl #16
 80162e4:	fba0 4508 	umull	r4, r5, r0, r8
 80162e8:	1b09      	subs	r1, r1, r4
 80162ea:	eb62 0205 	sbc.w	r2, r2, r5
 80162ee:	fbb2 f5f6 	udiv	r5, r2, r6
 80162f2:	ea4f 4405 	mov.w	r4, r5, lsl #16
 80162f6:	44a0      	add	r8, r4
 80162f8:	fba0 4504 	umull	r4, r5, r0, r4
 80162fc:	1b09      	subs	r1, r1, r4
 80162fe:	eb62 0205 	sbc.w	r2, r2, r5
 8016302:	ea4f 4402 	mov.w	r4, r2, lsl #16
 8016306:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 801630a:	fbb4 f4f6 	udiv	r4, r4, r6
 801630e:	44a0      	add	r8, r4
 8016310:	fba0 4504 	umull	r4, r5, r0, r4
 8016314:	1b09      	subs	r1, r1, r4
 8016316:	eb62 0205 	sbc.w	r2, r2, r5
 801631a:	ea4f 4402 	mov.w	r4, r2, lsl #16
 801631e:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8016322:	fbb4 f4f6 	udiv	r4, r4, r6
 8016326:	44a0      	add	r8, r4
 8016328:	fba0 4504 	umull	r4, r5, r0, r4
 801632c:	1b09      	subs	r1, r1, r4
 801632e:	eb62 0205 	sbc.w	r2, r2, r5
 8016332:	fbb1 f4f0 	udiv	r4, r1, r0
 8016336:	44a0      	add	r8, r4
 8016338:	4643      	mov	r3, r8
 801633a:	617b      	str	r3, [r7, #20]
        "mov	%[r], r8\n\t"
        : [r] "+r" (r)
        : [d1] "r" (d1), [d0] "r" (d0), [div] "r" (div)
        : "r4", "r5", "r6", "r8"
    );
    return r;
 801633c:	697b      	ldr	r3, [r7, #20]
}
 801633e:	4618      	mov	r0, r3
 8016340:	371c      	adds	r7, #28
 8016342:	46bd      	mov	sp, r7
 8016344:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8016348:	4770      	bx	lr

0801634a <sp_3072_cmp_96>:
 * b  A single precision integer.
 * return -ve, 0 or +ve if a is less than, equal to or greater than b
 * respectively.
 */
SP_NOINLINE static int32_t sp_3072_cmp_96(const sp_digit* a, const sp_digit* b)
{
 801634a:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801634e:	b085      	sub	sp, #20
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	6039      	str	r1, [r7, #0]
    sp_digit r = 0;
 8016356:	2300      	movs	r3, #0
 8016358:	60fb      	str	r3, [r7, #12]


    __asm__ __volatile__ (
 801635a:	6879      	ldr	r1, [r7, #4]
 801635c:	6838      	ldr	r0, [r7, #0]
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	461a      	mov	r2, r3
 8016362:	f04f 0300 	mov.w	r3, #0
 8016366:	ea6f 0303 	mvn.w	r3, r3
 801636a:	f04f 0601 	mov.w	r6, #1
 801636e:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8016372:	f106 067c 	add.w	r6, r6, #124	; 0x7c
 8016376:	f851 8006 	ldr.w	r8, [r1, r6]
 801637a:	5985      	ldr	r5, [r0, r6]
 801637c:	ea08 0803 	and.w	r8, r8, r3
 8016380:	ea05 0503 	and.w	r5, r5, r3
 8016384:	4644      	mov	r4, r8
 8016386:	ebb8 0805 	subs.w	r8, r8, r5
 801638a:	eb68 0808 	sbc.w	r8, r8, r8
 801638e:	4442      	add	r2, r8
 8016390:	ea6f 0808 	mvn.w	r8, r8
 8016394:	ea03 0308 	and.w	r3, r3, r8
 8016398:	1b2d      	subs	r5, r5, r4
 801639a:	eb68 0808 	sbc.w	r8, r8, r8
 801639e:	eba2 0208 	sub.w	r2, r2, r8
 80163a2:	ea6f 0808 	mvn.w	r8, r8
 80163a6:	ea03 0308 	and.w	r3, r3, r8
 80163aa:	f1a6 0604 	sub.w	r6, r6, #4
 80163ae:	2e00      	cmp	r6, #0
 80163b0:	dae1      	bge.n	8016376 <sp_3072_cmp_96+0x2c>
 80163b2:	60fa      	str	r2, [r7, #12]
        : [r] "+r" (r)
        : [a] "r" (a), [b] "r" (b)
        : "r3", "r4", "r5", "r6", "r8"
    );

    return r;
 80163b4:	68fb      	ldr	r3, [r7, #12]
}
 80163b6:	4618      	mov	r0, r3
 80163b8:	3714      	adds	r7, #20
 80163ba:	46bd      	mov	sp, r7
 80163bc:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80163c0:	4770      	bx	lr

080163c2 <sp_3072_div_96_cond>:
 * r  Remainder from the division.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_3072_div_96_cond(const sp_digit* a, const sp_digit* d, sp_digit* m,
        sp_digit* r)
{
 80163c2:	b590      	push	{r4, r7, lr}
 80163c4:	f2ad 4dac 	subw	sp, sp, #1196	; 0x4ac
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	f107 040c 	add.w	r4, r7, #12
 80163ce:	6020      	str	r0, [r4, #0]
 80163d0:	f107 0008 	add.w	r0, r7, #8
 80163d4:	6001      	str	r1, [r0, #0]
 80163d6:	1d39      	adds	r1, r7, #4
 80163d8:	600a      	str	r2, [r1, #0]
 80163da:	463a      	mov	r2, r7
 80163dc:	6013      	str	r3, [r2, #0]
    sp_digit div, r1;
    int i;

    (void)m;

    div = d[95];
 80163de:	f107 0308 	add.w	r3, r7, #8
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80163e8:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
    XMEMCPY(t1, a, sizeof(*t1) * 2 * 96);
 80163ec:	f107 030c 	add.w	r3, r7, #12
 80163f0:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80163f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80163f8:	6819      	ldr	r1, [r3, #0]
 80163fa:	f005 fb0a 	bl	801ba12 <memcpy>
    for (i=95; i>=0; i--) {
 80163fe:	235f      	movs	r3, #95	; 0x5f
 8016400:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8016404:	e0c1      	b.n	801658a <sp_3072_div_96_cond+0x1c8>
        sp_digit hi = t1[96 + i] - (t1[96 + i] == div);
 8016406:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 801640a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 801640e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8016412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016416:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 801641a:	f102 0160 	add.w	r1, r2, #96	; 0x60
 801641e:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8016422:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016426:	f8d7 14a0 	ldr.w	r1, [r7, #1184]	; 0x4a0
 801642a:	4291      	cmp	r1, r2
 801642c:	bf0c      	ite	eq
 801642e:	2201      	moveq	r2, #1
 8016430:	2200      	movne	r2, #0
 8016432:	b2d2      	uxtb	r2, r2
 8016434:	1a9b      	subs	r3, r3, r2
 8016436:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
        r1 = div_3072_word_96(hi, t1[96 + i - 1], div);
 801643a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 801643e:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 8016442:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8016446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801644a:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 801644e:	4619      	mov	r1, r3
 8016450:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8016454:	f7ff ff31 	bl	80162ba <div_3072_word_96>
 8016458:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c

        sp_3072_mul_d_96(t2, d, r1);
 801645c:	f107 0308 	add.w	r3, r7, #8
 8016460:	f107 0014 	add.w	r0, r7, #20
 8016464:	f8d7 249c 	ldr.w	r2, [r7, #1180]	; 0x49c
 8016468:	6819      	ldr	r1, [r3, #0]
 801646a:	f7ff f979 	bl	8015760 <sp_3072_mul_d_96>
        t1[96 + i] += sp_3072_sub_in_place_96(&t1[i], t2);
 801646e:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8016472:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8016476:	009b      	lsls	r3, r3, #2
 8016478:	4413      	add	r3, r2
 801647a:	f107 0214 	add.w	r2, r7, #20
 801647e:	4611      	mov	r1, r2
 8016480:	4618      	mov	r0, r3
 8016482:	f7fe fe96 	bl	80151b2 <sp_3072_sub_in_place_96>
 8016486:	4601      	mov	r1, r0
 8016488:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 801648c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8016490:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8016494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016498:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 801649c:	3260      	adds	r2, #96	; 0x60
 801649e:	4419      	add	r1, r3
 80164a0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80164a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        t1[96 + i] -= t2[96];
 80164a8:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80164ac:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80164b0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80164b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80164b8:	f107 0314 	add.w	r3, r7, #20
 80164bc:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80164c0:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 80164c4:	3260      	adds	r2, #96	; 0x60
 80164c6:	1ac9      	subs	r1, r1, r3
 80164c8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80164cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (t1[96 + i] != 0) {
 80164d0:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80164d4:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80164d8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80164dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d04d      	beq.n	8016580 <sp_3072_div_96_cond+0x1be>
            t1[96 + i] += sp_3072_add_96(&t1[i], &t1[i], d);
 80164e4:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80164e8:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80164ec:	009b      	lsls	r3, r3, #2
 80164ee:	18d0      	adds	r0, r2, r3
 80164f0:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80164f4:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80164f8:	009b      	lsls	r3, r3, #2
 80164fa:	18d1      	adds	r1, r2, r3
 80164fc:	f107 0308 	add.w	r3, r7, #8
 8016500:	681a      	ldr	r2, [r3, #0]
 8016502:	f7fe fe25 	bl	8015150 <sp_3072_add_96>
 8016506:	4601      	mov	r1, r0
 8016508:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 801650c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8016510:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8016514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016518:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 801651c:	3260      	adds	r2, #96	; 0x60
 801651e:	4419      	add	r1, r3
 8016520:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8016524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if (t1[96 + i] != 0)
 8016528:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 801652c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8016530:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8016534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d021      	beq.n	8016580 <sp_3072_div_96_cond+0x1be>
                t1[96 + i] += sp_3072_add_96(&t1[i], &t1[i], d);
 801653c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8016540:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8016544:	009b      	lsls	r3, r3, #2
 8016546:	18d0      	adds	r0, r2, r3
 8016548:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 801654c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8016550:	009b      	lsls	r3, r3, #2
 8016552:	18d1      	adds	r1, r2, r3
 8016554:	f107 0308 	add.w	r3, r7, #8
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	f7fe fdf9 	bl	8015150 <sp_3072_add_96>
 801655e:	4601      	mov	r1, r0
 8016560:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8016564:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8016568:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801656c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016570:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8016574:	3260      	adds	r2, #96	; 0x60
 8016576:	4419      	add	r1, r3
 8016578:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801657c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i=95; i>=0; i--) {
 8016580:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8016584:	3b01      	subs	r3, #1
 8016586:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 801658a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 801658e:	2b00      	cmp	r3, #0
 8016590:	f6bf af39 	bge.w	8016406 <sp_3072_div_96_cond+0x44>
        }
    }

    r1 = sp_3072_cmp_96(t1, d) >= 0;
 8016594:	f107 0308 	add.w	r3, r7, #8
 8016598:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 801659c:	6819      	ldr	r1, [r3, #0]
 801659e:	4610      	mov	r0, r2
 80165a0:	f7ff fed3 	bl	801634a <sp_3072_cmp_96>
 80165a4:	4603      	mov	r3, r0
 80165a6:	43db      	mvns	r3, r3
 80165a8:	0fdb      	lsrs	r3, r3, #31
 80165aa:	b2db      	uxtb	r3, r3
 80165ac:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    sp_3072_cond_sub_96(r, t1, d, (sp_digit)0 - r1);
 80165b0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80165b4:	425b      	negs	r3, r3
 80165b6:	f107 0208 	add.w	r2, r7, #8
 80165ba:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80165be:	4638      	mov	r0, r7
 80165c0:	6812      	ldr	r2, [r2, #0]
 80165c2:	6800      	ldr	r0, [r0, #0]
 80165c4:	f7ff fda2 	bl	801610c <sp_3072_cond_sub_96>

    return MP_OKAY;
 80165c8:	2300      	movs	r3, #0
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	f207 47ac 	addw	r7, r7, #1196	; 0x4ac
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd90      	pop	{r4, r7, pc}

080165d4 <sp_3072_mod_96_cond>:
 * a  A single precision number that is to be reduced.
 * m  A single precision number that is the modulus to reduce with.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_3072_mod_96_cond(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	60f8      	str	r0, [r7, #12]
 80165dc:	60b9      	str	r1, [r7, #8]
 80165de:	607a      	str	r2, [r7, #4]
    return sp_3072_div_96_cond(a, m, NULL, r);
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	2200      	movs	r2, #0
 80165e4:	6879      	ldr	r1, [r7, #4]
 80165e6:	68b8      	ldr	r0, [r7, #8]
 80165e8:	f7ff feeb 	bl	80163c2 <sp_3072_div_96_cond>
 80165ec:	4603      	mov	r3, r0
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3710      	adds	r7, #16
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}

080165f6 <sp_RsaPublic_3072>:
 * returns 0 on success, MP_TO_E when the outLen is too small, MP_READ_E when
 * an array is too long and MEMORY_E when dynamic memory allocation fails.
 */
int sp_RsaPublic_3072(const byte* in, word32 inLen, mp_int* em, mp_int* mm,
    byte* out, word32* outLen)
{
 80165f6:	b580      	push	{r7, lr}
 80165f8:	b090      	sub	sp, #64	; 0x40
 80165fa:	af02      	add	r7, sp, #8
 80165fc:	60f8      	str	r0, [r7, #12]
 80165fe:	60b9      	str	r1, [r7, #8]
 8016600:	607a      	str	r2, [r7, #4]
 8016602:	603b      	str	r3, [r7, #0]
#if (!defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SMALL_STACK)) || defined(WOLFSSL_SP_NO_MALLOC)
    sp_digit a[192], m[96], r[192];
#else
    sp_digit* d = NULL;
 8016604:	2300      	movs	r3, #0
 8016606:	637b      	str	r3, [r7, #52]	; 0x34
    sp_digit* a = NULL;
 8016608:	2300      	movs	r3, #0
 801660a:	633b      	str	r3, [r7, #48]	; 0x30
    sp_digit* m = NULL;
 801660c:	2300      	movs	r3, #0
 801660e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sp_digit* r = NULL;
 8016610:	2300      	movs	r3, #0
 8016612:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    sp_digit *ah = NULL;
 8016614:	2300      	movs	r3, #0
 8016616:	627b      	str	r3, [r7, #36]	; 0x24
    sp_digit e[1];
    int err = MP_OKAY;
 8016618:	2300      	movs	r3, #0
 801661a:	623b      	str	r3, [r7, #32]

    if (*outLen < 384) {
 801661c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8016624:	d203      	bcs.n	801662e <sp_RsaPublic_3072+0x38>
        err = MP_TO_E;
 8016626:	f06f 0370 	mvn.w	r3, #112	; 0x70
 801662a:	623b      	str	r3, [r7, #32]
 801662c:	e021      	b.n	8016672 <sp_RsaPublic_3072+0x7c>
    }
    else if (mp_count_bits(em) > 32 || inLen > 384 ||
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	f004 fd82 	bl	801b138 <sp_count_bits>
 8016634:	4603      	mov	r3, r0
 8016636:	2b20      	cmp	r3, #32
 8016638:	dc0a      	bgt.n	8016650 <sp_RsaPublic_3072+0x5a>
 801663a:	68bb      	ldr	r3, [r7, #8]
 801663c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8016640:	d806      	bhi.n	8016650 <sp_RsaPublic_3072+0x5a>
                                                     mp_count_bits(mm) != 3072) {
 8016642:	6838      	ldr	r0, [r7, #0]
 8016644:	f004 fd78 	bl	801b138 <sp_count_bits>
 8016648:	4603      	mov	r3, r0
    else if (mp_count_bits(em) > 32 || inLen > 384 ||
 801664a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801664e:	d003      	beq.n	8016658 <sp_RsaPublic_3072+0x62>
        err = MP_READ_E;
 8016650:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8016654:	623b      	str	r3, [r7, #32]
 8016656:	e00c      	b.n	8016672 <sp_RsaPublic_3072+0x7c>
    }
    else if (mp_iseven(mm)) {
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d008      	beq.n	8016672 <sp_RsaPublic_3072+0x7c>
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	689b      	ldr	r3, [r3, #8]
 8016664:	f003 0301 	and.w	r3, r3, #1
 8016668:	2b00      	cmp	r3, #0
 801666a:	d102      	bne.n	8016672 <sp_RsaPublic_3072+0x7c>
        err = MP_VAL;
 801666c:	f06f 0302 	mvn.w	r3, #2
 8016670:	623b      	str	r3, [r7, #32]
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (err == MP_OKAY) {
 8016672:	6a3b      	ldr	r3, [r7, #32]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d10a      	bne.n	801668e <sp_RsaPublic_3072+0x98>
        d = (sp_digit*)XMALLOC(sizeof(sp_digit) * 96 * 5, NULL,
 8016678:	f44f 60f0 	mov.w	r0, #1920	; 0x780
 801667c:	f7fa feee 	bl	801145c <wolfSSL_Malloc>
 8016680:	6378      	str	r0, [r7, #52]	; 0x34
                                                              DYNAMIC_TYPE_RSA);
        if (d == NULL)
 8016682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016684:	2b00      	cmp	r3, #0
 8016686:	d102      	bne.n	801668e <sp_RsaPublic_3072+0x98>
            err = MEMORY_E;
 8016688:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801668c:	623b      	str	r3, [r7, #32]
    }

    if (err == MP_OKAY) {
 801668e:	6a3b      	ldr	r3, [r7, #32]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d109      	bne.n	80166a8 <sp_RsaPublic_3072+0xb2>
        a = d;
 8016694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016696:	633b      	str	r3, [r7, #48]	; 0x30
        r = a + 96 * 2;
 8016698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801669a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801669e:	62bb      	str	r3, [r7, #40]	; 0x28
        m = r + 96 * 2;
 80166a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80166a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
#endif

    if (err == MP_OKAY) {
 80166a8:	6a3b      	ldr	r3, [r7, #32]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d112      	bne.n	80166d4 <sp_RsaPublic_3072+0xde>
        ah = a + 96;
 80166ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80166b4:	627b      	str	r3, [r7, #36]	; 0x24

        sp_3072_from_bin(ah, 96, in, inLen);
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	68fa      	ldr	r2, [r7, #12]
 80166ba:	2160      	movs	r1, #96	; 0x60
 80166bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166be:	f7fe fc3f 	bl	8014f40 <sp_3072_from_bin>
#if DIGIT_BIT >= 32
        e[0] = em->dp[0];
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	689b      	ldr	r3, [r3, #8]
 80166c6:	617b      	str	r3, [r7, #20]
        e[0] = em->dp[0];
        if (em->used > 1) {
            e[0] |= ((sp_digit)em->dp[1]) << DIGIT_BIT;
        }
#endif
        if (e[0] == 0) {
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d102      	bne.n	80166d4 <sp_RsaPublic_3072+0xde>
            err = MP_EXPTMOD_E;
 80166ce:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80166d2:	623b      	str	r3, [r7, #32]
        }
    }
    if (err == MP_OKAY) {
 80166d4:	6a3b      	ldr	r3, [r7, #32]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	f040 80a7 	bne.w	801682a <sp_RsaPublic_3072+0x234>
        sp_3072_from_mp(m, 96, mm);
 80166dc:	683a      	ldr	r2, [r7, #0]
 80166de:	2160      	movs	r1, #96	; 0x60
 80166e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80166e2:	f7fe fc9e 	bl	8015022 <sp_3072_from_mp>

        if (e[0] == 0x3) {
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	2b03      	cmp	r3, #3
 80166ea:	d11c      	bne.n	8016726 <sp_RsaPublic_3072+0x130>
            if (err == MP_OKAY) {
 80166ec:	6a3b      	ldr	r3, [r7, #32]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d109      	bne.n	8016706 <sp_RsaPublic_3072+0x110>
                sp_3072_sqr_96(r, ah);
 80166f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80166f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166f6:	f7fe fe01 	bl	80152fc <sp_3072_sqr_96>
                err = sp_3072_mod_96_cond(r, r, m);
 80166fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80166fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80166fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016700:	f7ff ff68 	bl	80165d4 <sp_3072_mod_96_cond>
 8016704:	6238      	str	r0, [r7, #32]
            }
            if (err == MP_OKAY) {
 8016706:	6a3b      	ldr	r3, [r7, #32]
 8016708:	2b00      	cmp	r3, #0
 801670a:	f040 808e 	bne.w	801682a <sp_RsaPublic_3072+0x234>
                sp_3072_mul_96(r, ah, r);
 801670e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016714:	f7fe fd7b 	bl	801520e <sp_3072_mul_96>
                err = sp_3072_mod_96_cond(r, r, m);
 8016718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801671a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801671c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801671e:	f7ff ff59 	bl	80165d4 <sp_3072_mod_96_cond>
 8016722:	6238      	str	r0, [r7, #32]
 8016724:	e081      	b.n	801682a <sp_RsaPublic_3072+0x234>
        }
        else {
            int i;
            sp_digit mp;

            sp_3072_mont_setup(m, &mp);
 8016726:	f107 0310 	add.w	r3, r7, #16
 801672a:	4619      	mov	r1, r3
 801672c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801672e:	f7fe ffdf 	bl	80156f0 <sp_3072_mont_setup>

            /* Convert to Montgomery form. */
            XMEMSET(a, 0, sizeof(sp_digit) * 96);
 8016732:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8016736:	2100      	movs	r1, #0
 8016738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801673a:	f005 f98e 	bl	801ba5a <memset>
            err = sp_3072_mod_96_cond(a, a, m);
 801673e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016744:	f7ff ff46 	bl	80165d4 <sp_3072_mod_96_cond>
 8016748:	6238      	str	r0, [r7, #32]

            if (err == MP_OKAY) {
 801674a:	6a3b      	ldr	r3, [r7, #32]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d16c      	bne.n	801682a <sp_RsaPublic_3072+0x234>
                for (i = 31; i >= 0; i--) {
 8016750:	231f      	movs	r3, #31
 8016752:	61fb      	str	r3, [r7, #28]
 8016754:	e008      	b.n	8016768 <sp_RsaPublic_3072+0x172>
                    if (e[0] >> i) {
 8016756:	697a      	ldr	r2, [r7, #20]
 8016758:	69fb      	ldr	r3, [r7, #28]
 801675a:	fa22 f303 	lsr.w	r3, r2, r3
 801675e:	2b00      	cmp	r3, #0
 8016760:	d106      	bne.n	8016770 <sp_RsaPublic_3072+0x17a>
                for (i = 31; i >= 0; i--) {
 8016762:	69fb      	ldr	r3, [r7, #28]
 8016764:	3b01      	subs	r3, #1
 8016766:	61fb      	str	r3, [r7, #28]
 8016768:	69fb      	ldr	r3, [r7, #28]
 801676a:	2b00      	cmp	r3, #0
 801676c:	daf3      	bge.n	8016756 <sp_RsaPublic_3072+0x160>
 801676e:	e000      	b.n	8016772 <sp_RsaPublic_3072+0x17c>
                        break;
 8016770:	bf00      	nop
                    }
                }

                XMEMCPY(r, a, sizeof(sp_digit) * 96);
 8016772:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8016776:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801677a:	f005 f94a 	bl	801ba12 <memcpy>
                for (i--; i>=0; i--) {
 801677e:	69fb      	ldr	r3, [r7, #28]
 8016780:	3b01      	subs	r3, #1
 8016782:	61fb      	str	r3, [r7, #28]
 8016784:	e018      	b.n	80167b8 <sp_RsaPublic_3072+0x1c2>
                    sp_3072_mont_sqr_96(r, r, m, mp);
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801678a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801678c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801678e:	f7ff fd80 	bl	8016292 <sp_3072_mont_sqr_96>
                    if (((e[0] >> i) & 1) == 1) {
 8016792:	697a      	ldr	r2, [r7, #20]
 8016794:	69fb      	ldr	r3, [r7, #28]
 8016796:	fa22 f303 	lsr.w	r3, r2, r3
 801679a:	f003 0301 	and.w	r3, r3, #1
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d007      	beq.n	80167b2 <sp_RsaPublic_3072+0x1bc>
                        sp_3072_mont_mul_96(r, r, a, m, mp);
 80167a2:	693b      	ldr	r3, [r7, #16]
 80167a4:	9300      	str	r3, [sp, #0]
 80167a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80167ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167ae:	f7ff fd5b 	bl	8016268 <sp_3072_mont_mul_96>
                for (i--; i>=0; i--) {
 80167b2:	69fb      	ldr	r3, [r7, #28]
 80167b4:	3b01      	subs	r3, #1
 80167b6:	61fb      	str	r3, [r7, #28]
 80167b8:	69fb      	ldr	r3, [r7, #28]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	dae3      	bge.n	8016786 <sp_RsaPublic_3072+0x190>
                    }
                }
                XMEMSET(&r[96], 0, sizeof(sp_digit) * 96);
 80167be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80167c4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80167c8:	2100      	movs	r1, #0
 80167ca:	4618      	mov	r0, r3
 80167cc:	f005 f945 	bl	801ba5a <memset>
                sp_3072_mont_reduce_96(r, m, mp);
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	461a      	mov	r2, r3
 80167d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167d8:	f7ff fcc9 	bl	801616e <sp_3072_mont_reduce_96>

                for (i = 95; i > 0; i--) {
 80167dc:	235f      	movs	r3, #95	; 0x5f
 80167de:	61fb      	str	r3, [r7, #28]
 80167e0:	e00e      	b.n	8016800 <sp_RsaPublic_3072+0x20a>
                    if (r[i] != m[i]) {
 80167e2:	69fb      	ldr	r3, [r7, #28]
 80167e4:	009b      	lsls	r3, r3, #2
 80167e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80167e8:	4413      	add	r3, r2
 80167ea:	681a      	ldr	r2, [r3, #0]
 80167ec:	69fb      	ldr	r3, [r7, #28]
 80167ee:	009b      	lsls	r3, r3, #2
 80167f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167f2:	440b      	add	r3, r1
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	429a      	cmp	r2, r3
 80167f8:	d106      	bne.n	8016808 <sp_RsaPublic_3072+0x212>
                for (i = 95; i > 0; i--) {
 80167fa:	69fb      	ldr	r3, [r7, #28]
 80167fc:	3b01      	subs	r3, #1
 80167fe:	61fb      	str	r3, [r7, #28]
 8016800:	69fb      	ldr	r3, [r7, #28]
 8016802:	2b00      	cmp	r3, #0
 8016804:	dced      	bgt.n	80167e2 <sp_RsaPublic_3072+0x1ec>
 8016806:	e000      	b.n	801680a <sp_RsaPublic_3072+0x214>
                        break;
 8016808:	bf00      	nop
                    }
                }
                if (r[i] >= m[i]) {
 801680a:	69fb      	ldr	r3, [r7, #28]
 801680c:	009b      	lsls	r3, r3, #2
 801680e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016810:	4413      	add	r3, r2
 8016812:	681a      	ldr	r2, [r3, #0]
 8016814:	69fb      	ldr	r3, [r7, #28]
 8016816:	009b      	lsls	r3, r3, #2
 8016818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801681a:	440b      	add	r3, r1
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	429a      	cmp	r2, r3
 8016820:	d303      	bcc.n	801682a <sp_RsaPublic_3072+0x234>
                    sp_3072_sub_in_place_96(r, m);
 8016822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016826:	f7fe fcc4 	bl	80151b2 <sp_3072_sub_in_place_96>
                }
            }
        }
    }

    if (err == MP_OKAY) {
 801682a:	6a3b      	ldr	r3, [r7, #32]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d107      	bne.n	8016840 <sp_RsaPublic_3072+0x24a>
        sp_3072_to_bin(r, out);
 8016830:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016834:	f7fe fc1a 	bl	801506c <sp_3072_to_bin>
        *outLen = 384;
 8016838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801683a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801683e:	601a      	str	r2, [r3, #0]
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (d != NULL) {
 8016840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016842:	2b00      	cmp	r3, #0
 8016844:	d007      	beq.n	8016856 <sp_RsaPublic_3072+0x260>
        XFREE(d, NULL, DYNAMIC_TYPE_RSA);
 8016846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016848:	61bb      	str	r3, [r7, #24]
 801684a:	69bb      	ldr	r3, [r7, #24]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d002      	beq.n	8016856 <sp_RsaPublic_3072+0x260>
 8016850:	69b8      	ldr	r0, [r7, #24]
 8016852:	f7fa fe1f 	bl	8011494 <wolfSSL_Free>
    }
#endif

    return err;
 8016856:	6a3b      	ldr	r3, [r7, #32]
}
 8016858:	4618      	mov	r0, r3
 801685a:	3738      	adds	r7, #56	; 0x38
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}

08016860 <sp_3072_cond_add_48>:
 * b  A single precision number to add.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_3072_cond_add_48(sp_digit* r, const sp_digit* a, const sp_digit* b,
        sp_digit m)
{
 8016860:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8016864:	b086      	sub	sp, #24
 8016866:	af00      	add	r7, sp, #0
 8016868:	60f8      	str	r0, [r7, #12]
 801686a:	60b9      	str	r1, [r7, #8]
 801686c:	607a      	str	r2, [r7, #4]
 801686e:	603b      	str	r3, [r7, #0]
    sp_digit c = 0;
 8016870:	2300      	movs	r3, #0
 8016872:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8016874:	68fa      	ldr	r2, [r7, #12]
 8016876:	68b9      	ldr	r1, [r7, #8]
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	683c      	ldr	r4, [r7, #0]
 801687c:	697b      	ldr	r3, [r7, #20]
 801687e:	f04f 05c0 	mov.w	r5, #192	; 0xc0
 8016882:	46a9      	mov	r9, r5
 8016884:	f04f 0800 	mov.w	r8, #0
 8016888:	f850 6008 	ldr.w	r6, [r0, r8]
 801688c:	ea06 0604 	and.w	r6, r6, r4
 8016890:	f113 35ff 	adds.w	r5, r3, #4294967295
 8016894:	f851 5008 	ldr.w	r5, [r1, r8]
 8016898:	4175      	adcs	r5, r6
 801689a:	f04f 0300 	mov.w	r3, #0
 801689e:	415b      	adcs	r3, r3
 80168a0:	f842 5008 	str.w	r5, [r2, r8]
 80168a4:	f108 0804 	add.w	r8, r8, #4
 80168a8:	45c8      	cmp	r8, r9
 80168aa:	dbed      	blt.n	8016888 <sp_3072_cond_add_48+0x28>
 80168ac:	617b      	str	r3, [r7, #20]
        : [c] "+r" (c)
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
 80168ae:	697b      	ldr	r3, [r7, #20]
}
 80168b0:	4618      	mov	r0, r3
 80168b2:	3718      	adds	r7, #24
 80168b4:	46bd      	mov	sp, r7
 80168b6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80168ba:	4770      	bx	lr

080168bc <sp_RsaPrivate_3072>:
 * an array is too long and MEMORY_E when dynamic memory allocation fails.
 */
int sp_RsaPrivate_3072(const byte* in, word32 inLen, mp_int* dm,
    mp_int* pm, mp_int* qm, mp_int* dpm, mp_int* dqm, mp_int* qim, mp_int* mm,
    byte* out, word32* outLen)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b094      	sub	sp, #80	; 0x50
 80168c0:	af02      	add	r7, sp, #8
 80168c2:	60f8      	str	r0, [r7, #12]
 80168c4:	60b9      	str	r1, [r7, #8]
 80168c6:	607a      	str	r2, [r7, #4]
 80168c8:	603b      	str	r3, [r7, #0]
#if (!defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SMALL_STACK)) || defined(WOLFSSL_SP_NO_MALLOC)
    sp_digit a[96 * 2];
    sp_digit p[48], q[48], dp[48];
    sp_digit tmpa[96], tmpb[96];
#else
    sp_digit* t = NULL;
 80168ca:	2300      	movs	r3, #0
 80168cc:	647b      	str	r3, [r7, #68]	; 0x44
    sp_digit* a = NULL;
 80168ce:	2300      	movs	r3, #0
 80168d0:	643b      	str	r3, [r7, #64]	; 0x40
    sp_digit* p = NULL;
 80168d2:	2300      	movs	r3, #0
 80168d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sp_digit* q = NULL;
 80168d6:	2300      	movs	r3, #0
 80168d8:	63bb      	str	r3, [r7, #56]	; 0x38
    sp_digit* dp = NULL;
 80168da:	2300      	movs	r3, #0
 80168dc:	637b      	str	r3, [r7, #52]	; 0x34
    sp_digit* tmpa = NULL;
 80168de:	2300      	movs	r3, #0
 80168e0:	633b      	str	r3, [r7, #48]	; 0x30
    sp_digit* tmpb = NULL;
 80168e2:	2300      	movs	r3, #0
 80168e4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
    sp_digit* r = NULL;
 80168e6:	2300      	movs	r3, #0
 80168e8:	62bb      	str	r3, [r7, #40]	; 0x28
    sp_digit* qi = NULL;
 80168ea:	2300      	movs	r3, #0
 80168ec:	627b      	str	r3, [r7, #36]	; 0x24
    sp_digit* dq = NULL;
 80168ee:	2300      	movs	r3, #0
 80168f0:	623b      	str	r3, [r7, #32]
    sp_digit c;
    int err = MP_OKAY;
 80168f2:	2300      	movs	r3, #0
 80168f4:	61fb      	str	r3, [r7, #28]

    (void)dm;
    (void)mm;

    if (*outLen < 384) {
 80168f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80168fe:	d203      	bcs.n	8016908 <sp_RsaPrivate_3072+0x4c>
        err = MP_TO_E;
 8016900:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8016904:	61fb      	str	r3, [r7, #28]
 8016906:	e01b      	b.n	8016940 <sp_RsaPrivate_3072+0x84>
    }
    else if (inLen > 384 || mp_count_bits(mm) != 3072) {
 8016908:	68bb      	ldr	r3, [r7, #8]
 801690a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 801690e:	d806      	bhi.n	801691e <sp_RsaPrivate_3072+0x62>
 8016910:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8016912:	f004 fc11 	bl	801b138 <sp_count_bits>
 8016916:	4603      	mov	r3, r0
 8016918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801691c:	d003      	beq.n	8016926 <sp_RsaPrivate_3072+0x6a>
        err = MP_READ_E;
 801691e:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8016922:	61fb      	str	r3, [r7, #28]
 8016924:	e00c      	b.n	8016940 <sp_RsaPrivate_3072+0x84>
    }
    else if (mp_iseven(mm)) {
 8016926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d008      	beq.n	8016940 <sp_RsaPrivate_3072+0x84>
 801692e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016930:	689b      	ldr	r3, [r3, #8]
 8016932:	f003 0301 	and.w	r3, r3, #1
 8016936:	2b00      	cmp	r3, #0
 8016938:	d102      	bne.n	8016940 <sp_RsaPrivate_3072+0x84>
        err = MP_VAL;
 801693a:	f06f 0302 	mvn.w	r3, #2
 801693e:	61fb      	str	r3, [r7, #28]
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (err == MP_OKAY) {
 8016940:	69fb      	ldr	r3, [r7, #28]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d10a      	bne.n	801695c <sp_RsaPrivate_3072+0xa0>
        t = (sp_digit*)XMALLOC(sizeof(sp_digit) * 48 * 11, NULL,
 8016946:	f44f 6004 	mov.w	r0, #2112	; 0x840
 801694a:	f7fa fd87 	bl	801145c <wolfSSL_Malloc>
 801694e:	6478      	str	r0, [r7, #68]	; 0x44
                                                              DYNAMIC_TYPE_RSA);
        if (t == NULL)
 8016950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016952:	2b00      	cmp	r3, #0
 8016954:	d102      	bne.n	801695c <sp_RsaPrivate_3072+0xa0>
            err = MEMORY_E;
 8016956:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801695a:	61fb      	str	r3, [r7, #28]
    }
    if (err == MP_OKAY) {
 801695c:	69fb      	ldr	r3, [r7, #28]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d11a      	bne.n	8016998 <sp_RsaPrivate_3072+0xdc>
        a = t;
 8016962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016964:	643b      	str	r3, [r7, #64]	; 0x40
        p = a + 96 * 2;
 8016966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016968:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801696c:	63fb      	str	r3, [r7, #60]	; 0x3c
        q = p + 48;
 801696e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016970:	33c0      	adds	r3, #192	; 0xc0
 8016972:	63bb      	str	r3, [r7, #56]	; 0x38
        qi = dq = dp = q + 48;
 8016974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016976:	33c0      	adds	r3, #192	; 0xc0
 8016978:	637b      	str	r3, [r7, #52]	; 0x34
 801697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801697c:	623b      	str	r3, [r7, #32]
 801697e:	6a3b      	ldr	r3, [r7, #32]
 8016980:	627b      	str	r3, [r7, #36]	; 0x24
        tmpa = qi + 48;
 8016982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016984:	33c0      	adds	r3, #192	; 0xc0
 8016986:	633b      	str	r3, [r7, #48]	; 0x30
        tmpb = tmpa + 96;
 8016988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801698a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801698e:	62fb      	str	r3, [r7, #44]	; 0x2c

        r = t + 96;
 8016990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016992:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8016996:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#else
#endif

    if (err == MP_OKAY) {
 8016998:	69fb      	ldr	r3, [r7, #28]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d120      	bne.n	80169e0 <sp_RsaPrivate_3072+0x124>
#if (!defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SMALL_STACK)) || defined(WOLFSSL_SP_NO_MALLOC)
        r = a;
        qi = dq = dp;
#endif
        sp_3072_from_bin(a, 96, in, inLen);
 801699e:	68bb      	ldr	r3, [r7, #8]
 80169a0:	68fa      	ldr	r2, [r7, #12]
 80169a2:	2160      	movs	r1, #96	; 0x60
 80169a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80169a6:	f7fe facb 	bl	8014f40 <sp_3072_from_bin>
        sp_3072_from_mp(p, 48, pm);
 80169aa:	683a      	ldr	r2, [r7, #0]
 80169ac:	2130      	movs	r1, #48	; 0x30
 80169ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80169b0:	f7fe fb37 	bl	8015022 <sp_3072_from_mp>
        sp_3072_from_mp(q, 48, qm);
 80169b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80169b6:	2130      	movs	r1, #48	; 0x30
 80169b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80169ba:	f7fe fb32 	bl	8015022 <sp_3072_from_mp>
        sp_3072_from_mp(dp, 48, dpm);
 80169be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80169c0:	2130      	movs	r1, #48	; 0x30
 80169c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80169c4:	f7fe fb2d 	bl	8015022 <sp_3072_from_mp>

        err = sp_3072_mod_exp_48(tmpa, a, dp, 1536, p, 1);
 80169c8:	2301      	movs	r3, #1
 80169ca:	9301      	str	r3, [sp, #4]
 80169cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169ce:	9300      	str	r3, [sp, #0]
 80169d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80169d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80169d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169da:	f7ff f9aa 	bl	8015d32 <sp_3072_mod_exp_48>
 80169de:	61f8      	str	r0, [r7, #28]
    }
    if (err == MP_OKAY) {
 80169e0:	69fb      	ldr	r3, [r7, #28]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d110      	bne.n	8016a08 <sp_RsaPrivate_3072+0x14c>
        sp_3072_from_mp(dq, 48, dqm);
 80169e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80169e8:	2130      	movs	r1, #48	; 0x30
 80169ea:	6a38      	ldr	r0, [r7, #32]
 80169ec:	f7fe fb19 	bl	8015022 <sp_3072_from_mp>
        err = sp_3072_mod_exp_48(tmpb, a, dq, 1536, q, 1);
 80169f0:	2301      	movs	r3, #1
 80169f2:	9301      	str	r3, [sp, #4]
 80169f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169f6:	9300      	str	r3, [sp, #0]
 80169f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80169fc:	6a3a      	ldr	r2, [r7, #32]
 80169fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a02:	f7ff f996 	bl	8015d32 <sp_3072_mod_exp_48>
 8016a06:	61f8      	str	r0, [r7, #28]
    }

    if (err == MP_OKAY) {
 8016a08:	69fb      	ldr	r3, [r7, #28]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d124      	bne.n	8016a58 <sp_RsaPrivate_3072+0x19c>
        c = sp_3072_sub_in_place_48(tmpa, tmpb);
 8016a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a12:	f7fe fd4d 	bl	80154b0 <sp_3072_sub_in_place_48>
 8016a16:	61b8      	str	r0, [r7, #24]
        c += sp_3072_cond_add_48(tmpa, tmpa, p, c);
 8016a18:	69bb      	ldr	r3, [r7, #24]
 8016a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a20:	f7ff ff1e 	bl	8016860 <sp_3072_cond_add_48>
 8016a24:	4602      	mov	r2, r0
 8016a26:	69bb      	ldr	r3, [r7, #24]
 8016a28:	4413      	add	r3, r2
 8016a2a:	61bb      	str	r3, [r7, #24]
        sp_3072_cond_add_48(tmpa, tmpa, p, c);
 8016a2c:	69bb      	ldr	r3, [r7, #24]
 8016a2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016a32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a34:	f7ff ff14 	bl	8016860 <sp_3072_cond_add_48>

        sp_3072_from_mp(qi, 48, qim);
 8016a38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016a3a:	2130      	movs	r1, #48	; 0x30
 8016a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a3e:	f7fe faf0 	bl	8015022 <sp_3072_from_mp>
        sp_3072_mul_48(tmpa, tmpa, qi);
 8016a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016a46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a48:	f7fe fd60 	bl	801550c <sp_3072_mul_48>
        err = sp_3072_mod_48(tmpa, tmpa, p);
 8016a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016a4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a52:	f7ff f95d 	bl	8015d10 <sp_3072_mod_48>
 8016a56:	61f8      	str	r0, [r7, #28]
    }

    if (err == MP_OKAY) {
 8016a58:	69fb      	ldr	r3, [r7, #28]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d118      	bne.n	8016a90 <sp_RsaPrivate_3072+0x1d4>
        sp_3072_mul_48(tmpa, q, tmpa);
 8016a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a64:	f7fe fd52 	bl	801550c <sp_3072_mul_48>
        XMEMSET(&tmpb[48], 0, sizeof(sp_digit) * 48);
 8016a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a6a:	33c0      	adds	r3, #192	; 0xc0
 8016a6c:	22c0      	movs	r2, #192	; 0xc0
 8016a6e:	2100      	movs	r1, #0
 8016a70:	4618      	mov	r0, r3
 8016a72:	f004 fff2 	bl	801ba5a <memset>
        sp_3072_add_96(r, tmpb, tmpa);
 8016a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a7c:	f7fe fb68 	bl	8015150 <sp_3072_add_96>

        sp_3072_to_bin(r, out);
 8016a80:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a84:	f7fe faf2 	bl	801506c <sp_3072_to_bin>
        *outLen = 384;
 8016a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016a8a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8016a8e:	601a      	str	r2, [r3, #0]
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (t != NULL) {
 8016a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d00d      	beq.n	8016ab2 <sp_RsaPrivate_3072+0x1f6>
        XMEMSET(t, 0, sizeof(sp_digit) * 48 * 11);
 8016a96:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8016a9a:	2100      	movs	r1, #0
 8016a9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016a9e:	f004 ffdc 	bl	801ba5a <memset>
        XFREE(t, NULL, DYNAMIC_TYPE_RSA);
 8016aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016aa4:	617b      	str	r3, [r7, #20]
 8016aa6:	697b      	ldr	r3, [r7, #20]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d002      	beq.n	8016ab2 <sp_RsaPrivate_3072+0x1f6>
 8016aac:	6978      	ldr	r0, [r7, #20]
 8016aae:	f7fa fcf1 	bl	8011494 <wolfSSL_Free>
    XMEMSET(p,    0, sizeof(p));
    XMEMSET(q,    0, sizeof(q));
    XMEMSET(dp,   0, sizeof(dp));
#endif
#endif /* SP_RSA_PRIVATE_EXP_D || RSA_LOW_MEM */
    return err;
 8016ab2:	69fb      	ldr	r3, [r7, #28]
}
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	3748      	adds	r7, #72	; 0x48
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	bd80      	pop	{r7, pc}

08016abc <sp_256_point_new_ex_8>:
    0xaa3a93e7,0x5ac635d8
};
#endif

static int sp_256_point_new_ex_8(void* heap, sp_point_256* sp, sp_point_256** p)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b086      	sub	sp, #24
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	60f8      	str	r0, [r7, #12]
 8016ac4:	60b9      	str	r1, [r7, #8]
 8016ac6:	607a      	str	r2, [r7, #4]
    int ret = MP_OKAY;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	617b      	str	r3, [r7, #20]
    (void)heap;
#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    (void)sp;
    *p = (sp_point_256*)XMALLOC(sizeof(sp_point_256), heap, DYNAMIC_TYPE_ECC);
 8016acc:	20c4      	movs	r0, #196	; 0xc4
 8016ace:	f7fa fcc5 	bl	801145c <wolfSSL_Malloc>
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	601a      	str	r2, [r3, #0]
#else
    *p = sp;
#endif
    if (*p == NULL) {
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d102      	bne.n	8016ae6 <sp_256_point_new_ex_8+0x2a>
        ret = MEMORY_E;
 8016ae0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8016ae4:	617b      	str	r3, [r7, #20]
    }
    return ret;
 8016ae6:	697b      	ldr	r3, [r7, #20]
}
 8016ae8:	4618      	mov	r0, r3
 8016aea:	3718      	adds	r7, #24
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bd80      	pop	{r7, pc}

08016af0 <sp_256_point_free_8>:
#define sp_256_point_new_8(heap, sp, p) sp_256_point_new_ex_8((heap), &(sp), &(p))
#endif


static void sp_256_point_free_8(sp_point_256* p, int clear, void* heap)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b086      	sub	sp, #24
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	60f8      	str	r0, [r7, #12]
 8016af8:	60b9      	str	r1, [r7, #8]
 8016afa:	607a      	str	r2, [r7, #4]
#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
/* If valid pointer then clear point data if requested and free data. */
    if (p != NULL) {
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d00f      	beq.n	8016b22 <sp_256_point_free_8+0x32>
        if (clear != 0) {
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d004      	beq.n	8016b12 <sp_256_point_free_8+0x22>
            XMEMSET(p, 0, sizeof(*p));
 8016b08:	22c4      	movs	r2, #196	; 0xc4
 8016b0a:	2100      	movs	r1, #0
 8016b0c:	68f8      	ldr	r0, [r7, #12]
 8016b0e:	f004 ffa4 	bl	801ba5a <memset>
        }
        XFREE(p, heap, DYNAMIC_TYPE_ECC);
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	617b      	str	r3, [r7, #20]
 8016b16:	697b      	ldr	r3, [r7, #20]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d002      	beq.n	8016b22 <sp_256_point_free_8+0x32>
 8016b1c:	6978      	ldr	r0, [r7, #20]
 8016b1e:	f7fa fcb9 	bl	8011494 <wolfSSL_Free>
    if (clear != 0) {
        XMEMSET(p, 0, sizeof(*p));
    }
#endif
    (void)heap;
}
 8016b22:	bf00      	nop
 8016b24:	3718      	adds	r7, #24
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}

08016b2a <sp_256_mod_mul_norm_8>:
 * r  The resulting Montgomery form number.
 * a  The number to convert.
 * m  The modulus (prime).
 */
static int sp_256_mod_mul_norm_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8016b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b2e:	b085      	sub	sp, #20
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	60f8      	str	r0, [r7, #12]
 8016b34:	60b9      	str	r1, [r7, #8]
 8016b36:	607a      	str	r2, [r7, #4]
   (void)m;

    __asm__ __volatile__ (
 8016b38:	68f9      	ldr	r1, [r7, #12]
 8016b3a:	68b8      	ldr	r0, [r7, #8]
 8016b3c:	b086      	sub	sp, #24
 8016b3e:	6802      	ldr	r2, [r0, #0]
 8016b40:	6843      	ldr	r3, [r0, #4]
 8016b42:	6884      	ldr	r4, [r0, #8]
 8016b44:	68c5      	ldr	r5, [r0, #12]
 8016b46:	6906      	ldr	r6, [r0, #16]
 8016b48:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8016b4c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8016b50:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8016b54:	f04f 0e00 	mov.w	lr, #0
 8016b58:	f04f 0c00 	mov.w	ip, #0
 8016b5c:	eb12 0b03 	adds.w	fp, r2, r3
 8016b60:	f14e 0e00 	adc.w	lr, lr, #0
 8016b64:	ebbb 0b05 	subs.w	fp, fp, r5
 8016b68:	f16c 0c00 	sbc.w	ip, ip, #0
 8016b6c:	ebbb 0b06 	subs.w	fp, fp, r6
 8016b70:	f16c 0c00 	sbc.w	ip, ip, #0
 8016b74:	ebbb 0b08 	subs.w	fp, fp, r8
 8016b78:	f16c 0c00 	sbc.w	ip, ip, #0
 8016b7c:	ebbb 0b09 	subs.w	fp, fp, r9
 8016b80:	f16c 0c00 	sbc.w	ip, ip, #0
 8016b84:	f8cd b000 	str.w	fp, [sp]
 8016b88:	f1cc 0c00 	rsb	ip, ip, #0
 8016b8c:	f04f 0b00 	mov.w	fp, #0
 8016b90:	eb1e 0e03 	adds.w	lr, lr, r3
 8016b94:	f14b 0b00 	adc.w	fp, fp, #0
 8016b98:	eb1e 0e04 	adds.w	lr, lr, r4
 8016b9c:	f14b 0b00 	adc.w	fp, fp, #0
 8016ba0:	ebbe 0e0c 	subs.w	lr, lr, ip
 8016ba4:	f04f 0c00 	mov.w	ip, #0
 8016ba8:	f16c 0c00 	sbc.w	ip, ip, #0
 8016bac:	ebbe 0e06 	subs.w	lr, lr, r6
 8016bb0:	f16c 0c00 	sbc.w	ip, ip, #0
 8016bb4:	ebbe 0e08 	subs.w	lr, lr, r8
 8016bb8:	f16c 0c00 	sbc.w	ip, ip, #0
 8016bbc:	ebbe 0e09 	subs.w	lr, lr, r9
 8016bc0:	f16c 0c00 	sbc.w	ip, ip, #0
 8016bc4:	ebbe 0e0a 	subs.w	lr, lr, sl
 8016bc8:	f16c 0c00 	sbc.w	ip, ip, #0
 8016bcc:	f8cd e004 	str.w	lr, [sp, #4]
 8016bd0:	f1cc 0c00 	rsb	ip, ip, #0
 8016bd4:	f04f 0e00 	mov.w	lr, #0
 8016bd8:	eb1b 0b04 	adds.w	fp, fp, r4
 8016bdc:	f14e 0e00 	adc.w	lr, lr, #0
 8016be0:	eb1b 0b05 	adds.w	fp, fp, r5
 8016be4:	f14e 0e00 	adc.w	lr, lr, #0
 8016be8:	ebbb 0b0c 	subs.w	fp, fp, ip
 8016bec:	f04f 0c00 	mov.w	ip, #0
 8016bf0:	f16c 0c00 	sbc.w	ip, ip, #0
 8016bf4:	ebbb 0b08 	subs.w	fp, fp, r8
 8016bf8:	f16c 0c00 	sbc.w	ip, ip, #0
 8016bfc:	ebbb 0b09 	subs.w	fp, fp, r9
 8016c00:	f16c 0c00 	sbc.w	ip, ip, #0
 8016c04:	ebbb 0b0a 	subs.w	fp, fp, sl
 8016c08:	f16c 0c00 	sbc.w	ip, ip, #0
 8016c0c:	f8cd b008 	str.w	fp, [sp, #8]
 8016c10:	f1cc 0c00 	rsb	ip, ip, #0
 8016c14:	f04f 0b00 	mov.w	fp, #0
 8016c18:	eb1e 0e05 	adds.w	lr, lr, r5
 8016c1c:	f14b 0b00 	adc.w	fp, fp, #0
 8016c20:	eb1e 0e05 	adds.w	lr, lr, r5
 8016c24:	f14b 0b00 	adc.w	fp, fp, #0
 8016c28:	eb1e 0e06 	adds.w	lr, lr, r6
 8016c2c:	f14b 0b00 	adc.w	fp, fp, #0
 8016c30:	eb1e 0e06 	adds.w	lr, lr, r6
 8016c34:	f14b 0b00 	adc.w	fp, fp, #0
 8016c38:	eb1e 0e08 	adds.w	lr, lr, r8
 8016c3c:	f14b 0b00 	adc.w	fp, fp, #0
 8016c40:	ebbe 0e0c 	subs.w	lr, lr, ip
 8016c44:	f04f 0c00 	mov.w	ip, #0
 8016c48:	f16c 0c00 	sbc.w	ip, ip, #0
 8016c4c:	ebbe 0e02 	subs.w	lr, lr, r2
 8016c50:	f16c 0c00 	sbc.w	ip, ip, #0
 8016c54:	ebbe 0e03 	subs.w	lr, lr, r3
 8016c58:	f16c 0c00 	sbc.w	ip, ip, #0
 8016c5c:	ebbe 0e0a 	subs.w	lr, lr, sl
 8016c60:	f16c 0c00 	sbc.w	ip, ip, #0
 8016c64:	f8cd e00c 	str.w	lr, [sp, #12]
 8016c68:	f1cc 0c00 	rsb	ip, ip, #0
 8016c6c:	f04f 0e00 	mov.w	lr, #0
 8016c70:	eb1b 0b06 	adds.w	fp, fp, r6
 8016c74:	f14e 0e00 	adc.w	lr, lr, #0
 8016c78:	eb1b 0b06 	adds.w	fp, fp, r6
 8016c7c:	f14e 0e00 	adc.w	lr, lr, #0
 8016c80:	eb1b 0b08 	adds.w	fp, fp, r8
 8016c84:	f14e 0e00 	adc.w	lr, lr, #0
 8016c88:	eb1b 0b08 	adds.w	fp, fp, r8
 8016c8c:	f14e 0e00 	adc.w	lr, lr, #0
 8016c90:	eb1b 0b09 	adds.w	fp, fp, r9
 8016c94:	f14e 0e00 	adc.w	lr, lr, #0
 8016c98:	ebbb 0b0c 	subs.w	fp, fp, ip
 8016c9c:	f04f 0c00 	mov.w	ip, #0
 8016ca0:	f16c 0c00 	sbc.w	ip, ip, #0
 8016ca4:	ebbb 0b03 	subs.w	fp, fp, r3
 8016ca8:	f16c 0c00 	sbc.w	ip, ip, #0
 8016cac:	ebbb 0b04 	subs.w	fp, fp, r4
 8016cb0:	f16c 0c00 	sbc.w	ip, ip, #0
 8016cb4:	f8cd b010 	str.w	fp, [sp, #16]
 8016cb8:	f1cc 0c00 	rsb	ip, ip, #0
 8016cbc:	f04f 0b00 	mov.w	fp, #0
 8016cc0:	eb1e 0e08 	adds.w	lr, lr, r8
 8016cc4:	f14b 0b00 	adc.w	fp, fp, #0
 8016cc8:	eb1e 0e08 	adds.w	lr, lr, r8
 8016ccc:	f14b 0b00 	adc.w	fp, fp, #0
 8016cd0:	eb1e 0e09 	adds.w	lr, lr, r9
 8016cd4:	f14b 0b00 	adc.w	fp, fp, #0
 8016cd8:	eb1e 0e09 	adds.w	lr, lr, r9
 8016cdc:	f14b 0b00 	adc.w	fp, fp, #0
 8016ce0:	eb1e 0e0a 	adds.w	lr, lr, sl
 8016ce4:	f14b 0b00 	adc.w	fp, fp, #0
 8016ce8:	ebbe 0e0c 	subs.w	lr, lr, ip
 8016cec:	f04f 0c00 	mov.w	ip, #0
 8016cf0:	f16c 0c00 	sbc.w	ip, ip, #0
 8016cf4:	ebbe 0e04 	subs.w	lr, lr, r4
 8016cf8:	f16c 0c00 	sbc.w	ip, ip, #0
 8016cfc:	ebbe 0e05 	subs.w	lr, lr, r5
 8016d00:	f16c 0c00 	sbc.w	ip, ip, #0
 8016d04:	f8cd e014 	str.w	lr, [sp, #20]
 8016d08:	f1cc 0c00 	rsb	ip, ip, #0
 8016d0c:	f04f 0e00 	mov.w	lr, #0
 8016d10:	eb1b 0b08 	adds.w	fp, fp, r8
 8016d14:	f14e 0e00 	adc.w	lr, lr, #0
 8016d18:	eb1b 0b09 	adds.w	fp, fp, r9
 8016d1c:	f14e 0e00 	adc.w	lr, lr, #0
 8016d20:	eb1b 0b09 	adds.w	fp, fp, r9
 8016d24:	f14e 0e00 	adc.w	lr, lr, #0
 8016d28:	eb1b 0b09 	adds.w	fp, fp, r9
 8016d2c:	f14e 0e00 	adc.w	lr, lr, #0
 8016d30:	eb1b 0b0a 	adds.w	fp, fp, sl
 8016d34:	f14e 0e00 	adc.w	lr, lr, #0
 8016d38:	eb1b 0b0a 	adds.w	fp, fp, sl
 8016d3c:	f14e 0e00 	adc.w	lr, lr, #0
 8016d40:	ebbb 0b0c 	subs.w	fp, fp, ip
 8016d44:	f04f 0c00 	mov.w	ip, #0
 8016d48:	f16c 0c00 	sbc.w	ip, ip, #0
 8016d4c:	ebbb 0b02 	subs.w	fp, fp, r2
 8016d50:	f16c 0c00 	sbc.w	ip, ip, #0
 8016d54:	ebbb 0b03 	subs.w	fp, fp, r3
 8016d58:	f16c 0c00 	sbc.w	ip, ip, #0
 8016d5c:	46d9      	mov	r9, fp
 8016d5e:	f1cc 0c00 	rsb	ip, ip, #0
 8016d62:	f04f 0b00 	mov.w	fp, #0
 8016d66:	eb1e 0e02 	adds.w	lr, lr, r2
 8016d6a:	f14b 0b00 	adc.w	fp, fp, #0
 8016d6e:	eb1e 0e0a 	adds.w	lr, lr, sl
 8016d72:	f14b 0b00 	adc.w	fp, fp, #0
 8016d76:	eb1e 0e0a 	adds.w	lr, lr, sl
 8016d7a:	f14b 0b00 	adc.w	fp, fp, #0
 8016d7e:	eb1e 0e0a 	adds.w	lr, lr, sl
 8016d82:	f14b 0b00 	adc.w	fp, fp, #0
 8016d86:	ebbe 0e0c 	subs.w	lr, lr, ip
 8016d8a:	f04f 0c00 	mov.w	ip, #0
 8016d8e:	f16c 0c00 	sbc.w	ip, ip, #0
 8016d92:	ebbe 0e04 	subs.w	lr, lr, r4
 8016d96:	f16c 0c00 	sbc.w	ip, ip, #0
 8016d9a:	ebbe 0e05 	subs.w	lr, lr, r5
 8016d9e:	f16c 0c00 	sbc.w	ip, ip, #0
 8016da2:	ebbe 0e06 	subs.w	lr, lr, r6
 8016da6:	f16c 0c00 	sbc.w	ip, ip, #0
 8016daa:	ebbe 0e08 	subs.w	lr, lr, r8
 8016dae:	f16c 0c00 	sbc.w	ip, ip, #0
 8016db2:	9a00      	ldr	r2, [sp, #0]
 8016db4:	9b01      	ldr	r3, [sp, #4]
 8016db6:	9c02      	ldr	r4, [sp, #8]
 8016db8:	9d03      	ldr	r5, [sp, #12]
 8016dba:	9e04      	ldr	r6, [sp, #16]
 8016dbc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016dc0:	f1cc 0c00 	rsb	ip, ip, #0
 8016dc4:	eb12 020b 	adds.w	r2, r2, fp
 8016dc8:	f153 0300 	adcs.w	r3, r3, #0
 8016dcc:	f154 0400 	adcs.w	r4, r4, #0
 8016dd0:	eb15 050c 	adds.w	r5, r5, ip
 8016dd4:	f156 0600 	adcs.w	r6, r6, #0
 8016dd8:	f158 0800 	adcs.w	r8, r8, #0
 8016ddc:	eb59 090c 	adcs.w	r9, r9, ip
 8016de0:	eb4e 0e0b 	adc.w	lr, lr, fp
 8016de4:	ebb2 020c 	subs.w	r2, r2, ip
 8016de8:	f173 0300 	sbcs.w	r3, r3, #0
 8016dec:	f174 0400 	sbcs.w	r4, r4, #0
 8016df0:	ebb5 050b 	subs.w	r5, r5, fp
 8016df4:	f176 0600 	sbcs.w	r6, r6, #0
 8016df8:	f178 0800 	sbcs.w	r8, r8, #0
 8016dfc:	eb79 090b 	sbcs.w	r9, r9, fp
 8016e00:	eb6e 0e0c 	sbc.w	lr, lr, ip
 8016e04:	600a      	str	r2, [r1, #0]
 8016e06:	604b      	str	r3, [r1, #4]
 8016e08:	608c      	str	r4, [r1, #8]
 8016e0a:	60cd      	str	r5, [r1, #12]
 8016e0c:	610e      	str	r6, [r1, #16]
 8016e0e:	f8c1 8014 	str.w	r8, [r1, #20]
 8016e12:	f8c1 9018 	str.w	r9, [r1, #24]
 8016e16:	f8c1 e01c 	str.w	lr, [r1, #28]
 8016e1a:	b006      	add	sp, #24
        :
        : [r] "r" (r), [a] "r" (a)
        : "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r12"
    );

    return MP_OKAY;
 8016e1c:	2300      	movs	r3, #0
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	3714      	adds	r7, #20
 8016e22:	46bd      	mov	sp, r7
 8016e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016e28 <sp_256_from_mp>:
 * r  A single precision integer.
 * size  Maximum number of bytes to convert
 * a  A multi-precision integer.
 */
static void sp_256_from_mp(sp_digit* r, int size, const mp_int* a)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b086      	sub	sp, #24
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	60b9      	str	r1, [r7, #8]
 8016e32:	607a      	str	r2, [r7, #4]
#if DIGIT_BIT == 32
    int j;

    XMEMCPY(r, a->dp, sizeof(sp_digit) * a->used);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	f103 0108 	add.w	r1, r3, #8
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	009b      	lsls	r3, r3, #2
 8016e40:	461a      	mov	r2, r3
 8016e42:	68f8      	ldr	r0, [r7, #12]
 8016e44:	f004 fde5 	bl	801ba12 <memcpy>

    for (j = a->used; j < size; j++) {
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	617b      	str	r3, [r7, #20]
 8016e4e:	e008      	b.n	8016e62 <sp_256_from_mp+0x3a>
        r[j] = 0;
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	68fa      	ldr	r2, [r7, #12]
 8016e56:	4413      	add	r3, r2
 8016e58:	2200      	movs	r2, #0
 8016e5a:	601a      	str	r2, [r3, #0]
    for (j = a->used; j < size; j++) {
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	3301      	adds	r3, #1
 8016e60:	617b      	str	r3, [r7, #20]
 8016e62:	697a      	ldr	r2, [r7, #20]
 8016e64:	68bb      	ldr	r3, [r7, #8]
 8016e66:	429a      	cmp	r2, r3
 8016e68:	dbf2      	blt.n	8016e50 <sp_256_from_mp+0x28>

    for (j++; j < size; j++) {
        r[j] = 0;
    }
#endif
}
 8016e6a:	bf00      	nop
 8016e6c:	3718      	adds	r7, #24
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}

08016e72 <sp_256_to_mp>:
 *
 * a  A single precision integer.
 * r  A multi-precision integer.
 */
static int sp_256_to_mp(const sp_digit* a, mp_int* r)
{
 8016e72:	b580      	push	{r7, lr}
 8016e74:	b084      	sub	sp, #16
 8016e76:	af00      	add	r7, sp, #0
 8016e78:	6078      	str	r0, [r7, #4]
 8016e7a:	6039      	str	r1, [r7, #0]
    int err;

    err = mp_grow(r, (256 + DIGIT_BIT - 1) / DIGIT_BIT);
 8016e7c:	2108      	movs	r1, #8
 8016e7e:	6838      	ldr	r0, [r7, #0]
 8016e80:	f004 f856 	bl	801af30 <sp_grow>
 8016e84:	60b8      	str	r0, [r7, #8]
    if (err == MP_OKAY) { /*lint !e774 case where err is always MP_OKAY*/
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d11f      	bne.n	8016ecc <sp_256_to_mp+0x5a>
#if DIGIT_BIT == 32
        XMEMCPY(r->dp, a, sizeof(sp_digit) * 8);
 8016e8c:	683b      	ldr	r3, [r7, #0]
 8016e8e:	3308      	adds	r3, #8
 8016e90:	2220      	movs	r2, #32
 8016e92:	6879      	ldr	r1, [r7, #4]
 8016e94:	4618      	mov	r0, r3
 8016e96:	f004 fdbc 	bl	801ba12 <memcpy>
        r->used = 8;
 8016e9a:	683b      	ldr	r3, [r7, #0]
 8016e9c:	2208      	movs	r2, #8
 8016e9e:	601a      	str	r2, [r3, #0]
        mp_clamp(r);
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	3b01      	subs	r3, #1
 8016ea6:	60fb      	str	r3, [r7, #12]
 8016ea8:	e002      	b.n	8016eb0 <sp_256_to_mp+0x3e>
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	3b01      	subs	r3, #1
 8016eae:	60fb      	str	r3, [r7, #12]
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	db06      	blt.n	8016ec4 <sp_256_to_mp+0x52>
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	68fa      	ldr	r2, [r7, #12]
 8016eba:	3202      	adds	r2, #2
 8016ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d0f2      	beq.n	8016eaa <sp_256_to_mp+0x38>
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	1c5a      	adds	r2, r3, #1
 8016ec8:	683b      	ldr	r3, [r7, #0]
 8016eca:	601a      	str	r2, [r3, #0]
        r->used = (256 + DIGIT_BIT - 1) / DIGIT_BIT;
        mp_clamp(r);
#endif
    }

    return err;
 8016ecc:	68bb      	ldr	r3, [r7, #8]
}
 8016ece:	4618      	mov	r0, r3
 8016ed0:	3710      	adds	r7, #16
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	bd80      	pop	{r7, pc}

08016ed6 <sp_256_point_to_ecc_point_8>:
 * pm  Point of type ecc_point (result).
 * returns MEMORY_E when allocation of memory in ecc_point fails otherwise
 * MP_OKAY.
 */
static int sp_256_point_to_ecc_point_8(const sp_point_256* p, ecc_point* pm)
{
 8016ed6:	b580      	push	{r7, lr}
 8016ed8:	b084      	sub	sp, #16
 8016eda:	af00      	add	r7, sp, #0
 8016edc:	6078      	str	r0, [r7, #4]
 8016ede:	6039      	str	r1, [r7, #0]
    int err;

    err = sp_256_to_mp(p->x, pm->x);
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	683b      	ldr	r3, [r7, #0]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	4619      	mov	r1, r3
 8016ee8:	4610      	mov	r0, r2
 8016eea:	f7ff ffc2 	bl	8016e72 <sp_256_to_mp>
 8016eee:	60f8      	str	r0, [r7, #12]
    if (err == MP_OKAY) {
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d109      	bne.n	8016f0a <sp_256_point_to_ecc_point_8+0x34>
        err = sp_256_to_mp(p->y, pm->y);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8016efc:	683b      	ldr	r3, [r7, #0]
 8016efe:	685b      	ldr	r3, [r3, #4]
 8016f00:	4619      	mov	r1, r3
 8016f02:	4610      	mov	r0, r2
 8016f04:	f7ff ffb5 	bl	8016e72 <sp_256_to_mp>
 8016f08:	60f8      	str	r0, [r7, #12]
    }
    if (err == MP_OKAY) {
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d109      	bne.n	8016f24 <sp_256_point_to_ecc_point_8+0x4e>
        err = sp_256_to_mp(p->z, pm->z);
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	689b      	ldr	r3, [r3, #8]
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	4610      	mov	r0, r2
 8016f1e:	f7ff ffa8 	bl	8016e72 <sp_256_to_mp>
 8016f22:	60f8      	str	r0, [r7, #12]
    }

    return err;
 8016f24:	68fb      	ldr	r3, [r7, #12]
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	3710      	adds	r7, #16
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}

08016f2e <sp_256_mont_mul_8>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
SP_NOINLINE static void sp_256_mont_mul_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m, sp_digit mp)
{
 8016f2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f32:	b085      	sub	sp, #20
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	60f8      	str	r0, [r7, #12]
 8016f38:	60b9      	str	r1, [r7, #8]
 8016f3a:	607a      	str	r2, [r7, #4]
 8016f3c:	603b      	str	r3, [r7, #0]
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 8016f3e:	68f8      	ldr	r0, [r7, #12]
 8016f40:	68ba      	ldr	r2, [r7, #8]
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	4611      	mov	r1, r2
 8016f46:	461a      	mov	r2, r3
 8016f48:	b091      	sub	sp, #68	; 0x44
 8016f4a:	f04f 0500 	mov.w	r5, #0
 8016f4e:	680e      	ldr	r6, [r1, #0]
 8016f50:	f8d2 8000 	ldr.w	r8, [r2]
 8016f54:	fba6 9a08 	umull	r9, sl, r6, r8
 8016f58:	f8cd 9000 	str.w	r9, [sp]
 8016f5c:	680e      	ldr	r6, [r1, #0]
 8016f5e:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8016f62:	fba6 3408 	umull	r3, r4, r6, r8
 8016f66:	eb13 0a0a 	adds.w	sl, r3, sl
 8016f6a:	f144 0b00 	adc.w	fp, r4, #0
 8016f6e:	684e      	ldr	r6, [r1, #4]
 8016f70:	f8d2 8000 	ldr.w	r8, [r2]
 8016f74:	fba6 3408 	umull	r3, r4, r6, r8
 8016f78:	eb13 0a0a 	adds.w	sl, r3, sl
 8016f7c:	eb54 0b0b 	adcs.w	fp, r4, fp
 8016f80:	f145 0e00 	adc.w	lr, r5, #0
 8016f84:	f8cd a004 	str.w	sl, [sp, #4]
 8016f88:	680e      	ldr	r6, [r1, #0]
 8016f8a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8016f8e:	fba6 3408 	umull	r3, r4, r6, r8
 8016f92:	eb13 0b0b 	adds.w	fp, r3, fp
 8016f96:	eb44 0e0e 	adc.w	lr, r4, lr
 8016f9a:	684e      	ldr	r6, [r1, #4]
 8016f9c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8016fa0:	fba6 3408 	umull	r3, r4, r6, r8
 8016fa4:	eb13 0b0b 	adds.w	fp, r3, fp
 8016fa8:	eb54 0e0e 	adcs.w	lr, r4, lr
 8016fac:	f145 0900 	adc.w	r9, r5, #0
 8016fb0:	688e      	ldr	r6, [r1, #8]
 8016fb2:	f8d2 8000 	ldr.w	r8, [r2]
 8016fb6:	fba6 3408 	umull	r3, r4, r6, r8
 8016fba:	eb13 0b0b 	adds.w	fp, r3, fp
 8016fbe:	eb54 0e0e 	adcs.w	lr, r4, lr
 8016fc2:	eb45 0909 	adc.w	r9, r5, r9
 8016fc6:	f8cd b008 	str.w	fp, [sp, #8]
 8016fca:	680e      	ldr	r6, [r1, #0]
 8016fcc:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8016fd0:	fba6 3408 	umull	r3, r4, r6, r8
 8016fd4:	eb13 0e0e 	adds.w	lr, r3, lr
 8016fd8:	eb54 0909 	adcs.w	r9, r4, r9
 8016fdc:	f145 0a00 	adc.w	sl, r5, #0
 8016fe0:	684e      	ldr	r6, [r1, #4]
 8016fe2:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8016fe6:	fba6 3408 	umull	r3, r4, r6, r8
 8016fea:	eb13 0e0e 	adds.w	lr, r3, lr
 8016fee:	eb54 0909 	adcs.w	r9, r4, r9
 8016ff2:	eb45 0a0a 	adc.w	sl, r5, sl
 8016ff6:	688e      	ldr	r6, [r1, #8]
 8016ff8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8016ffc:	fba6 3408 	umull	r3, r4, r6, r8
 8017000:	eb13 0e0e 	adds.w	lr, r3, lr
 8017004:	eb54 0909 	adcs.w	r9, r4, r9
 8017008:	eb45 0a0a 	adc.w	sl, r5, sl
 801700c:	68ce      	ldr	r6, [r1, #12]
 801700e:	f8d2 8000 	ldr.w	r8, [r2]
 8017012:	fba6 3408 	umull	r3, r4, r6, r8
 8017016:	eb13 0e0e 	adds.w	lr, r3, lr
 801701a:	eb54 0909 	adcs.w	r9, r4, r9
 801701e:	eb45 0a0a 	adc.w	sl, r5, sl
 8017022:	f8cd e00c 	str.w	lr, [sp, #12]
 8017026:	680e      	ldr	r6, [r1, #0]
 8017028:	f8d2 8010 	ldr.w	r8, [r2, #16]
 801702c:	fba6 3408 	umull	r3, r4, r6, r8
 8017030:	eb13 0909 	adds.w	r9, r3, r9
 8017034:	eb54 0a0a 	adcs.w	sl, r4, sl
 8017038:	f145 0b00 	adc.w	fp, r5, #0
 801703c:	684e      	ldr	r6, [r1, #4]
 801703e:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8017042:	fba6 3408 	umull	r3, r4, r6, r8
 8017046:	eb13 0909 	adds.w	r9, r3, r9
 801704a:	eb54 0a0a 	adcs.w	sl, r4, sl
 801704e:	eb45 0b0b 	adc.w	fp, r5, fp
 8017052:	688e      	ldr	r6, [r1, #8]
 8017054:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8017058:	fba6 3408 	umull	r3, r4, r6, r8
 801705c:	eb13 0909 	adds.w	r9, r3, r9
 8017060:	eb54 0a0a 	adcs.w	sl, r4, sl
 8017064:	eb45 0b0b 	adc.w	fp, r5, fp
 8017068:	68ce      	ldr	r6, [r1, #12]
 801706a:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801706e:	fba6 3408 	umull	r3, r4, r6, r8
 8017072:	eb13 0909 	adds.w	r9, r3, r9
 8017076:	eb54 0a0a 	adcs.w	sl, r4, sl
 801707a:	eb45 0b0b 	adc.w	fp, r5, fp
 801707e:	690e      	ldr	r6, [r1, #16]
 8017080:	f8d2 8000 	ldr.w	r8, [r2]
 8017084:	fba6 3408 	umull	r3, r4, r6, r8
 8017088:	eb13 0909 	adds.w	r9, r3, r9
 801708c:	eb54 0a0a 	adcs.w	sl, r4, sl
 8017090:	eb45 0b0b 	adc.w	fp, r5, fp
 8017094:	f8cd 9010 	str.w	r9, [sp, #16]
 8017098:	680e      	ldr	r6, [r1, #0]
 801709a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801709e:	fba6 3408 	umull	r3, r4, r6, r8
 80170a2:	eb13 0a0a 	adds.w	sl, r3, sl
 80170a6:	eb54 0b0b 	adcs.w	fp, r4, fp
 80170aa:	f145 0e00 	adc.w	lr, r5, #0
 80170ae:	684e      	ldr	r6, [r1, #4]
 80170b0:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80170b4:	fba6 3408 	umull	r3, r4, r6, r8
 80170b8:	eb13 0a0a 	adds.w	sl, r3, sl
 80170bc:	eb54 0b0b 	adcs.w	fp, r4, fp
 80170c0:	eb45 0e0e 	adc.w	lr, r5, lr
 80170c4:	688e      	ldr	r6, [r1, #8]
 80170c6:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80170ca:	fba6 3408 	umull	r3, r4, r6, r8
 80170ce:	eb13 0a0a 	adds.w	sl, r3, sl
 80170d2:	eb54 0b0b 	adcs.w	fp, r4, fp
 80170d6:	eb45 0e0e 	adc.w	lr, r5, lr
 80170da:	68ce      	ldr	r6, [r1, #12]
 80170dc:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80170e0:	fba6 3408 	umull	r3, r4, r6, r8
 80170e4:	eb13 0a0a 	adds.w	sl, r3, sl
 80170e8:	eb54 0b0b 	adcs.w	fp, r4, fp
 80170ec:	eb45 0e0e 	adc.w	lr, r5, lr
 80170f0:	690e      	ldr	r6, [r1, #16]
 80170f2:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80170f6:	fba6 3408 	umull	r3, r4, r6, r8
 80170fa:	eb13 0a0a 	adds.w	sl, r3, sl
 80170fe:	eb54 0b0b 	adcs.w	fp, r4, fp
 8017102:	eb45 0e0e 	adc.w	lr, r5, lr
 8017106:	694e      	ldr	r6, [r1, #20]
 8017108:	f8d2 8000 	ldr.w	r8, [r2]
 801710c:	fba6 3408 	umull	r3, r4, r6, r8
 8017110:	eb13 0a0a 	adds.w	sl, r3, sl
 8017114:	eb54 0b0b 	adcs.w	fp, r4, fp
 8017118:	eb45 0e0e 	adc.w	lr, r5, lr
 801711c:	f8cd a014 	str.w	sl, [sp, #20]
 8017120:	680e      	ldr	r6, [r1, #0]
 8017122:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8017126:	fba6 3408 	umull	r3, r4, r6, r8
 801712a:	eb13 0b0b 	adds.w	fp, r3, fp
 801712e:	eb54 0e0e 	adcs.w	lr, r4, lr
 8017132:	f145 0900 	adc.w	r9, r5, #0
 8017136:	684e      	ldr	r6, [r1, #4]
 8017138:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801713c:	fba6 3408 	umull	r3, r4, r6, r8
 8017140:	eb13 0b0b 	adds.w	fp, r3, fp
 8017144:	eb54 0e0e 	adcs.w	lr, r4, lr
 8017148:	eb45 0909 	adc.w	r9, r5, r9
 801714c:	688e      	ldr	r6, [r1, #8]
 801714e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8017152:	fba6 3408 	umull	r3, r4, r6, r8
 8017156:	eb13 0b0b 	adds.w	fp, r3, fp
 801715a:	eb54 0e0e 	adcs.w	lr, r4, lr
 801715e:	eb45 0909 	adc.w	r9, r5, r9
 8017162:	68ce      	ldr	r6, [r1, #12]
 8017164:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8017168:	fba6 3408 	umull	r3, r4, r6, r8
 801716c:	eb13 0b0b 	adds.w	fp, r3, fp
 8017170:	eb54 0e0e 	adcs.w	lr, r4, lr
 8017174:	eb45 0909 	adc.w	r9, r5, r9
 8017178:	690e      	ldr	r6, [r1, #16]
 801717a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 801717e:	fba6 3408 	umull	r3, r4, r6, r8
 8017182:	eb13 0b0b 	adds.w	fp, r3, fp
 8017186:	eb54 0e0e 	adcs.w	lr, r4, lr
 801718a:	eb45 0909 	adc.w	r9, r5, r9
 801718e:	694e      	ldr	r6, [r1, #20]
 8017190:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8017194:	fba6 3408 	umull	r3, r4, r6, r8
 8017198:	eb13 0b0b 	adds.w	fp, r3, fp
 801719c:	eb54 0e0e 	adcs.w	lr, r4, lr
 80171a0:	eb45 0909 	adc.w	r9, r5, r9
 80171a4:	698e      	ldr	r6, [r1, #24]
 80171a6:	f8d2 8000 	ldr.w	r8, [r2]
 80171aa:	fba6 3408 	umull	r3, r4, r6, r8
 80171ae:	eb13 0b0b 	adds.w	fp, r3, fp
 80171b2:	eb54 0e0e 	adcs.w	lr, r4, lr
 80171b6:	eb45 0909 	adc.w	r9, r5, r9
 80171ba:	f8cd b018 	str.w	fp, [sp, #24]
 80171be:	680e      	ldr	r6, [r1, #0]
 80171c0:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80171c4:	fba6 3408 	umull	r3, r4, r6, r8
 80171c8:	eb13 0e0e 	adds.w	lr, r3, lr
 80171cc:	eb54 0909 	adcs.w	r9, r4, r9
 80171d0:	f145 0a00 	adc.w	sl, r5, #0
 80171d4:	684e      	ldr	r6, [r1, #4]
 80171d6:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80171da:	fba6 3408 	umull	r3, r4, r6, r8
 80171de:	eb13 0e0e 	adds.w	lr, r3, lr
 80171e2:	eb54 0909 	adcs.w	r9, r4, r9
 80171e6:	eb45 0a0a 	adc.w	sl, r5, sl
 80171ea:	688e      	ldr	r6, [r1, #8]
 80171ec:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80171f0:	fba6 3408 	umull	r3, r4, r6, r8
 80171f4:	eb13 0e0e 	adds.w	lr, r3, lr
 80171f8:	eb54 0909 	adcs.w	r9, r4, r9
 80171fc:	eb45 0a0a 	adc.w	sl, r5, sl
 8017200:	68ce      	ldr	r6, [r1, #12]
 8017202:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8017206:	fba6 3408 	umull	r3, r4, r6, r8
 801720a:	eb13 0e0e 	adds.w	lr, r3, lr
 801720e:	eb54 0909 	adcs.w	r9, r4, r9
 8017212:	eb45 0a0a 	adc.w	sl, r5, sl
 8017216:	690e      	ldr	r6, [r1, #16]
 8017218:	f8d2 800c 	ldr.w	r8, [r2, #12]
 801721c:	fba6 3408 	umull	r3, r4, r6, r8
 8017220:	eb13 0e0e 	adds.w	lr, r3, lr
 8017224:	eb54 0909 	adcs.w	r9, r4, r9
 8017228:	eb45 0a0a 	adc.w	sl, r5, sl
 801722c:	694e      	ldr	r6, [r1, #20]
 801722e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8017232:	fba6 3408 	umull	r3, r4, r6, r8
 8017236:	eb13 0e0e 	adds.w	lr, r3, lr
 801723a:	eb54 0909 	adcs.w	r9, r4, r9
 801723e:	eb45 0a0a 	adc.w	sl, r5, sl
 8017242:	698e      	ldr	r6, [r1, #24]
 8017244:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8017248:	fba6 3408 	umull	r3, r4, r6, r8
 801724c:	eb13 0e0e 	adds.w	lr, r3, lr
 8017250:	eb54 0909 	adcs.w	r9, r4, r9
 8017254:	eb45 0a0a 	adc.w	sl, r5, sl
 8017258:	69ce      	ldr	r6, [r1, #28]
 801725a:	f8d2 8000 	ldr.w	r8, [r2]
 801725e:	fba6 3408 	umull	r3, r4, r6, r8
 8017262:	eb13 0e0e 	adds.w	lr, r3, lr
 8017266:	eb54 0909 	adcs.w	r9, r4, r9
 801726a:	eb45 0a0a 	adc.w	sl, r5, sl
 801726e:	f8cd e01c 	str.w	lr, [sp, #28]
 8017272:	684e      	ldr	r6, [r1, #4]
 8017274:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8017278:	fba6 3408 	umull	r3, r4, r6, r8
 801727c:	eb13 0909 	adds.w	r9, r3, r9
 8017280:	eb54 0a0a 	adcs.w	sl, r4, sl
 8017284:	f145 0b00 	adc.w	fp, r5, #0
 8017288:	688e      	ldr	r6, [r1, #8]
 801728a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 801728e:	fba6 3408 	umull	r3, r4, r6, r8
 8017292:	eb13 0909 	adds.w	r9, r3, r9
 8017296:	eb54 0a0a 	adcs.w	sl, r4, sl
 801729a:	eb45 0b0b 	adc.w	fp, r5, fp
 801729e:	68ce      	ldr	r6, [r1, #12]
 80172a0:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80172a4:	fba6 3408 	umull	r3, r4, r6, r8
 80172a8:	eb13 0909 	adds.w	r9, r3, r9
 80172ac:	eb54 0a0a 	adcs.w	sl, r4, sl
 80172b0:	eb45 0b0b 	adc.w	fp, r5, fp
 80172b4:	690e      	ldr	r6, [r1, #16]
 80172b6:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80172ba:	fba6 3408 	umull	r3, r4, r6, r8
 80172be:	eb13 0909 	adds.w	r9, r3, r9
 80172c2:	eb54 0a0a 	adcs.w	sl, r4, sl
 80172c6:	eb45 0b0b 	adc.w	fp, r5, fp
 80172ca:	694e      	ldr	r6, [r1, #20]
 80172cc:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80172d0:	fba6 3408 	umull	r3, r4, r6, r8
 80172d4:	eb13 0909 	adds.w	r9, r3, r9
 80172d8:	eb54 0a0a 	adcs.w	sl, r4, sl
 80172dc:	eb45 0b0b 	adc.w	fp, r5, fp
 80172e0:	698e      	ldr	r6, [r1, #24]
 80172e2:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80172e6:	fba6 3408 	umull	r3, r4, r6, r8
 80172ea:	eb13 0909 	adds.w	r9, r3, r9
 80172ee:	eb54 0a0a 	adcs.w	sl, r4, sl
 80172f2:	eb45 0b0b 	adc.w	fp, r5, fp
 80172f6:	69ce      	ldr	r6, [r1, #28]
 80172f8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80172fc:	fba6 3408 	umull	r3, r4, r6, r8
 8017300:	eb13 0909 	adds.w	r9, r3, r9
 8017304:	eb54 0a0a 	adcs.w	sl, r4, sl
 8017308:	eb45 0b0b 	adc.w	fp, r5, fp
 801730c:	f8cd 9020 	str.w	r9, [sp, #32]
 8017310:	688e      	ldr	r6, [r1, #8]
 8017312:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8017316:	fba6 3408 	umull	r3, r4, r6, r8
 801731a:	eb13 0a0a 	adds.w	sl, r3, sl
 801731e:	eb54 0b0b 	adcs.w	fp, r4, fp
 8017322:	f145 0e00 	adc.w	lr, r5, #0
 8017326:	68ce      	ldr	r6, [r1, #12]
 8017328:	f8d2 8018 	ldr.w	r8, [r2, #24]
 801732c:	fba6 3408 	umull	r3, r4, r6, r8
 8017330:	eb13 0a0a 	adds.w	sl, r3, sl
 8017334:	eb54 0b0b 	adcs.w	fp, r4, fp
 8017338:	eb45 0e0e 	adc.w	lr, r5, lr
 801733c:	690e      	ldr	r6, [r1, #16]
 801733e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8017342:	fba6 3408 	umull	r3, r4, r6, r8
 8017346:	eb13 0a0a 	adds.w	sl, r3, sl
 801734a:	eb54 0b0b 	adcs.w	fp, r4, fp
 801734e:	eb45 0e0e 	adc.w	lr, r5, lr
 8017352:	694e      	ldr	r6, [r1, #20]
 8017354:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8017358:	fba6 3408 	umull	r3, r4, r6, r8
 801735c:	eb13 0a0a 	adds.w	sl, r3, sl
 8017360:	eb54 0b0b 	adcs.w	fp, r4, fp
 8017364:	eb45 0e0e 	adc.w	lr, r5, lr
 8017368:	698e      	ldr	r6, [r1, #24]
 801736a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 801736e:	fba6 3408 	umull	r3, r4, r6, r8
 8017372:	eb13 0a0a 	adds.w	sl, r3, sl
 8017376:	eb54 0b0b 	adcs.w	fp, r4, fp
 801737a:	eb45 0e0e 	adc.w	lr, r5, lr
 801737e:	69ce      	ldr	r6, [r1, #28]
 8017380:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8017384:	fba6 3408 	umull	r3, r4, r6, r8
 8017388:	eb13 0a0a 	adds.w	sl, r3, sl
 801738c:	eb54 0b0b 	adcs.w	fp, r4, fp
 8017390:	eb45 0e0e 	adc.w	lr, r5, lr
 8017394:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017398:	68ce      	ldr	r6, [r1, #12]
 801739a:	f8d2 801c 	ldr.w	r8, [r2, #28]
 801739e:	fba6 3408 	umull	r3, r4, r6, r8
 80173a2:	eb13 0b0b 	adds.w	fp, r3, fp
 80173a6:	eb54 0e0e 	adcs.w	lr, r4, lr
 80173aa:	f145 0900 	adc.w	r9, r5, #0
 80173ae:	690e      	ldr	r6, [r1, #16]
 80173b0:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80173b4:	fba6 3408 	umull	r3, r4, r6, r8
 80173b8:	eb13 0b0b 	adds.w	fp, r3, fp
 80173bc:	eb54 0e0e 	adcs.w	lr, r4, lr
 80173c0:	eb45 0909 	adc.w	r9, r5, r9
 80173c4:	694e      	ldr	r6, [r1, #20]
 80173c6:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80173ca:	fba6 3408 	umull	r3, r4, r6, r8
 80173ce:	eb13 0b0b 	adds.w	fp, r3, fp
 80173d2:	eb54 0e0e 	adcs.w	lr, r4, lr
 80173d6:	eb45 0909 	adc.w	r9, r5, r9
 80173da:	698e      	ldr	r6, [r1, #24]
 80173dc:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80173e0:	fba6 3408 	umull	r3, r4, r6, r8
 80173e4:	eb13 0b0b 	adds.w	fp, r3, fp
 80173e8:	eb54 0e0e 	adcs.w	lr, r4, lr
 80173ec:	eb45 0909 	adc.w	r9, r5, r9
 80173f0:	69ce      	ldr	r6, [r1, #28]
 80173f2:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80173f6:	fba6 3408 	umull	r3, r4, r6, r8
 80173fa:	eb13 0b0b 	adds.w	fp, r3, fp
 80173fe:	eb54 0e0e 	adcs.w	lr, r4, lr
 8017402:	eb45 0909 	adc.w	r9, r5, r9
 8017406:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801740a:	690e      	ldr	r6, [r1, #16]
 801740c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8017410:	fba6 3408 	umull	r3, r4, r6, r8
 8017414:	eb13 0e0e 	adds.w	lr, r3, lr
 8017418:	eb54 0909 	adcs.w	r9, r4, r9
 801741c:	f145 0a00 	adc.w	sl, r5, #0
 8017420:	694e      	ldr	r6, [r1, #20]
 8017422:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8017426:	fba6 3408 	umull	r3, r4, r6, r8
 801742a:	eb13 0e0e 	adds.w	lr, r3, lr
 801742e:	eb54 0909 	adcs.w	r9, r4, r9
 8017432:	eb45 0a0a 	adc.w	sl, r5, sl
 8017436:	698e      	ldr	r6, [r1, #24]
 8017438:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801743c:	fba6 3408 	umull	r3, r4, r6, r8
 8017440:	eb13 0e0e 	adds.w	lr, r3, lr
 8017444:	eb54 0909 	adcs.w	r9, r4, r9
 8017448:	eb45 0a0a 	adc.w	sl, r5, sl
 801744c:	69ce      	ldr	r6, [r1, #28]
 801744e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8017452:	fba6 3408 	umull	r3, r4, r6, r8
 8017456:	eb13 0e0e 	adds.w	lr, r3, lr
 801745a:	eb54 0909 	adcs.w	r9, r4, r9
 801745e:	eb45 0a0a 	adc.w	sl, r5, sl
 8017462:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8017466:	694e      	ldr	r6, [r1, #20]
 8017468:	f8d2 801c 	ldr.w	r8, [r2, #28]
 801746c:	fba6 3408 	umull	r3, r4, r6, r8
 8017470:	eb13 0909 	adds.w	r9, r3, r9
 8017474:	eb54 0a0a 	adcs.w	sl, r4, sl
 8017478:	f145 0b00 	adc.w	fp, r5, #0
 801747c:	698e      	ldr	r6, [r1, #24]
 801747e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8017482:	fba6 3408 	umull	r3, r4, r6, r8
 8017486:	eb13 0909 	adds.w	r9, r3, r9
 801748a:	eb54 0a0a 	adcs.w	sl, r4, sl
 801748e:	eb45 0b0b 	adc.w	fp, r5, fp
 8017492:	69ce      	ldr	r6, [r1, #28]
 8017494:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8017498:	fba6 3408 	umull	r3, r4, r6, r8
 801749c:	eb13 0909 	adds.w	r9, r3, r9
 80174a0:	eb54 0a0a 	adcs.w	sl, r4, sl
 80174a4:	eb45 0b0b 	adc.w	fp, r5, fp
 80174a8:	698e      	ldr	r6, [r1, #24]
 80174aa:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80174ae:	fba6 3408 	umull	r3, r4, r6, r8
 80174b2:	eb13 0a0a 	adds.w	sl, r3, sl
 80174b6:	eb54 0b0b 	adcs.w	fp, r4, fp
 80174ba:	f145 0e00 	adc.w	lr, r5, #0
 80174be:	69ce      	ldr	r6, [r1, #28]
 80174c0:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80174c4:	fba6 3408 	umull	r3, r4, r6, r8
 80174c8:	eb13 0a0a 	adds.w	sl, r3, sl
 80174cc:	eb54 0b0b 	adcs.w	fp, r4, fp
 80174d0:	eb45 0e0e 	adc.w	lr, r5, lr
 80174d4:	69ce      	ldr	r6, [r1, #28]
 80174d6:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80174da:	fba6 3408 	umull	r3, r4, r6, r8
 80174de:	eb13 0b0b 	adds.w	fp, r3, fp
 80174e2:	eb44 0e0e 	adc.w	lr, r4, lr
 80174e6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80174ea:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80174ee:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80174f2:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 80174f6:	9c00      	ldr	r4, [sp, #0]
 80174f8:	9d01      	ldr	r5, [sp, #4]
 80174fa:	9e02      	ldr	r6, [sp, #8]
 80174fc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017500:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017504:	f8dd a014 	ldr.w	sl, [sp, #20]
 8017508:	f8dd b018 	ldr.w	fp, [sp, #24]
 801750c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8017510:	eb1b 0b04 	adds.w	fp, fp, r4
 8017514:	eb4e 0e05 	adc.w	lr, lr, r5
 8017518:	eb1b 0b04 	adds.w	fp, fp, r4
 801751c:	eb4e 0e05 	adc.w	lr, lr, r5
 8017520:	ebae 0e04 	sub.w	lr, lr, r4
 8017524:	4641      	mov	r1, r8
 8017526:	464a      	mov	r2, r9
 8017528:	eb18 0804 	adds.w	r8, r8, r4
 801752c:	eb59 0905 	adcs.w	r9, r9, r5
 8017530:	eb5a 0a06 	adcs.w	sl, sl, r6
 8017534:	eb5b 0b01 	adcs.w	fp, fp, r1
 8017538:	eb4e 0e02 	adc.w	lr, lr, r2
 801753c:	9400      	str	r4, [sp, #0]
 801753e:	9501      	str	r5, [sp, #4]
 8017540:	9602      	str	r6, [sp, #8]
 8017542:	f8cd 800c 	str.w	r8, [sp, #12]
 8017546:	f8cd 9010 	str.w	r9, [sp, #16]
 801754a:	f8cd a014 	str.w	sl, [sp, #20]
 801754e:	f04f 0100 	mov.w	r1, #0
 8017552:	9b06      	ldr	r3, [sp, #24]
 8017554:	191b      	adds	r3, r3, r4
 8017556:	f141 0200 	adc.w	r2, r1, #0
 801755a:	eb13 0308 	adds.w	r3, r3, r8
 801755e:	f142 0200 	adc.w	r2, r2, #0
 8017562:	f8cd b018 	str.w	fp, [sp, #24]
 8017566:	9b07      	ldr	r3, [sp, #28]
 8017568:	189b      	adds	r3, r3, r2
 801756a:	f141 0200 	adc.w	r2, r1, #0
 801756e:	195b      	adds	r3, r3, r5
 8017570:	f142 0200 	adc.w	r2, r2, #0
 8017574:	eb13 0309 	adds.w	r3, r3, r9
 8017578:	f142 0200 	adc.w	r2, r2, #0
 801757c:	f8cd e01c 	str.w	lr, [sp, #28]
 8017580:	9310      	str	r3, [sp, #64]	; 0x40
 8017582:	9b08      	ldr	r3, [sp, #32]
 8017584:	189b      	adds	r3, r3, r2
 8017586:	f141 0200 	adc.w	r2, r1, #0
 801758a:	191b      	adds	r3, r3, r4
 801758c:	f142 0200 	adc.w	r2, r2, #0
 8017590:	199b      	adds	r3, r3, r6
 8017592:	f142 0200 	adc.w	r2, r2, #0
 8017596:	eb13 030a 	adds.w	r3, r3, sl
 801759a:	f142 0200 	adc.w	r2, r2, #0
 801759e:	9308      	str	r3, [sp, #32]
 80175a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80175a4:	189b      	adds	r3, r3, r2
 80175a6:	f154 0400 	adcs.w	r4, r4, #0
 80175aa:	f141 0200 	adc.w	r2, r1, #0
 80175ae:	195b      	adds	r3, r3, r5
 80175b0:	4174      	adcs	r4, r6
 80175b2:	f142 0200 	adc.w	r2, r2, #0
 80175b6:	eb13 0308 	adds.w	r3, r3, r8
 80175ba:	eb54 0409 	adcs.w	r4, r4, r9
 80175be:	f142 0200 	adc.w	r2, r2, #0
 80175c2:	eb13 030b 	adds.w	r3, r3, fp
 80175c6:	eb54 040e 	adcs.w	r4, r4, lr
 80175ca:	f142 0200 	adc.w	r2, r2, #0
 80175ce:	9309      	str	r3, [sp, #36]	; 0x24
 80175d0:	940a      	str	r4, [sp, #40]	; 0x28
 80175d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80175d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80175d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80175da:	189b      	adds	r3, r3, r2
 80175dc:	f154 0400 	adcs.w	r4, r4, #0
 80175e0:	f155 0500 	adcs.w	r5, r5, #0
 80175e4:	f156 0600 	adcs.w	r6, r6, #0
 80175e8:	f141 0200 	adc.w	r2, r1, #0
 80175ec:	eb13 0308 	adds.w	r3, r3, r8
 80175f0:	eb54 0409 	adcs.w	r4, r4, r9
 80175f4:	eb55 050a 	adcs.w	r5, r5, sl
 80175f8:	eb56 060b 	adcs.w	r6, r6, fp
 80175fc:	f142 0200 	adc.w	r2, r2, #0
 8017600:	eb13 030a 	adds.w	r3, r3, sl
 8017604:	eb54 040b 	adcs.w	r4, r4, fp
 8017608:	eb55 050e 	adcs.w	r5, r5, lr
 801760c:	f156 0600 	adcs.w	r6, r6, #0
 8017610:	f142 0200 	adc.w	r2, r2, #0
 8017614:	930b      	str	r3, [sp, #44]	; 0x2c
 8017616:	940c      	str	r4, [sp, #48]	; 0x30
 8017618:	950d      	str	r5, [sp, #52]	; 0x34
 801761a:	960e      	str	r6, [sp, #56]	; 0x38
 801761c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801761e:	189b      	adds	r3, r3, r2
 8017620:	f141 0200 	adc.w	r2, r1, #0
 8017624:	eb13 030e 	adds.w	r3, r3, lr
 8017628:	f142 0200 	adc.w	r2, r2, #0
 801762c:	930f      	str	r3, [sp, #60]	; 0x3c
 801762e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017630:	9c08      	ldr	r4, [sp, #32]
 8017632:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017634:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017636:	f8dd 9000 	ldr.w	r9, [sp]
 801763a:	f8dd a004 	ldr.w	sl, [sp, #4]
 801763e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8017642:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8017646:	ebb3 0309 	subs.w	r3, r3, r9
 801764a:	eb74 040a 	sbcs.w	r4, r4, sl
 801764e:	eb75 050b 	sbcs.w	r5, r5, fp
 8017652:	eb76 060e 	sbcs.w	r6, r6, lr
 8017656:	9408      	str	r4, [sp, #32]
 8017658:	9509      	str	r5, [sp, #36]	; 0x24
 801765a:	960a      	str	r6, [sp, #40]	; 0x28
 801765c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801765e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017660:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017662:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017664:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8017668:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801766c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8017670:	f8dd b018 	ldr.w	fp, [sp, #24]
 8017674:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8017678:	eb73 0309 	sbcs.w	r3, r3, r9
 801767c:	eb74 040a 	sbcs.w	r4, r4, sl
 8017680:	eb75 050b 	sbcs.w	r5, r5, fp
 8017684:	eb76 060e 	sbcs.w	r6, r6, lr
 8017688:	f168 0800 	sbc.w	r8, r8, #0
 801768c:	930b      	str	r3, [sp, #44]	; 0x2c
 801768e:	940c      	str	r4, [sp, #48]	; 0x30
 8017690:	950d      	str	r5, [sp, #52]	; 0x34
 8017692:	960e      	str	r6, [sp, #56]	; 0x38
 8017694:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8017698:	eba1 0202 	sub.w	r2, r1, r2
 801769c:	f002 0101 	and.w	r1, r2, #1
 80176a0:	9b08      	ldr	r3, [sp, #32]
 80176a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80176a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80176a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80176a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80176ac:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80176b0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80176b4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80176b8:	1a9b      	subs	r3, r3, r2
 80176ba:	4194      	sbcs	r4, r2
 80176bc:	4195      	sbcs	r5, r2
 80176be:	f176 0600 	sbcs.w	r6, r6, #0
 80176c2:	f178 0800 	sbcs.w	r8, r8, #0
 80176c6:	f179 0900 	sbcs.w	r9, r9, #0
 80176ca:	eb7a 0a01 	sbcs.w	sl, sl, r1
 80176ce:	eb6b 0b02 	sbc.w	fp, fp, r2
 80176d2:	6003      	str	r3, [r0, #0]
 80176d4:	6044      	str	r4, [r0, #4]
 80176d6:	6085      	str	r5, [r0, #8]
 80176d8:	60c6      	str	r6, [r0, #12]
 80176da:	f8c0 8010 	str.w	r8, [r0, #16]
 80176de:	f8c0 9014 	str.w	r9, [r0, #20]
 80176e2:	f8c0 a018 	str.w	sl, [r0, #24]
 80176e6:	f8c0 b01c 	str.w	fp, [r0, #28]
 80176ea:	b011      	add	sp, #68	; 0x44
 80176ec:	60b9      	str	r1, [r7, #8]
 80176ee:	607a      	str	r2, [r7, #4]
        "add   sp, sp, #68\n\t"
        : [a] "+r" (a), [b] "+r" (b)
        : [r] "r" (r)
        : "memory", "r9", "r10", "r11", "r14", "r3", "r4", "r5", "r6", "r8"
    );
}
 80176f0:	bf00      	nop
 80176f2:	3714      	adds	r7, #20
 80176f4:	46bd      	mov	sp, r7
 80176f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080176fa <sp_256_mont_sqr_8>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
SP_NOINLINE static void sp_256_mont_sqr_8(sp_digit* r, const sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 80176fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176fe:	b085      	sub	sp, #20
 8017700:	af00      	add	r7, sp, #0
 8017702:	60f8      	str	r0, [r7, #12]
 8017704:	60b9      	str	r1, [r7, #8]
 8017706:	607a      	str	r2, [r7, #4]
 8017708:	603b      	str	r3, [r7, #0]
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 801770a:	68f9      	ldr	r1, [r7, #12]
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	461a      	mov	r2, r3
 8017710:	b091      	sub	sp, #68	; 0x44
 8017712:	f04f 0500 	mov.w	r5, #0
 8017716:	6816      	ldr	r6, [r2, #0]
 8017718:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801771c:	fba6 ab08 	umull	sl, fp, r6, r8
 8017720:	f8cd a004 	str.w	sl, [sp, #4]
 8017724:	6816      	ldr	r6, [r2, #0]
 8017726:	f8d2 8008 	ldr.w	r8, [r2, #8]
 801772a:	fba6 3408 	umull	r3, r4, r6, r8
 801772e:	eb13 0b0b 	adds.w	fp, r3, fp
 8017732:	f144 0e00 	adc.w	lr, r4, #0
 8017736:	f8cd b008 	str.w	fp, [sp, #8]
 801773a:	6816      	ldr	r6, [r2, #0]
 801773c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8017740:	fba6 3408 	umull	r3, r4, r6, r8
 8017744:	eb13 0e0e 	adds.w	lr, r3, lr
 8017748:	f144 0900 	adc.w	r9, r4, #0
 801774c:	6856      	ldr	r6, [r2, #4]
 801774e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8017752:	fba6 3408 	umull	r3, r4, r6, r8
 8017756:	eb13 0e0e 	adds.w	lr, r3, lr
 801775a:	eb54 0909 	adcs.w	r9, r4, r9
 801775e:	f145 0a00 	adc.w	sl, r5, #0
 8017762:	f8cd e00c 	str.w	lr, [sp, #12]
 8017766:	6816      	ldr	r6, [r2, #0]
 8017768:	f8d2 8010 	ldr.w	r8, [r2, #16]
 801776c:	fba6 3408 	umull	r3, r4, r6, r8
 8017770:	eb13 0909 	adds.w	r9, r3, r9
 8017774:	eb44 0a0a 	adc.w	sl, r4, sl
 8017778:	6856      	ldr	r6, [r2, #4]
 801777a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 801777e:	fba6 3408 	umull	r3, r4, r6, r8
 8017782:	eb13 0909 	adds.w	r9, r3, r9
 8017786:	eb54 0a0a 	adcs.w	sl, r4, sl
 801778a:	f145 0b00 	adc.w	fp, r5, #0
 801778e:	f8cd 9010 	str.w	r9, [sp, #16]
 8017792:	6816      	ldr	r6, [r2, #0]
 8017794:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8017798:	fba6 3408 	umull	r3, r4, r6, r8
 801779c:	eb13 0a0a 	adds.w	sl, r3, sl
 80177a0:	eb44 0b0b 	adc.w	fp, r4, fp
 80177a4:	6856      	ldr	r6, [r2, #4]
 80177a6:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80177aa:	fba6 3408 	umull	r3, r4, r6, r8
 80177ae:	eb13 0a0a 	adds.w	sl, r3, sl
 80177b2:	eb54 0b0b 	adcs.w	fp, r4, fp
 80177b6:	f145 0e00 	adc.w	lr, r5, #0
 80177ba:	6896      	ldr	r6, [r2, #8]
 80177bc:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80177c0:	fba6 3408 	umull	r3, r4, r6, r8
 80177c4:	eb13 0a0a 	adds.w	sl, r3, sl
 80177c8:	eb54 0b0b 	adcs.w	fp, r4, fp
 80177cc:	eb45 0e0e 	adc.w	lr, r5, lr
 80177d0:	f8cd a014 	str.w	sl, [sp, #20]
 80177d4:	6816      	ldr	r6, [r2, #0]
 80177d6:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80177da:	fba6 3408 	umull	r3, r4, r6, r8
 80177de:	eb13 0b0b 	adds.w	fp, r3, fp
 80177e2:	eb54 0e0e 	adcs.w	lr, r4, lr
 80177e6:	f145 0900 	adc.w	r9, r5, #0
 80177ea:	6856      	ldr	r6, [r2, #4]
 80177ec:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80177f0:	fba6 3408 	umull	r3, r4, r6, r8
 80177f4:	eb13 0b0b 	adds.w	fp, r3, fp
 80177f8:	eb54 0e0e 	adcs.w	lr, r4, lr
 80177fc:	eb45 0909 	adc.w	r9, r5, r9
 8017800:	6896      	ldr	r6, [r2, #8]
 8017802:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8017806:	fba6 3408 	umull	r3, r4, r6, r8
 801780a:	eb13 0b0b 	adds.w	fp, r3, fp
 801780e:	eb54 0e0e 	adcs.w	lr, r4, lr
 8017812:	eb45 0909 	adc.w	r9, r5, r9
 8017816:	f8cd b018 	str.w	fp, [sp, #24]
 801781a:	6816      	ldr	r6, [r2, #0]
 801781c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8017820:	fba6 3408 	umull	r3, r4, r6, r8
 8017824:	eb13 0e0e 	adds.w	lr, r3, lr
 8017828:	eb54 0909 	adcs.w	r9, r4, r9
 801782c:	f145 0a00 	adc.w	sl, r5, #0
 8017830:	6856      	ldr	r6, [r2, #4]
 8017832:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8017836:	fba6 3408 	umull	r3, r4, r6, r8
 801783a:	eb13 0e0e 	adds.w	lr, r3, lr
 801783e:	eb54 0909 	adcs.w	r9, r4, r9
 8017842:	eb45 0a0a 	adc.w	sl, r5, sl
 8017846:	6896      	ldr	r6, [r2, #8]
 8017848:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801784c:	fba6 3408 	umull	r3, r4, r6, r8
 8017850:	eb13 0e0e 	adds.w	lr, r3, lr
 8017854:	eb54 0909 	adcs.w	r9, r4, r9
 8017858:	eb45 0a0a 	adc.w	sl, r5, sl
 801785c:	68d6      	ldr	r6, [r2, #12]
 801785e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8017862:	fba6 3408 	umull	r3, r4, r6, r8
 8017866:	eb13 0e0e 	adds.w	lr, r3, lr
 801786a:	eb54 0909 	adcs.w	r9, r4, r9
 801786e:	eb45 0a0a 	adc.w	sl, r5, sl
 8017872:	f8cd e01c 	str.w	lr, [sp, #28]
 8017876:	6856      	ldr	r6, [r2, #4]
 8017878:	f8d2 801c 	ldr.w	r8, [r2, #28]
 801787c:	fba6 3408 	umull	r3, r4, r6, r8
 8017880:	eb13 0909 	adds.w	r9, r3, r9
 8017884:	eb54 0a0a 	adcs.w	sl, r4, sl
 8017888:	f145 0b00 	adc.w	fp, r5, #0
 801788c:	6896      	ldr	r6, [r2, #8]
 801788e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8017892:	fba6 3408 	umull	r3, r4, r6, r8
 8017896:	eb13 0909 	adds.w	r9, r3, r9
 801789a:	eb54 0a0a 	adcs.w	sl, r4, sl
 801789e:	eb45 0b0b 	adc.w	fp, r5, fp
 80178a2:	68d6      	ldr	r6, [r2, #12]
 80178a4:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80178a8:	fba6 3408 	umull	r3, r4, r6, r8
 80178ac:	eb13 0909 	adds.w	r9, r3, r9
 80178b0:	eb54 0a0a 	adcs.w	sl, r4, sl
 80178b4:	eb45 0b0b 	adc.w	fp, r5, fp
 80178b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80178bc:	6896      	ldr	r6, [r2, #8]
 80178be:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80178c2:	fba6 3408 	umull	r3, r4, r6, r8
 80178c6:	eb13 0a0a 	adds.w	sl, r3, sl
 80178ca:	eb54 0b0b 	adcs.w	fp, r4, fp
 80178ce:	f145 0e00 	adc.w	lr, r5, #0
 80178d2:	68d6      	ldr	r6, [r2, #12]
 80178d4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80178d8:	fba6 3408 	umull	r3, r4, r6, r8
 80178dc:	eb13 0a0a 	adds.w	sl, r3, sl
 80178e0:	eb54 0b0b 	adcs.w	fp, r4, fp
 80178e4:	eb45 0e0e 	adc.w	lr, r5, lr
 80178e8:	6916      	ldr	r6, [r2, #16]
 80178ea:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80178ee:	fba6 3408 	umull	r3, r4, r6, r8
 80178f2:	eb13 0a0a 	adds.w	sl, r3, sl
 80178f6:	eb54 0b0b 	adcs.w	fp, r4, fp
 80178fa:	eb45 0e0e 	adc.w	lr, r5, lr
 80178fe:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017902:	68d6      	ldr	r6, [r2, #12]
 8017904:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8017908:	fba6 3408 	umull	r3, r4, r6, r8
 801790c:	eb13 0b0b 	adds.w	fp, r3, fp
 8017910:	eb54 0e0e 	adcs.w	lr, r4, lr
 8017914:	f145 0900 	adc.w	r9, r5, #0
 8017918:	6916      	ldr	r6, [r2, #16]
 801791a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 801791e:	fba6 3408 	umull	r3, r4, r6, r8
 8017922:	eb13 0b0b 	adds.w	fp, r3, fp
 8017926:	eb54 0e0e 	adcs.w	lr, r4, lr
 801792a:	eb45 0909 	adc.w	r9, r5, r9
 801792e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017932:	6916      	ldr	r6, [r2, #16]
 8017934:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8017938:	fba6 3408 	umull	r3, r4, r6, r8
 801793c:	eb13 0e0e 	adds.w	lr, r3, lr
 8017940:	eb54 0909 	adcs.w	r9, r4, r9
 8017944:	f145 0a00 	adc.w	sl, r5, #0
 8017948:	6956      	ldr	r6, [r2, #20]
 801794a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 801794e:	fba6 3408 	umull	r3, r4, r6, r8
 8017952:	eb13 0e0e 	adds.w	lr, r3, lr
 8017956:	eb54 0909 	adcs.w	r9, r4, r9
 801795a:	eb45 0a0a 	adc.w	sl, r5, sl
 801795e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8017962:	6956      	ldr	r6, [r2, #20]
 8017964:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8017968:	fba6 3408 	umull	r3, r4, r6, r8
 801796c:	eb13 0909 	adds.w	r9, r3, r9
 8017970:	eb54 0a0a 	adcs.w	sl, r4, sl
 8017974:	f145 0b00 	adc.w	fp, r5, #0
 8017978:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801797c:	6996      	ldr	r6, [r2, #24]
 801797e:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8017982:	fba6 3408 	umull	r3, r4, r6, r8
 8017986:	eb13 0a0a 	adds.w	sl, r3, sl
 801798a:	eb44 0b0b 	adc.w	fp, r4, fp
 801798e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017992:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8017996:	9c01      	ldr	r4, [sp, #4]
 8017998:	9e02      	ldr	r6, [sp, #8]
 801799a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801799e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80179a2:	f8dd a014 	ldr.w	sl, [sp, #20]
 80179a6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80179aa:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80179ae:	f8dd c020 	ldr.w	ip, [sp, #32]
 80179b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179b4:	1924      	adds	r4, r4, r4
 80179b6:	4176      	adcs	r6, r6
 80179b8:	eb58 0808 	adcs.w	r8, r8, r8
 80179bc:	eb59 0909 	adcs.w	r9, r9, r9
 80179c0:	eb5a 0a0a 	adcs.w	sl, sl, sl
 80179c4:	eb5b 0b0b 	adcs.w	fp, fp, fp
 80179c8:	eb5e 0e0e 	adcs.w	lr, lr, lr
 80179cc:	eb5c 0c0c 	adcs.w	ip, ip, ip
 80179d0:	415b      	adcs	r3, r3
 80179d2:	9401      	str	r4, [sp, #4]
 80179d4:	9602      	str	r6, [sp, #8]
 80179d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80179da:	f8cd 9010 	str.w	r9, [sp, #16]
 80179de:	f8cd a014 	str.w	sl, [sp, #20]
 80179e2:	f8cd b018 	str.w	fp, [sp, #24]
 80179e6:	f8cd e01c 	str.w	lr, [sp, #28]
 80179ea:	f8cd c020 	str.w	ip, [sp, #32]
 80179ee:	9309      	str	r3, [sp, #36]	; 0x24
 80179f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80179f2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80179f4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80179f8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80179fc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8017a00:	4164      	adcs	r4, r4
 8017a02:	4176      	adcs	r6, r6
 8017a04:	eb58 0808 	adcs.w	r8, r8, r8
 8017a08:	eb59 0909 	adcs.w	r9, r9, r9
 8017a0c:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8017a10:	940a      	str	r4, [sp, #40]	; 0x28
 8017a12:	960b      	str	r6, [sp, #44]	; 0x2c
 8017a14:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8017a18:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8017a1c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017a20:	f145 0b00 	adc.w	fp, r5, #0
 8017a24:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8017a28:	9c01      	ldr	r4, [sp, #4]
 8017a2a:	9d02      	ldr	r5, [sp, #8]
 8017a2c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8017a30:	6816      	ldr	r6, [r2, #0]
 8017a32:	fba6 9a06 	umull	r9, sl, r6, r6
 8017a36:	6856      	ldr	r6, [r2, #4]
 8017a38:	fba6 be06 	umull	fp, lr, r6, r6
 8017a3c:	eb1a 0a04 	adds.w	sl, sl, r4
 8017a40:	eb5b 0b05 	adcs.w	fp, fp, r5
 8017a44:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8017a48:	f8cd 9000 	str.w	r9, [sp]
 8017a4c:	f8cd a004 	str.w	sl, [sp, #4]
 8017a50:	f8cd b008 	str.w	fp, [sp, #8]
 8017a54:	f8cd e00c 	str.w	lr, [sp, #12]
 8017a58:	9b04      	ldr	r3, [sp, #16]
 8017a5a:	9c05      	ldr	r4, [sp, #20]
 8017a5c:	9d06      	ldr	r5, [sp, #24]
 8017a5e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8017a62:	6896      	ldr	r6, [r2, #8]
 8017a64:	fba6 9a06 	umull	r9, sl, r6, r6
 8017a68:	68d6      	ldr	r6, [r2, #12]
 8017a6a:	fba6 be06 	umull	fp, lr, r6, r6
 8017a6e:	eb59 0903 	adcs.w	r9, r9, r3
 8017a72:	eb5a 0a04 	adcs.w	sl, sl, r4
 8017a76:	eb5b 0b05 	adcs.w	fp, fp, r5
 8017a7a:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8017a7e:	f8cd 9010 	str.w	r9, [sp, #16]
 8017a82:	f8cd a014 	str.w	sl, [sp, #20]
 8017a86:	f8cd b018 	str.w	fp, [sp, #24]
 8017a8a:	f8cd e01c 	str.w	lr, [sp, #28]
 8017a8e:	9b08      	ldr	r3, [sp, #32]
 8017a90:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017a92:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017a94:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8017a98:	6916      	ldr	r6, [r2, #16]
 8017a9a:	fba6 9a06 	umull	r9, sl, r6, r6
 8017a9e:	6956      	ldr	r6, [r2, #20]
 8017aa0:	fba6 be06 	umull	fp, lr, r6, r6
 8017aa4:	eb59 0903 	adcs.w	r9, r9, r3
 8017aa8:	eb5a 0a04 	adcs.w	sl, sl, r4
 8017aac:	eb5b 0b05 	adcs.w	fp, fp, r5
 8017ab0:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8017ab4:	f8cd 9020 	str.w	r9, [sp, #32]
 8017ab8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017abc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017ac0:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8017ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ac6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017ac8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8017aca:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8017ace:	6996      	ldr	r6, [r2, #24]
 8017ad0:	fba6 9a06 	umull	r9, sl, r6, r6
 8017ad4:	69d6      	ldr	r6, [r2, #28]
 8017ad6:	fba6 be06 	umull	fp, lr, r6, r6
 8017ada:	eb59 0903 	adcs.w	r9, r9, r3
 8017ade:	eb5a 0a04 	adcs.w	sl, sl, r4
 8017ae2:	eb5b 0b05 	adcs.w	fp, fp, r5
 8017ae6:	eb4e 0e0c 	adc.w	lr, lr, ip
 8017aea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017aee:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017af2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8017af6:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8017afa:	9c00      	ldr	r4, [sp, #0]
 8017afc:	9d01      	ldr	r5, [sp, #4]
 8017afe:	9e02      	ldr	r6, [sp, #8]
 8017b00:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017b04:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017b08:	f8dd a014 	ldr.w	sl, [sp, #20]
 8017b0c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8017b10:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8017b14:	eb1b 0b04 	adds.w	fp, fp, r4
 8017b18:	eb4e 0e05 	adc.w	lr, lr, r5
 8017b1c:	eb1b 0b04 	adds.w	fp, fp, r4
 8017b20:	eb4e 0e05 	adc.w	lr, lr, r5
 8017b24:	ebae 0e04 	sub.w	lr, lr, r4
 8017b28:	4642      	mov	r2, r8
 8017b2a:	46cc      	mov	ip, r9
 8017b2c:	eb18 0804 	adds.w	r8, r8, r4
 8017b30:	eb59 0905 	adcs.w	r9, r9, r5
 8017b34:	eb5a 0a06 	adcs.w	sl, sl, r6
 8017b38:	eb5b 0b02 	adcs.w	fp, fp, r2
 8017b3c:	eb4e 0e0c 	adc.w	lr, lr, ip
 8017b40:	9400      	str	r4, [sp, #0]
 8017b42:	9501      	str	r5, [sp, #4]
 8017b44:	9602      	str	r6, [sp, #8]
 8017b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b4a:	f8cd 9010 	str.w	r9, [sp, #16]
 8017b4e:	f8cd a014 	str.w	sl, [sp, #20]
 8017b52:	f04f 0200 	mov.w	r2, #0
 8017b56:	9b06      	ldr	r3, [sp, #24]
 8017b58:	191b      	adds	r3, r3, r4
 8017b5a:	f142 0c00 	adc.w	ip, r2, #0
 8017b5e:	eb13 0308 	adds.w	r3, r3, r8
 8017b62:	f14c 0c00 	adc.w	ip, ip, #0
 8017b66:	f8cd b018 	str.w	fp, [sp, #24]
 8017b6a:	9b07      	ldr	r3, [sp, #28]
 8017b6c:	eb13 030c 	adds.w	r3, r3, ip
 8017b70:	f142 0c00 	adc.w	ip, r2, #0
 8017b74:	195b      	adds	r3, r3, r5
 8017b76:	f14c 0c00 	adc.w	ip, ip, #0
 8017b7a:	eb13 0309 	adds.w	r3, r3, r9
 8017b7e:	f14c 0c00 	adc.w	ip, ip, #0
 8017b82:	f8cd e01c 	str.w	lr, [sp, #28]
 8017b86:	9310      	str	r3, [sp, #64]	; 0x40
 8017b88:	9b08      	ldr	r3, [sp, #32]
 8017b8a:	eb13 030c 	adds.w	r3, r3, ip
 8017b8e:	f142 0c00 	adc.w	ip, r2, #0
 8017b92:	191b      	adds	r3, r3, r4
 8017b94:	f14c 0c00 	adc.w	ip, ip, #0
 8017b98:	199b      	adds	r3, r3, r6
 8017b9a:	f14c 0c00 	adc.w	ip, ip, #0
 8017b9e:	eb13 030a 	adds.w	r3, r3, sl
 8017ba2:	f14c 0c00 	adc.w	ip, ip, #0
 8017ba6:	9308      	str	r3, [sp, #32]
 8017ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017bac:	eb13 030c 	adds.w	r3, r3, ip
 8017bb0:	f154 0400 	adcs.w	r4, r4, #0
 8017bb4:	f142 0c00 	adc.w	ip, r2, #0
 8017bb8:	195b      	adds	r3, r3, r5
 8017bba:	4174      	adcs	r4, r6
 8017bbc:	f14c 0c00 	adc.w	ip, ip, #0
 8017bc0:	eb13 0308 	adds.w	r3, r3, r8
 8017bc4:	eb54 0409 	adcs.w	r4, r4, r9
 8017bc8:	f14c 0c00 	adc.w	ip, ip, #0
 8017bcc:	eb13 030b 	adds.w	r3, r3, fp
 8017bd0:	eb54 040e 	adcs.w	r4, r4, lr
 8017bd4:	f14c 0c00 	adc.w	ip, ip, #0
 8017bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8017bda:	940a      	str	r4, [sp, #40]	; 0x28
 8017bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bde:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017be0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017be2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017be4:	eb13 030c 	adds.w	r3, r3, ip
 8017be8:	f154 0400 	adcs.w	r4, r4, #0
 8017bec:	f155 0500 	adcs.w	r5, r5, #0
 8017bf0:	f156 0600 	adcs.w	r6, r6, #0
 8017bf4:	f142 0c00 	adc.w	ip, r2, #0
 8017bf8:	eb13 0308 	adds.w	r3, r3, r8
 8017bfc:	eb54 0409 	adcs.w	r4, r4, r9
 8017c00:	eb55 050a 	adcs.w	r5, r5, sl
 8017c04:	eb56 060b 	adcs.w	r6, r6, fp
 8017c08:	f14c 0c00 	adc.w	ip, ip, #0
 8017c0c:	eb13 030a 	adds.w	r3, r3, sl
 8017c10:	eb54 040b 	adcs.w	r4, r4, fp
 8017c14:	eb55 050e 	adcs.w	r5, r5, lr
 8017c18:	f156 0600 	adcs.w	r6, r6, #0
 8017c1c:	f14c 0c00 	adc.w	ip, ip, #0
 8017c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c22:	940c      	str	r4, [sp, #48]	; 0x30
 8017c24:	950d      	str	r5, [sp, #52]	; 0x34
 8017c26:	960e      	str	r6, [sp, #56]	; 0x38
 8017c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c2a:	eb13 030c 	adds.w	r3, r3, ip
 8017c2e:	f142 0c00 	adc.w	ip, r2, #0
 8017c32:	eb13 030e 	adds.w	r3, r3, lr
 8017c36:	f14c 0c00 	adc.w	ip, ip, #0
 8017c3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c3e:	9c08      	ldr	r4, [sp, #32]
 8017c40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017c42:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017c44:	f8dd 9000 	ldr.w	r9, [sp]
 8017c48:	f8dd a004 	ldr.w	sl, [sp, #4]
 8017c4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8017c50:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8017c54:	ebb3 0309 	subs.w	r3, r3, r9
 8017c58:	eb74 040a 	sbcs.w	r4, r4, sl
 8017c5c:	eb75 050b 	sbcs.w	r5, r5, fp
 8017c60:	eb76 060e 	sbcs.w	r6, r6, lr
 8017c64:	9408      	str	r4, [sp, #32]
 8017c66:	9509      	str	r5, [sp, #36]	; 0x24
 8017c68:	960a      	str	r6, [sp, #40]	; 0x28
 8017c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017c6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017c70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017c72:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8017c76:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017c7a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8017c7e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8017c82:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8017c86:	eb73 0309 	sbcs.w	r3, r3, r9
 8017c8a:	eb74 040a 	sbcs.w	r4, r4, sl
 8017c8e:	eb75 050b 	sbcs.w	r5, r5, fp
 8017c92:	eb76 060e 	sbcs.w	r6, r6, lr
 8017c96:	f168 0800 	sbc.w	r8, r8, #0
 8017c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c9c:	940c      	str	r4, [sp, #48]	; 0x30
 8017c9e:	950d      	str	r5, [sp, #52]	; 0x34
 8017ca0:	960e      	str	r6, [sp, #56]	; 0x38
 8017ca2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8017ca6:	eba2 0c0c 	sub.w	ip, r2, ip
 8017caa:	f00c 0201 	and.w	r2, ip, #1
 8017cae:	9b08      	ldr	r3, [sp, #32]
 8017cb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017cb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017cb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8017cb6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8017cba:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8017cbe:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8017cc2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8017cc6:	ebb3 030c 	subs.w	r3, r3, ip
 8017cca:	eb74 040c 	sbcs.w	r4, r4, ip
 8017cce:	eb75 050c 	sbcs.w	r5, r5, ip
 8017cd2:	f176 0600 	sbcs.w	r6, r6, #0
 8017cd6:	f178 0800 	sbcs.w	r8, r8, #0
 8017cda:	f179 0900 	sbcs.w	r9, r9, #0
 8017cde:	eb7a 0a02 	sbcs.w	sl, sl, r2
 8017ce2:	eb6b 0b0c 	sbc.w	fp, fp, ip
 8017ce6:	600b      	str	r3, [r1, #0]
 8017ce8:	604c      	str	r4, [r1, #4]
 8017cea:	608d      	str	r5, [r1, #8]
 8017cec:	60ce      	str	r6, [r1, #12]
 8017cee:	f8c1 8010 	str.w	r8, [r1, #16]
 8017cf2:	f8c1 9014 	str.w	r9, [r1, #20]
 8017cf6:	f8c1 a018 	str.w	sl, [r1, #24]
 8017cfa:	f8c1 b01c 	str.w	fp, [r1, #28]
 8017cfe:	b011      	add	sp, #68	; 0x44
 8017d00:	60ba      	str	r2, [r7, #8]
        "add   sp, sp, #68\n\t"
        : [a] "+r" (a)
        : [r] "r" (r)
        : "memory", "r9", "r10", "r11", "r14", "r3", "r4", "r5", "r6", "r8", "r12"
    );
}
 8017d02:	bf00      	nop
 8017d04:	3714      	adds	r7, #20
 8017d06:	46bd      	mov	sp, r7
 8017d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017d0c <sp_256_mont_inv_8>:
 * r   Inverse result.
 * a   Number to invert.
 * td  Temporary data.
 */
static void sp_256_mont_inv_8(sp_digit* r, const sp_digit* a, sp_digit* td)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b088      	sub	sp, #32
 8017d10:	af02      	add	r7, sp, #8
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	607a      	str	r2, [r7, #4]
#ifdef WOLFSSL_SP_SMALL
    sp_digit* t = td;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	613b      	str	r3, [r7, #16]
    int i;

    XMEMCPY(t, a, sizeof(sp_digit) * 8);
 8017d1c:	2220      	movs	r2, #32
 8017d1e:	68b9      	ldr	r1, [r7, #8]
 8017d20:	6938      	ldr	r0, [r7, #16]
 8017d22:	f003 fe76 	bl	801ba12 <memcpy>
    for (i=254; i>=0; i--) {
 8017d26:	23fe      	movs	r3, #254	; 0xfe
 8017d28:	617b      	str	r3, [r7, #20]
 8017d2a:	e027      	b.n	8017d7c <sp_256_mont_inv_8+0x70>
        sp_256_mont_sqr_8(t, t, p256_mod, p256_mp_mod);
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	4a19      	ldr	r2, [pc, #100]	; (8017d94 <sp_256_mont_inv_8+0x88>)
 8017d30:	6939      	ldr	r1, [r7, #16]
 8017d32:	6938      	ldr	r0, [r7, #16]
 8017d34:	f7ff fce1 	bl	80176fa <sp_256_mont_sqr_8>
        if (p256_mod_minus_2[i / 32] & ((sp_digit)1 << (i % 32)))
 8017d38:	697b      	ldr	r3, [r7, #20]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	da00      	bge.n	8017d40 <sp_256_mont_inv_8+0x34>
 8017d3e:	331f      	adds	r3, #31
 8017d40:	115b      	asrs	r3, r3, #5
 8017d42:	461a      	mov	r2, r3
 8017d44:	4b14      	ldr	r3, [pc, #80]	; (8017d98 <sp_256_mont_inv_8+0x8c>)
 8017d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017d4a:	697b      	ldr	r3, [r7, #20]
 8017d4c:	4259      	negs	r1, r3
 8017d4e:	f003 031f 	and.w	r3, r3, #31
 8017d52:	f001 011f 	and.w	r1, r1, #31
 8017d56:	bf58      	it	pl
 8017d58:	424b      	negpl	r3, r1
 8017d5a:	2101      	movs	r1, #1
 8017d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8017d60:	4013      	ands	r3, r2
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d007      	beq.n	8017d76 <sp_256_mont_inv_8+0x6a>
            sp_256_mont_mul_8(t, t, a, p256_mod, p256_mp_mod);
 8017d66:	2301      	movs	r3, #1
 8017d68:	9300      	str	r3, [sp, #0]
 8017d6a:	4b0a      	ldr	r3, [pc, #40]	; (8017d94 <sp_256_mont_inv_8+0x88>)
 8017d6c:	68ba      	ldr	r2, [r7, #8]
 8017d6e:	6939      	ldr	r1, [r7, #16]
 8017d70:	6938      	ldr	r0, [r7, #16]
 8017d72:	f7ff f8dc 	bl	8016f2e <sp_256_mont_mul_8>
    for (i=254; i>=0; i--) {
 8017d76:	697b      	ldr	r3, [r7, #20]
 8017d78:	3b01      	subs	r3, #1
 8017d7a:	617b      	str	r3, [r7, #20]
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	dad4      	bge.n	8017d2c <sp_256_mont_inv_8+0x20>
    }
    XMEMCPY(r, t, sizeof(sp_digit) * 8);
 8017d82:	2220      	movs	r2, #32
 8017d84:	6939      	ldr	r1, [r7, #16]
 8017d86:	68f8      	ldr	r0, [r7, #12]
 8017d88:	f003 fe43 	bl	801ba12 <memcpy>
    /* 0xffffffff00000001000000000000000000000000ffffffffffffffff00000000 */
    sp_256_mont_sqr_n_8(r, r, 32, p256_mod, p256_mp_mod);
    /* 0xffffffff00000001000000000000000000000000fffffffffffffffffffffffd */
    sp_256_mont_mul_8(r, r, t3, p256_mod, p256_mp_mod);
#endif /* WOLFSSL_SP_SMALL */
}
 8017d8c:	bf00      	nop
 8017d8e:	3718      	adds	r7, #24
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	0801e7a4 	.word	0x0801e7a4
 8017d98:	0801e8e8 	.word	0x0801e8e8

08017d9c <sp_256_cmp_8>:
 * b  A single precision integer.
 * return -ve, 0 or +ve if a is less than, equal to or greater than b
 * respectively.
 */
SP_NOINLINE static int32_t sp_256_cmp_8(const sp_digit* a, const sp_digit* b)
{
 8017d9c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8017da0:	b085      	sub	sp, #20
 8017da2:	af00      	add	r7, sp, #0
 8017da4:	6078      	str	r0, [r7, #4]
 8017da6:	6039      	str	r1, [r7, #0]
    sp_digit r = 0;
 8017da8:	2300      	movs	r3, #0
 8017daa:	60fb      	str	r3, [r7, #12]


    __asm__ __volatile__ (
 8017dac:	6879      	ldr	r1, [r7, #4]
 8017dae:	6838      	ldr	r0, [r7, #0]
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	461a      	mov	r2, r3
 8017db4:	f04f 0300 	mov.w	r3, #0
 8017db8:	ea6f 0303 	mvn.w	r3, r3
 8017dbc:	f04f 061c 	mov.w	r6, #28
 8017dc0:	f851 8006 	ldr.w	r8, [r1, r6]
 8017dc4:	5985      	ldr	r5, [r0, r6]
 8017dc6:	ea08 0803 	and.w	r8, r8, r3
 8017dca:	ea05 0503 	and.w	r5, r5, r3
 8017dce:	4644      	mov	r4, r8
 8017dd0:	ebb8 0805 	subs.w	r8, r8, r5
 8017dd4:	eb68 0808 	sbc.w	r8, r8, r8
 8017dd8:	4442      	add	r2, r8
 8017dda:	ea6f 0808 	mvn.w	r8, r8
 8017dde:	ea03 0308 	and.w	r3, r3, r8
 8017de2:	1b2d      	subs	r5, r5, r4
 8017de4:	eb68 0808 	sbc.w	r8, r8, r8
 8017de8:	eba2 0208 	sub.w	r2, r2, r8
 8017dec:	ea6f 0808 	mvn.w	r8, r8
 8017df0:	ea03 0308 	and.w	r3, r3, r8
 8017df4:	f1a6 0604 	sub.w	r6, r6, #4
 8017df8:	2e00      	cmp	r6, #0
 8017dfa:	dae1      	bge.n	8017dc0 <sp_256_cmp_8+0x24>
 8017dfc:	60fa      	str	r2, [r7, #12]
        : [r] "+r" (r)
        : [a] "r" (a), [b] "r" (b)
        : "r3", "r4", "r5", "r6", "r8"
    );

    return r;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	3714      	adds	r7, #20
 8017e04:	46bd      	mov	sp, r7
 8017e06:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8017e0a:	4770      	bx	lr

08017e0c <sp_256_cond_sub_8>:
 * b  A single precision number to subtract.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_256_cond_sub_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b, sp_digit m)
{
 8017e0c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8017e10:	b086      	sub	sp, #24
 8017e12:	af00      	add	r7, sp, #0
 8017e14:	60f8      	str	r0, [r7, #12]
 8017e16:	60b9      	str	r1, [r7, #8]
 8017e18:	607a      	str	r2, [r7, #4]
 8017e1a:	603b      	str	r3, [r7, #0]
    sp_digit c = 0;
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8017e20:	68fa      	ldr	r2, [r7, #12]
 8017e22:	68b9      	ldr	r1, [r7, #8]
 8017e24:	6878      	ldr	r0, [r7, #4]
 8017e26:	683c      	ldr	r4, [r7, #0]
 8017e28:	697b      	ldr	r3, [r7, #20]
 8017e2a:	f04f 0520 	mov.w	r5, #32
 8017e2e:	46a9      	mov	r9, r5
 8017e30:	f04f 0800 	mov.w	r8, #0
 8017e34:	f850 6008 	ldr.w	r6, [r0, r8]
 8017e38:	ea06 0604 	and.w	r6, r6, r4
 8017e3c:	f04f 0500 	mov.w	r5, #0
 8017e40:	1aed      	subs	r5, r5, r3
 8017e42:	f851 5008 	ldr.w	r5, [r1, r8]
 8017e46:	41b5      	sbcs	r5, r6
 8017e48:	419b      	sbcs	r3, r3
 8017e4a:	f842 5008 	str.w	r5, [r2, r8]
 8017e4e:	f108 0804 	add.w	r8, r8, #4
 8017e52:	45c8      	cmp	r8, r9
 8017e54:	dbee      	blt.n	8017e34 <sp_256_cond_sub_8+0x28>
 8017e56:	617b      	str	r3, [r7, #20]
        : [c] "+r" (c)
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
 8017e58:	697b      	ldr	r3, [r7, #20]
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3718      	adds	r7, #24
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8017e64:	4770      	bx	lr

08017e66 <sp_256_mont_reduce_8>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_256_mont_reduce_8(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8017e66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e6a:	b085      	sub	sp, #20
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	60f8      	str	r0, [r7, #12]
 8017e70:	60b9      	str	r1, [r7, #8]
 8017e72:	607a      	str	r2, [r7, #4]
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	4618      	mov	r0, r3
 8017e78:	f04f 0200 	mov.w	r2, #0
 8017e7c:	f04f 0100 	mov.w	r1, #0
 8017e80:	4691      	mov	r9, r2
 8017e82:	f04f 0400 	mov.w	r4, #0
 8017e86:	6803      	ldr	r3, [r0, #0]
 8017e88:	6846      	ldr	r6, [r0, #4]
 8017e8a:	f04f 0500 	mov.w	r5, #0
 8017e8e:	19a4      	adds	r4, r4, r6
 8017e90:	eb45 0502 	adc.w	r5, r5, r2
 8017e94:	6044      	str	r4, [r0, #4]
 8017e96:	6886      	ldr	r6, [r0, #8]
 8017e98:	f04f 0400 	mov.w	r4, #0
 8017e9c:	19ad      	adds	r5, r5, r6
 8017e9e:	eb44 0402 	adc.w	r4, r4, r2
 8017ea2:	6085      	str	r5, [r0, #8]
 8017ea4:	68c6      	ldr	r6, [r0, #12]
 8017ea6:	f04f 0500 	mov.w	r5, #0
 8017eaa:	18e4      	adds	r4, r4, r3
 8017eac:	eb45 0502 	adc.w	r5, r5, r2
 8017eb0:	19a4      	adds	r4, r4, r6
 8017eb2:	eb45 0502 	adc.w	r5, r5, r2
 8017eb6:	60c4      	str	r4, [r0, #12]
 8017eb8:	6906      	ldr	r6, [r0, #16]
 8017eba:	f04f 0400 	mov.w	r4, #0
 8017ebe:	19ad      	adds	r5, r5, r6
 8017ec0:	eb44 0402 	adc.w	r4, r4, r2
 8017ec4:	6105      	str	r5, [r0, #16]
 8017ec6:	6946      	ldr	r6, [r0, #20]
 8017ec8:	f04f 0500 	mov.w	r5, #0
 8017ecc:	19a4      	adds	r4, r4, r6
 8017ece:	eb45 0502 	adc.w	r5, r5, r2
 8017ed2:	6144      	str	r4, [r0, #20]
 8017ed4:	6986      	ldr	r6, [r0, #24]
 8017ed6:	f04f 0400 	mov.w	r4, #0
 8017eda:	18ed      	adds	r5, r5, r3
 8017edc:	eb44 0402 	adc.w	r4, r4, r2
 8017ee0:	19ad      	adds	r5, r5, r6
 8017ee2:	eb44 0402 	adc.w	r4, r4, r2
 8017ee6:	6185      	str	r5, [r0, #24]
 8017ee8:	69c6      	ldr	r6, [r0, #28]
 8017eea:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8017eee:	18cd      	adds	r5, r1, r3
 8017ef0:	f04f 0100 	mov.w	r1, #0
 8017ef4:	eb41 0102 	adc.w	r1, r1, r2
 8017ef8:	1ae4      	subs	r4, r4, r3
 8017efa:	4195      	sbcs	r5, r2
 8017efc:	eb61 0102 	sbc.w	r1, r1, r2
 8017f00:	19a4      	adds	r4, r4, r6
 8017f02:	eb55 0508 	adcs.w	r5, r5, r8
 8017f06:	eb41 0102 	adc.w	r1, r1, r2
 8017f0a:	61c4      	str	r4, [r0, #28]
 8017f0c:	6205      	str	r5, [r0, #32]
 8017f0e:	f109 0901 	add.w	r9, r9, #1
 8017f12:	f100 0004 	add.w	r0, r0, #4
 8017f16:	f04f 0608 	mov.w	r6, #8
 8017f1a:	45b1      	cmp	r9, r6
 8017f1c:	dbb1      	blt.n	8017e82 <sp_256_mont_reduce_8+0x1c>
 8017f1e:	f1a0 0020 	sub.w	r0, r0, #32
 8017f22:	460b      	mov	r3, r1
 8017f24:	f1a1 0101 	sub.w	r1, r1, #1
 8017f28:	ea6f 0101 	mvn.w	r1, r1
 8017f2c:	6a04      	ldr	r4, [r0, #32]
 8017f2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017f30:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8017f32:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 8017f36:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8017f3a:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8017f3e:	f8d0 b038 	ldr.w	fp, [r0, #56]	; 0x38
 8017f42:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8017f46:	1a64      	subs	r4, r4, r1
 8017f48:	418d      	sbcs	r5, r1
 8017f4a:	418e      	sbcs	r6, r1
 8017f4c:	eb78 0802 	sbcs.w	r8, r8, r2
 8017f50:	eb79 0902 	sbcs.w	r9, r9, r2
 8017f54:	eb7a 0a02 	sbcs.w	sl, sl, r2
 8017f58:	eb7b 0b03 	sbcs.w	fp, fp, r3
 8017f5c:	eb6e 0e01 	sbc.w	lr, lr, r1
 8017f60:	6004      	str	r4, [r0, #0]
 8017f62:	6045      	str	r5, [r0, #4]
 8017f64:	6086      	str	r6, [r0, #8]
 8017f66:	f8c0 800c 	str.w	r8, [r0, #12]
 8017f6a:	f8c0 9010 	str.w	r9, [r0, #16]
 8017f6e:	f8c0 a014 	str.w	sl, [r0, #20]
 8017f72:	f8c0 b018 	str.w	fp, [r0, #24]
 8017f76:	f8c0 e01c 	str.w	lr, [r0, #28]
 8017f7a:	60f8      	str	r0, [r7, #12]
    );


    (void)m;
    (void)mp;
}
 8017f7c:	bf00      	nop
 8017f7e:	3714      	adds	r7, #20
 8017f80:	46bd      	mov	sp, r7
 8017f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f86 <sp_256_mont_reduce_order_8>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_256_mont_reduce_order_8(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8017f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f8a:	b087      	sub	sp, #28
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	607a      	str	r2, [r7, #4]
    sp_digit ca = 0;
 8017f94:	2300      	movs	r3, #0
 8017f96:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8017f98:	68b9      	ldr	r1, [r7, #8]
 8017f9a:	6878      	ldr	r0, [r7, #4]
 8017f9c:	697a      	ldr	r2, [r7, #20]
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	4681      	mov	r9, r0
 8017fa2:	468c      	mov	ip, r1
 8017fa4:	469a      	mov	sl, r3
 8017fa6:	f04f 0400 	mov.w	r4, #0
 8017faa:	f10a 0b20 	add.w	fp, sl, #32
 8017fae:	4648      	mov	r0, r9
 8017fb0:	f8da 3000 	ldr.w	r3, [sl]
 8017fb4:	fb00 f003 	mul.w	r0, r0, r3
 8017fb8:	4661      	mov	r1, ip
 8017fba:	f10a 0e18 	add.w	lr, sl, #24
 8017fbe:	f8da 3000 	ldr.w	r3, [sl]
 8017fc2:	f04f 0500 	mov.w	r5, #0
 8017fc6:	f851 8b04 	ldr.w	r8, [r1], #4
 8017fca:	fba0 6808 	umull	r6, r8, r0, r8
 8017fce:	199b      	adds	r3, r3, r6
 8017fd0:	eb45 0508 	adc.w	r5, r5, r8
 8017fd4:	18e4      	adds	r4, r4, r3
 8017fd6:	f145 0500 	adc.w	r5, r5, #0
 8017fda:	f84a 4b04 	str.w	r4, [sl], #4
 8017fde:	f8da 3000 	ldr.w	r3, [sl]
 8017fe2:	f04f 0400 	mov.w	r4, #0
 8017fe6:	f851 8b04 	ldr.w	r8, [r1], #4
 8017fea:	fba0 6808 	umull	r6, r8, r0, r8
 8017fee:	199b      	adds	r3, r3, r6
 8017ff0:	eb44 0408 	adc.w	r4, r4, r8
 8017ff4:	18ed      	adds	r5, r5, r3
 8017ff6:	f144 0400 	adc.w	r4, r4, #0
 8017ffa:	f84a 5b04 	str.w	r5, [sl], #4
 8017ffe:	45f2      	cmp	sl, lr
 8018000:	dbdd      	blt.n	8017fbe <sp_256_mont_reduce_order_8+0x38>
 8018002:	f8da 3000 	ldr.w	r3, [sl]
 8018006:	f04f 0500 	mov.w	r5, #0
 801800a:	f851 8b04 	ldr.w	r8, [r1], #4
 801800e:	fba0 6808 	umull	r6, r8, r0, r8
 8018012:	199b      	adds	r3, r3, r6
 8018014:	eb45 0508 	adc.w	r5, r5, r8
 8018018:	18e4      	adds	r4, r4, r3
 801801a:	f145 0500 	adc.w	r5, r5, #0
 801801e:	f84a 4b04 	str.w	r4, [sl], #4
 8018022:	4614      	mov	r4, r2
 8018024:	f04f 0200 	mov.w	r2, #0
 8018028:	f8d1 8000 	ldr.w	r8, [r1]
 801802c:	fba0 6808 	umull	r6, r8, r0, r8
 8018030:	19ad      	adds	r5, r5, r6
 8018032:	eb54 0408 	adcs.w	r4, r4, r8
 8018036:	f142 0200 	adc.w	r2, r2, #0
 801803a:	f8da 6000 	ldr.w	r6, [sl]
 801803e:	f8da 8004 	ldr.w	r8, [sl, #4]
 8018042:	1976      	adds	r6, r6, r5
 8018044:	eb58 0804 	adcs.w	r8, r8, r4
 8018048:	f142 0200 	adc.w	r2, r2, #0
 801804c:	f8ca 6000 	str.w	r6, [sl]
 8018050:	f8ca 8004 	str.w	r8, [sl, #4]
 8018054:	f1aa 0a18 	sub.w	sl, sl, #24
 8018058:	45da      	cmp	sl, fp
 801805a:	dba8      	blt.n	8017fae <sp_256_mont_reduce_order_8+0x28>
 801805c:	4653      	mov	r3, sl
 801805e:	4661      	mov	r1, ip
 8018060:	617a      	str	r2, [r7, #20]
 8018062:	60fb      	str	r3, [r7, #12]
        : [ca] "+r" (ca), [a] "+r" (a)
        : [m] "r" (m), [mp] "r" (mp)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    sp_256_cond_sub_8(a - 8, a, m, (sp_digit)0 - ca);
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	f1a3 0020 	sub.w	r0, r3, #32
 801806a:	697b      	ldr	r3, [r7, #20]
 801806c:	425b      	negs	r3, r3
 801806e:	68ba      	ldr	r2, [r7, #8]
 8018070:	68f9      	ldr	r1, [r7, #12]
 8018072:	f7ff fecb 	bl	8017e0c <sp_256_cond_sub_8>
}
 8018076:	bf00      	nop
 8018078:	371c      	adds	r7, #28
 801807a:	46bd      	mov	sp, r7
 801807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018080 <sp_256_map_8>:
 * r  Resulting affine coordinate point.
 * p  Montgomery form projective coordinate point.
 * t  Temporary ordinate data.
 */
static void sp_256_map_8(sp_point_256* r, const sp_point_256* p, sp_digit* t)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b08a      	sub	sp, #40	; 0x28
 8018084:	af02      	add	r7, sp, #8
 8018086:	60f8      	str	r0, [r7, #12]
 8018088:	60b9      	str	r1, [r7, #8]
 801808a:	607a      	str	r2, [r7, #4]
    sp_digit* t1 = t;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	61fb      	str	r3, [r7, #28]
    sp_digit* t2 = t + 2*8;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	3340      	adds	r3, #64	; 0x40
 8018094:	61bb      	str	r3, [r7, #24]
    int32_t n;

    sp_256_mont_inv_8(t1, p->z, t + 2*8);
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	3340      	adds	r3, #64	; 0x40
 80180a0:	461a      	mov	r2, r3
 80180a2:	69f8      	ldr	r0, [r7, #28]
 80180a4:	f7ff fe32 	bl	8017d0c <sp_256_mont_inv_8>

    sp_256_mont_sqr_8(t2, t1, p256_mod, p256_mp_mod);
 80180a8:	2301      	movs	r3, #1
 80180aa:	4a3a      	ldr	r2, [pc, #232]	; (8018194 <sp_256_map_8+0x114>)
 80180ac:	69f9      	ldr	r1, [r7, #28]
 80180ae:	69b8      	ldr	r0, [r7, #24]
 80180b0:	f7ff fb23 	bl	80176fa <sp_256_mont_sqr_8>
    sp_256_mont_mul_8(t1, t2, t1, p256_mod, p256_mp_mod);
 80180b4:	2301      	movs	r3, #1
 80180b6:	9300      	str	r3, [sp, #0]
 80180b8:	4b36      	ldr	r3, [pc, #216]	; (8018194 <sp_256_map_8+0x114>)
 80180ba:	69fa      	ldr	r2, [r7, #28]
 80180bc:	69b9      	ldr	r1, [r7, #24]
 80180be:	69f8      	ldr	r0, [r7, #28]
 80180c0:	f7fe ff35 	bl	8016f2e <sp_256_mont_mul_8>

    /* x /= z^2 */
    sp_256_mont_mul_8(r->x, p->x, t2, p256_mod, p256_mp_mod);
 80180c4:	68f8      	ldr	r0, [r7, #12]
 80180c6:	68b9      	ldr	r1, [r7, #8]
 80180c8:	2301      	movs	r3, #1
 80180ca:	9300      	str	r3, [sp, #0]
 80180cc:	4b31      	ldr	r3, [pc, #196]	; (8018194 <sp_256_map_8+0x114>)
 80180ce:	69ba      	ldr	r2, [r7, #24]
 80180d0:	f7fe ff2d 	bl	8016f2e <sp_256_mont_mul_8>
    XMEMSET(r->x + 8, 0, sizeof(r->x) / 2U);
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	3320      	adds	r3, #32
 80180d8:	2220      	movs	r2, #32
 80180da:	2100      	movs	r1, #0
 80180dc:	4618      	mov	r0, r3
 80180de:	f003 fcbc 	bl	801ba5a <memset>
    sp_256_mont_reduce_8(r->x, p256_mod, p256_mp_mod);
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	2201      	movs	r2, #1
 80180e6:	492b      	ldr	r1, [pc, #172]	; (8018194 <sp_256_map_8+0x114>)
 80180e8:	4618      	mov	r0, r3
 80180ea:	f7ff febc 	bl	8017e66 <sp_256_mont_reduce_8>
    /* Reduce x to less than modulus */
    n = sp_256_cmp_8(r->x, p256_mod);
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	4928      	ldr	r1, [pc, #160]	; (8018194 <sp_256_map_8+0x114>)
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7ff fe52 	bl	8017d9c <sp_256_cmp_8>
 80180f8:	6178      	str	r0, [r7, #20]
    sp_256_cond_sub_8(r->x, r->x, p256_mod, 0 - ((n >= 0) ?
 80180fa:	68f8      	ldr	r0, [r7, #12]
 80180fc:	68f9      	ldr	r1, [r7, #12]
 80180fe:	697b      	ldr	r3, [r7, #20]
 8018100:	2b00      	cmp	r3, #0
 8018102:	db02      	blt.n	801810a <sp_256_map_8+0x8a>
 8018104:	f04f 33ff 	mov.w	r3, #4294967295
 8018108:	e000      	b.n	801810c <sp_256_map_8+0x8c>
 801810a:	2300      	movs	r3, #0
 801810c:	4a21      	ldr	r2, [pc, #132]	; (8018194 <sp_256_map_8+0x114>)
 801810e:	f7ff fe7d 	bl	8017e0c <sp_256_cond_sub_8>
                (sp_digit)1 : (sp_digit)0));
    sp_256_norm_8(r->x);

    /* y /= z^3 */
    sp_256_mont_mul_8(r->y, p->y, t1, p256_mod, p256_mp_mod);
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801811e:	2301      	movs	r3, #1
 8018120:	9300      	str	r3, [sp, #0]
 8018122:	4b1c      	ldr	r3, [pc, #112]	; (8018194 <sp_256_map_8+0x114>)
 8018124:	69fa      	ldr	r2, [r7, #28]
 8018126:	f7fe ff02 	bl	8016f2e <sp_256_mont_mul_8>
    XMEMSET(r->y + 8, 0, sizeof(r->y) / 2U);
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	3340      	adds	r3, #64	; 0x40
 801812e:	3320      	adds	r3, #32
 8018130:	2220      	movs	r2, #32
 8018132:	2100      	movs	r1, #0
 8018134:	4618      	mov	r0, r3
 8018136:	f003 fc90 	bl	801ba5a <memset>
    sp_256_mont_reduce_8(r->y, p256_mod, p256_mp_mod);
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	3340      	adds	r3, #64	; 0x40
 801813e:	2201      	movs	r2, #1
 8018140:	4914      	ldr	r1, [pc, #80]	; (8018194 <sp_256_map_8+0x114>)
 8018142:	4618      	mov	r0, r3
 8018144:	f7ff fe8f 	bl	8017e66 <sp_256_mont_reduce_8>
    /* Reduce y to less than modulus */
    n = sp_256_cmp_8(r->y, p256_mod);
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	3340      	adds	r3, #64	; 0x40
 801814c:	4911      	ldr	r1, [pc, #68]	; (8018194 <sp_256_map_8+0x114>)
 801814e:	4618      	mov	r0, r3
 8018150:	f7ff fe24 	bl	8017d9c <sp_256_cmp_8>
 8018154:	6178      	str	r0, [r7, #20]
    sp_256_cond_sub_8(r->y, r->y, p256_mod, 0 - ((n >= 0) ?
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8018162:	697b      	ldr	r3, [r7, #20]
 8018164:	2b00      	cmp	r3, #0
 8018166:	db02      	blt.n	801816e <sp_256_map_8+0xee>
 8018168:	f04f 33ff 	mov.w	r3, #4294967295
 801816c:	e000      	b.n	8018170 <sp_256_map_8+0xf0>
 801816e:	2300      	movs	r3, #0
 8018170:	4a08      	ldr	r2, [pc, #32]	; (8018194 <sp_256_map_8+0x114>)
 8018172:	f7ff fe4b 	bl	8017e0c <sp_256_cond_sub_8>
                (sp_digit)1 : (sp_digit)0));
    sp_256_norm_8(r->y);

    XMEMSET(r->z, 0, sizeof(r->z));
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	3380      	adds	r3, #128	; 0x80
 801817a:	2240      	movs	r2, #64	; 0x40
 801817c:	2100      	movs	r1, #0
 801817e:	4618      	mov	r0, r3
 8018180:	f003 fc6b 	bl	801ba5a <memset>
    r->z[0] = 1;
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	2201      	movs	r2, #1
 8018188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

}
 801818c:	bf00      	nop
 801818e:	3720      	adds	r7, #32
 8018190:	46bd      	mov	sp, r7
 8018192:	bd80      	pop	{r7, pc}
 8018194:	0801e7a4 	.word	0x0801e7a4

08018198 <sp_256_add_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_add_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8018198:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801819c:	b087      	sub	sp, #28
 801819e:	af00      	add	r7, sp, #0
 80181a0:	60f8      	str	r0, [r7, #12]
 80181a2:	60b9      	str	r1, [r7, #8]
 80181a4:	607a      	str	r2, [r7, #4]
    sp_digit c = 0;
 80181a6:	2300      	movs	r3, #0
 80181a8:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 80181aa:	6978      	ldr	r0, [r7, #20]
 80181ac:	68f9      	ldr	r1, [r7, #12]
 80181ae:	68ba      	ldr	r2, [r7, #8]
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	4616      	mov	r6, r2
 80181b4:	f04f 0800 	mov.w	r8, #0
 80181b8:	f106 0620 	add.w	r6, r6, #32
 80181bc:	f1a8 0801 	sub.w	r8, r8, #1
 80181c0:	eb10 0008 	adds.w	r0, r0, r8
 80181c4:	6814      	ldr	r4, [r2, #0]
 80181c6:	681d      	ldr	r5, [r3, #0]
 80181c8:	416c      	adcs	r4, r5
 80181ca:	600c      	str	r4, [r1, #0]
 80181cc:	f04f 0000 	mov.w	r0, #0
 80181d0:	eb40 0000 	adc.w	r0, r0, r0
 80181d4:	f102 0204 	add.w	r2, r2, #4
 80181d8:	f103 0304 	add.w	r3, r3, #4
 80181dc:	f101 0104 	add.w	r1, r1, #4
 80181e0:	42b2      	cmp	r2, r6
 80181e2:	d1ed      	bne.n	80181c0 <sp_256_add_8+0x28>
 80181e4:	6178      	str	r0, [r7, #20]
 80181e6:	60f9      	str	r1, [r7, #12]
 80181e8:	60ba      	str	r2, [r7, #8]
 80181ea:	607b      	str	r3, [r7, #4]
        : [c] "+r" (c), [r] "+r" (r), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r4", "r5", "r6", "r8"
    );

    return c;
 80181ec:	697b      	ldr	r3, [r7, #20]
}
 80181ee:	4618      	mov	r0, r3
 80181f0:	371c      	adds	r7, #28
 80181f2:	46bd      	mov	sp, r7
 80181f4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80181f8:	4770      	bx	lr

080181fa <sp_256_mont_add_8>:
 * b   Second number to add in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_add_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m)
{
 80181fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181fe:	b085      	sub	sp, #20
 8018200:	af00      	add	r7, sp, #0
 8018202:	60f8      	str	r0, [r7, #12]
 8018204:	60b9      	str	r1, [r7, #8]
 8018206:	607a      	str	r2, [r7, #4]
 8018208:	603b      	str	r3, [r7, #0]
    (void)m;

    __asm__ __volatile__ (
 801820a:	68fa      	ldr	r2, [r7, #12]
 801820c:	68b9      	ldr	r1, [r7, #8]
 801820e:	6878      	ldr	r0, [r7, #4]
 8018210:	f04f 0c00 	mov.w	ip, #0
 8018214:	680c      	ldr	r4, [r1, #0]
 8018216:	684d      	ldr	r5, [r1, #4]
 8018218:	688e      	ldr	r6, [r1, #8]
 801821a:	f8d1 800c 	ldr.w	r8, [r1, #12]
 801821e:	f8d0 9000 	ldr.w	r9, [r0]
 8018222:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8018226:	f8d0 b008 	ldr.w	fp, [r0, #8]
 801822a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801822e:	eb14 0409 	adds.w	r4, r4, r9
 8018232:	eb55 050a 	adcs.w	r5, r5, sl
 8018236:	eb56 060b 	adcs.w	r6, r6, fp
 801823a:	eb58 080e 	adcs.w	r8, r8, lr
 801823e:	6014      	str	r4, [r2, #0]
 8018240:	6055      	str	r5, [r2, #4]
 8018242:	6096      	str	r6, [r2, #8]
 8018244:	f8c2 800c 	str.w	r8, [r2, #12]
 8018248:	690c      	ldr	r4, [r1, #16]
 801824a:	694d      	ldr	r5, [r1, #20]
 801824c:	698e      	ldr	r6, [r1, #24]
 801824e:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8018252:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8018256:	f8d0 a014 	ldr.w	sl, [r0, #20]
 801825a:	f8d0 b018 	ldr.w	fp, [r0, #24]
 801825e:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 8018262:	eb54 0409 	adcs.w	r4, r4, r9
 8018266:	eb55 050a 	adcs.w	r5, r5, sl
 801826a:	eb56 060b 	adcs.w	r6, r6, fp
 801826e:	eb58 080e 	adcs.w	r8, r8, lr
 8018272:	f14c 0300 	adc.w	r3, ip, #0
 8018276:	ebac 0303 	sub.w	r3, ip, r3
 801827a:	f003 0c01 	and.w	ip, r3, #1
 801827e:	f8d2 9000 	ldr.w	r9, [r2]
 8018282:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8018286:	f8d2 b008 	ldr.w	fp, [r2, #8]
 801828a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801828e:	ebb9 0903 	subs.w	r9, r9, r3
 8018292:	eb7a 0a03 	sbcs.w	sl, sl, r3
 8018296:	eb7b 0b03 	sbcs.w	fp, fp, r3
 801829a:	f17e 0e00 	sbcs.w	lr, lr, #0
 801829e:	f174 0400 	sbcs.w	r4, r4, #0
 80182a2:	f175 0500 	sbcs.w	r5, r5, #0
 80182a6:	eb76 060c 	sbcs.w	r6, r6, ip
 80182aa:	eb68 0803 	sbc.w	r8, r8, r3
 80182ae:	f8c2 9000 	str.w	r9, [r2]
 80182b2:	f8c2 a004 	str.w	sl, [r2, #4]
 80182b6:	f8c2 b008 	str.w	fp, [r2, #8]
 80182ba:	f8c2 e00c 	str.w	lr, [r2, #12]
 80182be:	6114      	str	r4, [r2, #16]
 80182c0:	6155      	str	r5, [r2, #20]
 80182c2:	6196      	str	r6, [r2, #24]
 80182c4:	f8c2 801c 	str.w	r8, [r2, #28]
        "str   r8, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 80182c8:	bf00      	nop
 80182ca:	3714      	adds	r7, #20
 80182cc:	46bd      	mov	sp, r7
 80182ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182d2 <sp_256_mont_dbl_8>:
 * r   Result of doubling.
 * a   Number to double in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_dbl_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 80182d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182d6:	b085      	sub	sp, #20
 80182d8:	af00      	add	r7, sp, #0
 80182da:	60f8      	str	r0, [r7, #12]
 80182dc:	60b9      	str	r1, [r7, #8]
 80182de:	607a      	str	r2, [r7, #4]
    (void)m;

    __asm__ __volatile__ (
 80182e0:	68fa      	ldr	r2, [r7, #12]
 80182e2:	68b9      	ldr	r1, [r7, #8]
 80182e4:	f04f 0c00 	mov.w	ip, #0
 80182e8:	680c      	ldr	r4, [r1, #0]
 80182ea:	684d      	ldr	r5, [r1, #4]
 80182ec:	688e      	ldr	r6, [r1, #8]
 80182ee:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80182f2:	f8d1 9010 	ldr.w	r9, [r1, #16]
 80182f6:	f8d1 a014 	ldr.w	sl, [r1, #20]
 80182fa:	f8d1 b018 	ldr.w	fp, [r1, #24]
 80182fe:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8018302:	1924      	adds	r4, r4, r4
 8018304:	416d      	adcs	r5, r5
 8018306:	4176      	adcs	r6, r6
 8018308:	eb58 0808 	adcs.w	r8, r8, r8
 801830c:	eb59 0909 	adcs.w	r9, r9, r9
 8018310:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8018314:	eb5b 0b0b 	adcs.w	fp, fp, fp
 8018318:	eb5e 0e0e 	adcs.w	lr, lr, lr
 801831c:	f14c 0300 	adc.w	r3, ip, #0
 8018320:	ebac 0303 	sub.w	r3, ip, r3
 8018324:	f003 0c01 	and.w	ip, r3, #1
 8018328:	1ae4      	subs	r4, r4, r3
 801832a:	419d      	sbcs	r5, r3
 801832c:	419e      	sbcs	r6, r3
 801832e:	f178 0800 	sbcs.w	r8, r8, #0
 8018332:	f179 0900 	sbcs.w	r9, r9, #0
 8018336:	f17a 0a00 	sbcs.w	sl, sl, #0
 801833a:	eb7b 0b0c 	sbcs.w	fp, fp, ip
 801833e:	eb6e 0e03 	sbc.w	lr, lr, r3
 8018342:	6014      	str	r4, [r2, #0]
 8018344:	6055      	str	r5, [r2, #4]
 8018346:	6096      	str	r6, [r2, #8]
 8018348:	f8c2 800c 	str.w	r8, [r2, #12]
 801834c:	f8c2 9010 	str.w	r9, [r2, #16]
 8018350:	f8c2 a014 	str.w	sl, [r2, #20]
 8018354:	f8c2 b018 	str.w	fp, [r2, #24]
 8018358:	f8c2 e01c 	str.w	lr, [r2, #28]
        "str   r14, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 801835c:	bf00      	nop
 801835e:	3714      	adds	r7, #20
 8018360:	46bd      	mov	sp, r7
 8018362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018366 <sp_256_mont_tpl_8>:
 * r   Result of Tripling.
 * a   Number to triple in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_tpl_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8018366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801836a:	b085      	sub	sp, #20
 801836c:	af00      	add	r7, sp, #0
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	60b9      	str	r1, [r7, #8]
 8018372:	607a      	str	r2, [r7, #4]
    (void)m;

    __asm__ __volatile__ (
 8018374:	68f9      	ldr	r1, [r7, #12]
 8018376:	68b8      	ldr	r0, [r7, #8]
 8018378:	6802      	ldr	r2, [r0, #0]
 801837a:	6843      	ldr	r3, [r0, #4]
 801837c:	6884      	ldr	r4, [r0, #8]
 801837e:	68c5      	ldr	r5, [r0, #12]
 8018380:	6906      	ldr	r6, [r0, #16]
 8018382:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8018386:	f8d0 9018 	ldr.w	r9, [r0, #24]
 801838a:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 801838e:	1892      	adds	r2, r2, r2
 8018390:	415b      	adcs	r3, r3
 8018392:	4164      	adcs	r4, r4
 8018394:	416d      	adcs	r5, r5
 8018396:	4176      	adcs	r6, r6
 8018398:	eb58 0808 	adcs.w	r8, r8, r8
 801839c:	eb59 0909 	adcs.w	r9, r9, r9
 80183a0:	eb5a 0a0a 	adcs.w	sl, sl, sl
 80183a4:	f04f 0b00 	mov.w	fp, #0
 80183a8:	f04f 0e00 	mov.w	lr, #0
 80183ac:	eb4b 0b0b 	adc.w	fp, fp, fp
 80183b0:	46dc      	mov	ip, fp
 80183b2:	f1ab 0b01 	sub.w	fp, fp, #1
 80183b6:	ea6f 0b0b 	mvn.w	fp, fp
 80183ba:	ebb2 020b 	subs.w	r2, r2, fp
 80183be:	eb73 030b 	sbcs.w	r3, r3, fp
 80183c2:	eb74 040b 	sbcs.w	r4, r4, fp
 80183c6:	eb75 050e 	sbcs.w	r5, r5, lr
 80183ca:	eb76 060e 	sbcs.w	r6, r6, lr
 80183ce:	eb78 080e 	sbcs.w	r8, r8, lr
 80183d2:	eb79 090c 	sbcs.w	r9, r9, ip
 80183d6:	eb6a 0a0b 	sbc.w	sl, sl, fp
 80183da:	f8d0 c000 	ldr.w	ip, [r0]
 80183de:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80183e2:	eb12 020c 	adds.w	r2, r2, ip
 80183e6:	eb53 030e 	adcs.w	r3, r3, lr
 80183ea:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80183ee:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80183f2:	eb54 040c 	adcs.w	r4, r4, ip
 80183f6:	eb55 050e 	adcs.w	r5, r5, lr
 80183fa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80183fe:	f8d0 e014 	ldr.w	lr, [r0, #20]
 8018402:	eb56 060c 	adcs.w	r6, r6, ip
 8018406:	eb58 080e 	adcs.w	r8, r8, lr
 801840a:	f8d0 c018 	ldr.w	ip, [r0, #24]
 801840e:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 8018412:	eb59 090c 	adcs.w	r9, r9, ip
 8018416:	eb5a 0a0e 	adcs.w	sl, sl, lr
 801841a:	f04f 0b00 	mov.w	fp, #0
 801841e:	f04f 0e00 	mov.w	lr, #0
 8018422:	eb4b 0b0b 	adc.w	fp, fp, fp
 8018426:	46dc      	mov	ip, fp
 8018428:	f1ab 0b01 	sub.w	fp, fp, #1
 801842c:	ea6f 0b0b 	mvn.w	fp, fp
 8018430:	ebb2 020b 	subs.w	r2, r2, fp
 8018434:	600a      	str	r2, [r1, #0]
 8018436:	eb73 030b 	sbcs.w	r3, r3, fp
 801843a:	604b      	str	r3, [r1, #4]
 801843c:	eb74 040b 	sbcs.w	r4, r4, fp
 8018440:	608c      	str	r4, [r1, #8]
 8018442:	eb75 050e 	sbcs.w	r5, r5, lr
 8018446:	60cd      	str	r5, [r1, #12]
 8018448:	eb76 060e 	sbcs.w	r6, r6, lr
 801844c:	610e      	str	r6, [r1, #16]
 801844e:	eb78 080e 	sbcs.w	r8, r8, lr
 8018452:	f8c1 8014 	str.w	r8, [r1, #20]
 8018456:	eb79 090c 	sbcs.w	r9, r9, ip
 801845a:	f8c1 9018 	str.w	r9, [r1, #24]
 801845e:	eb6a 0a0b 	sbc.w	sl, sl, fp
 8018462:	f8c1 a01c 	str.w	sl, [r1, #28]
        "str	r10, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r11", "r12", "r14", "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10"
    );
}
 8018466:	bf00      	nop
 8018468:	3714      	adds	r7, #20
 801846a:	46bd      	mov	sp, r7
 801846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018470 <sp_256_mont_sub_8>:
 * b   Number to subtract with in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_sub_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m)
{
 8018470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018474:	b085      	sub	sp, #20
 8018476:	af00      	add	r7, sp, #0
 8018478:	60f8      	str	r0, [r7, #12]
 801847a:	60b9      	str	r1, [r7, #8]
 801847c:	607a      	str	r2, [r7, #4]
 801847e:	603b      	str	r3, [r7, #0]
    (void)m;

    __asm__ __volatile__ (
 8018480:	68fa      	ldr	r2, [r7, #12]
 8018482:	68b9      	ldr	r1, [r7, #8]
 8018484:	6878      	ldr	r0, [r7, #4]
 8018486:	f04f 0c00 	mov.w	ip, #0
 801848a:	680c      	ldr	r4, [r1, #0]
 801848c:	684d      	ldr	r5, [r1, #4]
 801848e:	688e      	ldr	r6, [r1, #8]
 8018490:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8018494:	f8d0 9000 	ldr.w	r9, [r0]
 8018498:	f8d0 a004 	ldr.w	sl, [r0, #4]
 801849c:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80184a0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80184a4:	ebb4 0409 	subs.w	r4, r4, r9
 80184a8:	eb75 050a 	sbcs.w	r5, r5, sl
 80184ac:	eb76 060b 	sbcs.w	r6, r6, fp
 80184b0:	eb78 080e 	sbcs.w	r8, r8, lr
 80184b4:	6014      	str	r4, [r2, #0]
 80184b6:	6055      	str	r5, [r2, #4]
 80184b8:	6096      	str	r6, [r2, #8]
 80184ba:	f8c2 800c 	str.w	r8, [r2, #12]
 80184be:	690c      	ldr	r4, [r1, #16]
 80184c0:	694d      	ldr	r5, [r1, #20]
 80184c2:	698e      	ldr	r6, [r1, #24]
 80184c4:	f8d1 801c 	ldr.w	r8, [r1, #28]
 80184c8:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80184cc:	f8d0 a014 	ldr.w	sl, [r0, #20]
 80184d0:	f8d0 b018 	ldr.w	fp, [r0, #24]
 80184d4:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 80184d8:	eb74 0409 	sbcs.w	r4, r4, r9
 80184dc:	eb75 050a 	sbcs.w	r5, r5, sl
 80184e0:	eb76 060b 	sbcs.w	r6, r6, fp
 80184e4:	eb78 080e 	sbcs.w	r8, r8, lr
 80184e8:	f16c 0300 	sbc.w	r3, ip, #0
 80184ec:	f003 0c01 	and.w	ip, r3, #1
 80184f0:	f8d2 9000 	ldr.w	r9, [r2]
 80184f4:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80184f8:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80184fc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8018500:	eb19 0903 	adds.w	r9, r9, r3
 8018504:	eb5a 0a03 	adcs.w	sl, sl, r3
 8018508:	eb5b 0b03 	adcs.w	fp, fp, r3
 801850c:	f15e 0e00 	adcs.w	lr, lr, #0
 8018510:	f154 0400 	adcs.w	r4, r4, #0
 8018514:	f155 0500 	adcs.w	r5, r5, #0
 8018518:	eb56 060c 	adcs.w	r6, r6, ip
 801851c:	eb48 0803 	adc.w	r8, r8, r3
 8018520:	f8c2 9000 	str.w	r9, [r2]
 8018524:	f8c2 a004 	str.w	sl, [r2, #4]
 8018528:	f8c2 b008 	str.w	fp, [r2, #8]
 801852c:	f8c2 e00c 	str.w	lr, [r2, #12]
 8018530:	6114      	str	r4, [r2, #16]
 8018532:	6155      	str	r5, [r2, #20]
 8018534:	6196      	str	r6, [r2, #24]
 8018536:	f8c2 801c 	str.w	r8, [r2, #28]
        "str   r8, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 801853a:	bf00      	nop
 801853c:	3714      	adds	r7, #20
 801853e:	46bd      	mov	sp, r7
 8018540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018544 <sp_256_div2_8>:
 * r  Result of division by 2.
 * a  Number to divide.
 * m  Modulus (prime).
 */
SP_NOINLINE static void sp_256_div2_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8018544:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8018548:	b085      	sub	sp, #20
 801854a:	af00      	add	r7, sp, #0
 801854c:	60f8      	str	r0, [r7, #12]
 801854e:	60b9      	str	r1, [r7, #8]
 8018550:	607a      	str	r2, [r7, #4]
    __asm__ __volatile__ (
 8018552:	68fa      	ldr	r2, [r7, #12]
 8018554:	68b9      	ldr	r1, [r7, #8]
 8018556:	6878      	ldr	r0, [r7, #4]
 8018558:	f8d1 8000 	ldr.w	r8, [r1]
 801855c:	ea4f 78c8 	mov.w	r8, r8, lsl #31
 8018560:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8018564:	f04f 0500 	mov.w	r5, #0
 8018568:	eba5 0508 	sub.w	r5, r5, r8
 801856c:	f04f 0800 	mov.w	r8, #0
 8018570:	ea4f 76c5 	mov.w	r6, r5, lsl #31
 8018574:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8018578:	680b      	ldr	r3, [r1, #0]
 801857a:	684c      	ldr	r4, [r1, #4]
 801857c:	195b      	adds	r3, r3, r5
 801857e:	416c      	adcs	r4, r5
 8018580:	6013      	str	r3, [r2, #0]
 8018582:	6054      	str	r4, [r2, #4]
 8018584:	688b      	ldr	r3, [r1, #8]
 8018586:	68cc      	ldr	r4, [r1, #12]
 8018588:	416b      	adcs	r3, r5
 801858a:	eb54 0408 	adcs.w	r4, r4, r8
 801858e:	6093      	str	r3, [r2, #8]
 8018590:	60d4      	str	r4, [r2, #12]
 8018592:	690b      	ldr	r3, [r1, #16]
 8018594:	694c      	ldr	r4, [r1, #20]
 8018596:	eb53 0308 	adcs.w	r3, r3, r8
 801859a:	eb54 0408 	adcs.w	r4, r4, r8
 801859e:	6113      	str	r3, [r2, #16]
 80185a0:	6154      	str	r4, [r2, #20]
 80185a2:	698b      	ldr	r3, [r1, #24]
 80185a4:	69cc      	ldr	r4, [r1, #28]
 80185a6:	4173      	adcs	r3, r6
 80185a8:	416c      	adcs	r4, r5
 80185aa:	eb48 0808 	adc.w	r8, r8, r8
 80185ae:	ea4f 78c8 	mov.w	r8, r8, lsl #31
 80185b2:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80185b6:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 80185ba:	ea4f 0654 	mov.w	r6, r4, lsr #1
 80185be:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 80185c2:	ea45 0504 	orr.w	r5, r5, r4
 80185c6:	ea46 0608 	orr.w	r6, r6, r8
 80185ca:	4698      	mov	r8, r3
 80185cc:	6195      	str	r5, [r2, #24]
 80185ce:	61d6      	str	r6, [r2, #28]
 80185d0:	690b      	ldr	r3, [r1, #16]
 80185d2:	694c      	ldr	r4, [r1, #20]
 80185d4:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80185d8:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 80185dc:	ea4f 0654 	mov.w	r6, r4, lsr #1
 80185e0:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 80185e4:	ea45 0504 	orr.w	r5, r5, r4
 80185e8:	ea46 0608 	orr.w	r6, r6, r8
 80185ec:	4698      	mov	r8, r3
 80185ee:	6115      	str	r5, [r2, #16]
 80185f0:	6156      	str	r6, [r2, #20]
 80185f2:	688b      	ldr	r3, [r1, #8]
 80185f4:	68cc      	ldr	r4, [r1, #12]
 80185f6:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80185fa:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 80185fe:	ea4f 0654 	mov.w	r6, r4, lsr #1
 8018602:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 8018606:	ea45 0504 	orr.w	r5, r5, r4
 801860a:	ea46 0608 	orr.w	r6, r6, r8
 801860e:	4698      	mov	r8, r3
 8018610:	6095      	str	r5, [r2, #8]
 8018612:	60d6      	str	r6, [r2, #12]
 8018614:	6813      	ldr	r3, [r2, #0]
 8018616:	6854      	ldr	r4, [r2, #4]
 8018618:	ea4f 0553 	mov.w	r5, r3, lsr #1
 801861c:	ea4f 0654 	mov.w	r6, r4, lsr #1
 8018620:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 8018624:	ea45 0504 	orr.w	r5, r5, r4
 8018628:	ea46 0608 	orr.w	r6, r6, r8
 801862c:	6015      	str	r5, [r2, #0]
 801862e:	6056      	str	r6, [r2, #4]
        "str	r6, [%[r], #4]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [m] "r" (m)
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );
}
 8018630:	bf00      	nop
 8018632:	3714      	adds	r7, #20
 8018634:	46bd      	mov	sp, r7
 8018636:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801863a:	4770      	bx	lr

0801863c <sp_256_proj_point_dbl_8>:
    return err;
}
#endif /* WOLFSSL_SP_NONBLOCK */

static void sp_256_proj_point_dbl_8(sp_point_256* r, const sp_point_256* p, sp_digit* t)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b08c      	sub	sp, #48	; 0x30
 8018640:	af02      	add	r7, sp, #8
 8018642:	60f8      	str	r0, [r7, #12]
 8018644:	60b9      	str	r1, [r7, #8]
 8018646:	607a      	str	r2, [r7, #4]
    sp_digit* t1 = t;
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	627b      	str	r3, [r7, #36]	; 0x24
    sp_digit* t2 = t + 2*8;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	3340      	adds	r3, #64	; 0x40
 8018650:	623b      	str	r3, [r7, #32]
    sp_digit* x;
    sp_digit* y;
    sp_digit* z;

    x = r->x;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	61fb      	str	r3, [r7, #28]
    y = r->y;
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	3340      	adds	r3, #64	; 0x40
 801865a:	61bb      	str	r3, [r7, #24]
    z = r->z;
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	3380      	adds	r3, #128	; 0x80
 8018660:	617b      	str	r3, [r7, #20]
    /* Put infinity into result. */
    if (r != p) {
 8018662:	68fa      	ldr	r2, [r7, #12]
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	429a      	cmp	r2, r3
 8018668:	d005      	beq.n	8018676 <sp_256_proj_point_dbl_8+0x3a>
        r->infinity = p->infinity;
 801866a:	68bb      	ldr	r3, [r7, #8]
 801866c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* T1 = Z * Z */
    sp_256_mont_sqr_8(t1, p->z, p256_mod, p256_mp_mod);
 8018676:	68bb      	ldr	r3, [r7, #8]
 8018678:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801867c:	2301      	movs	r3, #1
 801867e:	4a3c      	ldr	r2, [pc, #240]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 8018680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018682:	f7ff f83a 	bl	80176fa <sp_256_mont_sqr_8>
    /* Z = Y * Z */
    sp_256_mont_mul_8(z, p->y, p->z, p256_mod, p256_mp_mod);
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8018692:	2301      	movs	r3, #1
 8018694:	9300      	str	r3, [sp, #0]
 8018696:	4b36      	ldr	r3, [pc, #216]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 8018698:	6978      	ldr	r0, [r7, #20]
 801869a:	f7fe fc48 	bl	8016f2e <sp_256_mont_mul_8>
    /* Z = 2Z */
    sp_256_mont_dbl_8(z, z, p256_mod);
 801869e:	4a34      	ldr	r2, [pc, #208]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 80186a0:	6979      	ldr	r1, [r7, #20]
 80186a2:	6978      	ldr	r0, [r7, #20]
 80186a4:	f7ff fe15 	bl	80182d2 <sp_256_mont_dbl_8>
    /* T2 = X - T1 */
    sp_256_mont_sub_8(t2, p->x, t1, p256_mod);
 80186a8:	68b9      	ldr	r1, [r7, #8]
 80186aa:	4b31      	ldr	r3, [pc, #196]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 80186ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186ae:	6a38      	ldr	r0, [r7, #32]
 80186b0:	f7ff fede 	bl	8018470 <sp_256_mont_sub_8>
    /* T1 = X + T1 */
    sp_256_mont_add_8(t1, p->x, t1, p256_mod);
 80186b4:	68b9      	ldr	r1, [r7, #8]
 80186b6:	4b2e      	ldr	r3, [pc, #184]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 80186b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186bc:	f7ff fd9d 	bl	80181fa <sp_256_mont_add_8>
    /* T2 = T1 * T2 */
    sp_256_mont_mul_8(t2, t1, t2, p256_mod, p256_mp_mod);
 80186c0:	2301      	movs	r3, #1
 80186c2:	9300      	str	r3, [sp, #0]
 80186c4:	4b2a      	ldr	r3, [pc, #168]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 80186c6:	6a3a      	ldr	r2, [r7, #32]
 80186c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80186ca:	6a38      	ldr	r0, [r7, #32]
 80186cc:	f7fe fc2f 	bl	8016f2e <sp_256_mont_mul_8>
    /* T1 = 3T2 */
    sp_256_mont_tpl_8(t1, t2, p256_mod);
 80186d0:	4a27      	ldr	r2, [pc, #156]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 80186d2:	6a39      	ldr	r1, [r7, #32]
 80186d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186d6:	f7ff fe46 	bl	8018366 <sp_256_mont_tpl_8>
    /* Y = 2Y */
    sp_256_mont_dbl_8(y, p->y, p256_mod);
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	3340      	adds	r3, #64	; 0x40
 80186de:	4a24      	ldr	r2, [pc, #144]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 80186e0:	4619      	mov	r1, r3
 80186e2:	69b8      	ldr	r0, [r7, #24]
 80186e4:	f7ff fdf5 	bl	80182d2 <sp_256_mont_dbl_8>
    /* Y = Y * Y */
    sp_256_mont_sqr_8(y, y, p256_mod, p256_mp_mod);
 80186e8:	2301      	movs	r3, #1
 80186ea:	4a21      	ldr	r2, [pc, #132]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 80186ec:	69b9      	ldr	r1, [r7, #24]
 80186ee:	69b8      	ldr	r0, [r7, #24]
 80186f0:	f7ff f803 	bl	80176fa <sp_256_mont_sqr_8>
    /* T2 = Y * Y */
    sp_256_mont_sqr_8(t2, y, p256_mod, p256_mp_mod);
 80186f4:	2301      	movs	r3, #1
 80186f6:	4a1e      	ldr	r2, [pc, #120]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 80186f8:	69b9      	ldr	r1, [r7, #24]
 80186fa:	6a38      	ldr	r0, [r7, #32]
 80186fc:	f7fe fffd 	bl	80176fa <sp_256_mont_sqr_8>
    /* T2 = T2/2 */
    sp_256_div2_8(t2, t2, p256_mod);
 8018700:	4a1b      	ldr	r2, [pc, #108]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 8018702:	6a39      	ldr	r1, [r7, #32]
 8018704:	6a38      	ldr	r0, [r7, #32]
 8018706:	f7ff ff1d 	bl	8018544 <sp_256_div2_8>
    /* Y = Y * X */
    sp_256_mont_mul_8(y, y, p->x, p256_mod, p256_mp_mod);
 801870a:	68ba      	ldr	r2, [r7, #8]
 801870c:	2301      	movs	r3, #1
 801870e:	9300      	str	r3, [sp, #0]
 8018710:	4b17      	ldr	r3, [pc, #92]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 8018712:	69b9      	ldr	r1, [r7, #24]
 8018714:	69b8      	ldr	r0, [r7, #24]
 8018716:	f7fe fc0a 	bl	8016f2e <sp_256_mont_mul_8>
    /* X = T1 * T1 */
    sp_256_mont_sqr_8(x, t1, p256_mod, p256_mp_mod);
 801871a:	2301      	movs	r3, #1
 801871c:	4a14      	ldr	r2, [pc, #80]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 801871e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018720:	69f8      	ldr	r0, [r7, #28]
 8018722:	f7fe ffea 	bl	80176fa <sp_256_mont_sqr_8>
    /* X = X - Y */
    sp_256_mont_sub_8(x, x, y, p256_mod);
 8018726:	4b12      	ldr	r3, [pc, #72]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 8018728:	69ba      	ldr	r2, [r7, #24]
 801872a:	69f9      	ldr	r1, [r7, #28]
 801872c:	69f8      	ldr	r0, [r7, #28]
 801872e:	f7ff fe9f 	bl	8018470 <sp_256_mont_sub_8>
    /* X = X - Y */
    sp_256_mont_sub_8(x, x, y, p256_mod);
 8018732:	4b0f      	ldr	r3, [pc, #60]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 8018734:	69ba      	ldr	r2, [r7, #24]
 8018736:	69f9      	ldr	r1, [r7, #28]
 8018738:	69f8      	ldr	r0, [r7, #28]
 801873a:	f7ff fe99 	bl	8018470 <sp_256_mont_sub_8>
    /* Y = Y - X */
    sp_256_mont_sub_8(y, y, x, p256_mod);
 801873e:	4b0c      	ldr	r3, [pc, #48]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 8018740:	69fa      	ldr	r2, [r7, #28]
 8018742:	69b9      	ldr	r1, [r7, #24]
 8018744:	69b8      	ldr	r0, [r7, #24]
 8018746:	f7ff fe93 	bl	8018470 <sp_256_mont_sub_8>
    /* Y = Y * T1 */
    sp_256_mont_mul_8(y, y, t1, p256_mod, p256_mp_mod);
 801874a:	2301      	movs	r3, #1
 801874c:	9300      	str	r3, [sp, #0]
 801874e:	4b08      	ldr	r3, [pc, #32]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 8018750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018752:	69b9      	ldr	r1, [r7, #24]
 8018754:	69b8      	ldr	r0, [r7, #24]
 8018756:	f7fe fbea 	bl	8016f2e <sp_256_mont_mul_8>
    /* Y = Y - T2 */
    sp_256_mont_sub_8(y, y, t2, p256_mod);
 801875a:	4b05      	ldr	r3, [pc, #20]	; (8018770 <sp_256_proj_point_dbl_8+0x134>)
 801875c:	6a3a      	ldr	r2, [r7, #32]
 801875e:	69b9      	ldr	r1, [r7, #24]
 8018760:	69b8      	ldr	r0, [r7, #24]
 8018762:	f7ff fe85 	bl	8018470 <sp_256_mont_sub_8>
}
 8018766:	bf00      	nop
 8018768:	3728      	adds	r7, #40	; 0x28
 801876a:	46bd      	mov	sp, r7
 801876c:	bd80      	pop	{r7, pc}
 801876e:	bf00      	nop
 8018770:	0801e7a4 	.word	0x0801e7a4

08018774 <sp_256_sub_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_sub_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8018774:	b4f0      	push	{r4, r5, r6, r7}
 8018776:	b086      	sub	sp, #24
 8018778:	af00      	add	r7, sp, #0
 801877a:	60f8      	str	r0, [r7, #12]
 801877c:	60b9      	str	r1, [r7, #8]
 801877e:	607a      	str	r2, [r7, #4]
    sp_digit c = 0;
 8018780:	2300      	movs	r3, #0
 8018782:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 8018784:	6978      	ldr	r0, [r7, #20]
 8018786:	68f9      	ldr	r1, [r7, #12]
 8018788:	68ba      	ldr	r2, [r7, #8]
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	4616      	mov	r6, r2
 801878e:	f106 0620 	add.w	r6, r6, #32
 8018792:	f04f 0500 	mov.w	r5, #0
 8018796:	1a2d      	subs	r5, r5, r0
 8018798:	6814      	ldr	r4, [r2, #0]
 801879a:	681d      	ldr	r5, [r3, #0]
 801879c:	41ac      	sbcs	r4, r5
 801879e:	600c      	str	r4, [r1, #0]
 80187a0:	eb60 0000 	sbc.w	r0, r0, r0
 80187a4:	f102 0204 	add.w	r2, r2, #4
 80187a8:	f103 0304 	add.w	r3, r3, #4
 80187ac:	f101 0104 	add.w	r1, r1, #4
 80187b0:	42b2      	cmp	r2, r6
 80187b2:	d1ee      	bne.n	8018792 <sp_256_sub_8+0x1e>
 80187b4:	6178      	str	r0, [r7, #20]
 80187b6:	60f9      	str	r1, [r7, #12]
 80187b8:	60ba      	str	r2, [r7, #8]
 80187ba:	607b      	str	r3, [r7, #4]
        : [c] "+r" (c), [r] "+r" (r), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r4", "r5", "r6"
    );

    return c;
 80187bc:	697b      	ldr	r3, [r7, #20]
}
 80187be:	4618      	mov	r0, r3
 80187c0:	3718      	adds	r7, #24
 80187c2:	46bd      	mov	sp, r7
 80187c4:	bcf0      	pop	{r4, r5, r6, r7}
 80187c6:	4770      	bx	lr

080187c8 <sp_256_cmp_equal_8>:
 * a  First number to compare.
 * b  Second number to compare.
 * returns 1 when equal and 0 otherwise.
 */
static int sp_256_cmp_equal_8(const sp_digit* a, const sp_digit* b)
{
 80187c8:	b480      	push	{r7}
 80187ca:	b083      	sub	sp, #12
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	6078      	str	r0, [r7, #4]
 80187d0:	6039      	str	r1, [r7, #0]
    return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2]) | (a[3] ^ b[3]) |
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681a      	ldr	r2, [r3, #0]
 80187d6:	683b      	ldr	r3, [r7, #0]
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	405a      	eors	r2, r3
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	3304      	adds	r3, #4
 80187e0:	6819      	ldr	r1, [r3, #0]
 80187e2:	683b      	ldr	r3, [r7, #0]
 80187e4:	3304      	adds	r3, #4
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	404b      	eors	r3, r1
 80187ea:	431a      	orrs	r2, r3
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	3308      	adds	r3, #8
 80187f0:	6819      	ldr	r1, [r3, #0]
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	3308      	adds	r3, #8
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	404b      	eors	r3, r1
 80187fa:	431a      	orrs	r2, r3
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	330c      	adds	r3, #12
 8018800:	6819      	ldr	r1, [r3, #0]
 8018802:	683b      	ldr	r3, [r7, #0]
 8018804:	330c      	adds	r3, #12
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	404b      	eors	r3, r1
 801880a:	431a      	orrs	r2, r3
            (a[4] ^ b[4]) | (a[5] ^ b[5]) | (a[6] ^ b[6]) | (a[7] ^ b[7])) == 0;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	3310      	adds	r3, #16
 8018810:	6819      	ldr	r1, [r3, #0]
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	3310      	adds	r3, #16
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	404b      	eors	r3, r1
    return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2]) | (a[3] ^ b[3]) |
 801881a:	431a      	orrs	r2, r3
            (a[4] ^ b[4]) | (a[5] ^ b[5]) | (a[6] ^ b[6]) | (a[7] ^ b[7])) == 0;
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	3314      	adds	r3, #20
 8018820:	6819      	ldr	r1, [r3, #0]
 8018822:	683b      	ldr	r3, [r7, #0]
 8018824:	3314      	adds	r3, #20
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	404b      	eors	r3, r1
 801882a:	431a      	orrs	r2, r3
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	3318      	adds	r3, #24
 8018830:	6819      	ldr	r1, [r3, #0]
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	3318      	adds	r3, #24
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	404b      	eors	r3, r1
 801883a:	431a      	orrs	r2, r3
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	331c      	adds	r3, #28
 8018840:	6819      	ldr	r1, [r3, #0]
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	331c      	adds	r3, #28
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	404b      	eors	r3, r1
 801884a:	4313      	orrs	r3, r2
 801884c:	2b00      	cmp	r3, #0
 801884e:	bf0c      	ite	eq
 8018850:	2301      	moveq	r3, #1
 8018852:	2300      	movne	r3, #0
 8018854:	b2db      	uxtb	r3, r3
}
 8018856:	4618      	mov	r0, r3
 8018858:	370c      	adds	r7, #12
 801885a:	46bd      	mov	sp, r7
 801885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018860:	4770      	bx	lr
	...

08018864 <sp_256_proj_point_add_8>:
}
#endif /* WOLFSSL_SP_NONBLOCK */

static void sp_256_proj_point_add_8(sp_point_256* r, const sp_point_256* p, const sp_point_256* q,
        sp_digit* t)
{
 8018864:	b5b0      	push	{r4, r5, r7, lr}
 8018866:	b094      	sub	sp, #80	; 0x50
 8018868:	af02      	add	r7, sp, #8
 801886a:	60f8      	str	r0, [r7, #12]
 801886c:	60b9      	str	r1, [r7, #8]
 801886e:	607a      	str	r2, [r7, #4]
 8018870:	603b      	str	r3, [r7, #0]
    const sp_point_256* ap[2];
    sp_point_256* rp[2];
    sp_digit* t1 = t;
 8018872:	683b      	ldr	r3, [r7, #0]
 8018874:	643b      	str	r3, [r7, #64]	; 0x40
    sp_digit* t2 = t + 2*8;
 8018876:	683b      	ldr	r3, [r7, #0]
 8018878:	3340      	adds	r3, #64	; 0x40
 801887a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sp_digit* t3 = t + 4*8;
 801887c:	683b      	ldr	r3, [r7, #0]
 801887e:	3380      	adds	r3, #128	; 0x80
 8018880:	63bb      	str	r3, [r7, #56]	; 0x38
    sp_digit* t4 = t + 6*8;
 8018882:	683b      	ldr	r3, [r7, #0]
 8018884:	33c0      	adds	r3, #192	; 0xc0
 8018886:	637b      	str	r3, [r7, #52]	; 0x34
    sp_digit* t5 = t + 8*8;
 8018888:	683b      	ldr	r3, [r7, #0]
 801888a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801888e:	633b      	str	r3, [r7, #48]	; 0x30
    sp_digit* y;
    sp_digit* z;
    int i;

    /* Ensure only the first point is the same as the result. */
    if (q == r) {
 8018890:	687a      	ldr	r2, [r7, #4]
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	429a      	cmp	r2, r3
 8018896:	d105      	bne.n	80188a4 <sp_256_proj_point_add_8+0x40>
        const sp_point_256* a = p;
 8018898:	68bb      	ldr	r3, [r7, #8]
 801889a:	62fb      	str	r3, [r7, #44]	; 0x2c
        p = q;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	60bb      	str	r3, [r7, #8]
        q = a;
 80188a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188a2:	607b      	str	r3, [r7, #4]
    }

    /* Check double */
    (void)sp_256_sub_8(t1, p256_mod, q->y);
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	3340      	adds	r3, #64	; 0x40
 80188a8:	461a      	mov	r2, r3
 80188aa:	4951      	ldr	r1, [pc, #324]	; (80189f0 <sp_256_proj_point_add_8+0x18c>)
 80188ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80188ae:	f7ff ff61 	bl	8018774 <sp_256_sub_8>
    sp_256_norm_8(t1);
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 80188b2:	68bb      	ldr	r3, [r7, #8]
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	4611      	mov	r1, r2
 80188b8:	4618      	mov	r0, r3
 80188ba:	f7ff ff85 	bl	80187c8 <sp_256_cmp_equal_8>
 80188be:	4604      	mov	r4, r0
 80188c0:	68bb      	ldr	r3, [r7, #8]
 80188c2:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	3380      	adds	r3, #128	; 0x80
 80188ca:	4619      	mov	r1, r3
 80188cc:	4610      	mov	r0, r2
 80188ce:	f7ff ff7b 	bl	80187c8 <sp_256_cmp_equal_8>
 80188d2:	4603      	mov	r3, r0
 80188d4:	401c      	ands	r4, r3
        (sp_256_cmp_equal_8(p->y, q->y) | sp_256_cmp_equal_8(p->y, t1))) != 0) {
 80188d6:	68bb      	ldr	r3, [r7, #8]
 80188d8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	3340      	adds	r3, #64	; 0x40
 80188e0:	4619      	mov	r1, r3
 80188e2:	4610      	mov	r0, r2
 80188e4:	f7ff ff70 	bl	80187c8 <sp_256_cmp_equal_8>
 80188e8:	4605      	mov	r5, r0
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	3340      	adds	r3, #64	; 0x40
 80188ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80188f0:	4618      	mov	r0, r3
 80188f2:	f7ff ff69 	bl	80187c8 <sp_256_cmp_equal_8>
 80188f6:	4603      	mov	r3, r0
 80188f8:	432b      	orrs	r3, r5
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 80188fa:	4023      	ands	r3, r4
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d005      	beq.n	801890c <sp_256_proj_point_add_8+0xa8>
        sp_256_proj_point_dbl_8(r, p, t);
 8018900:	683a      	ldr	r2, [r7, #0]
 8018902:	68b9      	ldr	r1, [r7, #8]
 8018904:	68f8      	ldr	r0, [r7, #12]
 8018906:	f7ff fe99 	bl	801863c <sp_256_proj_point_dbl_8>
        sp_256_mont_sub_8(y, y, x, p256_mod);
        sp_256_mont_mul_8(y, y, t4, p256_mod, p256_mp_mod);
        sp_256_mont_mul_8(t5, t5, t3, p256_mod, p256_mp_mod);
        sp_256_mont_sub_8(y, y, t5, p256_mod);
    }
}
 801890a:	e142      	b.n	8018b92 <sp_256_proj_point_add_8+0x32e>
        rp[0] = r;
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	613b      	str	r3, [r7, #16]
        rp[1] = (sp_point_256*)t; /*lint !e9087 !e740*/
 8018910:	683b      	ldr	r3, [r7, #0]
 8018912:	617b      	str	r3, [r7, #20]
        XMEMSET(rp[1], 0, sizeof(sp_point_256));
 8018914:	697b      	ldr	r3, [r7, #20]
 8018916:	22c4      	movs	r2, #196	; 0xc4
 8018918:	2100      	movs	r1, #0
 801891a:	4618      	mov	r0, r3
 801891c:	f003 f89d 	bl	801ba5a <memset>
        x = rp[p->infinity | q->infinity]->x;
 8018920:	68bb      	ldr	r3, [r7, #8]
 8018922:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801892c:	4313      	orrs	r3, r2
 801892e:	009b      	lsls	r3, r3, #2
 8018930:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018934:	4413      	add	r3, r2
 8018936:	f853 3c38 	ldr.w	r3, [r3, #-56]
 801893a:	62bb      	str	r3, [r7, #40]	; 0x28
        y = rp[p->infinity | q->infinity]->y;
 801893c:	68bb      	ldr	r3, [r7, #8]
 801893e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018948:	4313      	orrs	r3, r2
 801894a:	009b      	lsls	r3, r3, #2
 801894c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018950:	4413      	add	r3, r2
 8018952:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8018956:	3340      	adds	r3, #64	; 0x40
 8018958:	627b      	str	r3, [r7, #36]	; 0x24
        z = rp[p->infinity | q->infinity]->z;
 801895a:	68bb      	ldr	r3, [r7, #8]
 801895c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018966:	4313      	orrs	r3, r2
 8018968:	009b      	lsls	r3, r3, #2
 801896a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801896e:	4413      	add	r3, r2
 8018970:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8018974:	3380      	adds	r3, #128	; 0x80
 8018976:	623b      	str	r3, [r7, #32]
        ap[0] = p;
 8018978:	68bb      	ldr	r3, [r7, #8]
 801897a:	61bb      	str	r3, [r7, #24]
        ap[1] = q;
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	61fb      	str	r3, [r7, #28]
        for (i=0; i<8; i++) {
 8018980:	2300      	movs	r3, #0
 8018982:	647b      	str	r3, [r7, #68]	; 0x44
 8018984:	e012      	b.n	80189ac <sp_256_proj_point_add_8+0x148>
            r->x[i] = ap[p->infinity]->x[i];
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801898c:	009b      	lsls	r3, r3, #2
 801898e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018992:	4413      	add	r3, r2
 8018994:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8018998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801899a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80189a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i=0; i<8; i++) {
 80189a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80189a8:	3301      	adds	r3, #1
 80189aa:	647b      	str	r3, [r7, #68]	; 0x44
 80189ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80189ae:	2b07      	cmp	r3, #7
 80189b0:	dde9      	ble.n	8018986 <sp_256_proj_point_add_8+0x122>
        for (i=0; i<8; i++) {
 80189b2:	2300      	movs	r3, #0
 80189b4:	647b      	str	r3, [r7, #68]	; 0x44
 80189b6:	e014      	b.n	80189e2 <sp_256_proj_point_add_8+0x17e>
            r->y[i] = ap[p->infinity]->y[i];
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80189be:	009b      	lsls	r3, r3, #2
 80189c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80189c4:	4413      	add	r3, r2
 80189c6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80189ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80189cc:	3210      	adds	r2, #16
 80189ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80189d6:	3210      	adds	r2, #16
 80189d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i=0; i<8; i++) {
 80189dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80189de:	3301      	adds	r3, #1
 80189e0:	647b      	str	r3, [r7, #68]	; 0x44
 80189e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80189e4:	2b07      	cmp	r3, #7
 80189e6:	dde7      	ble.n	80189b8 <sp_256_proj_point_add_8+0x154>
        for (i=0; i<8; i++) {
 80189e8:	2300      	movs	r3, #0
 80189ea:	647b      	str	r3, [r7, #68]	; 0x44
 80189ec:	e017      	b.n	8018a1e <sp_256_proj_point_add_8+0x1ba>
 80189ee:	bf00      	nop
 80189f0:	0801e7a4 	.word	0x0801e7a4
            r->z[i] = ap[p->infinity]->z[i];
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80189fa:	009b      	lsls	r3, r3, #2
 80189fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018a00:	4413      	add	r3, r2
 8018a02:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8018a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018a08:	3220      	adds	r2, #32
 8018a0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018a12:	3220      	adds	r2, #32
 8018a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i=0; i<8; i++) {
 8018a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a1a:	3301      	adds	r3, #1
 8018a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8018a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a20:	2b07      	cmp	r3, #7
 8018a22:	dde7      	ble.n	80189f4 <sp_256_proj_point_add_8+0x190>
        r->infinity = ap[p->infinity]->infinity;
 8018a24:	68bb      	ldr	r3, [r7, #8]
 8018a26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018a2a:	009b      	lsls	r3, r3, #2
 8018a2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018a30:	4413      	add	r3, r2
 8018a32:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8018a36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_mont_sqr_8(t1, q->z, p256_mod, p256_mp_mod);
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8018a46:	2301      	movs	r3, #1
 8018a48:	4a54      	ldr	r2, [pc, #336]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018a4a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018a4c:	f7fe fe55 	bl	80176fa <sp_256_mont_sqr_8>
        sp_256_mont_mul_8(t3, t1, q->z, p256_mod, p256_mp_mod);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8018a56:	2301      	movs	r3, #1
 8018a58:	9300      	str	r3, [sp, #0]
 8018a5a:	4b50      	ldr	r3, [pc, #320]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018a5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018a5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018a60:	f7fe fa65 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t1, t1, x, p256_mod, p256_mp_mod);
 8018a64:	2301      	movs	r3, #1
 8018a66:	9300      	str	r3, [sp, #0]
 8018a68:	4b4c      	ldr	r3, [pc, #304]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018a6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018a6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018a70:	f7fe fa5d 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_sqr_8(t2, z, p256_mod, p256_mp_mod);
 8018a74:	2301      	movs	r3, #1
 8018a76:	4a49      	ldr	r2, [pc, #292]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018a78:	6a39      	ldr	r1, [r7, #32]
 8018a7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018a7c:	f7fe fe3d 	bl	80176fa <sp_256_mont_sqr_8>
        sp_256_mont_mul_8(t4, t2, z, p256_mod, p256_mp_mod);
 8018a80:	2301      	movs	r3, #1
 8018a82:	9300      	str	r3, [sp, #0]
 8018a84:	4b45      	ldr	r3, [pc, #276]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018a86:	6a3a      	ldr	r2, [r7, #32]
 8018a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018a8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018a8c:	f7fe fa4f 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t2, t2, q->x, p256_mod, p256_mp_mod);
 8018a90:	687a      	ldr	r2, [r7, #4]
 8018a92:	2301      	movs	r3, #1
 8018a94:	9300      	str	r3, [sp, #0]
 8018a96:	4b41      	ldr	r3, [pc, #260]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018a9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018a9c:	f7fe fa47 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t3, t3, y, p256_mod, p256_mp_mod);
 8018aa0:	2301      	movs	r3, #1
 8018aa2:	9300      	str	r3, [sp, #0]
 8018aa4:	4b3d      	ldr	r3, [pc, #244]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018aa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018aaa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018aac:	f7fe fa3f 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t4, t4, q->y, p256_mod, p256_mp_mod);
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8018ab6:	2301      	movs	r3, #1
 8018ab8:	9300      	str	r3, [sp, #0]
 8018aba:	4b38      	ldr	r3, [pc, #224]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018abc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018abe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018ac0:	f7fe fa35 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_sub_8(t2, t2, t1, p256_mod);
 8018ac4:	4b35      	ldr	r3, [pc, #212]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018ac8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018aca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018acc:	f7ff fcd0 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_sub_8(t4, t4, t3, p256_mod);
 8018ad0:	4b32      	ldr	r3, [pc, #200]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ad4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018ad6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018ad8:	f7ff fcca 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_mul_8(z, z, q->z, p256_mod, p256_mp_mod);
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8018ae2:	2301      	movs	r3, #1
 8018ae4:	9300      	str	r3, [sp, #0]
 8018ae6:	4b2d      	ldr	r3, [pc, #180]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018ae8:	6a39      	ldr	r1, [r7, #32]
 8018aea:	6a38      	ldr	r0, [r7, #32]
 8018aec:	f7fe fa1f 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(z, z, t2, p256_mod, p256_mp_mod);
 8018af0:	2301      	movs	r3, #1
 8018af2:	9300      	str	r3, [sp, #0]
 8018af4:	4b29      	ldr	r3, [pc, #164]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018af8:	6a39      	ldr	r1, [r7, #32]
 8018afa:	6a38      	ldr	r0, [r7, #32]
 8018afc:	f7fe fa17 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_sqr_8(x, t4, p256_mod, p256_mp_mod);
 8018b00:	2301      	movs	r3, #1
 8018b02:	4a26      	ldr	r2, [pc, #152]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b08:	f7fe fdf7 	bl	80176fa <sp_256_mont_sqr_8>
        sp_256_mont_sqr_8(t5, t2, p256_mod, p256_mp_mod);
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	4a23      	ldr	r2, [pc, #140]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b14:	f7fe fdf1 	bl	80176fa <sp_256_mont_sqr_8>
        sp_256_mont_mul_8(y, t1, t5, p256_mod, p256_mp_mod);
 8018b18:	2301      	movs	r3, #1
 8018b1a:	9300      	str	r3, [sp, #0]
 8018b1c:	4b1f      	ldr	r3, [pc, #124]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b24:	f7fe fa03 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t5, t5, t2, p256_mod, p256_mp_mod);
 8018b28:	2301      	movs	r3, #1
 8018b2a:	9300      	str	r3, [sp, #0]
 8018b2c:	4b1b      	ldr	r3, [pc, #108]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b34:	f7fe f9fb 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_sub_8(x, x, t5, p256_mod);
 8018b38:	4b18      	ldr	r3, [pc, #96]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b40:	f7ff fc96 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_dbl_8(t1, y, p256_mod);
 8018b44:	4a15      	ldr	r2, [pc, #84]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018b48:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018b4a:	f7ff fbc2 	bl	80182d2 <sp_256_mont_dbl_8>
        sp_256_mont_sub_8(x, x, t1, p256_mod);
 8018b4e:	4b13      	ldr	r3, [pc, #76]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b56:	f7ff fc8b 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_sub_8(y, y, x, p256_mod);
 8018b5a:	4b10      	ldr	r3, [pc, #64]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b62:	f7ff fc85 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_mul_8(y, y, t4, p256_mod, p256_mp_mod);
 8018b66:	2301      	movs	r3, #1
 8018b68:	9300      	str	r3, [sp, #0]
 8018b6a:	4b0c      	ldr	r3, [pc, #48]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018b70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b72:	f7fe f9dc 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t5, t5, t3, p256_mod, p256_mp_mod);
 8018b76:	2301      	movs	r3, #1
 8018b78:	9300      	str	r3, [sp, #0]
 8018b7a:	4b08      	ldr	r3, [pc, #32]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b82:	f7fe f9d4 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_sub_8(y, y, t5, p256_mod);
 8018b86:	4b05      	ldr	r3, [pc, #20]	; (8018b9c <sp_256_proj_point_add_8+0x338>)
 8018b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b8e:	f7ff fc6f 	bl	8018470 <sp_256_mont_sub_8>
}
 8018b92:	bf00      	nop
 8018b94:	3748      	adds	r7, #72	; 0x48
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bdb0      	pop	{r4, r5, r7, pc}
 8018b9a:	bf00      	nop
 8018b9c:	0801e7a4 	.word	0x0801e7a4

08018ba0 <sp_256_get_point_16_8>:
 * table  Table - start of the entires to access
 * idx    Index of entry to retrieve.
 */
static void sp_256_get_point_16_8(sp_point_256* r, const sp_point_256* table,
    int idx)
{
 8018ba0:	b480      	push	{r7}
 8018ba2:	b087      	sub	sp, #28
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	60f8      	str	r0, [r7, #12]
 8018ba8:	60b9      	str	r1, [r7, #8]
 8018baa:	607a      	str	r2, [r7, #4]
    int i;
    sp_digit mask;

    r->x[0] = 0;
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	2200      	movs	r2, #0
 8018bb0:	601a      	str	r2, [r3, #0]
    r->x[1] = 0;
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	2200      	movs	r2, #0
 8018bb6:	605a      	str	r2, [r3, #4]
    r->x[2] = 0;
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	2200      	movs	r2, #0
 8018bbc:	609a      	str	r2, [r3, #8]
    r->x[3] = 0;
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	2200      	movs	r2, #0
 8018bc2:	60da      	str	r2, [r3, #12]
    r->x[4] = 0;
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	611a      	str	r2, [r3, #16]
    r->x[5] = 0;
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	2200      	movs	r2, #0
 8018bce:	615a      	str	r2, [r3, #20]
    r->x[6] = 0;
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	619a      	str	r2, [r3, #24]
    r->x[7] = 0;
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	2200      	movs	r2, #0
 8018bda:	61da      	str	r2, [r3, #28]
    r->y[0] = 0;
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	2200      	movs	r2, #0
 8018be0:	641a      	str	r2, [r3, #64]	; 0x40
    r->y[1] = 0;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	2200      	movs	r2, #0
 8018be6:	645a      	str	r2, [r3, #68]	; 0x44
    r->y[2] = 0;
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	2200      	movs	r2, #0
 8018bec:	649a      	str	r2, [r3, #72]	; 0x48
    r->y[3] = 0;
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	64da      	str	r2, [r3, #76]	; 0x4c
    r->y[4] = 0;
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	651a      	str	r2, [r3, #80]	; 0x50
    r->y[5] = 0;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	655a      	str	r2, [r3, #84]	; 0x54
    r->y[6] = 0;
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	2200      	movs	r2, #0
 8018c04:	659a      	str	r2, [r3, #88]	; 0x58
    r->y[7] = 0;
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	2200      	movs	r2, #0
 8018c0a:	65da      	str	r2, [r3, #92]	; 0x5c
    r->z[0] = 0;
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	2200      	movs	r2, #0
 8018c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    r->z[1] = 0;
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	2200      	movs	r2, #0
 8018c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    r->z[2] = 0;
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	2200      	movs	r2, #0
 8018c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    r->z[3] = 0;
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	2200      	movs	r2, #0
 8018c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    r->z[4] = 0;
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	2200      	movs	r2, #0
 8018c30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    r->z[5] = 0;
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	2200      	movs	r2, #0
 8018c38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    r->z[6] = 0;
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	2200      	movs	r2, #0
 8018c40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    r->z[7] = 0;
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	2200      	movs	r2, #0
 8018c48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    for (i = 1; i < 16; i++) {
 8018c4c:	2301      	movs	r3, #1
 8018c4e:	617b      	str	r3, [r7, #20]
 8018c50:	e173      	b.n	8018f3a <sp_256_get_point_16_8+0x39a>
        mask = 0 - (i == idx);
 8018c52:	697a      	ldr	r2, [r7, #20]
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	429a      	cmp	r2, r3
 8018c58:	bf0c      	ite	eq
 8018c5a:	2301      	moveq	r3, #1
 8018c5c:	2300      	movne	r3, #0
 8018c5e:	b2db      	uxtb	r3, r3
 8018c60:	425b      	negs	r3, r3
 8018c62:	613b      	str	r3, [r7, #16]
        r->x[0] |= mask & table[i].x[0];
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	681a      	ldr	r2, [r3, #0]
 8018c68:	697b      	ldr	r3, [r7, #20]
 8018c6a:	21c4      	movs	r1, #196	; 0xc4
 8018c6c:	fb01 f303 	mul.w	r3, r1, r3
 8018c70:	68b9      	ldr	r1, [r7, #8]
 8018c72:	440b      	add	r3, r1
 8018c74:	6819      	ldr	r1, [r3, #0]
 8018c76:	693b      	ldr	r3, [r7, #16]
 8018c78:	400b      	ands	r3, r1
 8018c7a:	431a      	orrs	r2, r3
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	601a      	str	r2, [r3, #0]
        r->x[1] |= mask & table[i].x[1];
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	685a      	ldr	r2, [r3, #4]
 8018c84:	697b      	ldr	r3, [r7, #20]
 8018c86:	21c4      	movs	r1, #196	; 0xc4
 8018c88:	fb01 f303 	mul.w	r3, r1, r3
 8018c8c:	68b9      	ldr	r1, [r7, #8]
 8018c8e:	440b      	add	r3, r1
 8018c90:	6859      	ldr	r1, [r3, #4]
 8018c92:	693b      	ldr	r3, [r7, #16]
 8018c94:	400b      	ands	r3, r1
 8018c96:	431a      	orrs	r2, r3
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	605a      	str	r2, [r3, #4]
        r->x[2] |= mask & table[i].x[2];
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	689a      	ldr	r2, [r3, #8]
 8018ca0:	697b      	ldr	r3, [r7, #20]
 8018ca2:	21c4      	movs	r1, #196	; 0xc4
 8018ca4:	fb01 f303 	mul.w	r3, r1, r3
 8018ca8:	68b9      	ldr	r1, [r7, #8]
 8018caa:	440b      	add	r3, r1
 8018cac:	6899      	ldr	r1, [r3, #8]
 8018cae:	693b      	ldr	r3, [r7, #16]
 8018cb0:	400b      	ands	r3, r1
 8018cb2:	431a      	orrs	r2, r3
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	609a      	str	r2, [r3, #8]
        r->x[3] |= mask & table[i].x[3];
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	68da      	ldr	r2, [r3, #12]
 8018cbc:	697b      	ldr	r3, [r7, #20]
 8018cbe:	21c4      	movs	r1, #196	; 0xc4
 8018cc0:	fb01 f303 	mul.w	r3, r1, r3
 8018cc4:	68b9      	ldr	r1, [r7, #8]
 8018cc6:	440b      	add	r3, r1
 8018cc8:	68d9      	ldr	r1, [r3, #12]
 8018cca:	693b      	ldr	r3, [r7, #16]
 8018ccc:	400b      	ands	r3, r1
 8018cce:	431a      	orrs	r2, r3
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	60da      	str	r2, [r3, #12]
        r->x[4] |= mask & table[i].x[4];
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	691a      	ldr	r2, [r3, #16]
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	21c4      	movs	r1, #196	; 0xc4
 8018cdc:	fb01 f303 	mul.w	r3, r1, r3
 8018ce0:	68b9      	ldr	r1, [r7, #8]
 8018ce2:	440b      	add	r3, r1
 8018ce4:	6919      	ldr	r1, [r3, #16]
 8018ce6:	693b      	ldr	r3, [r7, #16]
 8018ce8:	400b      	ands	r3, r1
 8018cea:	431a      	orrs	r2, r3
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	611a      	str	r2, [r3, #16]
        r->x[5] |= mask & table[i].x[5];
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	695a      	ldr	r2, [r3, #20]
 8018cf4:	697b      	ldr	r3, [r7, #20]
 8018cf6:	21c4      	movs	r1, #196	; 0xc4
 8018cf8:	fb01 f303 	mul.w	r3, r1, r3
 8018cfc:	68b9      	ldr	r1, [r7, #8]
 8018cfe:	440b      	add	r3, r1
 8018d00:	6959      	ldr	r1, [r3, #20]
 8018d02:	693b      	ldr	r3, [r7, #16]
 8018d04:	400b      	ands	r3, r1
 8018d06:	431a      	orrs	r2, r3
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	615a      	str	r2, [r3, #20]
        r->x[6] |= mask & table[i].x[6];
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	699a      	ldr	r2, [r3, #24]
 8018d10:	697b      	ldr	r3, [r7, #20]
 8018d12:	21c4      	movs	r1, #196	; 0xc4
 8018d14:	fb01 f303 	mul.w	r3, r1, r3
 8018d18:	68b9      	ldr	r1, [r7, #8]
 8018d1a:	440b      	add	r3, r1
 8018d1c:	6999      	ldr	r1, [r3, #24]
 8018d1e:	693b      	ldr	r3, [r7, #16]
 8018d20:	400b      	ands	r3, r1
 8018d22:	431a      	orrs	r2, r3
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	619a      	str	r2, [r3, #24]
        r->x[7] |= mask & table[i].x[7];
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	69da      	ldr	r2, [r3, #28]
 8018d2c:	697b      	ldr	r3, [r7, #20]
 8018d2e:	21c4      	movs	r1, #196	; 0xc4
 8018d30:	fb01 f303 	mul.w	r3, r1, r3
 8018d34:	68b9      	ldr	r1, [r7, #8]
 8018d36:	440b      	add	r3, r1
 8018d38:	69d9      	ldr	r1, [r3, #28]
 8018d3a:	693b      	ldr	r3, [r7, #16]
 8018d3c:	400b      	ands	r3, r1
 8018d3e:	431a      	orrs	r2, r3
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	61da      	str	r2, [r3, #28]
        r->y[0] |= mask & table[i].y[0];
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018d48:	697b      	ldr	r3, [r7, #20]
 8018d4a:	21c4      	movs	r1, #196	; 0xc4
 8018d4c:	fb01 f303 	mul.w	r3, r1, r3
 8018d50:	68b9      	ldr	r1, [r7, #8]
 8018d52:	440b      	add	r3, r1
 8018d54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8018d56:	693b      	ldr	r3, [r7, #16]
 8018d58:	400b      	ands	r3, r1
 8018d5a:	431a      	orrs	r2, r3
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	641a      	str	r2, [r3, #64]	; 0x40
        r->y[1] |= mask & table[i].y[1];
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018d64:	697b      	ldr	r3, [r7, #20]
 8018d66:	21c4      	movs	r1, #196	; 0xc4
 8018d68:	fb01 f303 	mul.w	r3, r1, r3
 8018d6c:	68b9      	ldr	r1, [r7, #8]
 8018d6e:	440b      	add	r3, r1
 8018d70:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8018d72:	693b      	ldr	r3, [r7, #16]
 8018d74:	400b      	ands	r3, r1
 8018d76:	431a      	orrs	r2, r3
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	645a      	str	r2, [r3, #68]	; 0x44
        r->y[2] |= mask & table[i].y[2];
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8018d80:	697b      	ldr	r3, [r7, #20]
 8018d82:	21c4      	movs	r1, #196	; 0xc4
 8018d84:	fb01 f303 	mul.w	r3, r1, r3
 8018d88:	68b9      	ldr	r1, [r7, #8]
 8018d8a:	440b      	add	r3, r1
 8018d8c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8018d8e:	693b      	ldr	r3, [r7, #16]
 8018d90:	400b      	ands	r3, r1
 8018d92:	431a      	orrs	r2, r3
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	649a      	str	r2, [r3, #72]	; 0x48
        r->y[3] |= mask & table[i].y[3];
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018d9c:	697b      	ldr	r3, [r7, #20]
 8018d9e:	21c4      	movs	r1, #196	; 0xc4
 8018da0:	fb01 f303 	mul.w	r3, r1, r3
 8018da4:	68b9      	ldr	r1, [r7, #8]
 8018da6:	440b      	add	r3, r1
 8018da8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8018daa:	693b      	ldr	r3, [r7, #16]
 8018dac:	400b      	ands	r3, r1
 8018dae:	431a      	orrs	r2, r3
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	64da      	str	r2, [r3, #76]	; 0x4c
        r->y[4] |= mask & table[i].y[4];
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018db8:	697b      	ldr	r3, [r7, #20]
 8018dba:	21c4      	movs	r1, #196	; 0xc4
 8018dbc:	fb01 f303 	mul.w	r3, r1, r3
 8018dc0:	68b9      	ldr	r1, [r7, #8]
 8018dc2:	440b      	add	r3, r1
 8018dc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8018dc6:	693b      	ldr	r3, [r7, #16]
 8018dc8:	400b      	ands	r3, r1
 8018dca:	431a      	orrs	r2, r3
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	651a      	str	r2, [r3, #80]	; 0x50
        r->y[5] |= mask & table[i].y[5];
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	21c4      	movs	r1, #196	; 0xc4
 8018dd8:	fb01 f303 	mul.w	r3, r1, r3
 8018ddc:	68b9      	ldr	r1, [r7, #8]
 8018dde:	440b      	add	r3, r1
 8018de0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8018de2:	693b      	ldr	r3, [r7, #16]
 8018de4:	400b      	ands	r3, r1
 8018de6:	431a      	orrs	r2, r3
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	655a      	str	r2, [r3, #84]	; 0x54
        r->y[6] |= mask & table[i].y[6];
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018df0:	697b      	ldr	r3, [r7, #20]
 8018df2:	21c4      	movs	r1, #196	; 0xc4
 8018df4:	fb01 f303 	mul.w	r3, r1, r3
 8018df8:	68b9      	ldr	r1, [r7, #8]
 8018dfa:	440b      	add	r3, r1
 8018dfc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8018dfe:	693b      	ldr	r3, [r7, #16]
 8018e00:	400b      	ands	r3, r1
 8018e02:	431a      	orrs	r2, r3
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	659a      	str	r2, [r3, #88]	; 0x58
        r->y[7] |= mask & table[i].y[7];
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018e0c:	697b      	ldr	r3, [r7, #20]
 8018e0e:	21c4      	movs	r1, #196	; 0xc4
 8018e10:	fb01 f303 	mul.w	r3, r1, r3
 8018e14:	68b9      	ldr	r1, [r7, #8]
 8018e16:	440b      	add	r3, r1
 8018e18:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018e1a:	693b      	ldr	r3, [r7, #16]
 8018e1c:	400b      	ands	r3, r1
 8018e1e:	431a      	orrs	r2, r3
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	65da      	str	r2, [r3, #92]	; 0x5c
        r->z[0] |= mask & table[i].z[0];
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8018e2a:	697b      	ldr	r3, [r7, #20]
 8018e2c:	21c4      	movs	r1, #196	; 0xc4
 8018e2e:	fb01 f303 	mul.w	r3, r1, r3
 8018e32:	68b9      	ldr	r1, [r7, #8]
 8018e34:	440b      	add	r3, r1
 8018e36:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	400b      	ands	r3, r1
 8018e3e:	431a      	orrs	r2, r3
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        r->z[1] |= mask & table[i].z[1];
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8018e4c:	697b      	ldr	r3, [r7, #20]
 8018e4e:	21c4      	movs	r1, #196	; 0xc4
 8018e50:	fb01 f303 	mul.w	r3, r1, r3
 8018e54:	68b9      	ldr	r1, [r7, #8]
 8018e56:	440b      	add	r3, r1
 8018e58:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8018e5c:	693b      	ldr	r3, [r7, #16]
 8018e5e:	400b      	ands	r3, r1
 8018e60:	431a      	orrs	r2, r3
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        r->z[2] |= mask & table[i].z[2];
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018e6e:	697b      	ldr	r3, [r7, #20]
 8018e70:	21c4      	movs	r1, #196	; 0xc4
 8018e72:	fb01 f303 	mul.w	r3, r1, r3
 8018e76:	68b9      	ldr	r1, [r7, #8]
 8018e78:	440b      	add	r3, r1
 8018e7a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8018e7e:	693b      	ldr	r3, [r7, #16]
 8018e80:	400b      	ands	r3, r1
 8018e82:	431a      	orrs	r2, r3
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        r->z[3] |= mask & table[i].z[3];
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8018e90:	697b      	ldr	r3, [r7, #20]
 8018e92:	21c4      	movs	r1, #196	; 0xc4
 8018e94:	fb01 f303 	mul.w	r3, r1, r3
 8018e98:	68b9      	ldr	r1, [r7, #8]
 8018e9a:	440b      	add	r3, r1
 8018e9c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8018ea0:	693b      	ldr	r3, [r7, #16]
 8018ea2:	400b      	ands	r3, r1
 8018ea4:	431a      	orrs	r2, r3
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        r->z[4] |= mask & table[i].z[4];
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8018eb2:	697b      	ldr	r3, [r7, #20]
 8018eb4:	21c4      	movs	r1, #196	; 0xc4
 8018eb6:	fb01 f303 	mul.w	r3, r1, r3
 8018eba:	68b9      	ldr	r1, [r7, #8]
 8018ebc:	440b      	add	r3, r1
 8018ebe:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8018ec2:	693b      	ldr	r3, [r7, #16]
 8018ec4:	400b      	ands	r3, r1
 8018ec6:	431a      	orrs	r2, r3
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        r->z[5] |= mask & table[i].z[5];
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8018ed4:	697b      	ldr	r3, [r7, #20]
 8018ed6:	21c4      	movs	r1, #196	; 0xc4
 8018ed8:	fb01 f303 	mul.w	r3, r1, r3
 8018edc:	68b9      	ldr	r1, [r7, #8]
 8018ede:	440b      	add	r3, r1
 8018ee0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8018ee4:	693b      	ldr	r3, [r7, #16]
 8018ee6:	400b      	ands	r3, r1
 8018ee8:	431a      	orrs	r2, r3
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        r->z[6] |= mask & table[i].z[6];
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8018ef6:	697b      	ldr	r3, [r7, #20]
 8018ef8:	21c4      	movs	r1, #196	; 0xc4
 8018efa:	fb01 f303 	mul.w	r3, r1, r3
 8018efe:	68b9      	ldr	r1, [r7, #8]
 8018f00:	440b      	add	r3, r1
 8018f02:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	400b      	ands	r3, r1
 8018f0a:	431a      	orrs	r2, r3
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        r->z[7] |= mask & table[i].z[7];
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8018f18:	697b      	ldr	r3, [r7, #20]
 8018f1a:	21c4      	movs	r1, #196	; 0xc4
 8018f1c:	fb01 f303 	mul.w	r3, r1, r3
 8018f20:	68b9      	ldr	r1, [r7, #8]
 8018f22:	440b      	add	r3, r1
 8018f24:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	400b      	ands	r3, r1
 8018f2c:	431a      	orrs	r2, r3
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    for (i = 1; i < 16; i++) {
 8018f34:	697b      	ldr	r3, [r7, #20]
 8018f36:	3301      	adds	r3, #1
 8018f38:	617b      	str	r3, [r7, #20]
 8018f3a:	697b      	ldr	r3, [r7, #20]
 8018f3c:	2b0f      	cmp	r3, #15
 8018f3e:	f77f ae88 	ble.w	8018c52 <sp_256_get_point_16_8+0xb2>
    }
}
 8018f42:	bf00      	nop
 8018f44:	371c      	adds	r7, #28
 8018f46:	46bd      	mov	sp, r7
 8018f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4c:	4770      	bx	lr
	...

08018f50 <sp_256_ecc_mulmod_fast_8>:
 * heap  Heap to use for allocation.
 * returns MEMORY_E when memory allocation fails and MP_OKAY on success.
 */
static int sp_256_ecc_mulmod_fast_8(sp_point_256* r, const sp_point_256* g, const sp_digit* k,
        int map, int ct, void* heap)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b090      	sub	sp, #64	; 0x40
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	60f8      	str	r0, [r7, #12]
 8018f58:	60b9      	str	r1, [r7, #8]
 8018f5a:	607a      	str	r2, [r7, #4]
 8018f5c:	603b      	str	r3, [r7, #0]

    /* Constant time used for cache attack resistance implementation. */
    (void)ct;
    (void)heap;

    err = sp_256_point_new_8(heap, rtd, rt);
 8018f5e:	f107 0314 	add.w	r3, r7, #20
 8018f62:	461a      	mov	r2, r3
 8018f64:	2100      	movs	r1, #0
 8018f66:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018f68:	f7fd fda8 	bl	8016abc <sp_256_point_new_ex_8>
 8018f6c:	6338      	str	r0, [r7, #48]	; 0x30
#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
#ifndef WC_NO_CACHE_RESISTANT
    t = (sp_point_256*)XMALLOC(sizeof(sp_point_256) * 17, heap, DYNAMIC_TYPE_ECC);
 8018f6e:	f640 5004 	movw	r0, #3332	; 0xd04
 8018f72:	f7f8 fa73 	bl	801145c <wolfSSL_Malloc>
 8018f76:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
    t = (sp_point_256*)XMALLOC(sizeof(sp_point_256) * 16, heap, DYNAMIC_TYPE_ECC);
#endif
    if (t == NULL)
 8018f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d102      	bne.n	8018f84 <sp_256_ecc_mulmod_fast_8+0x34>
        err = MEMORY_E;
 8018f7e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8018f82:	633b      	str	r3, [r7, #48]	; 0x30
    tmp = (sp_digit*)XMALLOC(sizeof(sp_digit) * 2 * 8 * 5, heap,
 8018f84:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8018f88:	f7f8 fa68 	bl	801145c <wolfSSL_Malloc>
 8018f8c:	62b8      	str	r0, [r7, #40]	; 0x28
                             DYNAMIC_TYPE_ECC);
    if (tmp == NULL)
 8018f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d102      	bne.n	8018f9a <sp_256_ecc_mulmod_fast_8+0x4a>
        err = MEMORY_E;
 8018f94:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8018f98:	633b      	str	r3, [r7, #48]	; 0x30
#else
    t = td;
    tmp = tmpd;
#endif

    if (err == MP_OKAY) {
 8018f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	f040 81b8 	bne.w	8019312 <sp_256_ecc_mulmod_fast_8+0x3c2>
#ifndef WC_NO_CACHE_RESISTANT
    #if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
        p = t + 16;
 8018fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa4:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8018fa8:	627b      	str	r3, [r7, #36]	; 0x24
    #else
        p = &pd;
    #endif
#endif
        /* t[0] = {0, 0, 1} * norm */
        XMEMSET(&t[0], 0, sizeof(t[0]));
 8018faa:	22c4      	movs	r2, #196	; 0xc4
 8018fac:	2100      	movs	r1, #0
 8018fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018fb0:	f002 fd53 	bl	801ba5a <memset>
        t[0].infinity = 1;
 8018fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb6:	2201      	movs	r2, #1
 8018fb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        /* t[1] = {g->x, g->y, g->z} * norm */
        (void)sp_256_mod_mul_norm_8(t[1].x, g->x, p256_mod);
 8018fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fbe:	33c4      	adds	r3, #196	; 0xc4
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	4a9c      	ldr	r2, [pc, #624]	; (8019238 <sp_256_ecc_mulmod_fast_8+0x2e8>)
 8018fc6:	4619      	mov	r1, r3
 8018fc8:	f7fd fdaf 	bl	8016b2a <sp_256_mod_mul_norm_8>
        (void)sp_256_mod_mul_norm_8(t[1].y, g->y, p256_mod);
 8018fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fce:	33c4      	adds	r3, #196	; 0xc4
 8018fd0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8018fd4:	68bb      	ldr	r3, [r7, #8]
 8018fd6:	3340      	adds	r3, #64	; 0x40
 8018fd8:	4a97      	ldr	r2, [pc, #604]	; (8019238 <sp_256_ecc_mulmod_fast_8+0x2e8>)
 8018fda:	4619      	mov	r1, r3
 8018fdc:	f7fd fda5 	bl	8016b2a <sp_256_mod_mul_norm_8>
        (void)sp_256_mod_mul_norm_8(t[1].z, g->z, p256_mod);
 8018fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fe2:	33c4      	adds	r3, #196	; 0xc4
 8018fe4:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	3380      	adds	r3, #128	; 0x80
 8018fec:	4a92      	ldr	r2, [pc, #584]	; (8019238 <sp_256_ecc_mulmod_fast_8+0x2e8>)
 8018fee:	4619      	mov	r1, r3
 8018ff0:	f7fd fd9b 	bl	8016b2a <sp_256_mod_mul_norm_8>
        t[1].infinity = 0;
 8018ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ff6:	33c4      	adds	r3, #196	; 0xc4
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_dbl_8(&t[ 2], &t[ 1], tmp);
 8018ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019000:	f503 70c4 	add.w	r0, r3, #392	; 0x188
 8019004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019006:	33c4      	adds	r3, #196	; 0xc4
 8019008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801900a:	4619      	mov	r1, r3
 801900c:	f7ff fb16 	bl	801863c <sp_256_proj_point_dbl_8>
        t[ 2].infinity = 0;
 8019010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019012:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8019016:	2200      	movs	r2, #0
 8019018:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_add_8(&t[ 3], &t[ 2], &t[ 1], tmp);
 801901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801901e:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8019022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019024:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8019028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801902a:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 801902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019030:	f7ff fc18 	bl	8018864 <sp_256_proj_point_add_8>
        t[ 3].infinity = 0;
 8019034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019036:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801903a:	2200      	movs	r2, #0
 801903c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_dbl_8(&t[ 4], &t[ 2], tmp);
 8019040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019042:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8019046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019048:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801904c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801904e:	4619      	mov	r1, r3
 8019050:	f7ff faf4 	bl	801863c <sp_256_proj_point_dbl_8>
        t[ 4].infinity = 0;
 8019054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019056:	f503 7344 	add.w	r3, r3, #784	; 0x310
 801905a:	2200      	movs	r2, #0
 801905c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_add_8(&t[ 5], &t[ 3], &t[ 2], tmp);
 8019060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019062:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 8019066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019068:	f503 7113 	add.w	r1, r3, #588	; 0x24c
 801906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801906e:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8019072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019074:	f7ff fbf6 	bl	8018864 <sp_256_proj_point_add_8>
        t[ 5].infinity = 0;
 8019078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801907a:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 801907e:	2200      	movs	r2, #0
 8019080:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_dbl_8(&t[ 6], &t[ 3], tmp);
 8019084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019086:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 801908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801908c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8019090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019092:	4619      	mov	r1, r3
 8019094:	f7ff fad2 	bl	801863c <sp_256_proj_point_dbl_8>
        t[ 6].infinity = 0;
 8019098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801909a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 801909e:	2200      	movs	r2, #0
 80190a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_add_8(&t[ 7], &t[ 4], &t[ 3], tmp);
 80190a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190a6:	f203 505c 	addw	r0, r3, #1372	; 0x55c
 80190aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ac:	f503 7144 	add.w	r1, r3, #784	; 0x310
 80190b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190b2:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 80190b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190b8:	f7ff fbd4 	bl	8018864 <sp_256_proj_point_add_8>
        t[ 7].infinity = 0;
 80190bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190be:	f203 535c 	addw	r3, r3, #1372	; 0x55c
 80190c2:	2200      	movs	r2, #0
 80190c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_dbl_8(&t[ 8], &t[ 4], tmp);
 80190c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ca:	f503 60c4 	add.w	r0, r3, #1568	; 0x620
 80190ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190d0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80190d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80190d6:	4619      	mov	r1, r3
 80190d8:	f7ff fab0 	bl	801863c <sp_256_proj_point_dbl_8>
        t[ 8].infinity = 0;
 80190dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190de:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80190e2:	2200      	movs	r2, #0
 80190e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_add_8(&t[ 9], &t[ 5], &t[ 4], tmp);
 80190e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ea:	f203 60e4 	addw	r0, r3, #1764	; 0x6e4
 80190ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f0:	f503 7175 	add.w	r1, r3, #980	; 0x3d4
 80190f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f6:	f503 7244 	add.w	r2, r3, #784	; 0x310
 80190fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190fc:	f7ff fbb2 	bl	8018864 <sp_256_proj_point_add_8>
        t[ 9].infinity = 0;
 8019100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019102:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 8019106:	2200      	movs	r2, #0
 8019108:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_dbl_8(&t[10], &t[ 5], tmp);
 801910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801910e:	f503 60f5 	add.w	r0, r3, #1960	; 0x7a8
 8019112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019114:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8019118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801911a:	4619      	mov	r1, r3
 801911c:	f7ff fa8e 	bl	801863c <sp_256_proj_point_dbl_8>
        t[10].infinity = 0;
 8019120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019122:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8019126:	2200      	movs	r2, #0
 8019128:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_add_8(&t[11], &t[ 6], &t[ 5], tmp);
 801912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801912e:	f603 006c 	addw	r0, r3, #2156	; 0x86c
 8019132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019134:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8019138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801913a:	f503 7275 	add.w	r2, r3, #980	; 0x3d4
 801913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019140:	f7ff fb90 	bl	8018864 <sp_256_proj_point_add_8>
        t[11].infinity = 0;
 8019144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019146:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 801914a:	2200      	movs	r2, #0
 801914c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_dbl_8(&t[12], &t[ 6], tmp);
 8019150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019152:	f503 6013 	add.w	r0, r3, #2352	; 0x930
 8019156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019158:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 801915c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801915e:	4619      	mov	r1, r3
 8019160:	f7ff fa6c 	bl	801863c <sp_256_proj_point_dbl_8>
        t[12].infinity = 0;
 8019164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019166:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 801916a:	2200      	movs	r2, #0
 801916c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_add_8(&t[13], &t[ 7], &t[ 6], tmp);
 8019170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019172:	f603 10f4 	addw	r0, r3, #2548	; 0x9f4
 8019176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019178:	f203 515c 	addw	r1, r3, #1372	; 0x55c
 801917c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801917e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8019182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019184:	f7ff fb6e 	bl	8018864 <sp_256_proj_point_add_8>
        t[13].infinity = 0;
 8019188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801918a:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 801918e:	2200      	movs	r2, #0
 8019190:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_dbl_8(&t[14], &t[ 7], tmp);
 8019194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019196:	f603 20b8 	addw	r0, r3, #2744	; 0xab8
 801919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801919c:	f203 535c 	addw	r3, r3, #1372	; 0x55c
 80191a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80191a2:	4619      	mov	r1, r3
 80191a4:	f7ff fa4a 	bl	801863c <sp_256_proj_point_dbl_8>
        t[14].infinity = 0;
 80191a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191aa:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80191ae:	2200      	movs	r2, #0
 80191b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_proj_point_add_8(&t[15], &t[ 8], &t[ 7], tmp);
 80191b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191b6:	f603 307c 	addw	r0, r3, #2940	; 0xb7c
 80191ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191bc:	f503 61c4 	add.w	r1, r3, #1568	; 0x620
 80191c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191c2:	f203 525c 	addw	r2, r3, #1372	; 0x55c
 80191c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191c8:	f7ff fb4c 	bl	8018864 <sp_256_proj_point_add_8>
        t[15].infinity = 0;
 80191cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ce:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80191d2:	2200      	movs	r2, #0
 80191d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

        i = 6;
 80191d8:	2306      	movs	r3, #6
 80191da:	63bb      	str	r3, [r7, #56]	; 0x38
        n = k[i+1] << 0;
 80191dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191de:	3301      	adds	r3, #1
 80191e0:	009b      	lsls	r3, r3, #2
 80191e2:	687a      	ldr	r2, [r7, #4]
 80191e4:	4413      	add	r3, r2
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        c = 28;
 80191ea:	231c      	movs	r3, #28
 80191ec:	637b      	str	r3, [r7, #52]	; 0x34
        y = n >> 28;
 80191ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191f0:	0f1b      	lsrs	r3, r3, #28
 80191f2:	623b      	str	r3, [r7, #32]
    #ifndef WC_NO_CACHE_RESISTANT
        if (ct) {
 80191f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d00f      	beq.n	801921a <sp_256_ecc_mulmod_fast_8+0x2ca>
            sp_256_get_point_16_8(rt, t, y);
 80191fa:	697b      	ldr	r3, [r7, #20]
 80191fc:	6a3a      	ldr	r2, [r7, #32]
 80191fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019200:	4618      	mov	r0, r3
 8019202:	f7ff fccd 	bl	8018ba0 <sp_256_get_point_16_8>
            rt->infinity = !y;
 8019206:	6a3b      	ldr	r3, [r7, #32]
 8019208:	2b00      	cmp	r3, #0
 801920a:	bf0c      	ite	eq
 801920c:	2301      	moveq	r3, #1
 801920e:	2300      	movne	r3, #0
 8019210:	b2da      	uxtb	r2, r3
 8019212:	697b      	ldr	r3, [r7, #20]
 8019214:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8019218:	e00a      	b.n	8019230 <sp_256_ecc_mulmod_fast_8+0x2e0>
        }
        else
    #endif
        {
            XMEMCPY(rt, &t[y], sizeof(sp_point_256));
 801921a:	6978      	ldr	r0, [r7, #20]
 801921c:	6a3b      	ldr	r3, [r7, #32]
 801921e:	22c4      	movs	r2, #196	; 0xc4
 8019220:	fb02 f303 	mul.w	r3, r2, r3
 8019224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019226:	4413      	add	r3, r2
 8019228:	22c4      	movs	r2, #196	; 0xc4
 801922a:	4619      	mov	r1, r3
 801922c:	f002 fbf1 	bl	801ba12 <memcpy>
        }
        n <<= 4;
 8019230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019232:	011b      	lsls	r3, r3, #4
 8019234:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (; i>=0 || c>=4; ) {
 8019236:	e056      	b.n	80192e6 <sp_256_ecc_mulmod_fast_8+0x396>
 8019238:	0801e7a4 	.word	0x0801e7a4
            if (c < 4) {
 801923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801923e:	2b03      	cmp	r3, #3
 8019240:	dc0c      	bgt.n	801925c <sp_256_ecc_mulmod_fast_8+0x30c>
                n |= k[i--];
 8019242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019244:	1e5a      	subs	r2, r3, #1
 8019246:	63ba      	str	r2, [r7, #56]	; 0x38
 8019248:	009b      	lsls	r3, r3, #2
 801924a:	687a      	ldr	r2, [r7, #4]
 801924c:	4413      	add	r3, r2
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019252:	4313      	orrs	r3, r2
 8019254:	63fb      	str	r3, [r7, #60]	; 0x3c
                c += 32;
 8019256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019258:	3320      	adds	r3, #32
 801925a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            y = (n >> 28) & 0xf;
 801925c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801925e:	0f1b      	lsrs	r3, r3, #28
 8019260:	623b      	str	r3, [r7, #32]
            n <<= 4;
 8019262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019264:	011b      	lsls	r3, r3, #4
 8019266:	63fb      	str	r3, [r7, #60]	; 0x3c
            c -= 4;
 8019268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801926a:	3b04      	subs	r3, #4
 801926c:	637b      	str	r3, [r7, #52]	; 0x34

            sp_256_proj_point_dbl_8(rt, rt, tmp);
 801926e:	697b      	ldr	r3, [r7, #20]
 8019270:	6979      	ldr	r1, [r7, #20]
 8019272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019274:	4618      	mov	r0, r3
 8019276:	f7ff f9e1 	bl	801863c <sp_256_proj_point_dbl_8>
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 801927a:	697b      	ldr	r3, [r7, #20]
 801927c:	6979      	ldr	r1, [r7, #20]
 801927e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019280:	4618      	mov	r0, r3
 8019282:	f7ff f9db 	bl	801863c <sp_256_proj_point_dbl_8>
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8019286:	697b      	ldr	r3, [r7, #20]
 8019288:	6979      	ldr	r1, [r7, #20]
 801928a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801928c:	4618      	mov	r0, r3
 801928e:	f7ff f9d5 	bl	801863c <sp_256_proj_point_dbl_8>
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8019292:	697b      	ldr	r3, [r7, #20]
 8019294:	6979      	ldr	r1, [r7, #20]
 8019296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019298:	4618      	mov	r0, r3
 801929a:	f7ff f9cf 	bl	801863c <sp_256_proj_point_dbl_8>

    #ifndef WC_NO_CACHE_RESISTANT
            if (ct) {
 801929e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d015      	beq.n	80192d0 <sp_256_ecc_mulmod_fast_8+0x380>
                sp_256_get_point_16_8(p, t, y);
 80192a4:	6a3a      	ldr	r2, [r7, #32]
 80192a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80192a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80192aa:	f7ff fc79 	bl	8018ba0 <sp_256_get_point_16_8>
                p->infinity = !y;
 80192ae:	6a3b      	ldr	r3, [r7, #32]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	bf0c      	ite	eq
 80192b4:	2301      	moveq	r3, #1
 80192b6:	2300      	movne	r3, #0
 80192b8:	b2db      	uxtb	r3, r3
 80192ba:	461a      	mov	r2, r3
 80192bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
                sp_256_proj_point_add_8(rt, rt, p, tmp);
 80192c2:	6978      	ldr	r0, [r7, #20]
 80192c4:	6979      	ldr	r1, [r7, #20]
 80192c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192ca:	f7ff facb 	bl	8018864 <sp_256_proj_point_add_8>
 80192ce:	e00a      	b.n	80192e6 <sp_256_ecc_mulmod_fast_8+0x396>
            }
            else
    #endif
            {
                sp_256_proj_point_add_8(rt, rt, &t[y], tmp);
 80192d0:	6978      	ldr	r0, [r7, #20]
 80192d2:	6979      	ldr	r1, [r7, #20]
 80192d4:	6a3b      	ldr	r3, [r7, #32]
 80192d6:	22c4      	movs	r2, #196	; 0xc4
 80192d8:	fb02 f303 	mul.w	r3, r2, r3
 80192dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192de:	441a      	add	r2, r3
 80192e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192e2:	f7ff fabf 	bl	8018864 <sp_256_proj_point_add_8>
        for (; i>=0 || c>=4; ) {
 80192e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	daa7      	bge.n	801923c <sp_256_ecc_mulmod_fast_8+0x2ec>
 80192ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192ee:	2b03      	cmp	r3, #3
 80192f0:	dca4      	bgt.n	801923c <sp_256_ecc_mulmod_fast_8+0x2ec>
            }
        }

        if (map != 0) {
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d006      	beq.n	8019306 <sp_256_ecc_mulmod_fast_8+0x3b6>
            sp_256_map_8(r, rt, tmp);
 80192f8:	697b      	ldr	r3, [r7, #20]
 80192fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192fc:	4619      	mov	r1, r3
 80192fe:	68f8      	ldr	r0, [r7, #12]
 8019300:	f7fe febe 	bl	8018080 <sp_256_map_8>
 8019304:	e005      	b.n	8019312 <sp_256_ecc_mulmod_fast_8+0x3c2>
        }
        else {
            XMEMCPY(r, rt, sizeof(sp_point_256));
 8019306:	697b      	ldr	r3, [r7, #20]
 8019308:	22c4      	movs	r2, #196	; 0xc4
 801930a:	4619      	mov	r1, r3
 801930c:	68f8      	ldr	r0, [r7, #12]
 801930e:	f002 fb80 	bl	801ba12 <memcpy>
        }
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (tmp != NULL) {
 8019312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019314:	2b00      	cmp	r3, #0
 8019316:	d00d      	beq.n	8019334 <sp_256_ecc_mulmod_fast_8+0x3e4>
        XMEMSET(tmp, 0, sizeof(sp_digit) * 2 * 8 * 5);
 8019318:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801931c:	2100      	movs	r1, #0
 801931e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019320:	f002 fb9b 	bl	801ba5a <memset>
        XFREE(tmp, heap, DYNAMIC_TYPE_ECC);
 8019324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019326:	61fb      	str	r3, [r7, #28]
 8019328:	69fb      	ldr	r3, [r7, #28]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d002      	beq.n	8019334 <sp_256_ecc_mulmod_fast_8+0x3e4>
 801932e:	69f8      	ldr	r0, [r7, #28]
 8019330:	f7f8 f8b0 	bl	8011494 <wolfSSL_Free>
    }
    if (t != NULL) {
 8019334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019336:	2b00      	cmp	r3, #0
 8019338:	d00d      	beq.n	8019356 <sp_256_ecc_mulmod_fast_8+0x406>
        XMEMSET(t, 0, sizeof(sp_point_256) * 16);
 801933a:	f44f 6244 	mov.w	r2, #3136	; 0xc40
 801933e:	2100      	movs	r1, #0
 8019340:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019342:	f002 fb8a 	bl	801ba5a <memset>
        XFREE(t, heap, DYNAMIC_TYPE_ECC);
 8019346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019348:	61bb      	str	r3, [r7, #24]
 801934a:	69bb      	ldr	r3, [r7, #24]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d002      	beq.n	8019356 <sp_256_ecc_mulmod_fast_8+0x406>
 8019350:	69b8      	ldr	r0, [r7, #24]
 8019352:	f7f8 f89f 	bl	8011494 <wolfSSL_Free>
    }
#else
    ForceZero(tmpd, sizeof(tmpd));
    ForceZero(td, sizeof(td));
#endif
    sp_256_point_free_8(rt, 1, heap);
 8019356:	697b      	ldr	r3, [r7, #20]
 8019358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801935a:	2101      	movs	r1, #1
 801935c:	4618      	mov	r0, r3
 801935e:	f7fd fbc7 	bl	8016af0 <sp_256_point_free_8>

    return err;
 8019362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8019364:	4618      	mov	r0, r3
 8019366:	3740      	adds	r7, #64	; 0x40
 8019368:	46bd      	mov	sp, r7
 801936a:	bd80      	pop	{r7, pc}

0801936c <sp_256_proj_point_add_qz1_8>:
 * q  Second point to add.
 * t  Temporary ordinate data.
 */
static void sp_256_proj_point_add_qz1_8(sp_point_256* r, const sp_point_256* p,
        const sp_point_256* q, sp_digit* t)
{
 801936c:	b5b0      	push	{r4, r5, r7, lr}
 801936e:	b094      	sub	sp, #80	; 0x50
 8019370:	af02      	add	r7, sp, #8
 8019372:	60f8      	str	r0, [r7, #12]
 8019374:	60b9      	str	r1, [r7, #8]
 8019376:	607a      	str	r2, [r7, #4]
 8019378:	603b      	str	r3, [r7, #0]
    const sp_point_256* ap[2];
    sp_point_256* rp[2];
    sp_digit* t1 = t;
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	643b      	str	r3, [r7, #64]	; 0x40
    sp_digit* t2 = t + 2*8;
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	3340      	adds	r3, #64	; 0x40
 8019382:	63fb      	str	r3, [r7, #60]	; 0x3c
    sp_digit* t3 = t + 4*8;
 8019384:	683b      	ldr	r3, [r7, #0]
 8019386:	3380      	adds	r3, #128	; 0x80
 8019388:	63bb      	str	r3, [r7, #56]	; 0x38
    sp_digit* t4 = t + 6*8;
 801938a:	683b      	ldr	r3, [r7, #0]
 801938c:	33c0      	adds	r3, #192	; 0xc0
 801938e:	637b      	str	r3, [r7, #52]	; 0x34
    sp_digit* t5 = t + 8*8;
 8019390:	683b      	ldr	r3, [r7, #0]
 8019392:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019396:	633b      	str	r3, [r7, #48]	; 0x30
    sp_digit* y;
    sp_digit* z;
    int i;

    /* Check double */
    (void)sp_256_sub_8(t1, p256_mod, q->y);
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	3340      	adds	r3, #64	; 0x40
 801939c:	461a      	mov	r2, r3
 801939e:	49a4      	ldr	r1, [pc, #656]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 80193a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80193a2:	f7ff f9e7 	bl	8018774 <sp_256_sub_8>
    sp_256_norm_8(t1);
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 80193a6:	68bb      	ldr	r3, [r7, #8]
 80193a8:	687a      	ldr	r2, [r7, #4]
 80193aa:	4611      	mov	r1, r2
 80193ac:	4618      	mov	r0, r3
 80193ae:	f7ff fa0b 	bl	80187c8 <sp_256_cmp_equal_8>
 80193b2:	4604      	mov	r4, r0
 80193b4:	68bb      	ldr	r3, [r7, #8]
 80193b6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	3380      	adds	r3, #128	; 0x80
 80193be:	4619      	mov	r1, r3
 80193c0:	4610      	mov	r0, r2
 80193c2:	f7ff fa01 	bl	80187c8 <sp_256_cmp_equal_8>
 80193c6:	4603      	mov	r3, r0
 80193c8:	401c      	ands	r4, r3
        (sp_256_cmp_equal_8(p->y, q->y) | sp_256_cmp_equal_8(p->y, t1))) != 0) {
 80193ca:	68bb      	ldr	r3, [r7, #8]
 80193cc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	3340      	adds	r3, #64	; 0x40
 80193d4:	4619      	mov	r1, r3
 80193d6:	4610      	mov	r0, r2
 80193d8:	f7ff f9f6 	bl	80187c8 <sp_256_cmp_equal_8>
 80193dc:	4605      	mov	r5, r0
 80193de:	68bb      	ldr	r3, [r7, #8]
 80193e0:	3340      	adds	r3, #64	; 0x40
 80193e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80193e4:	4618      	mov	r0, r3
 80193e6:	f7ff f9ef 	bl	80187c8 <sp_256_cmp_equal_8>
 80193ea:	4603      	mov	r3, r0
 80193ec:	432b      	orrs	r3, r5
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 80193ee:	4023      	ands	r3, r4
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d005      	beq.n	8019400 <sp_256_proj_point_add_qz1_8+0x94>
        sp_256_proj_point_dbl_8(r, p, t);
 80193f4:	683a      	ldr	r2, [r7, #0]
 80193f6:	68b9      	ldr	r1, [r7, #8]
 80193f8:	68f8      	ldr	r0, [r7, #12]
 80193fa:	f7ff f91f 	bl	801863c <sp_256_proj_point_dbl_8>
        sp_256_mont_sub_8(t3, t3, x, p256_mod);
        sp_256_mont_mul_8(t3, t3, t4, p256_mod, p256_mp_mod);
        sp_256_mont_mul_8(t5, t5, y, p256_mod, p256_mp_mod);
        sp_256_mont_sub_8(y, t3, t5, p256_mod);
    }
}
 80193fe:	e113      	b.n	8019628 <sp_256_proj_point_add_qz1_8+0x2bc>
        rp[0] = r;
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	617b      	str	r3, [r7, #20]
        rp[1] = (sp_point_256*)t; /*lint !e9087 !e740*/
 8019404:	683b      	ldr	r3, [r7, #0]
 8019406:	61bb      	str	r3, [r7, #24]
        XMEMSET(rp[1], 0, sizeof(sp_point_256));
 8019408:	69bb      	ldr	r3, [r7, #24]
 801940a:	22c4      	movs	r2, #196	; 0xc4
 801940c:	2100      	movs	r1, #0
 801940e:	4618      	mov	r0, r3
 8019410:	f002 fb23 	bl	801ba5a <memset>
        x = rp[p->infinity | q->infinity]->x;
 8019414:	68bb      	ldr	r3, [r7, #8]
 8019416:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019420:	4313      	orrs	r3, r2
 8019422:	009b      	lsls	r3, r3, #2
 8019424:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019428:	4413      	add	r3, r2
 801942a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801942e:	62fb      	str	r3, [r7, #44]	; 0x2c
        y = rp[p->infinity | q->infinity]->y;
 8019430:	68bb      	ldr	r3, [r7, #8]
 8019432:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801943c:	4313      	orrs	r3, r2
 801943e:	009b      	lsls	r3, r3, #2
 8019440:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019444:	4413      	add	r3, r2
 8019446:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801944a:	3340      	adds	r3, #64	; 0x40
 801944c:	62bb      	str	r3, [r7, #40]	; 0x28
        z = rp[p->infinity | q->infinity]->z;
 801944e:	68bb      	ldr	r3, [r7, #8]
 8019450:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801945a:	4313      	orrs	r3, r2
 801945c:	009b      	lsls	r3, r3, #2
 801945e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019462:	4413      	add	r3, r2
 8019464:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8019468:	3380      	adds	r3, #128	; 0x80
 801946a:	627b      	str	r3, [r7, #36]	; 0x24
        ap[0] = p;
 801946c:	68bb      	ldr	r3, [r7, #8]
 801946e:	61fb      	str	r3, [r7, #28]
        ap[1] = q;
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	623b      	str	r3, [r7, #32]
        for (i=0; i<8; i++) {
 8019474:	2300      	movs	r3, #0
 8019476:	647b      	str	r3, [r7, #68]	; 0x44
 8019478:	e012      	b.n	80194a0 <sp_256_proj_point_add_qz1_8+0x134>
            r->x[i] = ap[p->infinity]->x[i];
 801947a:	68bb      	ldr	r3, [r7, #8]
 801947c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019480:	009b      	lsls	r3, r3, #2
 8019482:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019486:	4413      	add	r3, r2
 8019488:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801948c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801948e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i=0; i<8; i++) {
 801949a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801949c:	3301      	adds	r3, #1
 801949e:	647b      	str	r3, [r7, #68]	; 0x44
 80194a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194a2:	2b07      	cmp	r3, #7
 80194a4:	dde9      	ble.n	801947a <sp_256_proj_point_add_qz1_8+0x10e>
        for (i=0; i<8; i++) {
 80194a6:	2300      	movs	r3, #0
 80194a8:	647b      	str	r3, [r7, #68]	; 0x44
 80194aa:	e014      	b.n	80194d6 <sp_256_proj_point_add_qz1_8+0x16a>
            r->y[i] = ap[p->infinity]->y[i];
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80194b2:	009b      	lsls	r3, r3, #2
 80194b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80194b8:	4413      	add	r3, r2
 80194ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80194be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80194c0:	3210      	adds	r2, #16
 80194c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80194c6:	68fb      	ldr	r3, [r7, #12]
 80194c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80194ca:	3210      	adds	r2, #16
 80194cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i=0; i<8; i++) {
 80194d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194d2:	3301      	adds	r3, #1
 80194d4:	647b      	str	r3, [r7, #68]	; 0x44
 80194d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194d8:	2b07      	cmp	r3, #7
 80194da:	dde7      	ble.n	80194ac <sp_256_proj_point_add_qz1_8+0x140>
        for (i=0; i<8; i++) {
 80194dc:	2300      	movs	r3, #0
 80194de:	647b      	str	r3, [r7, #68]	; 0x44
 80194e0:	e014      	b.n	801950c <sp_256_proj_point_add_qz1_8+0x1a0>
            r->z[i] = ap[p->infinity]->z[i];
 80194e2:	68bb      	ldr	r3, [r7, #8]
 80194e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80194e8:	009b      	lsls	r3, r3, #2
 80194ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80194ee:	4413      	add	r3, r2
 80194f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80194f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80194f6:	3220      	adds	r2, #32
 80194f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019500:	3220      	adds	r2, #32
 8019502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i=0; i<8; i++) {
 8019506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019508:	3301      	adds	r3, #1
 801950a:	647b      	str	r3, [r7, #68]	; 0x44
 801950c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801950e:	2b07      	cmp	r3, #7
 8019510:	dde7      	ble.n	80194e2 <sp_256_proj_point_add_qz1_8+0x176>
        r->infinity = ap[p->infinity]->infinity;
 8019512:	68bb      	ldr	r3, [r7, #8]
 8019514:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019518:	009b      	lsls	r3, r3, #2
 801951a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801951e:	4413      	add	r3, r2
 8019520:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8019524:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        sp_256_mont_sqr_8(t2, z, p256_mod, p256_mp_mod);
 801952e:	2301      	movs	r3, #1
 8019530:	4a3f      	ldr	r2, [pc, #252]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 8019532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019534:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019536:	f7fe f8e0 	bl	80176fa <sp_256_mont_sqr_8>
        sp_256_mont_mul_8(t4, t2, z, p256_mod, p256_mp_mod);
 801953a:	2301      	movs	r3, #1
 801953c:	9300      	str	r3, [sp, #0]
 801953e:	4b3c      	ldr	r3, [pc, #240]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 8019540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019542:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019544:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019546:	f7fd fcf2 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t2, t2, q->x, p256_mod, p256_mp_mod);
 801954a:	687a      	ldr	r2, [r7, #4]
 801954c:	2301      	movs	r3, #1
 801954e:	9300      	str	r3, [sp, #0]
 8019550:	4b37      	ldr	r3, [pc, #220]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 8019552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019554:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019556:	f7fd fcea 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t4, t4, q->y, p256_mod, p256_mp_mod);
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8019560:	2301      	movs	r3, #1
 8019562:	9300      	str	r3, [sp, #0]
 8019564:	4b32      	ldr	r3, [pc, #200]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 8019566:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019568:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801956a:	f7fd fce0 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_sub_8(t2, t2, x, p256_mod);
 801956e:	4b30      	ldr	r3, [pc, #192]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 8019570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019572:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019574:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019576:	f7fe ff7b 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_sub_8(t4, t4, y, p256_mod);
 801957a:	4b2d      	ldr	r3, [pc, #180]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 801957c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801957e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019580:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019582:	f7fe ff75 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_mul_8(z, z, t2, p256_mod, p256_mp_mod);
 8019586:	2301      	movs	r3, #1
 8019588:	9300      	str	r3, [sp, #0]
 801958a:	4b29      	ldr	r3, [pc, #164]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 801958c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801958e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019592:	f7fd fccc 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_sqr_8(t1, t4, p256_mod, p256_mp_mod);
 8019596:	2301      	movs	r3, #1
 8019598:	4a25      	ldr	r2, [pc, #148]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 801959a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801959c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801959e:	f7fe f8ac 	bl	80176fa <sp_256_mont_sqr_8>
        sp_256_mont_sqr_8(t5, t2, p256_mod, p256_mp_mod);
 80195a2:	2301      	movs	r3, #1
 80195a4:	4a22      	ldr	r2, [pc, #136]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 80195a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80195a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80195aa:	f7fe f8a6 	bl	80176fa <sp_256_mont_sqr_8>
        sp_256_mont_mul_8(t3, x, t5, p256_mod, p256_mp_mod);
 80195ae:	2301      	movs	r3, #1
 80195b0:	9300      	str	r3, [sp, #0]
 80195b2:	4b1f      	ldr	r3, [pc, #124]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 80195b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80195b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80195ba:	f7fd fcb8 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t5, t5, t2, p256_mod, p256_mp_mod);
 80195be:	2301      	movs	r3, #1
 80195c0:	9300      	str	r3, [sp, #0]
 80195c2:	4b1b      	ldr	r3, [pc, #108]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 80195c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80195c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80195c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80195ca:	f7fd fcb0 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_sub_8(x, t1, t5, p256_mod);
 80195ce:	4b18      	ldr	r3, [pc, #96]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 80195d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80195d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80195d6:	f7fe ff4b 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_dbl_8(t1, t3, p256_mod);
 80195da:	4a15      	ldr	r2, [pc, #84]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 80195dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80195de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80195e0:	f7fe fe77 	bl	80182d2 <sp_256_mont_dbl_8>
        sp_256_mont_sub_8(x, x, t1, p256_mod);
 80195e4:	4b12      	ldr	r3, [pc, #72]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 80195e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80195e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80195ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80195ec:	f7fe ff40 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_sub_8(t3, t3, x, p256_mod);
 80195f0:	4b0f      	ldr	r3, [pc, #60]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 80195f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80195f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80195f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80195f8:	f7fe ff3a 	bl	8018470 <sp_256_mont_sub_8>
        sp_256_mont_mul_8(t3, t3, t4, p256_mod, p256_mp_mod);
 80195fc:	2301      	movs	r3, #1
 80195fe:	9300      	str	r3, [sp, #0]
 8019600:	4b0b      	ldr	r3, [pc, #44]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 8019602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019606:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019608:	f7fd fc91 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_mul_8(t5, t5, y, p256_mod, p256_mp_mod);
 801960c:	2301      	movs	r3, #1
 801960e:	9300      	str	r3, [sp, #0]
 8019610:	4b07      	ldr	r3, [pc, #28]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 8019612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019618:	f7fd fc89 	bl	8016f2e <sp_256_mont_mul_8>
        sp_256_mont_sub_8(y, t3, t5, p256_mod);
 801961c:	4b04      	ldr	r3, [pc, #16]	; (8019630 <sp_256_proj_point_add_qz1_8+0x2c4>)
 801961e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019620:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019624:	f7fe ff24 	bl	8018470 <sp_256_mont_sub_8>
}
 8019628:	bf00      	nop
 801962a:	3748      	adds	r7, #72	; 0x48
 801962c:	46bd      	mov	sp, r7
 801962e:	bdb0      	pop	{r4, r5, r7, pc}
 8019630:	0801e7a4 	.word	0x0801e7a4

08019634 <sp_256_get_entry_16_8>:
 * table  Table - start of the entires to access
 * idx    Index of entry to retrieve.
 */
static void sp_256_get_entry_16_8(sp_point_256* r,
    const sp_table_entry_256* table, int idx)
{
 8019634:	b480      	push	{r7}
 8019636:	b087      	sub	sp, #28
 8019638:	af00      	add	r7, sp, #0
 801963a:	60f8      	str	r0, [r7, #12]
 801963c:	60b9      	str	r1, [r7, #8]
 801963e:	607a      	str	r2, [r7, #4]
    int i;
    sp_digit mask;

    r->x[0] = 0;
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	2200      	movs	r2, #0
 8019644:	601a      	str	r2, [r3, #0]
    r->x[1] = 0;
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	2200      	movs	r2, #0
 801964a:	605a      	str	r2, [r3, #4]
    r->x[2] = 0;
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	2200      	movs	r2, #0
 8019650:	609a      	str	r2, [r3, #8]
    r->x[3] = 0;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	2200      	movs	r2, #0
 8019656:	60da      	str	r2, [r3, #12]
    r->x[4] = 0;
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	2200      	movs	r2, #0
 801965c:	611a      	str	r2, [r3, #16]
    r->x[5] = 0;
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	2200      	movs	r2, #0
 8019662:	615a      	str	r2, [r3, #20]
    r->x[6] = 0;
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	2200      	movs	r2, #0
 8019668:	619a      	str	r2, [r3, #24]
    r->x[7] = 0;
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	2200      	movs	r2, #0
 801966e:	61da      	str	r2, [r3, #28]
    r->y[0] = 0;
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	2200      	movs	r2, #0
 8019674:	641a      	str	r2, [r3, #64]	; 0x40
    r->y[1] = 0;
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	2200      	movs	r2, #0
 801967a:	645a      	str	r2, [r3, #68]	; 0x44
    r->y[2] = 0;
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	2200      	movs	r2, #0
 8019680:	649a      	str	r2, [r3, #72]	; 0x48
    r->y[3] = 0;
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	2200      	movs	r2, #0
 8019686:	64da      	str	r2, [r3, #76]	; 0x4c
    r->y[4] = 0;
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	2200      	movs	r2, #0
 801968c:	651a      	str	r2, [r3, #80]	; 0x50
    r->y[5] = 0;
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	2200      	movs	r2, #0
 8019692:	655a      	str	r2, [r3, #84]	; 0x54
    r->y[6] = 0;
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	2200      	movs	r2, #0
 8019698:	659a      	str	r2, [r3, #88]	; 0x58
    r->y[7] = 0;
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	2200      	movs	r2, #0
 801969e:	65da      	str	r2, [r3, #92]	; 0x5c
    for (i = 1; i < 16; i++) {
 80196a0:	2301      	movs	r3, #1
 80196a2:	617b      	str	r3, [r7, #20]
 80196a4:	e0cb      	b.n	801983e <sp_256_get_entry_16_8+0x20a>
        mask = 0 - (i == idx);
 80196a6:	697a      	ldr	r2, [r7, #20]
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	429a      	cmp	r2, r3
 80196ac:	bf0c      	ite	eq
 80196ae:	2301      	moveq	r3, #1
 80196b0:	2300      	movne	r3, #0
 80196b2:	b2db      	uxtb	r3, r3
 80196b4:	425b      	negs	r3, r3
 80196b6:	613b      	str	r3, [r7, #16]
        r->x[0] |= mask & table[i].x[0];
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	681a      	ldr	r2, [r3, #0]
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	019b      	lsls	r3, r3, #6
 80196c0:	68b9      	ldr	r1, [r7, #8]
 80196c2:	440b      	add	r3, r1
 80196c4:	6819      	ldr	r1, [r3, #0]
 80196c6:	693b      	ldr	r3, [r7, #16]
 80196c8:	400b      	ands	r3, r1
 80196ca:	431a      	orrs	r2, r3
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	601a      	str	r2, [r3, #0]
        r->x[1] |= mask & table[i].x[1];
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	685a      	ldr	r2, [r3, #4]
 80196d4:	697b      	ldr	r3, [r7, #20]
 80196d6:	019b      	lsls	r3, r3, #6
 80196d8:	68b9      	ldr	r1, [r7, #8]
 80196da:	440b      	add	r3, r1
 80196dc:	6859      	ldr	r1, [r3, #4]
 80196de:	693b      	ldr	r3, [r7, #16]
 80196e0:	400b      	ands	r3, r1
 80196e2:	431a      	orrs	r2, r3
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	605a      	str	r2, [r3, #4]
        r->x[2] |= mask & table[i].x[2];
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	689a      	ldr	r2, [r3, #8]
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	019b      	lsls	r3, r3, #6
 80196f0:	68b9      	ldr	r1, [r7, #8]
 80196f2:	440b      	add	r3, r1
 80196f4:	6899      	ldr	r1, [r3, #8]
 80196f6:	693b      	ldr	r3, [r7, #16]
 80196f8:	400b      	ands	r3, r1
 80196fa:	431a      	orrs	r2, r3
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	609a      	str	r2, [r3, #8]
        r->x[3] |= mask & table[i].x[3];
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	68da      	ldr	r2, [r3, #12]
 8019704:	697b      	ldr	r3, [r7, #20]
 8019706:	019b      	lsls	r3, r3, #6
 8019708:	68b9      	ldr	r1, [r7, #8]
 801970a:	440b      	add	r3, r1
 801970c:	68d9      	ldr	r1, [r3, #12]
 801970e:	693b      	ldr	r3, [r7, #16]
 8019710:	400b      	ands	r3, r1
 8019712:	431a      	orrs	r2, r3
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	60da      	str	r2, [r3, #12]
        r->x[4] |= mask & table[i].x[4];
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	691a      	ldr	r2, [r3, #16]
 801971c:	697b      	ldr	r3, [r7, #20]
 801971e:	019b      	lsls	r3, r3, #6
 8019720:	68b9      	ldr	r1, [r7, #8]
 8019722:	440b      	add	r3, r1
 8019724:	6919      	ldr	r1, [r3, #16]
 8019726:	693b      	ldr	r3, [r7, #16]
 8019728:	400b      	ands	r3, r1
 801972a:	431a      	orrs	r2, r3
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	611a      	str	r2, [r3, #16]
        r->x[5] |= mask & table[i].x[5];
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	695a      	ldr	r2, [r3, #20]
 8019734:	697b      	ldr	r3, [r7, #20]
 8019736:	019b      	lsls	r3, r3, #6
 8019738:	68b9      	ldr	r1, [r7, #8]
 801973a:	440b      	add	r3, r1
 801973c:	6959      	ldr	r1, [r3, #20]
 801973e:	693b      	ldr	r3, [r7, #16]
 8019740:	400b      	ands	r3, r1
 8019742:	431a      	orrs	r2, r3
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	615a      	str	r2, [r3, #20]
        r->x[6] |= mask & table[i].x[6];
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	699a      	ldr	r2, [r3, #24]
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	019b      	lsls	r3, r3, #6
 8019750:	68b9      	ldr	r1, [r7, #8]
 8019752:	440b      	add	r3, r1
 8019754:	6999      	ldr	r1, [r3, #24]
 8019756:	693b      	ldr	r3, [r7, #16]
 8019758:	400b      	ands	r3, r1
 801975a:	431a      	orrs	r2, r3
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	619a      	str	r2, [r3, #24]
        r->x[7] |= mask & table[i].x[7];
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	69da      	ldr	r2, [r3, #28]
 8019764:	697b      	ldr	r3, [r7, #20]
 8019766:	019b      	lsls	r3, r3, #6
 8019768:	68b9      	ldr	r1, [r7, #8]
 801976a:	440b      	add	r3, r1
 801976c:	69d9      	ldr	r1, [r3, #28]
 801976e:	693b      	ldr	r3, [r7, #16]
 8019770:	400b      	ands	r3, r1
 8019772:	431a      	orrs	r2, r3
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	61da      	str	r2, [r3, #28]
        r->y[0] |= mask & table[i].y[0];
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801977c:	697b      	ldr	r3, [r7, #20]
 801977e:	019b      	lsls	r3, r3, #6
 8019780:	68b9      	ldr	r1, [r7, #8]
 8019782:	440b      	add	r3, r1
 8019784:	6a19      	ldr	r1, [r3, #32]
 8019786:	693b      	ldr	r3, [r7, #16]
 8019788:	400b      	ands	r3, r1
 801978a:	431a      	orrs	r2, r3
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	641a      	str	r2, [r3, #64]	; 0x40
        r->y[1] |= mask & table[i].y[1];
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019794:	697b      	ldr	r3, [r7, #20]
 8019796:	019b      	lsls	r3, r3, #6
 8019798:	68b9      	ldr	r1, [r7, #8]
 801979a:	440b      	add	r3, r1
 801979c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801979e:	693b      	ldr	r3, [r7, #16]
 80197a0:	400b      	ands	r3, r1
 80197a2:	431a      	orrs	r2, r3
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	645a      	str	r2, [r3, #68]	; 0x44
        r->y[2] |= mask & table[i].y[2];
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80197ac:	697b      	ldr	r3, [r7, #20]
 80197ae:	019b      	lsls	r3, r3, #6
 80197b0:	68b9      	ldr	r1, [r7, #8]
 80197b2:	440b      	add	r3, r1
 80197b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80197b6:	693b      	ldr	r3, [r7, #16]
 80197b8:	400b      	ands	r3, r1
 80197ba:	431a      	orrs	r2, r3
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	649a      	str	r2, [r3, #72]	; 0x48
        r->y[3] |= mask & table[i].y[3];
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80197c4:	697b      	ldr	r3, [r7, #20]
 80197c6:	019b      	lsls	r3, r3, #6
 80197c8:	68b9      	ldr	r1, [r7, #8]
 80197ca:	440b      	add	r3, r1
 80197cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80197ce:	693b      	ldr	r3, [r7, #16]
 80197d0:	400b      	ands	r3, r1
 80197d2:	431a      	orrs	r2, r3
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	64da      	str	r2, [r3, #76]	; 0x4c
        r->y[4] |= mask & table[i].y[4];
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80197dc:	697b      	ldr	r3, [r7, #20]
 80197de:	019b      	lsls	r3, r3, #6
 80197e0:	68b9      	ldr	r1, [r7, #8]
 80197e2:	440b      	add	r3, r1
 80197e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80197e6:	693b      	ldr	r3, [r7, #16]
 80197e8:	400b      	ands	r3, r1
 80197ea:	431a      	orrs	r2, r3
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	651a      	str	r2, [r3, #80]	; 0x50
        r->y[5] |= mask & table[i].y[5];
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80197f4:	697b      	ldr	r3, [r7, #20]
 80197f6:	019b      	lsls	r3, r3, #6
 80197f8:	68b9      	ldr	r1, [r7, #8]
 80197fa:	440b      	add	r3, r1
 80197fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80197fe:	693b      	ldr	r3, [r7, #16]
 8019800:	400b      	ands	r3, r1
 8019802:	431a      	orrs	r2, r3
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	655a      	str	r2, [r3, #84]	; 0x54
        r->y[6] |= mask & table[i].y[6];
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801980c:	697b      	ldr	r3, [r7, #20]
 801980e:	019b      	lsls	r3, r3, #6
 8019810:	68b9      	ldr	r1, [r7, #8]
 8019812:	440b      	add	r3, r1
 8019814:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8019816:	693b      	ldr	r3, [r7, #16]
 8019818:	400b      	ands	r3, r1
 801981a:	431a      	orrs	r2, r3
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	659a      	str	r2, [r3, #88]	; 0x58
        r->y[7] |= mask & table[i].y[7];
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019824:	697b      	ldr	r3, [r7, #20]
 8019826:	019b      	lsls	r3, r3, #6
 8019828:	68b9      	ldr	r1, [r7, #8]
 801982a:	440b      	add	r3, r1
 801982c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801982e:	693b      	ldr	r3, [r7, #16]
 8019830:	400b      	ands	r3, r1
 8019832:	431a      	orrs	r2, r3
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	65da      	str	r2, [r3, #92]	; 0x5c
    for (i = 1; i < 16; i++) {
 8019838:	697b      	ldr	r3, [r7, #20]
 801983a:	3301      	adds	r3, #1
 801983c:	617b      	str	r3, [r7, #20]
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	2b0f      	cmp	r3, #15
 8019842:	f77f af30 	ble.w	80196a6 <sp_256_get_entry_16_8+0x72>
    }
}
 8019846:	bf00      	nop
 8019848:	371c      	adds	r7, #28
 801984a:	46bd      	mov	sp, r7
 801984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019850:	4770      	bx	lr
	...

08019854 <sp_256_ecc_mulmod_stripe_8>:
 * returns MEMORY_E when memory allocation fails and MP_OKAY on success.
 */
static int sp_256_ecc_mulmod_stripe_8(sp_point_256* r, const sp_point_256* g,
        const sp_table_entry_256* table, const sp_digit* k, int map,
        int ct, void* heap)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b08e      	sub	sp, #56	; 0x38
 8019858:	af00      	add	r7, sp, #0
 801985a:	60f8      	str	r0, [r7, #12]
 801985c:	60b9      	str	r1, [r7, #8]
 801985e:	607a      	str	r2, [r7, #4]
 8019860:	603b      	str	r3, [r7, #0]
    sp_point_256 rtd;
    sp_point_256 pd;
    sp_digit td[2 * 8 * 5];
#endif
    sp_point_256* rt;
    sp_point_256* p = NULL;
 8019862:	2300      	movs	r3, #0
 8019864:	617b      	str	r3, [r7, #20]
    /* Constant time used for cache attack resistance implementation. */
    (void)ct;
    (void)heap;


    err = sp_256_point_new_8(heap, rtd, rt);
 8019866:	f107 0318 	add.w	r3, r7, #24
 801986a:	461a      	mov	r2, r3
 801986c:	2100      	movs	r1, #0
 801986e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8019870:	f7fd f924 	bl	8016abc <sp_256_point_new_ex_8>
 8019874:	6278      	str	r0, [r7, #36]	; 0x24
    if (err == MP_OKAY) {
 8019876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019878:	2b00      	cmp	r3, #0
 801987a:	d107      	bne.n	801988c <sp_256_ecc_mulmod_stripe_8+0x38>
        err = sp_256_point_new_8(heap, pd, p);
 801987c:	f107 0314 	add.w	r3, r7, #20
 8019880:	461a      	mov	r2, r3
 8019882:	2100      	movs	r1, #0
 8019884:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8019886:	f7fd f919 	bl	8016abc <sp_256_point_new_ex_8>
 801988a:	6278      	str	r0, [r7, #36]	; 0x24
    }
#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    t = (sp_digit*)XMALLOC(sizeof(sp_digit) * 2 * 8 * 5, heap,
 801988c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8019890:	f7f7 fde4 	bl	801145c <wolfSSL_Malloc>
 8019894:	6238      	str	r0, [r7, #32]
                           DYNAMIC_TYPE_ECC);
    if (t == NULL) {
 8019896:	6a3b      	ldr	r3, [r7, #32]
 8019898:	2b00      	cmp	r3, #0
 801989a:	d102      	bne.n	80198a2 <sp_256_ecc_mulmod_stripe_8+0x4e>
        err = MEMORY_E;
 801989c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80198a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#else
    t = td;
#endif

    if (err == MP_OKAY) {
 80198a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	f040 80dd 	bne.w	8019a64 <sp_256_ecc_mulmod_stripe_8+0x210>
        XMEMCPY(p->z, p256_norm_mod, sizeof(p256_norm_mod));
 80198aa:	697b      	ldr	r3, [r7, #20]
 80198ac:	3380      	adds	r3, #128	; 0x80
 80198ae:	2220      	movs	r2, #32
 80198b0:	497a      	ldr	r1, [pc, #488]	; (8019a9c <sp_256_ecc_mulmod_stripe_8+0x248>)
 80198b2:	4618      	mov	r0, r3
 80198b4:	f002 f8ad 	bl	801ba12 <memcpy>
        XMEMCPY(rt->z, p256_norm_mod, sizeof(p256_norm_mod));
 80198b8:	69bb      	ldr	r3, [r7, #24]
 80198ba:	3380      	adds	r3, #128	; 0x80
 80198bc:	2220      	movs	r2, #32
 80198be:	4977      	ldr	r1, [pc, #476]	; (8019a9c <sp_256_ecc_mulmod_stripe_8+0x248>)
 80198c0:	4618      	mov	r0, r3
 80198c2:	f002 f8a6 	bl	801ba12 <memcpy>

        y = 0;
 80198c6:	2300      	movs	r3, #0
 80198c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (j=0,x=63; j<4; j++,x+=64) {
 80198ca:	2300      	movs	r3, #0
 80198cc:	633b      	str	r3, [r7, #48]	; 0x30
 80198ce:	233f      	movs	r3, #63	; 0x3f
 80198d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80198d2:	e021      	b.n	8019918 <sp_256_ecc_mulmod_stripe_8+0xc4>
            y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 80198d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	da00      	bge.n	80198dc <sp_256_ecc_mulmod_stripe_8+0x88>
 80198da:	331f      	adds	r3, #31
 80198dc:	115b      	asrs	r3, r3, #5
 80198de:	009b      	lsls	r3, r3, #2
 80198e0:	683a      	ldr	r2, [r7, #0]
 80198e2:	4413      	add	r3, r2
 80198e4:	681a      	ldr	r2, [r3, #0]
 80198e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198e8:	4259      	negs	r1, r3
 80198ea:	f003 031f 	and.w	r3, r3, #31
 80198ee:	f001 011f 	and.w	r1, r1, #31
 80198f2:	bf58      	it	pl
 80198f4:	424b      	negpl	r3, r1
 80198f6:	fa22 f303 	lsr.w	r3, r2, r3
 80198fa:	f003 0201 	and.w	r2, r3, #1
 80198fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019900:	fa02 f303 	lsl.w	r3, r2, r3
 8019904:	461a      	mov	r2, r3
 8019906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019908:	4313      	orrs	r3, r2
 801990a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (j=0,x=63; j<4; j++,x+=64) {
 801990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801990e:	3301      	adds	r3, #1
 8019910:	633b      	str	r3, [r7, #48]	; 0x30
 8019912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019914:	3340      	adds	r3, #64	; 0x40
 8019916:	62bb      	str	r3, [r7, #40]	; 0x28
 8019918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801991a:	2b03      	cmp	r3, #3
 801991c:	ddda      	ble.n	80198d4 <sp_256_ecc_mulmod_stripe_8+0x80>
        }
    #ifndef WC_NO_CACHE_RESISTANT
        if (ct) {
 801991e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019920:	2b00      	cmp	r3, #0
 8019922:	d006      	beq.n	8019932 <sp_256_ecc_mulmod_stripe_8+0xde>
            sp_256_get_entry_16_8(rt, table, y);
 8019924:	69bb      	ldr	r3, [r7, #24]
 8019926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019928:	6879      	ldr	r1, [r7, #4]
 801992a:	4618      	mov	r0, r3
 801992c:	f7ff fe82 	bl	8019634 <sp_256_get_entry_16_8>
 8019930:	e015      	b.n	801995e <sp_256_ecc_mulmod_stripe_8+0x10a>
        } else
    #endif
        {
            XMEMCPY(rt->x, table[y].x, sizeof(table[y].x));
 8019932:	69bb      	ldr	r3, [r7, #24]
 8019934:	4618      	mov	r0, r3
 8019936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019938:	019b      	lsls	r3, r3, #6
 801993a:	687a      	ldr	r2, [r7, #4]
 801993c:	4413      	add	r3, r2
 801993e:	2220      	movs	r2, #32
 8019940:	4619      	mov	r1, r3
 8019942:	f002 f866 	bl	801ba12 <memcpy>
            XMEMCPY(rt->y, table[y].y, sizeof(table[y].y));
 8019946:	69bb      	ldr	r3, [r7, #24]
 8019948:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801994e:	019b      	lsls	r3, r3, #6
 8019950:	687a      	ldr	r2, [r7, #4]
 8019952:	4413      	add	r3, r2
 8019954:	3320      	adds	r3, #32
 8019956:	2220      	movs	r2, #32
 8019958:	4619      	mov	r1, r3
 801995a:	f002 f85a 	bl	801ba12 <memcpy>
        }
        rt->infinity = !y;
 801995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019960:	2b00      	cmp	r3, #0
 8019962:	bf0c      	ite	eq
 8019964:	2301      	moveq	r3, #1
 8019966:	2300      	movne	r3, #0
 8019968:	b2da      	uxtb	r2, r3
 801996a:	69bb      	ldr	r3, [r7, #24]
 801996c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        for (i=62; i>=0; i--) {
 8019970:	233e      	movs	r3, #62	; 0x3e
 8019972:	637b      	str	r3, [r7, #52]	; 0x34
 8019974:	e063      	b.n	8019a3e <sp_256_ecc_mulmod_stripe_8+0x1ea>
            y = 0;
 8019976:	2300      	movs	r3, #0
 8019978:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (j=0,x=i; j<4; j++,x+=64) {
 801997a:	2300      	movs	r3, #0
 801997c:	633b      	str	r3, [r7, #48]	; 0x30
 801997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019980:	62bb      	str	r3, [r7, #40]	; 0x28
 8019982:	e021      	b.n	80199c8 <sp_256_ecc_mulmod_stripe_8+0x174>
                y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 8019984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019986:	2b00      	cmp	r3, #0
 8019988:	da00      	bge.n	801998c <sp_256_ecc_mulmod_stripe_8+0x138>
 801998a:	331f      	adds	r3, #31
 801998c:	115b      	asrs	r3, r3, #5
 801998e:	009b      	lsls	r3, r3, #2
 8019990:	683a      	ldr	r2, [r7, #0]
 8019992:	4413      	add	r3, r2
 8019994:	681a      	ldr	r2, [r3, #0]
 8019996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019998:	4259      	negs	r1, r3
 801999a:	f003 031f 	and.w	r3, r3, #31
 801999e:	f001 011f 	and.w	r1, r1, #31
 80199a2:	bf58      	it	pl
 80199a4:	424b      	negpl	r3, r1
 80199a6:	fa22 f303 	lsr.w	r3, r2, r3
 80199aa:	f003 0201 	and.w	r2, r3, #1
 80199ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199b0:	fa02 f303 	lsl.w	r3, r2, r3
 80199b4:	461a      	mov	r2, r3
 80199b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b8:	4313      	orrs	r3, r2
 80199ba:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (j=0,x=i; j<4; j++,x+=64) {
 80199bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199be:	3301      	adds	r3, #1
 80199c0:	633b      	str	r3, [r7, #48]	; 0x30
 80199c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c4:	3340      	adds	r3, #64	; 0x40
 80199c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80199c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199ca:	2b03      	cmp	r3, #3
 80199cc:	ddda      	ble.n	8019984 <sp_256_ecc_mulmod_stripe_8+0x130>
            }

            sp_256_proj_point_dbl_8(rt, rt, t);
 80199ce:	69bb      	ldr	r3, [r7, #24]
 80199d0:	69b9      	ldr	r1, [r7, #24]
 80199d2:	6a3a      	ldr	r2, [r7, #32]
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7fe fe31 	bl	801863c <sp_256_proj_point_dbl_8>
        #ifndef WC_NO_CACHE_RESISTANT
            if (ct) {
 80199da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d006      	beq.n	80199ee <sp_256_ecc_mulmod_stripe_8+0x19a>
                sp_256_get_entry_16_8(p, table, y);
 80199e0:	697b      	ldr	r3, [r7, #20]
 80199e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80199e4:	6879      	ldr	r1, [r7, #4]
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7ff fe24 	bl	8019634 <sp_256_get_entry_16_8>
 80199ec:	e015      	b.n	8019a1a <sp_256_ecc_mulmod_stripe_8+0x1c6>
            }
            else
        #endif
            {
                XMEMCPY(p->x, table[y].x, sizeof(table[y].x));
 80199ee:	697b      	ldr	r3, [r7, #20]
 80199f0:	4618      	mov	r0, r3
 80199f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199f4:	019b      	lsls	r3, r3, #6
 80199f6:	687a      	ldr	r2, [r7, #4]
 80199f8:	4413      	add	r3, r2
 80199fa:	2220      	movs	r2, #32
 80199fc:	4619      	mov	r1, r3
 80199fe:	f002 f808 	bl	801ba12 <memcpy>
                XMEMCPY(p->y, table[y].y, sizeof(table[y].y));
 8019a02:	697b      	ldr	r3, [r7, #20]
 8019a04:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8019a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a0a:	019b      	lsls	r3, r3, #6
 8019a0c:	687a      	ldr	r2, [r7, #4]
 8019a0e:	4413      	add	r3, r2
 8019a10:	3320      	adds	r3, #32
 8019a12:	2220      	movs	r2, #32
 8019a14:	4619      	mov	r1, r3
 8019a16:	f001 fffc 	bl	801ba12 <memcpy>
            }
            p->infinity = !y;
 8019a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	bf0c      	ite	eq
 8019a20:	2301      	moveq	r3, #1
 8019a22:	2300      	movne	r3, #0
 8019a24:	b2da      	uxtb	r2, r3
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
            sp_256_proj_point_add_qz1_8(rt, rt, p, t);
 8019a2c:	69b8      	ldr	r0, [r7, #24]
 8019a2e:	69b9      	ldr	r1, [r7, #24]
 8019a30:	697a      	ldr	r2, [r7, #20]
 8019a32:	6a3b      	ldr	r3, [r7, #32]
 8019a34:	f7ff fc9a 	bl	801936c <sp_256_proj_point_add_qz1_8>
        for (i=62; i>=0; i--) {
 8019a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a3a:	3b01      	subs	r3, #1
 8019a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8019a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	da98      	bge.n	8019976 <sp_256_ecc_mulmod_stripe_8+0x122>
        }

        if (map != 0) {
 8019a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d006      	beq.n	8019a58 <sp_256_ecc_mulmod_stripe_8+0x204>
            sp_256_map_8(r, rt, t);
 8019a4a:	69bb      	ldr	r3, [r7, #24]
 8019a4c:	6a3a      	ldr	r2, [r7, #32]
 8019a4e:	4619      	mov	r1, r3
 8019a50:	68f8      	ldr	r0, [r7, #12]
 8019a52:	f7fe fb15 	bl	8018080 <sp_256_map_8>
 8019a56:	e005      	b.n	8019a64 <sp_256_ecc_mulmod_stripe_8+0x210>
        }
        else {
            XMEMCPY(r, rt, sizeof(sp_point_256));
 8019a58:	69bb      	ldr	r3, [r7, #24]
 8019a5a:	22c4      	movs	r2, #196	; 0xc4
 8019a5c:	4619      	mov	r1, r3
 8019a5e:	68f8      	ldr	r0, [r7, #12]
 8019a60:	f001 ffd7 	bl	801ba12 <memcpy>
        }
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (t != NULL) {
 8019a64:	6a3b      	ldr	r3, [r7, #32]
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d007      	beq.n	8019a7a <sp_256_ecc_mulmod_stripe_8+0x226>
        XFREE(t, heap, DYNAMIC_TYPE_ECC);
 8019a6a:	6a3b      	ldr	r3, [r7, #32]
 8019a6c:	61fb      	str	r3, [r7, #28]
 8019a6e:	69fb      	ldr	r3, [r7, #28]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d002      	beq.n	8019a7a <sp_256_ecc_mulmod_stripe_8+0x226>
 8019a74:	69f8      	ldr	r0, [r7, #28]
 8019a76:	f7f7 fd0d 	bl	8011494 <wolfSSL_Free>
    }
#endif
    sp_256_point_free_8(p, 0, heap);
 8019a7a:	697b      	ldr	r3, [r7, #20]
 8019a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019a7e:	2100      	movs	r1, #0
 8019a80:	4618      	mov	r0, r3
 8019a82:	f7fd f835 	bl	8016af0 <sp_256_point_free_8>
    sp_256_point_free_8(rt, 0, heap);
 8019a86:	69bb      	ldr	r3, [r7, #24]
 8019a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019a8a:	2100      	movs	r1, #0
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7fd f82f 	bl	8016af0 <sp_256_point_free_8>

    return err;
 8019a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019a94:	4618      	mov	r0, r3
 8019a96:	3738      	adds	r7, #56	; 0x38
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	bd80      	pop	{r7, pc}
 8019a9c:	0801e7c4 	.word	0x0801e7c4

08019aa0 <sp_256_ecc_mulmod_8>:
 * heap  Heap to use for allocation.
 * returns MEMORY_E when memory allocation fails and MP_OKAY on success.
 */
static int sp_256_ecc_mulmod_8(sp_point_256* r, const sp_point_256* g, const sp_digit* k,
        int map, int ct, void* heap)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b086      	sub	sp, #24
 8019aa4:	af02      	add	r7, sp, #8
 8019aa6:	60f8      	str	r0, [r7, #12]
 8019aa8:	60b9      	str	r1, [r7, #8]
 8019aaa:	607a      	str	r2, [r7, #4]
 8019aac:	603b      	str	r3, [r7, #0]
#ifndef FP_ECC
    return sp_256_ecc_mulmod_fast_8(r, g, k, map, ct, heap);
 8019aae:	69fb      	ldr	r3, [r7, #28]
 8019ab0:	9301      	str	r3, [sp, #4]
 8019ab2:	69bb      	ldr	r3, [r7, #24]
 8019ab4:	9300      	str	r3, [sp, #0]
 8019ab6:	683b      	ldr	r3, [r7, #0]
 8019ab8:	687a      	ldr	r2, [r7, #4]
 8019aba:	68b9      	ldr	r1, [r7, #8]
 8019abc:	68f8      	ldr	r0, [r7, #12]
 8019abe:	f7ff fa47 	bl	8018f50 <sp_256_ecc_mulmod_fast_8>
 8019ac2:	4603      	mov	r3, r0
        }
    }

    return err;
#endif
}
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	3710      	adds	r7, #16
 8019ac8:	46bd      	mov	sp, r7
 8019aca:	bd80      	pop	{r7, pc}

08019acc <sp_256_ecc_mulmod_base_8>:
 * heap  Heap to use for allocation.
 * returns MEMORY_E when memory allocation fails and MP_OKAY on success.
 */
static int sp_256_ecc_mulmod_base_8(sp_point_256* r, const sp_digit* k,
        int map, int ct, void* heap)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b088      	sub	sp, #32
 8019ad0:	af04      	add	r7, sp, #16
 8019ad2:	60f8      	str	r0, [r7, #12]
 8019ad4:	60b9      	str	r1, [r7, #8]
 8019ad6:	607a      	str	r2, [r7, #4]
 8019ad8:	603b      	str	r3, [r7, #0]
    return sp_256_ecc_mulmod_stripe_8(r, &p256_base, p256_table,
 8019ada:	69bb      	ldr	r3, [r7, #24]
 8019adc:	9302      	str	r3, [sp, #8]
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	9301      	str	r3, [sp, #4]
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	9300      	str	r3, [sp, #0]
 8019ae6:	68bb      	ldr	r3, [r7, #8]
 8019ae8:	4a04      	ldr	r2, [pc, #16]	; (8019afc <sp_256_ecc_mulmod_base_8+0x30>)
 8019aea:	4905      	ldr	r1, [pc, #20]	; (8019b00 <sp_256_ecc_mulmod_base_8+0x34>)
 8019aec:	68f8      	ldr	r0, [r7, #12]
 8019aee:	f7ff feb1 	bl	8019854 <sp_256_ecc_mulmod_stripe_8>
 8019af2:	4603      	mov	r3, r0
                                      k, map, ct, heap);
}
 8019af4:	4618      	mov	r0, r3
 8019af6:	3710      	adds	r7, #16
 8019af8:	46bd      	mov	sp, r7
 8019afa:	bd80      	pop	{r7, pc}
 8019afc:	0801e908 	.word	0x0801e908
 8019b00:	0801e824 	.word	0x0801e824

08019b04 <sp_ecc_mulmod_base_256>:
 * map   Indicates whether to convert result to affine.
 * heap  Heap to use for allocation.
 * returns MEMORY_E when memory allocation fails and MP_OKAY on success.
 */
int sp_ecc_mulmod_base_256(mp_int* km, ecc_point* r, int map, void* heap)
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b08a      	sub	sp, #40	; 0x28
 8019b08:	af02      	add	r7, sp, #8
 8019b0a:	60f8      	str	r0, [r7, #12]
 8019b0c:	60b9      	str	r1, [r7, #8]
 8019b0e:	607a      	str	r2, [r7, #4]
 8019b10:	603b      	str	r3, [r7, #0]
#if (!defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SMALL_STACK)) || defined(WOLFSSL_SP_NO_MALLOC)
    sp_point_256 p;
    sp_digit kd[8];
#endif
    sp_point_256* point;
    sp_digit* k = NULL;
 8019b12:	2300      	movs	r3, #0
 8019b14:	61fb      	str	r3, [r7, #28]
    int err = MP_OKAY;
 8019b16:	2300      	movs	r3, #0
 8019b18:	61bb      	str	r3, [r7, #24]

    err = sp_256_point_new_8(heap, p, point);
 8019b1a:	f107 0310 	add.w	r3, r7, #16
 8019b1e:	461a      	mov	r2, r3
 8019b20:	2100      	movs	r1, #0
 8019b22:	6838      	ldr	r0, [r7, #0]
 8019b24:	f7fc ffca 	bl	8016abc <sp_256_point_new_ex_8>
 8019b28:	61b8      	str	r0, [r7, #24]
#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (err == MP_OKAY) {
 8019b2a:	69bb      	ldr	r3, [r7, #24]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d109      	bne.n	8019b44 <sp_ecc_mulmod_base_256+0x40>
        k = (sp_digit*)XMALLOC(sizeof(sp_digit) * 8, heap,
 8019b30:	2020      	movs	r0, #32
 8019b32:	f7f7 fc93 	bl	801145c <wolfSSL_Malloc>
 8019b36:	61f8      	str	r0, [r7, #28]
                                                              DYNAMIC_TYPE_ECC);
        if (k == NULL) {
 8019b38:	69fb      	ldr	r3, [r7, #28]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d102      	bne.n	8019b44 <sp_ecc_mulmod_base_256+0x40>
            err = MEMORY_E;
 8019b3e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8019b42:	61bb      	str	r3, [r7, #24]
        }
    }
#else
    k = kd;
#endif
    if (err == MP_OKAY) {
 8019b44:	69bb      	ldr	r3, [r7, #24]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d10d      	bne.n	8019b66 <sp_ecc_mulmod_base_256+0x62>
        sp_256_from_mp(k, 8, km);
 8019b4a:	68fa      	ldr	r2, [r7, #12]
 8019b4c:	2108      	movs	r1, #8
 8019b4e:	69f8      	ldr	r0, [r7, #28]
 8019b50:	f7fd f96a 	bl	8016e28 <sp_256_from_mp>

            err = sp_256_ecc_mulmod_base_8(point, k, map, 1, heap);
 8019b54:	6938      	ldr	r0, [r7, #16]
 8019b56:	683b      	ldr	r3, [r7, #0]
 8019b58:	9300      	str	r3, [sp, #0]
 8019b5a:	2301      	movs	r3, #1
 8019b5c:	687a      	ldr	r2, [r7, #4]
 8019b5e:	69f9      	ldr	r1, [r7, #28]
 8019b60:	f7ff ffb4 	bl	8019acc <sp_256_ecc_mulmod_base_8>
 8019b64:	61b8      	str	r0, [r7, #24]
    }
    if (err == MP_OKAY) {
 8019b66:	69bb      	ldr	r3, [r7, #24]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d105      	bne.n	8019b78 <sp_ecc_mulmod_base_256+0x74>
        err = sp_256_point_to_ecc_point_8(point, r);
 8019b6c:	693b      	ldr	r3, [r7, #16]
 8019b6e:	68b9      	ldr	r1, [r7, #8]
 8019b70:	4618      	mov	r0, r3
 8019b72:	f7fd f9b0 	bl	8016ed6 <sp_256_point_to_ecc_point_8>
 8019b76:	61b8      	str	r0, [r7, #24]
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (k != NULL) {
 8019b78:	69fb      	ldr	r3, [r7, #28]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d007      	beq.n	8019b8e <sp_ecc_mulmod_base_256+0x8a>
        XFREE(k, heap, DYNAMIC_TYPE_ECC);
 8019b7e:	69fb      	ldr	r3, [r7, #28]
 8019b80:	617b      	str	r3, [r7, #20]
 8019b82:	697b      	ldr	r3, [r7, #20]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d002      	beq.n	8019b8e <sp_ecc_mulmod_base_256+0x8a>
 8019b88:	6978      	ldr	r0, [r7, #20]
 8019b8a:	f7f7 fc83 	bl	8011494 <wolfSSL_Free>
    }
#endif
    sp_256_point_free_8(point, 0, heap);
 8019b8e:	693b      	ldr	r3, [r7, #16]
 8019b90:	683a      	ldr	r2, [r7, #0]
 8019b92:	2100      	movs	r1, #0
 8019b94:	4618      	mov	r0, r3
 8019b96:	f7fc ffab 	bl	8016af0 <sp_256_point_free_8>

    return err;
 8019b9a:	69bb      	ldr	r3, [r7, #24]
}
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	3720      	adds	r7, #32
 8019ba0:	46bd      	mov	sp, r7
 8019ba2:	bd80      	pop	{r7, pc}

08019ba4 <sp_256_iszero_8>:
 *
 * a  Number to check.
 * returns 1 if the number is zero and 0 otherwise.
 */
static int sp_256_iszero_8(const sp_digit* a)
{
 8019ba4:	b480      	push	{r7}
 8019ba6:	b083      	sub	sp, #12
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
    return (a[0] | a[1] | a[2] | a[3] | a[4] | a[5] | a[6] | a[7]) == 0;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	681a      	ldr	r2, [r3, #0]
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	3304      	adds	r3, #4
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	431a      	orrs	r2, r3
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	3308      	adds	r3, #8
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	431a      	orrs	r2, r3
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	330c      	adds	r3, #12
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	431a      	orrs	r2, r3
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	3310      	adds	r3, #16
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	431a      	orrs	r2, r3
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	3314      	adds	r3, #20
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	431a      	orrs	r2, r3
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	3318      	adds	r3, #24
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	431a      	orrs	r2, r3
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	331c      	adds	r3, #28
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	4313      	orrs	r3, r2
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	bf0c      	ite	eq
 8019bec:	2301      	moveq	r3, #1
 8019bee:	2300      	movne	r3, #0
 8019bf0:	b2db      	uxtb	r3, r3
}
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	370c      	adds	r7, #12
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfc:	4770      	bx	lr

08019bfe <sp_256_from_bin>:
 * size  Maximum number of bytes to convert
 * a  Byte array.
 * n  Number of bytes in array to read.
 */
static void sp_256_from_bin(sp_digit* r, int size, const byte* a, int n)
{
 8019bfe:	b480      	push	{r7}
 8019c00:	b089      	sub	sp, #36	; 0x24
 8019c02:	af00      	add	r7, sp, #0
 8019c04:	60f8      	str	r0, [r7, #12]
 8019c06:	60b9      	str	r1, [r7, #8]
 8019c08:	607a      	str	r2, [r7, #4]
 8019c0a:	603b      	str	r3, [r7, #0]
    int i, j = 0;
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	61bb      	str	r3, [r7, #24]
    word32 s = 0;
 8019c10:	2300      	movs	r3, #0
 8019c12:	617b      	str	r3, [r7, #20]

    r[0] = 0;
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	2200      	movs	r2, #0
 8019c18:	601a      	str	r2, [r3, #0]
    for (i = n-1; i >= 0; i--) {
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	3b01      	subs	r3, #1
 8019c1e:	61fb      	str	r3, [r7, #28]
 8019c20:	e042      	b.n	8019ca8 <sp_256_from_bin+0xaa>
        r[j] |= (((sp_digit)a[i]) << s);
 8019c22:	69bb      	ldr	r3, [r7, #24]
 8019c24:	009b      	lsls	r3, r3, #2
 8019c26:	68fa      	ldr	r2, [r7, #12]
 8019c28:	4413      	add	r3, r2
 8019c2a:	6819      	ldr	r1, [r3, #0]
 8019c2c:	69fb      	ldr	r3, [r7, #28]
 8019c2e:	687a      	ldr	r2, [r7, #4]
 8019c30:	4413      	add	r3, r2
 8019c32:	781b      	ldrb	r3, [r3, #0]
 8019c34:	461a      	mov	r2, r3
 8019c36:	697b      	ldr	r3, [r7, #20]
 8019c38:	409a      	lsls	r2, r3
 8019c3a:	69bb      	ldr	r3, [r7, #24]
 8019c3c:	009b      	lsls	r3, r3, #2
 8019c3e:	68f8      	ldr	r0, [r7, #12]
 8019c40:	4403      	add	r3, r0
 8019c42:	430a      	orrs	r2, r1
 8019c44:	601a      	str	r2, [r3, #0]
        if (s >= 24U) {
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	2b17      	cmp	r3, #23
 8019c4a:	d927      	bls.n	8019c9c <sp_256_from_bin+0x9e>
            r[j] &= 0xffffffff;
 8019c4c:	69bb      	ldr	r3, [r7, #24]
 8019c4e:	009b      	lsls	r3, r3, #2
 8019c50:	68fa      	ldr	r2, [r7, #12]
 8019c52:	441a      	add	r2, r3
 8019c54:	69bb      	ldr	r3, [r7, #24]
 8019c56:	009b      	lsls	r3, r3, #2
 8019c58:	68f9      	ldr	r1, [r7, #12]
 8019c5a:	440b      	add	r3, r1
 8019c5c:	6812      	ldr	r2, [r2, #0]
 8019c5e:	601a      	str	r2, [r3, #0]
            s = 32U - s;
 8019c60:	697b      	ldr	r3, [r7, #20]
 8019c62:	f1c3 0320 	rsb	r3, r3, #32
 8019c66:	617b      	str	r3, [r7, #20]
            if (j + 1 >= size) {
 8019c68:	69bb      	ldr	r3, [r7, #24]
 8019c6a:	3301      	adds	r3, #1
 8019c6c:	68ba      	ldr	r2, [r7, #8]
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	dd1e      	ble.n	8019cb0 <sp_256_from_bin+0xb2>
                break;
            }
            r[++j] = (sp_digit)a[i] >> s;
 8019c72:	69fb      	ldr	r3, [r7, #28]
 8019c74:	687a      	ldr	r2, [r7, #4]
 8019c76:	4413      	add	r3, r2
 8019c78:	781b      	ldrb	r3, [r3, #0]
 8019c7a:	4619      	mov	r1, r3
 8019c7c:	69bb      	ldr	r3, [r7, #24]
 8019c7e:	3301      	adds	r3, #1
 8019c80:	61bb      	str	r3, [r7, #24]
 8019c82:	69bb      	ldr	r3, [r7, #24]
 8019c84:	009b      	lsls	r3, r3, #2
 8019c86:	68fa      	ldr	r2, [r7, #12]
 8019c88:	4413      	add	r3, r2
 8019c8a:	697a      	ldr	r2, [r7, #20]
 8019c8c:	fa21 f202 	lsr.w	r2, r1, r2
 8019c90:	601a      	str	r2, [r3, #0]
            s = 8U - s;
 8019c92:	697b      	ldr	r3, [r7, #20]
 8019c94:	f1c3 0308 	rsb	r3, r3, #8
 8019c98:	617b      	str	r3, [r7, #20]
 8019c9a:	e002      	b.n	8019ca2 <sp_256_from_bin+0xa4>
        }
        else {
            s += 8U;
 8019c9c:	697b      	ldr	r3, [r7, #20]
 8019c9e:	3308      	adds	r3, #8
 8019ca0:	617b      	str	r3, [r7, #20]
    for (i = n-1; i >= 0; i--) {
 8019ca2:	69fb      	ldr	r3, [r7, #28]
 8019ca4:	3b01      	subs	r3, #1
 8019ca6:	61fb      	str	r3, [r7, #28]
 8019ca8:	69fb      	ldr	r3, [r7, #28]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	dab9      	bge.n	8019c22 <sp_256_from_bin+0x24>
 8019cae:	e000      	b.n	8019cb2 <sp_256_from_bin+0xb4>
                break;
 8019cb0:	bf00      	nop
        }
    }

    for (j++; j < size; j++) {
 8019cb2:	69bb      	ldr	r3, [r7, #24]
 8019cb4:	3301      	adds	r3, #1
 8019cb6:	61bb      	str	r3, [r7, #24]
 8019cb8:	e008      	b.n	8019ccc <sp_256_from_bin+0xce>
        r[j] = 0;
 8019cba:	69bb      	ldr	r3, [r7, #24]
 8019cbc:	009b      	lsls	r3, r3, #2
 8019cbe:	68fa      	ldr	r2, [r7, #12]
 8019cc0:	4413      	add	r3, r2
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	601a      	str	r2, [r3, #0]
    for (j++; j < size; j++) {
 8019cc6:	69bb      	ldr	r3, [r7, #24]
 8019cc8:	3301      	adds	r3, #1
 8019cca:	61bb      	str	r3, [r7, #24]
 8019ccc:	69ba      	ldr	r2, [r7, #24]
 8019cce:	68bb      	ldr	r3, [r7, #8]
 8019cd0:	429a      	cmp	r2, r3
 8019cd2:	dbf2      	blt.n	8019cba <sp_256_from_bin+0xbc>
    }
}
 8019cd4:	bf00      	nop
 8019cd6:	3724      	adds	r7, #36	; 0x24
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cde:	4770      	bx	lr

08019ce0 <sp_256_mul_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static void sp_256_mul_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8019ce0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8019ce4:	b08f      	sub	sp, #60	; 0x3c
 8019ce6:	af00      	add	r7, sp, #0
 8019ce8:	60f8      	str	r0, [r7, #12]
 8019cea:	60b9      	str	r1, [r7, #8]
 8019cec:	607a      	str	r2, [r7, #4]
    sp_digit tmp_arr[8];
    sp_digit* tmp = tmp_arr;
 8019cee:	f107 0314 	add.w	r3, r7, #20
 8019cf2:	637b      	str	r3, [r7, #52]	; 0x34

    __asm__ __volatile__ (
 8019cf4:	68fa      	ldr	r2, [r7, #12]
 8019cf6:	68b9      	ldr	r1, [r7, #8]
 8019cf8:	6878      	ldr	r0, [r7, #4]
 8019cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019cfc:	469c      	mov	ip, r3
 8019cfe:	680e      	ldr	r6, [r1, #0]
 8019d00:	f8d0 8000 	ldr.w	r8, [r0]
 8019d04:	fba6 3408 	umull	r3, r4, r6, r8
 8019d08:	f04f 0500 	mov.w	r5, #0
 8019d0c:	f8cc 3000 	str.w	r3, [ip]
 8019d10:	f04f 0300 	mov.w	r3, #0
 8019d14:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019d18:	fba6 6808 	umull	r6, r8, r6, r8
 8019d1c:	19a4      	adds	r4, r4, r6
 8019d1e:	eb45 0508 	adc.w	r5, r5, r8
 8019d22:	684e      	ldr	r6, [r1, #4]
 8019d24:	f8d0 8000 	ldr.w	r8, [r0]
 8019d28:	fba6 6808 	umull	r6, r8, r6, r8
 8019d2c:	19a4      	adds	r4, r4, r6
 8019d2e:	eb55 0508 	adcs.w	r5, r5, r8
 8019d32:	f143 0300 	adc.w	r3, r3, #0
 8019d36:	f8cc 4004 	str.w	r4, [ip, #4]
 8019d3a:	f04f 0400 	mov.w	r4, #0
 8019d3e:	680e      	ldr	r6, [r1, #0]
 8019d40:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019d44:	fba6 6808 	umull	r6, r8, r6, r8
 8019d48:	19ad      	adds	r5, r5, r6
 8019d4a:	eb53 0308 	adcs.w	r3, r3, r8
 8019d4e:	f144 0400 	adc.w	r4, r4, #0
 8019d52:	684e      	ldr	r6, [r1, #4]
 8019d54:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019d58:	fba6 6808 	umull	r6, r8, r6, r8
 8019d5c:	19ad      	adds	r5, r5, r6
 8019d5e:	eb53 0308 	adcs.w	r3, r3, r8
 8019d62:	f144 0400 	adc.w	r4, r4, #0
 8019d66:	688e      	ldr	r6, [r1, #8]
 8019d68:	f8d0 8000 	ldr.w	r8, [r0]
 8019d6c:	fba6 6808 	umull	r6, r8, r6, r8
 8019d70:	19ad      	adds	r5, r5, r6
 8019d72:	eb53 0308 	adcs.w	r3, r3, r8
 8019d76:	f144 0400 	adc.w	r4, r4, #0
 8019d7a:	f8cc 5008 	str.w	r5, [ip, #8]
 8019d7e:	f04f 0500 	mov.w	r5, #0
 8019d82:	680e      	ldr	r6, [r1, #0]
 8019d84:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019d88:	fba6 6808 	umull	r6, r8, r6, r8
 8019d8c:	199b      	adds	r3, r3, r6
 8019d8e:	eb54 0408 	adcs.w	r4, r4, r8
 8019d92:	f145 0500 	adc.w	r5, r5, #0
 8019d96:	684e      	ldr	r6, [r1, #4]
 8019d98:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019d9c:	fba6 6808 	umull	r6, r8, r6, r8
 8019da0:	199b      	adds	r3, r3, r6
 8019da2:	eb54 0408 	adcs.w	r4, r4, r8
 8019da6:	f145 0500 	adc.w	r5, r5, #0
 8019daa:	688e      	ldr	r6, [r1, #8]
 8019dac:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019db0:	fba6 6808 	umull	r6, r8, r6, r8
 8019db4:	199b      	adds	r3, r3, r6
 8019db6:	eb54 0408 	adcs.w	r4, r4, r8
 8019dba:	f145 0500 	adc.w	r5, r5, #0
 8019dbe:	68ce      	ldr	r6, [r1, #12]
 8019dc0:	f8d0 8000 	ldr.w	r8, [r0]
 8019dc4:	fba6 6808 	umull	r6, r8, r6, r8
 8019dc8:	199b      	adds	r3, r3, r6
 8019dca:	eb54 0408 	adcs.w	r4, r4, r8
 8019dce:	f145 0500 	adc.w	r5, r5, #0
 8019dd2:	f8cc 300c 	str.w	r3, [ip, #12]
 8019dd6:	f04f 0300 	mov.w	r3, #0
 8019dda:	680e      	ldr	r6, [r1, #0]
 8019ddc:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8019de0:	fba6 6808 	umull	r6, r8, r6, r8
 8019de4:	19a4      	adds	r4, r4, r6
 8019de6:	eb55 0508 	adcs.w	r5, r5, r8
 8019dea:	f143 0300 	adc.w	r3, r3, #0
 8019dee:	684e      	ldr	r6, [r1, #4]
 8019df0:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019df4:	fba6 6808 	umull	r6, r8, r6, r8
 8019df8:	19a4      	adds	r4, r4, r6
 8019dfa:	eb55 0508 	adcs.w	r5, r5, r8
 8019dfe:	f143 0300 	adc.w	r3, r3, #0
 8019e02:	688e      	ldr	r6, [r1, #8]
 8019e04:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019e08:	fba6 6808 	umull	r6, r8, r6, r8
 8019e0c:	19a4      	adds	r4, r4, r6
 8019e0e:	eb55 0508 	adcs.w	r5, r5, r8
 8019e12:	f143 0300 	adc.w	r3, r3, #0
 8019e16:	68ce      	ldr	r6, [r1, #12]
 8019e18:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019e1c:	fba6 6808 	umull	r6, r8, r6, r8
 8019e20:	19a4      	adds	r4, r4, r6
 8019e22:	eb55 0508 	adcs.w	r5, r5, r8
 8019e26:	f143 0300 	adc.w	r3, r3, #0
 8019e2a:	690e      	ldr	r6, [r1, #16]
 8019e2c:	f8d0 8000 	ldr.w	r8, [r0]
 8019e30:	fba6 6808 	umull	r6, r8, r6, r8
 8019e34:	19a4      	adds	r4, r4, r6
 8019e36:	eb55 0508 	adcs.w	r5, r5, r8
 8019e3a:	f143 0300 	adc.w	r3, r3, #0
 8019e3e:	f8cc 4010 	str.w	r4, [ip, #16]
 8019e42:	f04f 0400 	mov.w	r4, #0
 8019e46:	680e      	ldr	r6, [r1, #0]
 8019e48:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8019e4c:	fba6 6808 	umull	r6, r8, r6, r8
 8019e50:	19ad      	adds	r5, r5, r6
 8019e52:	eb53 0308 	adcs.w	r3, r3, r8
 8019e56:	f144 0400 	adc.w	r4, r4, #0
 8019e5a:	684e      	ldr	r6, [r1, #4]
 8019e5c:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8019e60:	fba6 6808 	umull	r6, r8, r6, r8
 8019e64:	19ad      	adds	r5, r5, r6
 8019e66:	eb53 0308 	adcs.w	r3, r3, r8
 8019e6a:	f144 0400 	adc.w	r4, r4, #0
 8019e6e:	688e      	ldr	r6, [r1, #8]
 8019e70:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019e74:	fba6 6808 	umull	r6, r8, r6, r8
 8019e78:	19ad      	adds	r5, r5, r6
 8019e7a:	eb53 0308 	adcs.w	r3, r3, r8
 8019e7e:	f144 0400 	adc.w	r4, r4, #0
 8019e82:	68ce      	ldr	r6, [r1, #12]
 8019e84:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019e88:	fba6 6808 	umull	r6, r8, r6, r8
 8019e8c:	19ad      	adds	r5, r5, r6
 8019e8e:	eb53 0308 	adcs.w	r3, r3, r8
 8019e92:	f144 0400 	adc.w	r4, r4, #0
 8019e96:	690e      	ldr	r6, [r1, #16]
 8019e98:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019e9c:	fba6 6808 	umull	r6, r8, r6, r8
 8019ea0:	19ad      	adds	r5, r5, r6
 8019ea2:	eb53 0308 	adcs.w	r3, r3, r8
 8019ea6:	f144 0400 	adc.w	r4, r4, #0
 8019eaa:	694e      	ldr	r6, [r1, #20]
 8019eac:	f8d0 8000 	ldr.w	r8, [r0]
 8019eb0:	fba6 6808 	umull	r6, r8, r6, r8
 8019eb4:	19ad      	adds	r5, r5, r6
 8019eb6:	eb53 0308 	adcs.w	r3, r3, r8
 8019eba:	f144 0400 	adc.w	r4, r4, #0
 8019ebe:	f8cc 5014 	str.w	r5, [ip, #20]
 8019ec2:	f04f 0500 	mov.w	r5, #0
 8019ec6:	680e      	ldr	r6, [r1, #0]
 8019ec8:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8019ecc:	fba6 6808 	umull	r6, r8, r6, r8
 8019ed0:	199b      	adds	r3, r3, r6
 8019ed2:	eb54 0408 	adcs.w	r4, r4, r8
 8019ed6:	f145 0500 	adc.w	r5, r5, #0
 8019eda:	684e      	ldr	r6, [r1, #4]
 8019edc:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8019ee0:	fba6 6808 	umull	r6, r8, r6, r8
 8019ee4:	199b      	adds	r3, r3, r6
 8019ee6:	eb54 0408 	adcs.w	r4, r4, r8
 8019eea:	f145 0500 	adc.w	r5, r5, #0
 8019eee:	688e      	ldr	r6, [r1, #8]
 8019ef0:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8019ef4:	fba6 6808 	umull	r6, r8, r6, r8
 8019ef8:	199b      	adds	r3, r3, r6
 8019efa:	eb54 0408 	adcs.w	r4, r4, r8
 8019efe:	f145 0500 	adc.w	r5, r5, #0
 8019f02:	68ce      	ldr	r6, [r1, #12]
 8019f04:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019f08:	fba6 6808 	umull	r6, r8, r6, r8
 8019f0c:	199b      	adds	r3, r3, r6
 8019f0e:	eb54 0408 	adcs.w	r4, r4, r8
 8019f12:	f145 0500 	adc.w	r5, r5, #0
 8019f16:	690e      	ldr	r6, [r1, #16]
 8019f18:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019f1c:	fba6 6808 	umull	r6, r8, r6, r8
 8019f20:	199b      	adds	r3, r3, r6
 8019f22:	eb54 0408 	adcs.w	r4, r4, r8
 8019f26:	f145 0500 	adc.w	r5, r5, #0
 8019f2a:	694e      	ldr	r6, [r1, #20]
 8019f2c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019f30:	fba6 6808 	umull	r6, r8, r6, r8
 8019f34:	199b      	adds	r3, r3, r6
 8019f36:	eb54 0408 	adcs.w	r4, r4, r8
 8019f3a:	f145 0500 	adc.w	r5, r5, #0
 8019f3e:	698e      	ldr	r6, [r1, #24]
 8019f40:	f8d0 8000 	ldr.w	r8, [r0]
 8019f44:	fba6 6808 	umull	r6, r8, r6, r8
 8019f48:	199b      	adds	r3, r3, r6
 8019f4a:	eb54 0408 	adcs.w	r4, r4, r8
 8019f4e:	f145 0500 	adc.w	r5, r5, #0
 8019f52:	f8cc 3018 	str.w	r3, [ip, #24]
 8019f56:	f04f 0300 	mov.w	r3, #0
 8019f5a:	680e      	ldr	r6, [r1, #0]
 8019f5c:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8019f60:	fba6 6808 	umull	r6, r8, r6, r8
 8019f64:	19a4      	adds	r4, r4, r6
 8019f66:	eb55 0508 	adcs.w	r5, r5, r8
 8019f6a:	f143 0300 	adc.w	r3, r3, #0
 8019f6e:	684e      	ldr	r6, [r1, #4]
 8019f70:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8019f74:	fba6 6808 	umull	r6, r8, r6, r8
 8019f78:	19a4      	adds	r4, r4, r6
 8019f7a:	eb55 0508 	adcs.w	r5, r5, r8
 8019f7e:	f143 0300 	adc.w	r3, r3, #0
 8019f82:	688e      	ldr	r6, [r1, #8]
 8019f84:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8019f88:	fba6 6808 	umull	r6, r8, r6, r8
 8019f8c:	19a4      	adds	r4, r4, r6
 8019f8e:	eb55 0508 	adcs.w	r5, r5, r8
 8019f92:	f143 0300 	adc.w	r3, r3, #0
 8019f96:	68ce      	ldr	r6, [r1, #12]
 8019f98:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8019f9c:	fba6 6808 	umull	r6, r8, r6, r8
 8019fa0:	19a4      	adds	r4, r4, r6
 8019fa2:	eb55 0508 	adcs.w	r5, r5, r8
 8019fa6:	f143 0300 	adc.w	r3, r3, #0
 8019faa:	690e      	ldr	r6, [r1, #16]
 8019fac:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019fb0:	fba6 6808 	umull	r6, r8, r6, r8
 8019fb4:	19a4      	adds	r4, r4, r6
 8019fb6:	eb55 0508 	adcs.w	r5, r5, r8
 8019fba:	f143 0300 	adc.w	r3, r3, #0
 8019fbe:	694e      	ldr	r6, [r1, #20]
 8019fc0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019fc4:	fba6 6808 	umull	r6, r8, r6, r8
 8019fc8:	19a4      	adds	r4, r4, r6
 8019fca:	eb55 0508 	adcs.w	r5, r5, r8
 8019fce:	f143 0300 	adc.w	r3, r3, #0
 8019fd2:	698e      	ldr	r6, [r1, #24]
 8019fd4:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019fd8:	fba6 6808 	umull	r6, r8, r6, r8
 8019fdc:	19a4      	adds	r4, r4, r6
 8019fde:	eb55 0508 	adcs.w	r5, r5, r8
 8019fe2:	f143 0300 	adc.w	r3, r3, #0
 8019fe6:	69ce      	ldr	r6, [r1, #28]
 8019fe8:	f8d0 8000 	ldr.w	r8, [r0]
 8019fec:	fba6 6808 	umull	r6, r8, r6, r8
 8019ff0:	19a4      	adds	r4, r4, r6
 8019ff2:	eb55 0508 	adcs.w	r5, r5, r8
 8019ff6:	f143 0300 	adc.w	r3, r3, #0
 8019ffa:	f8cc 401c 	str.w	r4, [ip, #28]
 8019ffe:	f04f 0400 	mov.w	r4, #0
 801a002:	684e      	ldr	r6, [r1, #4]
 801a004:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801a008:	fba6 6808 	umull	r6, r8, r6, r8
 801a00c:	19ad      	adds	r5, r5, r6
 801a00e:	eb53 0308 	adcs.w	r3, r3, r8
 801a012:	f144 0400 	adc.w	r4, r4, #0
 801a016:	688e      	ldr	r6, [r1, #8]
 801a018:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801a01c:	fba6 6808 	umull	r6, r8, r6, r8
 801a020:	19ad      	adds	r5, r5, r6
 801a022:	eb53 0308 	adcs.w	r3, r3, r8
 801a026:	f144 0400 	adc.w	r4, r4, #0
 801a02a:	68ce      	ldr	r6, [r1, #12]
 801a02c:	f8d0 8014 	ldr.w	r8, [r0, #20]
 801a030:	fba6 6808 	umull	r6, r8, r6, r8
 801a034:	19ad      	adds	r5, r5, r6
 801a036:	eb53 0308 	adcs.w	r3, r3, r8
 801a03a:	f144 0400 	adc.w	r4, r4, #0
 801a03e:	690e      	ldr	r6, [r1, #16]
 801a040:	f8d0 8010 	ldr.w	r8, [r0, #16]
 801a044:	fba6 6808 	umull	r6, r8, r6, r8
 801a048:	19ad      	adds	r5, r5, r6
 801a04a:	eb53 0308 	adcs.w	r3, r3, r8
 801a04e:	f144 0400 	adc.w	r4, r4, #0
 801a052:	694e      	ldr	r6, [r1, #20]
 801a054:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801a058:	fba6 6808 	umull	r6, r8, r6, r8
 801a05c:	19ad      	adds	r5, r5, r6
 801a05e:	eb53 0308 	adcs.w	r3, r3, r8
 801a062:	f144 0400 	adc.w	r4, r4, #0
 801a066:	698e      	ldr	r6, [r1, #24]
 801a068:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a06c:	fba6 6808 	umull	r6, r8, r6, r8
 801a070:	19ad      	adds	r5, r5, r6
 801a072:	eb53 0308 	adcs.w	r3, r3, r8
 801a076:	f144 0400 	adc.w	r4, r4, #0
 801a07a:	69ce      	ldr	r6, [r1, #28]
 801a07c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a080:	fba6 6808 	umull	r6, r8, r6, r8
 801a084:	19ad      	adds	r5, r5, r6
 801a086:	eb53 0308 	adcs.w	r3, r3, r8
 801a08a:	f144 0400 	adc.w	r4, r4, #0
 801a08e:	6215      	str	r5, [r2, #32]
 801a090:	f04f 0500 	mov.w	r5, #0
 801a094:	688e      	ldr	r6, [r1, #8]
 801a096:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801a09a:	fba6 6808 	umull	r6, r8, r6, r8
 801a09e:	199b      	adds	r3, r3, r6
 801a0a0:	eb54 0408 	adcs.w	r4, r4, r8
 801a0a4:	f145 0500 	adc.w	r5, r5, #0
 801a0a8:	68ce      	ldr	r6, [r1, #12]
 801a0aa:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801a0ae:	fba6 6808 	umull	r6, r8, r6, r8
 801a0b2:	199b      	adds	r3, r3, r6
 801a0b4:	eb54 0408 	adcs.w	r4, r4, r8
 801a0b8:	f145 0500 	adc.w	r5, r5, #0
 801a0bc:	690e      	ldr	r6, [r1, #16]
 801a0be:	f8d0 8014 	ldr.w	r8, [r0, #20]
 801a0c2:	fba6 6808 	umull	r6, r8, r6, r8
 801a0c6:	199b      	adds	r3, r3, r6
 801a0c8:	eb54 0408 	adcs.w	r4, r4, r8
 801a0cc:	f145 0500 	adc.w	r5, r5, #0
 801a0d0:	694e      	ldr	r6, [r1, #20]
 801a0d2:	f8d0 8010 	ldr.w	r8, [r0, #16]
 801a0d6:	fba6 6808 	umull	r6, r8, r6, r8
 801a0da:	199b      	adds	r3, r3, r6
 801a0dc:	eb54 0408 	adcs.w	r4, r4, r8
 801a0e0:	f145 0500 	adc.w	r5, r5, #0
 801a0e4:	698e      	ldr	r6, [r1, #24]
 801a0e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801a0ea:	fba6 6808 	umull	r6, r8, r6, r8
 801a0ee:	199b      	adds	r3, r3, r6
 801a0f0:	eb54 0408 	adcs.w	r4, r4, r8
 801a0f4:	f145 0500 	adc.w	r5, r5, #0
 801a0f8:	69ce      	ldr	r6, [r1, #28]
 801a0fa:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a0fe:	fba6 6808 	umull	r6, r8, r6, r8
 801a102:	199b      	adds	r3, r3, r6
 801a104:	eb54 0408 	adcs.w	r4, r4, r8
 801a108:	f145 0500 	adc.w	r5, r5, #0
 801a10c:	6253      	str	r3, [r2, #36]	; 0x24
 801a10e:	f04f 0300 	mov.w	r3, #0
 801a112:	68ce      	ldr	r6, [r1, #12]
 801a114:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801a118:	fba6 6808 	umull	r6, r8, r6, r8
 801a11c:	19a4      	adds	r4, r4, r6
 801a11e:	eb55 0508 	adcs.w	r5, r5, r8
 801a122:	f143 0300 	adc.w	r3, r3, #0
 801a126:	690e      	ldr	r6, [r1, #16]
 801a128:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801a12c:	fba6 6808 	umull	r6, r8, r6, r8
 801a130:	19a4      	adds	r4, r4, r6
 801a132:	eb55 0508 	adcs.w	r5, r5, r8
 801a136:	f143 0300 	adc.w	r3, r3, #0
 801a13a:	694e      	ldr	r6, [r1, #20]
 801a13c:	f8d0 8014 	ldr.w	r8, [r0, #20]
 801a140:	fba6 6808 	umull	r6, r8, r6, r8
 801a144:	19a4      	adds	r4, r4, r6
 801a146:	eb55 0508 	adcs.w	r5, r5, r8
 801a14a:	f143 0300 	adc.w	r3, r3, #0
 801a14e:	698e      	ldr	r6, [r1, #24]
 801a150:	f8d0 8010 	ldr.w	r8, [r0, #16]
 801a154:	fba6 6808 	umull	r6, r8, r6, r8
 801a158:	19a4      	adds	r4, r4, r6
 801a15a:	eb55 0508 	adcs.w	r5, r5, r8
 801a15e:	f143 0300 	adc.w	r3, r3, #0
 801a162:	69ce      	ldr	r6, [r1, #28]
 801a164:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801a168:	fba6 6808 	umull	r6, r8, r6, r8
 801a16c:	19a4      	adds	r4, r4, r6
 801a16e:	eb55 0508 	adcs.w	r5, r5, r8
 801a172:	f143 0300 	adc.w	r3, r3, #0
 801a176:	6294      	str	r4, [r2, #40]	; 0x28
 801a178:	f04f 0400 	mov.w	r4, #0
 801a17c:	690e      	ldr	r6, [r1, #16]
 801a17e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801a182:	fba6 6808 	umull	r6, r8, r6, r8
 801a186:	19ad      	adds	r5, r5, r6
 801a188:	eb53 0308 	adcs.w	r3, r3, r8
 801a18c:	f144 0400 	adc.w	r4, r4, #0
 801a190:	694e      	ldr	r6, [r1, #20]
 801a192:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801a196:	fba6 6808 	umull	r6, r8, r6, r8
 801a19a:	19ad      	adds	r5, r5, r6
 801a19c:	eb53 0308 	adcs.w	r3, r3, r8
 801a1a0:	f144 0400 	adc.w	r4, r4, #0
 801a1a4:	698e      	ldr	r6, [r1, #24]
 801a1a6:	f8d0 8014 	ldr.w	r8, [r0, #20]
 801a1aa:	fba6 6808 	umull	r6, r8, r6, r8
 801a1ae:	19ad      	adds	r5, r5, r6
 801a1b0:	eb53 0308 	adcs.w	r3, r3, r8
 801a1b4:	f144 0400 	adc.w	r4, r4, #0
 801a1b8:	69ce      	ldr	r6, [r1, #28]
 801a1ba:	f8d0 8010 	ldr.w	r8, [r0, #16]
 801a1be:	fba6 6808 	umull	r6, r8, r6, r8
 801a1c2:	19ad      	adds	r5, r5, r6
 801a1c4:	eb53 0308 	adcs.w	r3, r3, r8
 801a1c8:	f144 0400 	adc.w	r4, r4, #0
 801a1cc:	62d5      	str	r5, [r2, #44]	; 0x2c
 801a1ce:	f04f 0500 	mov.w	r5, #0
 801a1d2:	694e      	ldr	r6, [r1, #20]
 801a1d4:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801a1d8:	fba6 6808 	umull	r6, r8, r6, r8
 801a1dc:	199b      	adds	r3, r3, r6
 801a1de:	eb54 0408 	adcs.w	r4, r4, r8
 801a1e2:	f145 0500 	adc.w	r5, r5, #0
 801a1e6:	698e      	ldr	r6, [r1, #24]
 801a1e8:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801a1ec:	fba6 6808 	umull	r6, r8, r6, r8
 801a1f0:	199b      	adds	r3, r3, r6
 801a1f2:	eb54 0408 	adcs.w	r4, r4, r8
 801a1f6:	f145 0500 	adc.w	r5, r5, #0
 801a1fa:	69ce      	ldr	r6, [r1, #28]
 801a1fc:	f8d0 8014 	ldr.w	r8, [r0, #20]
 801a200:	fba6 6808 	umull	r6, r8, r6, r8
 801a204:	199b      	adds	r3, r3, r6
 801a206:	eb54 0408 	adcs.w	r4, r4, r8
 801a20a:	f145 0500 	adc.w	r5, r5, #0
 801a20e:	6313      	str	r3, [r2, #48]	; 0x30
 801a210:	f04f 0300 	mov.w	r3, #0
 801a214:	698e      	ldr	r6, [r1, #24]
 801a216:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801a21a:	fba6 6808 	umull	r6, r8, r6, r8
 801a21e:	19a4      	adds	r4, r4, r6
 801a220:	eb55 0508 	adcs.w	r5, r5, r8
 801a224:	f143 0300 	adc.w	r3, r3, #0
 801a228:	69ce      	ldr	r6, [r1, #28]
 801a22a:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801a22e:	fba6 6808 	umull	r6, r8, r6, r8
 801a232:	19a4      	adds	r4, r4, r6
 801a234:	eb55 0508 	adcs.w	r5, r5, r8
 801a238:	f143 0300 	adc.w	r3, r3, #0
 801a23c:	6354      	str	r4, [r2, #52]	; 0x34
 801a23e:	f04f 0400 	mov.w	r4, #0
 801a242:	69ce      	ldr	r6, [r1, #28]
 801a244:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801a248:	fba6 6808 	umull	r6, r8, r6, r8
 801a24c:	19ad      	adds	r5, r5, r6
 801a24e:	eb43 0308 	adc.w	r3, r3, r8
 801a252:	6395      	str	r5, [r2, #56]	; 0x38
 801a254:	63d3      	str	r3, [r2, #60]	; 0x3c
 801a256:	f8dc 3000 	ldr.w	r3, [ip]
 801a25a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a25e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a262:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801a266:	6013      	str	r3, [r2, #0]
 801a268:	6054      	str	r4, [r2, #4]
 801a26a:	6095      	str	r5, [r2, #8]
 801a26c:	60d6      	str	r6, [r2, #12]
 801a26e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 801a272:	f8dc 4014 	ldr.w	r4, [ip, #20]
 801a276:	f8dc 5018 	ldr.w	r5, [ip, #24]
 801a27a:	f8dc 601c 	ldr.w	r6, [ip, #28]
 801a27e:	6113      	str	r3, [r2, #16]
 801a280:	6154      	str	r4, [r2, #20]
 801a282:	6195      	str	r5, [r2, #24]
 801a284:	61d6      	str	r6, [r2, #28]
        "str	r6, [%[r], #28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [tmp] "r" (tmp)
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );
}
 801a286:	bf00      	nop
 801a288:	373c      	adds	r7, #60	; 0x3c
 801a28a:	46bd      	mov	sp, r7
 801a28c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801a290:	4770      	bx	lr

0801a292 <sp_256_sub_in_place_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_sub_in_place_8(sp_digit* a,
        const sp_digit* b)
{
 801a292:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801a296:	b085      	sub	sp, #20
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
 801a29c:	6039      	str	r1, [r7, #0]
    sp_digit c = 0;
 801a29e:	2300      	movs	r3, #0
 801a2a0:	60fb      	str	r3, [r7, #12]
    __asm__ __volatile__ (
 801a2a2:	68f9      	ldr	r1, [r7, #12]
 801a2a4:	687a      	ldr	r2, [r7, #4]
 801a2a6:	683b      	ldr	r3, [r7, #0]
 801a2a8:	4608      	mov	r0, r1
 801a2aa:	4611      	mov	r1, r2
 801a2ac:	461a      	mov	r2, r3
 801a2ae:	4688      	mov	r8, r1
 801a2b0:	f108 0820 	add.w	r8, r8, #32
 801a2b4:	f04f 0500 	mov.w	r5, #0
 801a2b8:	1a2d      	subs	r5, r5, r0
 801a2ba:	680b      	ldr	r3, [r1, #0]
 801a2bc:	684c      	ldr	r4, [r1, #4]
 801a2be:	6815      	ldr	r5, [r2, #0]
 801a2c0:	6856      	ldr	r6, [r2, #4]
 801a2c2:	41ab      	sbcs	r3, r5
 801a2c4:	41b4      	sbcs	r4, r6
 801a2c6:	600b      	str	r3, [r1, #0]
 801a2c8:	604c      	str	r4, [r1, #4]
 801a2ca:	eb60 0000 	sbc.w	r0, r0, r0
 801a2ce:	f101 0108 	add.w	r1, r1, #8
 801a2d2:	f102 0208 	add.w	r2, r2, #8
 801a2d6:	4541      	cmp	r1, r8
 801a2d8:	d1ec      	bne.n	801a2b4 <sp_256_sub_in_place_8+0x22>
 801a2da:	60f8      	str	r0, [r7, #12]
 801a2dc:	6079      	str	r1, [r7, #4]
 801a2de:	603a      	str	r2, [r7, #0]
        : [c] "+r" (c), [a] "+r" (a), [b] "+r" (b)
        :
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );

    return c;
 801a2e0:	68fb      	ldr	r3, [r7, #12]
}
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	3714      	adds	r7, #20
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801a2ec:	4770      	bx	lr

0801a2ee <sp_256_mul_d_8>:
 * a  A single precision integer.
 * b  A single precision digit.
 */
SP_NOINLINE static void sp_256_mul_d_8(sp_digit* r, const sp_digit* a,
        sp_digit b)
{
 801a2ee:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801a2f2:	b084      	sub	sp, #16
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	60f8      	str	r0, [r7, #12]
 801a2f8:	60b9      	str	r1, [r7, #8]
 801a2fa:	607a      	str	r2, [r7, #4]
    __asm__ __volatile__ (
 801a2fc:	6878      	ldr	r0, [r7, #4]
 801a2fe:	68fa      	ldr	r2, [r7, #12]
 801a300:	68bb      	ldr	r3, [r7, #8]
 801a302:	4611      	mov	r1, r2
 801a304:	461a      	mov	r2, r3
 801a306:	f102 0920 	add.w	r9, r2, #32
 801a30a:	f852 6b04 	ldr.w	r6, [r2], #4
 801a30e:	fba6 5300 	umull	r5, r3, r6, r0
 801a312:	f04f 0400 	mov.w	r4, #0
 801a316:	f841 5b04 	str.w	r5, [r1], #4
 801a31a:	f04f 0500 	mov.w	r5, #0
 801a31e:	f852 6b04 	ldr.w	r6, [r2], #4
 801a322:	fba6 6800 	umull	r6, r8, r6, r0
 801a326:	199b      	adds	r3, r3, r6
 801a328:	eb54 0408 	adcs.w	r4, r4, r8
 801a32c:	f145 0500 	adc.w	r5, r5, #0
 801a330:	f841 3b04 	str.w	r3, [r1], #4
 801a334:	4623      	mov	r3, r4
 801a336:	462c      	mov	r4, r5
 801a338:	454a      	cmp	r2, r9
 801a33a:	dbee      	blt.n	801a31a <sp_256_mul_d_8+0x2c>
 801a33c:	600b      	str	r3, [r1, #0]
 801a33e:	60f9      	str	r1, [r7, #12]
 801a340:	60ba      	str	r2, [r7, #8]
        "str	r3, [%[r]]\n\t"
        : [r] "+r" (r), [a] "+r" (a)
        : [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9"
    );
}
 801a342:	bf00      	nop
 801a344:	3710      	adds	r7, #16
 801a346:	46bd      	mov	sp, r7
 801a348:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801a34c:	4770      	bx	lr

0801a34e <div_256_word_8>:
 *
 * Note that this is an approximate div. It may give an answer 1 larger.
 */
SP_NOINLINE static sp_digit div_256_word_8(sp_digit d1, sp_digit d0,
        sp_digit div)
{
 801a34e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801a352:	b087      	sub	sp, #28
 801a354:	af00      	add	r7, sp, #0
 801a356:	60f8      	str	r0, [r7, #12]
 801a358:	60b9      	str	r1, [r7, #8]
 801a35a:	607a      	str	r2, [r7, #4]
    sp_digit r = 0;
 801a35c:	2300      	movs	r3, #0
 801a35e:	617b      	str	r3, [r7, #20]

    __asm__ __volatile__ (
 801a360:	68fa      	ldr	r2, [r7, #12]
 801a362:	68b9      	ldr	r1, [r7, #8]
 801a364:	6878      	ldr	r0, [r7, #4]
 801a366:	697b      	ldr	r3, [r7, #20]
 801a368:	ea4f 4610 	mov.w	r6, r0, lsr #16
 801a36c:	f106 0601 	add.w	r6, r6, #1
 801a370:	fbb2 f4f6 	udiv	r4, r2, r6
 801a374:	ea4f 4804 	mov.w	r8, r4, lsl #16
 801a378:	fba0 4508 	umull	r4, r5, r0, r8
 801a37c:	1b09      	subs	r1, r1, r4
 801a37e:	eb62 0205 	sbc.w	r2, r2, r5
 801a382:	fbb2 f5f6 	udiv	r5, r2, r6
 801a386:	ea4f 4405 	mov.w	r4, r5, lsl #16
 801a38a:	44a0      	add	r8, r4
 801a38c:	fba0 4504 	umull	r4, r5, r0, r4
 801a390:	1b09      	subs	r1, r1, r4
 801a392:	eb62 0205 	sbc.w	r2, r2, r5
 801a396:	ea4f 4402 	mov.w	r4, r2, lsl #16
 801a39a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 801a39e:	fbb4 f4f6 	udiv	r4, r4, r6
 801a3a2:	44a0      	add	r8, r4
 801a3a4:	fba0 4504 	umull	r4, r5, r0, r4
 801a3a8:	1b09      	subs	r1, r1, r4
 801a3aa:	eb62 0205 	sbc.w	r2, r2, r5
 801a3ae:	ea4f 4402 	mov.w	r4, r2, lsl #16
 801a3b2:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 801a3b6:	fbb4 f4f6 	udiv	r4, r4, r6
 801a3ba:	44a0      	add	r8, r4
 801a3bc:	fba0 4504 	umull	r4, r5, r0, r4
 801a3c0:	1b09      	subs	r1, r1, r4
 801a3c2:	eb62 0205 	sbc.w	r2, r2, r5
 801a3c6:	fbb1 f4f0 	udiv	r4, r1, r0
 801a3ca:	44a0      	add	r8, r4
 801a3cc:	4643      	mov	r3, r8
 801a3ce:	617b      	str	r3, [r7, #20]
        "mov	%[r], r8\n\t"
        : [r] "+r" (r)
        : [d1] "r" (d1), [d0] "r" (d0), [div] "r" (div)
        : "r4", "r5", "r6", "r8"
    );
    return r;
 801a3d0:	697b      	ldr	r3, [r7, #20]
}
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	371c      	adds	r7, #28
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801a3dc:	4770      	bx	lr

0801a3de <sp_256_mask_8>:
 * r  A single precision integer.
 * a  A single precision integer.
 * m  Mask to AND against each digit.
 */
static void sp_256_mask_8(sp_digit* r, const sp_digit* a, sp_digit m)
{
 801a3de:	b480      	push	{r7}
 801a3e0:	b087      	sub	sp, #28
 801a3e2:	af00      	add	r7, sp, #0
 801a3e4:	60f8      	str	r0, [r7, #12]
 801a3e6:	60b9      	str	r1, [r7, #8]
 801a3e8:	607a      	str	r2, [r7, #4]
#ifdef WOLFSSL_SP_SMALL
    int i;

    for (i=0; i<8; i++) {
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	617b      	str	r3, [r7, #20]
 801a3ee:	e00e      	b.n	801a40e <sp_256_mask_8+0x30>
        r[i] = a[i] & m;
 801a3f0:	697b      	ldr	r3, [r7, #20]
 801a3f2:	009b      	lsls	r3, r3, #2
 801a3f4:	68ba      	ldr	r2, [r7, #8]
 801a3f6:	4413      	add	r3, r2
 801a3f8:	6819      	ldr	r1, [r3, #0]
 801a3fa:	697b      	ldr	r3, [r7, #20]
 801a3fc:	009b      	lsls	r3, r3, #2
 801a3fe:	68fa      	ldr	r2, [r7, #12]
 801a400:	4413      	add	r3, r2
 801a402:	687a      	ldr	r2, [r7, #4]
 801a404:	400a      	ands	r2, r1
 801a406:	601a      	str	r2, [r3, #0]
    for (i=0; i<8; i++) {
 801a408:	697b      	ldr	r3, [r7, #20]
 801a40a:	3301      	adds	r3, #1
 801a40c:	617b      	str	r3, [r7, #20]
 801a40e:	697b      	ldr	r3, [r7, #20]
 801a410:	2b07      	cmp	r3, #7
 801a412:	dded      	ble.n	801a3f0 <sp_256_mask_8+0x12>
    r[4] = a[4] & m;
    r[5] = a[5] & m;
    r[6] = a[6] & m;
    r[7] = a[7] & m;
#endif
}
 801a414:	bf00      	nop
 801a416:	371c      	adds	r7, #28
 801a418:	46bd      	mov	sp, r7
 801a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a41e:	4770      	bx	lr

0801a420 <sp_256_div_8>:
 * r  Remainder from the division.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_256_div_8(const sp_digit* a, const sp_digit* d, sp_digit* m,
        sp_digit* r)
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b0a2      	sub	sp, #136	; 0x88
 801a424:	af00      	add	r7, sp, #0
 801a426:	60f8      	str	r0, [r7, #12]
 801a428:	60b9      	str	r1, [r7, #8]
 801a42a:	607a      	str	r2, [r7, #4]
 801a42c:	603b      	str	r3, [r7, #0]
    sp_digit div, r1;
    int i;

    (void)m;

    div = d[7];
 801a42e:	68bb      	ldr	r3, [r7, #8]
 801a430:	69db      	ldr	r3, [r3, #28]
 801a432:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    XMEMCPY(t1, a, sizeof(*t1) * 2 * 8);
 801a436:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a43a:	2240      	movs	r2, #64	; 0x40
 801a43c:	68f9      	ldr	r1, [r7, #12]
 801a43e:	4618      	mov	r0, r3
 801a440:	f001 fae7 	bl	801ba12 <memcpy>
    for (i=7; i>=0; i--) {
 801a444:	2307      	movs	r3, #7
 801a446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801a44a:	e0d2      	b.n	801a5f2 <sp_256_div_8+0x1d2>
        sp_digit hi = t1[8 + i] - (t1[8 + i] == div);
 801a44c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a450:	3308      	adds	r3, #8
 801a452:	009b      	lsls	r3, r3, #2
 801a454:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a458:	4413      	add	r3, r2
 801a45a:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801a45e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a462:	3308      	adds	r3, #8
 801a464:	009b      	lsls	r3, r3, #2
 801a466:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a46a:	440b      	add	r3, r1
 801a46c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 801a470:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801a474:	4299      	cmp	r1, r3
 801a476:	bf0c      	ite	eq
 801a478:	2301      	moveq	r3, #1
 801a47a:	2300      	movne	r3, #0
 801a47c:	b2db      	uxtb	r3, r3
 801a47e:	1ad3      	subs	r3, r2, r3
 801a480:	67bb      	str	r3, [r7, #120]	; 0x78
        r1 = div_256_word_8(hi, t1[8 + i - 1], div);
 801a482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a486:	3307      	adds	r3, #7
 801a488:	009b      	lsls	r3, r3, #2
 801a48a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a48e:	4413      	add	r3, r2
 801a490:	f853 3c50 	ldr.w	r3, [r3, #-80]
 801a494:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801a498:	4619      	mov	r1, r3
 801a49a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801a49c:	f7ff ff57 	bl	801a34e <div_256_word_8>
 801a4a0:	67f8      	str	r0, [r7, #124]	; 0x7c

        sp_256_mul_d_8(t2, d, r1);
 801a4a2:	f107 0314 	add.w	r3, r7, #20
 801a4a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801a4a8:	68b9      	ldr	r1, [r7, #8]
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	f7ff ff1f 	bl	801a2ee <sp_256_mul_d_8>
        t1[8 + i] += sp_256_sub_in_place_8(&t1[i], t2);
 801a4b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a4b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a4b8:	009b      	lsls	r3, r3, #2
 801a4ba:	4413      	add	r3, r2
 801a4bc:	f107 0214 	add.w	r2, r7, #20
 801a4c0:	4611      	mov	r1, r2
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	f7ff fee5 	bl	801a292 <sp_256_sub_in_place_8>
 801a4c8:	4601      	mov	r1, r0
 801a4ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a4ce:	3308      	adds	r3, #8
 801a4d0:	009b      	lsls	r3, r3, #2
 801a4d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a4d6:	4413      	add	r3, r2
 801a4d8:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801a4dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a4e0:	3308      	adds	r3, #8
 801a4e2:	440a      	add	r2, r1
 801a4e4:	009b      	lsls	r3, r3, #2
 801a4e6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a4ea:	440b      	add	r3, r1
 801a4ec:	f843 2c50 	str.w	r2, [r3, #-80]
        t1[8 + i] -= t2[8];
 801a4f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a4f4:	3308      	adds	r3, #8
 801a4f6:	009b      	lsls	r3, r3, #2
 801a4f8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a4fc:	4413      	add	r3, r2
 801a4fe:	f853 1c50 	ldr.w	r1, [r3, #-80]
 801a502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a508:	3308      	adds	r3, #8
 801a50a:	1a8a      	subs	r2, r1, r2
 801a50c:	009b      	lsls	r3, r3, #2
 801a50e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a512:	440b      	add	r3, r1
 801a514:	f843 2c50 	str.w	r2, [r3, #-80]
        sp_256_mask_8(t2, d, t1[8 + i]);
 801a518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a51c:	3308      	adds	r3, #8
 801a51e:	009b      	lsls	r3, r3, #2
 801a520:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a524:	4413      	add	r3, r2
 801a526:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801a52a:	f107 0314 	add.w	r3, r7, #20
 801a52e:	68b9      	ldr	r1, [r7, #8]
 801a530:	4618      	mov	r0, r3
 801a532:	f7ff ff54 	bl	801a3de <sp_256_mask_8>
        t1[8 + i] += sp_256_add_8(&t1[i], &t1[i], t2);
 801a536:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a53a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a53e:	009b      	lsls	r3, r3, #2
 801a540:	18d0      	adds	r0, r2, r3
 801a542:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a546:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a54a:	009b      	lsls	r3, r3, #2
 801a54c:	4413      	add	r3, r2
 801a54e:	f107 0214 	add.w	r2, r7, #20
 801a552:	4619      	mov	r1, r3
 801a554:	f7fd fe20 	bl	8018198 <sp_256_add_8>
 801a558:	4601      	mov	r1, r0
 801a55a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a55e:	3308      	adds	r3, #8
 801a560:	009b      	lsls	r3, r3, #2
 801a562:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a566:	4413      	add	r3, r2
 801a568:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801a56c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a570:	3308      	adds	r3, #8
 801a572:	440a      	add	r2, r1
 801a574:	009b      	lsls	r3, r3, #2
 801a576:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a57a:	440b      	add	r3, r1
 801a57c:	f843 2c50 	str.w	r2, [r3, #-80]
        sp_256_mask_8(t2, d, t1[8 + i]);
 801a580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a584:	3308      	adds	r3, #8
 801a586:	009b      	lsls	r3, r3, #2
 801a588:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a58c:	4413      	add	r3, r2
 801a58e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801a592:	f107 0314 	add.w	r3, r7, #20
 801a596:	68b9      	ldr	r1, [r7, #8]
 801a598:	4618      	mov	r0, r3
 801a59a:	f7ff ff20 	bl	801a3de <sp_256_mask_8>
        t1[8 + i] += sp_256_add_8(&t1[i], &t1[i], t2);
 801a59e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a5a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a5a6:	009b      	lsls	r3, r3, #2
 801a5a8:	18d0      	adds	r0, r2, r3
 801a5aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a5ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a5b2:	009b      	lsls	r3, r3, #2
 801a5b4:	4413      	add	r3, r2
 801a5b6:	f107 0214 	add.w	r2, r7, #20
 801a5ba:	4619      	mov	r1, r3
 801a5bc:	f7fd fdec 	bl	8018198 <sp_256_add_8>
 801a5c0:	4601      	mov	r1, r0
 801a5c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a5c6:	3308      	adds	r3, #8
 801a5c8:	009b      	lsls	r3, r3, #2
 801a5ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a5ce:	4413      	add	r3, r2
 801a5d0:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801a5d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a5d8:	3308      	adds	r3, #8
 801a5da:	440a      	add	r2, r1
 801a5dc:	009b      	lsls	r3, r3, #2
 801a5de:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a5e2:	440b      	add	r3, r1
 801a5e4:	f843 2c50 	str.w	r2, [r3, #-80]
    for (i=7; i>=0; i--) {
 801a5e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a5ec:	3b01      	subs	r3, #1
 801a5ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801a5f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	f6bf af28 	bge.w	801a44c <sp_256_div_8+0x2c>
    }

    r1 = sp_256_cmp_8(t1, d) >= 0;
 801a5fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a600:	68b9      	ldr	r1, [r7, #8]
 801a602:	4618      	mov	r0, r3
 801a604:	f7fd fbca 	bl	8017d9c <sp_256_cmp_8>
 801a608:	4603      	mov	r3, r0
 801a60a:	43db      	mvns	r3, r3
 801a60c:	0fdb      	lsrs	r3, r3, #31
 801a60e:	b2db      	uxtb	r3, r3
 801a610:	67fb      	str	r3, [r7, #124]	; 0x7c
    sp_256_cond_sub_8(r, t1, d, (sp_digit)0 - r1);
 801a612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a614:	425b      	negs	r3, r3
 801a616:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801a61a:	68ba      	ldr	r2, [r7, #8]
 801a61c:	6838      	ldr	r0, [r7, #0]
 801a61e:	f7fd fbf5 	bl	8017e0c <sp_256_cond_sub_8>

    return MP_OKAY;
 801a622:	2300      	movs	r3, #0
}
 801a624:	4618      	mov	r0, r3
 801a626:	3788      	adds	r7, #136	; 0x88
 801a628:	46bd      	mov	sp, r7
 801a62a:	bd80      	pop	{r7, pc}

0801a62c <sp_256_mod_8>:
 * a  A single precision number that is to be reduced.
 * m  A single precision number that is the modulus to reduce with.
 * returns MP_OKAY indicating success.
 */
static WC_INLINE int sp_256_mod_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 801a62c:	b580      	push	{r7, lr}
 801a62e:	b084      	sub	sp, #16
 801a630:	af00      	add	r7, sp, #0
 801a632:	60f8      	str	r0, [r7, #12]
 801a634:	60b9      	str	r1, [r7, #8]
 801a636:	607a      	str	r2, [r7, #4]
    return sp_256_div_8(a, m, NULL, r);
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	2200      	movs	r2, #0
 801a63c:	6879      	ldr	r1, [r7, #4]
 801a63e:	68b8      	ldr	r0, [r7, #8]
 801a640:	f7ff feee 	bl	801a420 <sp_256_div_8>
 801a644:	4603      	mov	r3, r0
}
 801a646:	4618      	mov	r0, r3
 801a648:	3710      	adds	r7, #16
 801a64a:	46bd      	mov	sp, r7
 801a64c:	bd80      	pop	{r7, pc}

0801a64e <sp_256_sqr_8>:
 *
 * r  A single precision integer.
 * a  A single precision integer.
 */
SP_NOINLINE static void sp_256_sqr_8(sp_digit* r, const sp_digit* a)
{
 801a64e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801a652:	b08c      	sub	sp, #48	; 0x30
 801a654:	af00      	add	r7, sp, #0
 801a656:	6078      	str	r0, [r7, #4]
 801a658:	6039      	str	r1, [r7, #0]
    sp_digit tmp_arr[8];
    sp_digit* tmp = tmp_arr;
 801a65a:	f107 030c 	add.w	r3, r7, #12
 801a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ __volatile__ (
 801a660:	687a      	ldr	r2, [r7, #4]
 801a662:	6839      	ldr	r1, [r7, #0]
 801a664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a666:	680e      	ldr	r6, [r1, #0]
 801a668:	fba6 3406 	umull	r3, r4, r6, r6
 801a66c:	f04f 0500 	mov.w	r5, #0
 801a670:	6003      	str	r3, [r0, #0]
 801a672:	f04f 0300 	mov.w	r3, #0
 801a676:	f8d1 8004 	ldr.w	r8, [r1, #4]
 801a67a:	fba6 6808 	umull	r6, r8, r6, r8
 801a67e:	19a4      	adds	r4, r4, r6
 801a680:	eb45 0508 	adc.w	r5, r5, r8
 801a684:	19a4      	adds	r4, r4, r6
 801a686:	eb55 0508 	adcs.w	r5, r5, r8
 801a68a:	f143 0300 	adc.w	r3, r3, #0
 801a68e:	6044      	str	r4, [r0, #4]
 801a690:	f04f 0400 	mov.w	r4, #0
 801a694:	680e      	ldr	r6, [r1, #0]
 801a696:	f8d1 8008 	ldr.w	r8, [r1, #8]
 801a69a:	fba6 6808 	umull	r6, r8, r6, r8
 801a69e:	19ad      	adds	r5, r5, r6
 801a6a0:	eb43 0308 	adc.w	r3, r3, r8
 801a6a4:	19ad      	adds	r5, r5, r6
 801a6a6:	eb53 0308 	adcs.w	r3, r3, r8
 801a6aa:	f144 0400 	adc.w	r4, r4, #0
 801a6ae:	684e      	ldr	r6, [r1, #4]
 801a6b0:	fba6 6806 	umull	r6, r8, r6, r6
 801a6b4:	19ad      	adds	r5, r5, r6
 801a6b6:	eb53 0308 	adcs.w	r3, r3, r8
 801a6ba:	f144 0400 	adc.w	r4, r4, #0
 801a6be:	6085      	str	r5, [r0, #8]
 801a6c0:	f04f 0500 	mov.w	r5, #0
 801a6c4:	680e      	ldr	r6, [r1, #0]
 801a6c6:	f8d1 800c 	ldr.w	r8, [r1, #12]
 801a6ca:	fba6 9a08 	umull	r9, sl, r6, r8
 801a6ce:	f04f 0b00 	mov.w	fp, #0
 801a6d2:	684e      	ldr	r6, [r1, #4]
 801a6d4:	f8d1 8008 	ldr.w	r8, [r1, #8]
 801a6d8:	fba6 6808 	umull	r6, r8, r6, r8
 801a6dc:	eb19 0906 	adds.w	r9, r9, r6
 801a6e0:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a6e4:	f14b 0b00 	adc.w	fp, fp, #0
 801a6e8:	eb19 0909 	adds.w	r9, r9, r9
 801a6ec:	eb5a 0a0a 	adcs.w	sl, sl, sl
 801a6f0:	eb4b 0b0b 	adc.w	fp, fp, fp
 801a6f4:	eb13 0309 	adds.w	r3, r3, r9
 801a6f8:	eb54 040a 	adcs.w	r4, r4, sl
 801a6fc:	eb45 050b 	adc.w	r5, r5, fp
 801a700:	60c3      	str	r3, [r0, #12]
 801a702:	f04f 0300 	mov.w	r3, #0
 801a706:	680e      	ldr	r6, [r1, #0]
 801a708:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801a70c:	fba6 9a08 	umull	r9, sl, r6, r8
 801a710:	f04f 0b00 	mov.w	fp, #0
 801a714:	684e      	ldr	r6, [r1, #4]
 801a716:	f8d1 800c 	ldr.w	r8, [r1, #12]
 801a71a:	fba6 6808 	umull	r6, r8, r6, r8
 801a71e:	eb19 0906 	adds.w	r9, r9, r6
 801a722:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a726:	f14b 0b00 	adc.w	fp, fp, #0
 801a72a:	688e      	ldr	r6, [r1, #8]
 801a72c:	fba6 6806 	umull	r6, r8, r6, r6
 801a730:	19a4      	adds	r4, r4, r6
 801a732:	eb55 0508 	adcs.w	r5, r5, r8
 801a736:	f143 0300 	adc.w	r3, r3, #0
 801a73a:	eb19 0909 	adds.w	r9, r9, r9
 801a73e:	eb5a 0a0a 	adcs.w	sl, sl, sl
 801a742:	eb4b 0b0b 	adc.w	fp, fp, fp
 801a746:	eb14 0409 	adds.w	r4, r4, r9
 801a74a:	eb55 050a 	adcs.w	r5, r5, sl
 801a74e:	eb43 030b 	adc.w	r3, r3, fp
 801a752:	6104      	str	r4, [r0, #16]
 801a754:	f04f 0400 	mov.w	r4, #0
 801a758:	680e      	ldr	r6, [r1, #0]
 801a75a:	f8d1 8014 	ldr.w	r8, [r1, #20]
 801a75e:	fba6 9a08 	umull	r9, sl, r6, r8
 801a762:	f04f 0b00 	mov.w	fp, #0
 801a766:	684e      	ldr	r6, [r1, #4]
 801a768:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801a76c:	fba6 6808 	umull	r6, r8, r6, r8
 801a770:	eb19 0906 	adds.w	r9, r9, r6
 801a774:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a778:	f14b 0b00 	adc.w	fp, fp, #0
 801a77c:	688e      	ldr	r6, [r1, #8]
 801a77e:	f8d1 800c 	ldr.w	r8, [r1, #12]
 801a782:	fba6 6808 	umull	r6, r8, r6, r8
 801a786:	eb19 0906 	adds.w	r9, r9, r6
 801a78a:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a78e:	f14b 0b00 	adc.w	fp, fp, #0
 801a792:	eb19 0909 	adds.w	r9, r9, r9
 801a796:	eb5a 0a0a 	adcs.w	sl, sl, sl
 801a79a:	eb4b 0b0b 	adc.w	fp, fp, fp
 801a79e:	eb15 0509 	adds.w	r5, r5, r9
 801a7a2:	eb53 030a 	adcs.w	r3, r3, sl
 801a7a6:	eb44 040b 	adc.w	r4, r4, fp
 801a7aa:	6145      	str	r5, [r0, #20]
 801a7ac:	f04f 0500 	mov.w	r5, #0
 801a7b0:	680e      	ldr	r6, [r1, #0]
 801a7b2:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801a7b6:	fba6 9a08 	umull	r9, sl, r6, r8
 801a7ba:	f04f 0b00 	mov.w	fp, #0
 801a7be:	684e      	ldr	r6, [r1, #4]
 801a7c0:	f8d1 8014 	ldr.w	r8, [r1, #20]
 801a7c4:	fba6 6808 	umull	r6, r8, r6, r8
 801a7c8:	eb19 0906 	adds.w	r9, r9, r6
 801a7cc:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a7d0:	f14b 0b00 	adc.w	fp, fp, #0
 801a7d4:	688e      	ldr	r6, [r1, #8]
 801a7d6:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801a7da:	fba6 6808 	umull	r6, r8, r6, r8
 801a7de:	eb19 0906 	adds.w	r9, r9, r6
 801a7e2:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a7e6:	f14b 0b00 	adc.w	fp, fp, #0
 801a7ea:	68ce      	ldr	r6, [r1, #12]
 801a7ec:	fba6 6806 	umull	r6, r8, r6, r6
 801a7f0:	199b      	adds	r3, r3, r6
 801a7f2:	eb54 0408 	adcs.w	r4, r4, r8
 801a7f6:	f145 0500 	adc.w	r5, r5, #0
 801a7fa:	eb19 0909 	adds.w	r9, r9, r9
 801a7fe:	eb5a 0a0a 	adcs.w	sl, sl, sl
 801a802:	eb4b 0b0b 	adc.w	fp, fp, fp
 801a806:	eb13 0309 	adds.w	r3, r3, r9
 801a80a:	eb54 040a 	adcs.w	r4, r4, sl
 801a80e:	eb45 050b 	adc.w	r5, r5, fp
 801a812:	6183      	str	r3, [r0, #24]
 801a814:	f04f 0300 	mov.w	r3, #0
 801a818:	680e      	ldr	r6, [r1, #0]
 801a81a:	f8d1 801c 	ldr.w	r8, [r1, #28]
 801a81e:	fba6 9a08 	umull	r9, sl, r6, r8
 801a822:	f04f 0b00 	mov.w	fp, #0
 801a826:	684e      	ldr	r6, [r1, #4]
 801a828:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801a82c:	fba6 6808 	umull	r6, r8, r6, r8
 801a830:	eb19 0906 	adds.w	r9, r9, r6
 801a834:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a838:	f14b 0b00 	adc.w	fp, fp, #0
 801a83c:	688e      	ldr	r6, [r1, #8]
 801a83e:	f8d1 8014 	ldr.w	r8, [r1, #20]
 801a842:	fba6 6808 	umull	r6, r8, r6, r8
 801a846:	eb19 0906 	adds.w	r9, r9, r6
 801a84a:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a84e:	f14b 0b00 	adc.w	fp, fp, #0
 801a852:	68ce      	ldr	r6, [r1, #12]
 801a854:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801a858:	fba6 6808 	umull	r6, r8, r6, r8
 801a85c:	eb19 0906 	adds.w	r9, r9, r6
 801a860:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a864:	f14b 0b00 	adc.w	fp, fp, #0
 801a868:	eb19 0909 	adds.w	r9, r9, r9
 801a86c:	eb5a 0a0a 	adcs.w	sl, sl, sl
 801a870:	eb4b 0b0b 	adc.w	fp, fp, fp
 801a874:	eb14 0409 	adds.w	r4, r4, r9
 801a878:	eb55 050a 	adcs.w	r5, r5, sl
 801a87c:	eb43 030b 	adc.w	r3, r3, fp
 801a880:	61c4      	str	r4, [r0, #28]
 801a882:	f04f 0400 	mov.w	r4, #0
 801a886:	684e      	ldr	r6, [r1, #4]
 801a888:	f8d1 801c 	ldr.w	r8, [r1, #28]
 801a88c:	fba6 9a08 	umull	r9, sl, r6, r8
 801a890:	f04f 0b00 	mov.w	fp, #0
 801a894:	688e      	ldr	r6, [r1, #8]
 801a896:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801a89a:	fba6 6808 	umull	r6, r8, r6, r8
 801a89e:	eb19 0906 	adds.w	r9, r9, r6
 801a8a2:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a8a6:	f14b 0b00 	adc.w	fp, fp, #0
 801a8aa:	68ce      	ldr	r6, [r1, #12]
 801a8ac:	f8d1 8014 	ldr.w	r8, [r1, #20]
 801a8b0:	fba6 6808 	umull	r6, r8, r6, r8
 801a8b4:	eb19 0906 	adds.w	r9, r9, r6
 801a8b8:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a8bc:	f14b 0b00 	adc.w	fp, fp, #0
 801a8c0:	690e      	ldr	r6, [r1, #16]
 801a8c2:	fba6 6806 	umull	r6, r8, r6, r6
 801a8c6:	19ad      	adds	r5, r5, r6
 801a8c8:	eb53 0308 	adcs.w	r3, r3, r8
 801a8cc:	f144 0400 	adc.w	r4, r4, #0
 801a8d0:	eb19 0909 	adds.w	r9, r9, r9
 801a8d4:	eb5a 0a0a 	adcs.w	sl, sl, sl
 801a8d8:	eb4b 0b0b 	adc.w	fp, fp, fp
 801a8dc:	eb15 0509 	adds.w	r5, r5, r9
 801a8e0:	eb53 030a 	adcs.w	r3, r3, sl
 801a8e4:	eb44 040b 	adc.w	r4, r4, fp
 801a8e8:	6215      	str	r5, [r2, #32]
 801a8ea:	f04f 0500 	mov.w	r5, #0
 801a8ee:	688e      	ldr	r6, [r1, #8]
 801a8f0:	f8d1 801c 	ldr.w	r8, [r1, #28]
 801a8f4:	fba6 9a08 	umull	r9, sl, r6, r8
 801a8f8:	f04f 0b00 	mov.w	fp, #0
 801a8fc:	68ce      	ldr	r6, [r1, #12]
 801a8fe:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801a902:	fba6 6808 	umull	r6, r8, r6, r8
 801a906:	eb19 0906 	adds.w	r9, r9, r6
 801a90a:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a90e:	f14b 0b00 	adc.w	fp, fp, #0
 801a912:	690e      	ldr	r6, [r1, #16]
 801a914:	f8d1 8014 	ldr.w	r8, [r1, #20]
 801a918:	fba6 6808 	umull	r6, r8, r6, r8
 801a91c:	eb19 0906 	adds.w	r9, r9, r6
 801a920:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a924:	f14b 0b00 	adc.w	fp, fp, #0
 801a928:	eb19 0909 	adds.w	r9, r9, r9
 801a92c:	eb5a 0a0a 	adcs.w	sl, sl, sl
 801a930:	eb4b 0b0b 	adc.w	fp, fp, fp
 801a934:	eb13 0309 	adds.w	r3, r3, r9
 801a938:	eb54 040a 	adcs.w	r4, r4, sl
 801a93c:	eb45 050b 	adc.w	r5, r5, fp
 801a940:	6253      	str	r3, [r2, #36]	; 0x24
 801a942:	f04f 0300 	mov.w	r3, #0
 801a946:	68ce      	ldr	r6, [r1, #12]
 801a948:	f8d1 801c 	ldr.w	r8, [r1, #28]
 801a94c:	fba6 9a08 	umull	r9, sl, r6, r8
 801a950:	f04f 0b00 	mov.w	fp, #0
 801a954:	690e      	ldr	r6, [r1, #16]
 801a956:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801a95a:	fba6 6808 	umull	r6, r8, r6, r8
 801a95e:	eb19 0906 	adds.w	r9, r9, r6
 801a962:	eb5a 0a08 	adcs.w	sl, sl, r8
 801a966:	f14b 0b00 	adc.w	fp, fp, #0
 801a96a:	694e      	ldr	r6, [r1, #20]
 801a96c:	fba6 6806 	umull	r6, r8, r6, r6
 801a970:	19a4      	adds	r4, r4, r6
 801a972:	eb55 0508 	adcs.w	r5, r5, r8
 801a976:	f143 0300 	adc.w	r3, r3, #0
 801a97a:	eb19 0909 	adds.w	r9, r9, r9
 801a97e:	eb5a 0a0a 	adcs.w	sl, sl, sl
 801a982:	eb4b 0b0b 	adc.w	fp, fp, fp
 801a986:	eb14 0409 	adds.w	r4, r4, r9
 801a98a:	eb55 050a 	adcs.w	r5, r5, sl
 801a98e:	eb43 030b 	adc.w	r3, r3, fp
 801a992:	6294      	str	r4, [r2, #40]	; 0x28
 801a994:	f04f 0400 	mov.w	r4, #0
 801a998:	690e      	ldr	r6, [r1, #16]
 801a99a:	f8d1 801c 	ldr.w	r8, [r1, #28]
 801a99e:	fba6 6808 	umull	r6, r8, r6, r8
 801a9a2:	19ad      	adds	r5, r5, r6
 801a9a4:	eb53 0308 	adcs.w	r3, r3, r8
 801a9a8:	f144 0400 	adc.w	r4, r4, #0
 801a9ac:	19ad      	adds	r5, r5, r6
 801a9ae:	eb53 0308 	adcs.w	r3, r3, r8
 801a9b2:	f144 0400 	adc.w	r4, r4, #0
 801a9b6:	694e      	ldr	r6, [r1, #20]
 801a9b8:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801a9bc:	fba6 6808 	umull	r6, r8, r6, r8
 801a9c0:	19ad      	adds	r5, r5, r6
 801a9c2:	eb53 0308 	adcs.w	r3, r3, r8
 801a9c6:	f144 0400 	adc.w	r4, r4, #0
 801a9ca:	19ad      	adds	r5, r5, r6
 801a9cc:	eb53 0308 	adcs.w	r3, r3, r8
 801a9d0:	f144 0400 	adc.w	r4, r4, #0
 801a9d4:	62d5      	str	r5, [r2, #44]	; 0x2c
 801a9d6:	f04f 0500 	mov.w	r5, #0
 801a9da:	694e      	ldr	r6, [r1, #20]
 801a9dc:	f8d1 801c 	ldr.w	r8, [r1, #28]
 801a9e0:	fba6 6808 	umull	r6, r8, r6, r8
 801a9e4:	199b      	adds	r3, r3, r6
 801a9e6:	eb54 0408 	adcs.w	r4, r4, r8
 801a9ea:	f145 0500 	adc.w	r5, r5, #0
 801a9ee:	199b      	adds	r3, r3, r6
 801a9f0:	eb54 0408 	adcs.w	r4, r4, r8
 801a9f4:	f145 0500 	adc.w	r5, r5, #0
 801a9f8:	698e      	ldr	r6, [r1, #24]
 801a9fa:	fba6 6806 	umull	r6, r8, r6, r6
 801a9fe:	199b      	adds	r3, r3, r6
 801aa00:	eb54 0408 	adcs.w	r4, r4, r8
 801aa04:	f145 0500 	adc.w	r5, r5, #0
 801aa08:	6313      	str	r3, [r2, #48]	; 0x30
 801aa0a:	f04f 0300 	mov.w	r3, #0
 801aa0e:	698e      	ldr	r6, [r1, #24]
 801aa10:	f8d1 801c 	ldr.w	r8, [r1, #28]
 801aa14:	fba6 6808 	umull	r6, r8, r6, r8
 801aa18:	19a4      	adds	r4, r4, r6
 801aa1a:	eb55 0508 	adcs.w	r5, r5, r8
 801aa1e:	f143 0300 	adc.w	r3, r3, #0
 801aa22:	19a4      	adds	r4, r4, r6
 801aa24:	eb55 0508 	adcs.w	r5, r5, r8
 801aa28:	f143 0300 	adc.w	r3, r3, #0
 801aa2c:	6354      	str	r4, [r2, #52]	; 0x34
 801aa2e:	f04f 0400 	mov.w	r4, #0
 801aa32:	69ce      	ldr	r6, [r1, #28]
 801aa34:	fba6 6806 	umull	r6, r8, r6, r6
 801aa38:	19ad      	adds	r5, r5, r6
 801aa3a:	eb43 0308 	adc.w	r3, r3, r8
 801aa3e:	6395      	str	r5, [r2, #56]	; 0x38
 801aa40:	63d3      	str	r3, [r2, #60]	; 0x3c
 801aa42:	6803      	ldr	r3, [r0, #0]
 801aa44:	6844      	ldr	r4, [r0, #4]
 801aa46:	6885      	ldr	r5, [r0, #8]
 801aa48:	68c6      	ldr	r6, [r0, #12]
 801aa4a:	6013      	str	r3, [r2, #0]
 801aa4c:	6054      	str	r4, [r2, #4]
 801aa4e:	6095      	str	r5, [r2, #8]
 801aa50:	60d6      	str	r6, [r2, #12]
 801aa52:	6903      	ldr	r3, [r0, #16]
 801aa54:	6944      	ldr	r4, [r0, #20]
 801aa56:	6985      	ldr	r5, [r0, #24]
 801aa58:	69c6      	ldr	r6, [r0, #28]
 801aa5a:	6113      	str	r3, [r2, #16]
 801aa5c:	6154      	str	r4, [r2, #20]
 801aa5e:	6195      	str	r5, [r2, #24]
 801aa60:	61d6      	str	r6, [r2, #28]
        "str	r6, [%[r], #28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [tmp] "r" (tmp)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11"
    );
}
 801aa62:	bf00      	nop
 801aa64:	3730      	adds	r7, #48	; 0x30
 801aa66:	46bd      	mov	sp, r7
 801aa68:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801aa6c:	4770      	bx	lr
	...

0801aa70 <sp_256_mont_mul_order_8>:
 * r  Result of the multiplication.
 * a  First operand of the multiplication.
 * b  Second operand of the multiplication.
 */
static void sp_256_mont_mul_order_8(sp_digit* r, const sp_digit* a, const sp_digit* b)
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b084      	sub	sp, #16
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	60f8      	str	r0, [r7, #12]
 801aa78:	60b9      	str	r1, [r7, #8]
 801aa7a:	607a      	str	r2, [r7, #4]
    sp_256_mul_8(r, a, b);
 801aa7c:	687a      	ldr	r2, [r7, #4]
 801aa7e:	68b9      	ldr	r1, [r7, #8]
 801aa80:	68f8      	ldr	r0, [r7, #12]
 801aa82:	f7ff f92d 	bl	8019ce0 <sp_256_mul_8>
    sp_256_mont_reduce_order_8(r, p256_order, p256_mp_order);
 801aa86:	4b05      	ldr	r3, [pc, #20]	; (801aa9c <sp_256_mont_mul_order_8+0x2c>)
 801aa88:	461a      	mov	r2, r3
 801aa8a:	4905      	ldr	r1, [pc, #20]	; (801aaa0 <sp_256_mont_mul_order_8+0x30>)
 801aa8c:	68f8      	ldr	r0, [r7, #12]
 801aa8e:	f7fd fa7a 	bl	8017f86 <sp_256_mont_reduce_order_8>
}
 801aa92:	bf00      	nop
 801aa94:	3710      	adds	r7, #16
 801aa96:	46bd      	mov	sp, r7
 801aa98:	bd80      	pop	{r7, pc}
 801aa9a:	bf00      	nop
 801aa9c:	ee00bc4f 	.word	0xee00bc4f
 801aaa0:	0801e7e4 	.word	0x0801e7e4

0801aaa4 <sp_256_mont_sqr_order_8>:
 *
 * r  Result of the squaring.
 * a  Number to square.
 */
static void sp_256_mont_sqr_order_8(sp_digit* r, const sp_digit* a)
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b082      	sub	sp, #8
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
 801aaac:	6039      	str	r1, [r7, #0]
    sp_256_sqr_8(r, a);
 801aaae:	6839      	ldr	r1, [r7, #0]
 801aab0:	6878      	ldr	r0, [r7, #4]
 801aab2:	f7ff fdcc 	bl	801a64e <sp_256_sqr_8>
    sp_256_mont_reduce_order_8(r, p256_order, p256_mp_order);
 801aab6:	4b05      	ldr	r3, [pc, #20]	; (801aacc <sp_256_mont_sqr_order_8+0x28>)
 801aab8:	461a      	mov	r2, r3
 801aaba:	4905      	ldr	r1, [pc, #20]	; (801aad0 <sp_256_mont_sqr_order_8+0x2c>)
 801aabc:	6878      	ldr	r0, [r7, #4]
 801aabe:	f7fd fa62 	bl	8017f86 <sp_256_mont_reduce_order_8>
}
 801aac2:	bf00      	nop
 801aac4:	3708      	adds	r7, #8
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}
 801aaca:	bf00      	nop
 801aacc:	ee00bc4f 	.word	0xee00bc4f
 801aad0:	0801e7e4 	.word	0x0801e7e4

0801aad4 <sp_256_mont_inv_order_8>:
}
#endif /* WOLFSSL_SP_NONBLOCK */

static void sp_256_mont_inv_order_8(sp_digit* r, const sp_digit* a,
        sp_digit* td)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b086      	sub	sp, #24
 801aad8:	af00      	add	r7, sp, #0
 801aada:	60f8      	str	r0, [r7, #12]
 801aadc:	60b9      	str	r1, [r7, #8]
 801aade:	607a      	str	r2, [r7, #4]
#ifdef WOLFSSL_SP_SMALL
    sp_digit* t = td;
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	613b      	str	r3, [r7, #16]
    int i;

    XMEMCPY(t, a, sizeof(sp_digit) * 8);
 801aae4:	2220      	movs	r2, #32
 801aae6:	68b9      	ldr	r1, [r7, #8]
 801aae8:	6938      	ldr	r0, [r7, #16]
 801aaea:	f000 ff92 	bl	801ba12 <memcpy>
    for (i=254; i>=0; i--) {
 801aaee:	23fe      	movs	r3, #254	; 0xfe
 801aaf0:	617b      	str	r3, [r7, #20]
 801aaf2:	e022      	b.n	801ab3a <sp_256_mont_inv_order_8+0x66>
        sp_256_mont_sqr_order_8(t, t);
 801aaf4:	6939      	ldr	r1, [r7, #16]
 801aaf6:	6938      	ldr	r0, [r7, #16]
 801aaf8:	f7ff ffd4 	bl	801aaa4 <sp_256_mont_sqr_order_8>
        if ((p256_order_minus_2[i / 32] & ((sp_int_digit)1 << (i % 32))) != 0) {
 801aafc:	697b      	ldr	r3, [r7, #20]
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	da00      	bge.n	801ab04 <sp_256_mont_inv_order_8+0x30>
 801ab02:	331f      	adds	r3, #31
 801ab04:	115b      	asrs	r3, r3, #5
 801ab06:	461a      	mov	r2, r3
 801ab08:	4b12      	ldr	r3, [pc, #72]	; (801ab54 <sp_256_mont_inv_order_8+0x80>)
 801ab0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ab0e:	697b      	ldr	r3, [r7, #20]
 801ab10:	4259      	negs	r1, r3
 801ab12:	f003 031f 	and.w	r3, r3, #31
 801ab16:	f001 011f 	and.w	r1, r1, #31
 801ab1a:	bf58      	it	pl
 801ab1c:	424b      	negpl	r3, r1
 801ab1e:	2101      	movs	r1, #1
 801ab20:	fa01 f303 	lsl.w	r3, r1, r3
 801ab24:	4013      	ands	r3, r2
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d004      	beq.n	801ab34 <sp_256_mont_inv_order_8+0x60>
            sp_256_mont_mul_order_8(t, t, a);
 801ab2a:	68ba      	ldr	r2, [r7, #8]
 801ab2c:	6939      	ldr	r1, [r7, #16]
 801ab2e:	6938      	ldr	r0, [r7, #16]
 801ab30:	f7ff ff9e 	bl	801aa70 <sp_256_mont_mul_order_8>
    for (i=254; i>=0; i--) {
 801ab34:	697b      	ldr	r3, [r7, #20]
 801ab36:	3b01      	subs	r3, #1
 801ab38:	617b      	str	r3, [r7, #20]
 801ab3a:	697b      	ldr	r3, [r7, #20]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	dad9      	bge.n	801aaf4 <sp_256_mont_inv_order_8+0x20>
        }
    }
    XMEMCPY(r, t, sizeof(sp_digit) * 8U);
 801ab40:	2220      	movs	r2, #32
 801ab42:	6939      	ldr	r1, [r7, #16]
 801ab44:	68f8      	ldr	r0, [r7, #12]
 801ab46:	f000 ff64 	bl	801ba12 <memcpy>
    /* t2= a^ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632540 */
    sp_256_mont_sqr_n_order_8(t2, t2, 4);
    /* r = a^ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f */
    sp_256_mont_mul_order_8(r, t2, t3);
#endif /* WOLFSSL_SP_SMALL */
}
 801ab4a:	bf00      	nop
 801ab4c:	3718      	adds	r7, #24
 801ab4e:	46bd      	mov	sp, r7
 801ab50:	bd80      	pop	{r7, pc}
 801ab52:	bf00      	nop
 801ab54:	0801ed08 	.word	0x0801ed08

0801ab58 <sp_ecc_verify_256>:
}
#endif /* WOLFSSL_SP_NONBLOCK */

int sp_ecc_verify_256(const byte* hash, word32 hashLen, mp_int* pX,
    mp_int* pY, mp_int* pZ, mp_int* r, mp_int* sm, int* res, void* heap)
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b092      	sub	sp, #72	; 0x48
 801ab5c:	af02      	add	r7, sp, #8
 801ab5e:	60f8      	str	r0, [r7, #12]
 801ab60:	60b9      	str	r1, [r7, #8]
 801ab62:	607a      	str	r2, [r7, #4]
 801ab64:	603b      	str	r3, [r7, #0]
#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    sp_digit* d = NULL;
 801ab66:	2300      	movs	r3, #0
 801ab68:	63fb      	str	r3, [r7, #60]	; 0x3c
    sp_digit sd[2*8];
    sp_digit tmpd[2*8 * 5];
    sp_point_256 p1d;
    sp_point_256 p2d;
#endif
    sp_digit* u1 = NULL;
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	63bb      	str	r3, [r7, #56]	; 0x38
    sp_digit* u2 = NULL;
 801ab6e:	2300      	movs	r3, #0
 801ab70:	637b      	str	r3, [r7, #52]	; 0x34
    sp_digit* s = NULL;
 801ab72:	2300      	movs	r3, #0
 801ab74:	633b      	str	r3, [r7, #48]	; 0x30
    sp_digit* tmp = NULL;
 801ab76:	2300      	movs	r3, #0
 801ab78:	62fb      	str	r3, [r7, #44]	; 0x2c
    sp_point_256* p1;
    sp_point_256* p2 = NULL;
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	617b      	str	r3, [r7, #20]
    sp_digit carry;
    int32_t c;
    int err;

    err = sp_256_point_new_8(heap, p1d, p1);
 801ab7e:	f107 0318 	add.w	r3, r7, #24
 801ab82:	461a      	mov	r2, r3
 801ab84:	2100      	movs	r1, #0
 801ab86:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ab88:	f7fb ff98 	bl	8016abc <sp_256_point_new_ex_8>
 801ab8c:	62b8      	str	r0, [r7, #40]	; 0x28
    if (err == MP_OKAY) {
 801ab8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d107      	bne.n	801aba4 <sp_ecc_verify_256+0x4c>
        err = sp_256_point_new_8(heap, p2d, p2);
 801ab94:	f107 0314 	add.w	r3, r7, #20
 801ab98:	461a      	mov	r2, r3
 801ab9a:	2100      	movs	r1, #0
 801ab9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ab9e:	f7fb ff8d 	bl	8016abc <sp_256_point_new_ex_8>
 801aba2:	62b8      	str	r0, [r7, #40]	; 0x28
    }
#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (err == MP_OKAY) {
 801aba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d10a      	bne.n	801abc0 <sp_ecc_verify_256+0x68>
        d = (sp_digit*)XMALLOC(sizeof(sp_digit) * 16 * 8, heap,
 801abaa:	f44f 7000 	mov.w	r0, #512	; 0x200
 801abae:	f7f6 fc55 	bl	801145c <wolfSSL_Malloc>
 801abb2:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                              DYNAMIC_TYPE_ECC);
        if (d == NULL) {
 801abb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d102      	bne.n	801abc0 <sp_ecc_verify_256+0x68>
            err = MEMORY_E;
 801abba:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801abbe:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }
#endif

    if (err == MP_OKAY) {
 801abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d13e      	bne.n	801ac44 <sp_ecc_verify_256+0xec>
#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
        u1  = d + 0 * 8;
 801abc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abc8:	63bb      	str	r3, [r7, #56]	; 0x38
        u2  = d + 2 * 8;
 801abca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abcc:	3340      	adds	r3, #64	; 0x40
 801abce:	637b      	str	r3, [r7, #52]	; 0x34
        s   = d + 4 * 8;
 801abd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abd2:	3380      	adds	r3, #128	; 0x80
 801abd4:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = d + 6 * 8;
 801abd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801abd8:	33c0      	adds	r3, #192	; 0xc0
 801abda:	62fb      	str	r3, [r7, #44]	; 0x2c
        u2 = u2d;
        s  = sd;
        tmp = tmpd;
#endif

        if (hashLen > 32U) {
 801abdc:	68bb      	ldr	r3, [r7, #8]
 801abde:	2b20      	cmp	r3, #32
 801abe0:	d901      	bls.n	801abe6 <sp_ecc_verify_256+0x8e>
            hashLen = 32U;
 801abe2:	2320      	movs	r3, #32
 801abe4:	60bb      	str	r3, [r7, #8]
        }

        sp_256_from_bin(u1, 8, hash, (int)hashLen);
 801abe6:	68bb      	ldr	r3, [r7, #8]
 801abe8:	68fa      	ldr	r2, [r7, #12]
 801abea:	2108      	movs	r1, #8
 801abec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801abee:	f7ff f806 	bl	8019bfe <sp_256_from_bin>
        sp_256_from_mp(u2, 8, r);
 801abf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801abf4:	2108      	movs	r1, #8
 801abf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801abf8:	f7fc f916 	bl	8016e28 <sp_256_from_mp>
        sp_256_from_mp(s, 8, sm);
 801abfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801abfe:	2108      	movs	r1, #8
 801ac00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac02:	f7fc f911 	bl	8016e28 <sp_256_from_mp>
        sp_256_from_mp(p2->x, 8, pX);
 801ac06:	697b      	ldr	r3, [r7, #20]
 801ac08:	687a      	ldr	r2, [r7, #4]
 801ac0a:	2108      	movs	r1, #8
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	f7fc f90b 	bl	8016e28 <sp_256_from_mp>
        sp_256_from_mp(p2->y, 8, pY);
 801ac12:	697b      	ldr	r3, [r7, #20]
 801ac14:	3340      	adds	r3, #64	; 0x40
 801ac16:	683a      	ldr	r2, [r7, #0]
 801ac18:	2108      	movs	r1, #8
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	f7fc f904 	bl	8016e28 <sp_256_from_mp>
        sp_256_from_mp(p2->z, 8, pZ);
 801ac20:	697b      	ldr	r3, [r7, #20]
 801ac22:	3380      	adds	r3, #128	; 0x80
 801ac24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ac26:	2108      	movs	r1, #8
 801ac28:	4618      	mov	r0, r3
 801ac2a:	f7fc f8fd 	bl	8016e28 <sp_256_from_mp>
        {
            sp_256_mod_inv_8(s, s, p256_order);
        }
#endif /* !WOLFSSL_SP_SMALL */
        {
            sp_256_mul_8(s, s, p256_norm_order);
 801ac2e:	4a80      	ldr	r2, [pc, #512]	; (801ae30 <sp_ecc_verify_256+0x2d8>)
 801ac30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ac32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac34:	f7ff f854 	bl	8019ce0 <sp_256_mul_8>
        }
        err = sp_256_mod_8(s, s, p256_order);
 801ac38:	4a7e      	ldr	r2, [pc, #504]	; (801ae34 <sp_ecc_verify_256+0x2dc>)
 801ac3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ac3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac3e:	f7ff fcf5 	bl	801a62c <sp_256_mod_8>
 801ac42:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (err == MP_OKAY) {
 801ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d117      	bne.n	801ac7a <sp_ecc_verify_256+0x122>
        sp_256_norm_8(s);
#ifdef WOLFSSL_SP_SMALL
        {
            sp_256_mont_inv_order_8(s, s, tmp);
 801ac4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ac4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ac4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac50:	f7ff ff40 	bl	801aad4 <sp_256_mont_inv_order_8>
            sp_256_mont_mul_order_8(u1, u1, s);
 801ac54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ac58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ac5a:	f7ff ff09 	bl	801aa70 <sp_256_mont_mul_order_8>
            sp_256_mont_mul_order_8(u2, u2, s);
 801ac5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ac62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ac64:	f7ff ff04 	bl	801aa70 <sp_256_mont_mul_order_8>
            sp_256_mont_mul_order_8(u1, u1, s);
            sp_256_mont_mul_order_8(u2, u2, s);
        }

#endif /* WOLFSSL_SP_SMALL */
            err = sp_256_ecc_mulmod_base_8(p1, u1, 0, 0, heap);
 801ac68:	69b8      	ldr	r0, [r7, #24]
 801ac6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ac6c:	9300      	str	r3, [sp, #0]
 801ac6e:	2300      	movs	r3, #0
 801ac70:	2200      	movs	r2, #0
 801ac72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ac74:	f7fe ff2a 	bl	8019acc <sp_256_ecc_mulmod_base_8>
 801ac78:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (err == MP_OKAY) {
 801ac7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d10a      	bne.n	801ac96 <sp_ecc_verify_256+0x13e>
            err = sp_256_ecc_mulmod_8(p2, p2, u2, 0, 0, heap);
 801ac80:	6978      	ldr	r0, [r7, #20]
 801ac82:	6979      	ldr	r1, [r7, #20]
 801ac84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ac86:	9301      	str	r3, [sp, #4]
 801ac88:	2300      	movs	r3, #0
 801ac8a:	9300      	str	r3, [sp, #0]
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac90:	f7fe ff06 	bl	8019aa0 <sp_256_ecc_mulmod_8>
 801ac94:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    if (err == MP_OKAY) {
 801ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d14d      	bne.n	801ad38 <sp_ecc_verify_256+0x1e0>
        {
            sp_256_proj_point_add_8(p1, p1, p2, tmp);
 801ac9c:	69b8      	ldr	r0, [r7, #24]
 801ac9e:	69b9      	ldr	r1, [r7, #24]
 801aca0:	697a      	ldr	r2, [r7, #20]
 801aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aca4:	f7fd fdde 	bl	8018864 <sp_256_proj_point_add_8>
            if (sp_256_iszero_8(p1->z)) {
 801aca8:	69bb      	ldr	r3, [r7, #24]
 801acaa:	3380      	adds	r3, #128	; 0x80
 801acac:	4618      	mov	r0, r3
 801acae:	f7fe ff79 	bl	8019ba4 <sp_256_iszero_8>
 801acb2:	4603      	mov	r3, r0
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d034      	beq.n	801ad22 <sp_ecc_verify_256+0x1ca>
                if (sp_256_iszero_8(p1->x) && sp_256_iszero_8(p1->y)) {
 801acb8:	69bb      	ldr	r3, [r7, #24]
 801acba:	4618      	mov	r0, r3
 801acbc:	f7fe ff72 	bl	8019ba4 <sp_256_iszero_8>
 801acc0:	4603      	mov	r3, r0
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d00e      	beq.n	801ace4 <sp_ecc_verify_256+0x18c>
 801acc6:	69bb      	ldr	r3, [r7, #24]
 801acc8:	3340      	adds	r3, #64	; 0x40
 801acca:	4618      	mov	r0, r3
 801accc:	f7fe ff6a 	bl	8019ba4 <sp_256_iszero_8>
 801acd0:	4603      	mov	r3, r0
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d006      	beq.n	801ace4 <sp_ecc_verify_256+0x18c>
                    sp_256_proj_point_dbl_8(p1, p2, tmp);
 801acd6:	69bb      	ldr	r3, [r7, #24]
 801acd8:	6979      	ldr	r1, [r7, #20]
 801acda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801acdc:	4618      	mov	r0, r3
 801acde:	f7fd fcad 	bl	801863c <sp_256_proj_point_dbl_8>
 801ace2:	e01e      	b.n	801ad22 <sp_ecc_verify_256+0x1ca>
                }
                else {
                    /* Y ordinate is not used from here - don't set. */
                    p1->x[0] = 0;
 801ace4:	69bb      	ldr	r3, [r7, #24]
 801ace6:	2200      	movs	r2, #0
 801ace8:	601a      	str	r2, [r3, #0]
                    p1->x[1] = 0;
 801acea:	69bb      	ldr	r3, [r7, #24]
 801acec:	2200      	movs	r2, #0
 801acee:	605a      	str	r2, [r3, #4]
                    p1->x[2] = 0;
 801acf0:	69bb      	ldr	r3, [r7, #24]
 801acf2:	2200      	movs	r2, #0
 801acf4:	609a      	str	r2, [r3, #8]
                    p1->x[3] = 0;
 801acf6:	69bb      	ldr	r3, [r7, #24]
 801acf8:	2200      	movs	r2, #0
 801acfa:	60da      	str	r2, [r3, #12]
                    p1->x[4] = 0;
 801acfc:	69bb      	ldr	r3, [r7, #24]
 801acfe:	2200      	movs	r2, #0
 801ad00:	611a      	str	r2, [r3, #16]
                    p1->x[5] = 0;
 801ad02:	69bb      	ldr	r3, [r7, #24]
 801ad04:	2200      	movs	r2, #0
 801ad06:	615a      	str	r2, [r3, #20]
                    p1->x[6] = 0;
 801ad08:	69bb      	ldr	r3, [r7, #24]
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	619a      	str	r2, [r3, #24]
                    p1->x[7] = 0;
 801ad0e:	69bb      	ldr	r3, [r7, #24]
 801ad10:	2200      	movs	r2, #0
 801ad12:	61da      	str	r2, [r3, #28]
                    XMEMCPY(p1->z, p256_norm_mod, sizeof(p256_norm_mod));
 801ad14:	69bb      	ldr	r3, [r7, #24]
 801ad16:	3380      	adds	r3, #128	; 0x80
 801ad18:	2220      	movs	r2, #32
 801ad1a:	4947      	ldr	r1, [pc, #284]	; (801ae38 <sp_ecc_verify_256+0x2e0>)
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	f000 fe78 	bl	801ba12 <memcpy>
            }
        }

        /* (r + n*order).z'.z' mod prime == (u1.G + u2.Q)->x' */
        /* Reload r and convert to Montgomery form. */
        sp_256_from_mp(u2, 8, r);
 801ad22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ad24:	2108      	movs	r1, #8
 801ad26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ad28:	f7fc f87e 	bl	8016e28 <sp_256_from_mp>
        err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
 801ad2c:	4a43      	ldr	r2, [pc, #268]	; (801ae3c <sp_ecc_verify_256+0x2e4>)
 801ad2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ad30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ad32:	f7fb fefa 	bl	8016b2a <sp_256_mod_mul_norm_8>
 801ad36:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    if (err == MP_OKAY) {
 801ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d15c      	bne.n	801adf8 <sp_ecc_verify_256+0x2a0>
        /* u1 = r.z'.z' mod prime */
        sp_256_mont_sqr_8(p1->z, p1->z, p256_mod, p256_mp_mod);
 801ad3e:	69bb      	ldr	r3, [r7, #24]
 801ad40:	f103 0080 	add.w	r0, r3, #128	; 0x80
 801ad44:	69bb      	ldr	r3, [r7, #24]
 801ad46:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801ad4a:	2301      	movs	r3, #1
 801ad4c:	4a3b      	ldr	r2, [pc, #236]	; (801ae3c <sp_ecc_verify_256+0x2e4>)
 801ad4e:	f7fc fcd4 	bl	80176fa <sp_256_mont_sqr_8>
        sp_256_mont_mul_8(u1, u2, p1->z, p256_mod, p256_mp_mod);
 801ad52:	69bb      	ldr	r3, [r7, #24]
 801ad54:	f103 0280 	add.w	r2, r3, #128	; 0x80
 801ad58:	2301      	movs	r3, #1
 801ad5a:	9300      	str	r3, [sp, #0]
 801ad5c:	4b37      	ldr	r3, [pc, #220]	; (801ae3c <sp_ecc_verify_256+0x2e4>)
 801ad5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ad60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ad62:	f7fc f8e4 	bl	8016f2e <sp_256_mont_mul_8>
        *res = (int)(sp_256_cmp_8(p1->x, u1) == 0);
 801ad66:	69bb      	ldr	r3, [r7, #24]
 801ad68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	f7fd f816 	bl	8017d9c <sp_256_cmp_8>
 801ad70:	4603      	mov	r3, r0
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	bf0c      	ite	eq
 801ad76:	2301      	moveq	r3, #1
 801ad78:	2300      	movne	r3, #0
 801ad7a:	b2db      	uxtb	r3, r3
 801ad7c:	461a      	mov	r2, r3
 801ad7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ad80:	601a      	str	r2, [r3, #0]
        if (*res == 0) {
 801ad82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d136      	bne.n	801adf8 <sp_ecc_verify_256+0x2a0>
            /* Reload r and add order. */
            sp_256_from_mp(u2, 8, r);
 801ad8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ad8c:	2108      	movs	r1, #8
 801ad8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ad90:	f7fc f84a 	bl	8016e28 <sp_256_from_mp>
            carry = sp_256_add_8(u2, u2, p256_order);
 801ad94:	4a27      	ldr	r2, [pc, #156]	; (801ae34 <sp_ecc_verify_256+0x2dc>)
 801ad96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ad98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ad9a:	f7fd f9fd 	bl	8018198 <sp_256_add_8>
 801ad9e:	6278      	str	r0, [r7, #36]	; 0x24
            /* Carry means result is greater than mod and is not valid. */
            if (carry == 0) {
 801ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d128      	bne.n	801adf8 <sp_ecc_verify_256+0x2a0>
                sp_256_norm_8(u2);

                /* Compare with mod and if greater or equal then not valid. */
                c = sp_256_cmp_8(u2, p256_mod);
 801ada6:	4925      	ldr	r1, [pc, #148]	; (801ae3c <sp_ecc_verify_256+0x2e4>)
 801ada8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801adaa:	f7fc fff7 	bl	8017d9c <sp_256_cmp_8>
 801adae:	6238      	str	r0, [r7, #32]
                if (c < 0) {
 801adb0:	6a3b      	ldr	r3, [r7, #32]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	da20      	bge.n	801adf8 <sp_ecc_verify_256+0x2a0>
                    /* Convert to Montogomery form */
                    err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
 801adb6:	4a21      	ldr	r2, [pc, #132]	; (801ae3c <sp_ecc_verify_256+0x2e4>)
 801adb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801adba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801adbc:	f7fb feb5 	bl	8016b2a <sp_256_mod_mul_norm_8>
 801adc0:	62b8      	str	r0, [r7, #40]	; 0x28
                    if (err == MP_OKAY) {
 801adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d117      	bne.n	801adf8 <sp_ecc_verify_256+0x2a0>
                        /* u1 = (r + 1*order).z'.z' mod prime */
                        sp_256_mont_mul_8(u1, u2, p1->z, p256_mod,
 801adc8:	69bb      	ldr	r3, [r7, #24]
 801adca:	f103 0280 	add.w	r2, r3, #128	; 0x80
 801adce:	2301      	movs	r3, #1
 801add0:	9300      	str	r3, [sp, #0]
 801add2:	4b1a      	ldr	r3, [pc, #104]	; (801ae3c <sp_ecc_verify_256+0x2e4>)
 801add4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801add6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801add8:	f7fc f8a9 	bl	8016f2e <sp_256_mont_mul_8>
                                                                  p256_mp_mod);
                        *res = (int)(sp_256_cmp_8(p1->x, u1) == 0);
 801addc:	69bb      	ldr	r3, [r7, #24]
 801adde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ade0:	4618      	mov	r0, r3
 801ade2:	f7fc ffdb 	bl	8017d9c <sp_256_cmp_8>
 801ade6:	4603      	mov	r3, r0
 801ade8:	2b00      	cmp	r3, #0
 801adea:	bf0c      	ite	eq
 801adec:	2301      	moveq	r3, #1
 801adee:	2300      	movne	r3, #0
 801adf0:	b2db      	uxtb	r3, r3
 801adf2:	461a      	mov	r2, r3
 801adf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801adf6:	601a      	str	r2, [r3, #0]
            }
        }
    }

#if (defined(WOLFSSL_SP_SMALL) || defined(WOLFSSL_SMALL_STACK)) && !defined(WOLFSSL_SP_NO_MALLOC)
    if (d != NULL)
 801adf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d007      	beq.n	801ae0e <sp_ecc_verify_256+0x2b6>
        XFREE(d, heap, DYNAMIC_TYPE_ECC);
 801adfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ae00:	61fb      	str	r3, [r7, #28]
 801ae02:	69fb      	ldr	r3, [r7, #28]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d002      	beq.n	801ae0e <sp_ecc_verify_256+0x2b6>
 801ae08:	69f8      	ldr	r0, [r7, #28]
 801ae0a:	f7f6 fb43 	bl	8011494 <wolfSSL_Free>
#endif
    sp_256_point_free_8(p1, 0, heap);
 801ae0e:	69bb      	ldr	r3, [r7, #24]
 801ae10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ae12:	2100      	movs	r1, #0
 801ae14:	4618      	mov	r0, r3
 801ae16:	f7fb fe6b 	bl	8016af0 <sp_256_point_free_8>
    sp_256_point_free_8(p2, 0, heap);
 801ae1a:	697b      	ldr	r3, [r7, #20]
 801ae1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ae1e:	2100      	movs	r1, #0
 801ae20:	4618      	mov	r0, r3
 801ae22:	f7fb fe65 	bl	8016af0 <sp_256_point_free_8>

    return err;
 801ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801ae28:	4618      	mov	r0, r3
 801ae2a:	3740      	adds	r7, #64	; 0x40
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}
 801ae30:	0801e804 	.word	0x0801e804
 801ae34:	0801e7e4 	.word	0x0801e7e4
 801ae38:	0801e7c4 	.word	0x0801e7c4
 801ae3c:	0801e7a4 	.word	0x0801e7a4

0801ae40 <ForceZero>:
{
 801ae40:	b480      	push	{r7}
 801ae42:	b085      	sub	sp, #20
 801ae44:	af00      	add	r7, sp, #0
 801ae46:	6078      	str	r0, [r7, #4]
 801ae48:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 801ae4e:	e004      	b.n	801ae5a <ForceZero+0x1a>
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	1c5a      	adds	r2, r3, #1
 801ae54:	60fa      	str	r2, [r7, #12]
 801ae56:	2200      	movs	r2, #0
 801ae58:	701a      	strb	r2, [r3, #0]
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	1e5a      	subs	r2, r3, #1
 801ae5e:	603a      	str	r2, [r7, #0]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d1f5      	bne.n	801ae50 <ForceZero+0x10>
}
 801ae64:	bf00      	nop
 801ae66:	3714      	adds	r7, #20
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae6e:	4770      	bx	lr

0801ae70 <sp_init>:
 *
 * @return  MP_OKAY on success.
 * @return  MP_VAL when a is NULL.
 */
int sp_init(sp_int* a)
{
 801ae70:	b480      	push	{r7}
 801ae72:	b085      	sub	sp, #20
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	6078      	str	r0, [r7, #4]
    int err = MP_OKAY;
 801ae78:	2300      	movs	r3, #0
 801ae7a:	60fb      	str	r3, [r7, #12]

    if (a == NULL) {
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d102      	bne.n	801ae88 <sp_init+0x18>
        err = MP_VAL;
 801ae82:	f06f 0302 	mvn.w	r3, #2
 801ae86:	60fb      	str	r3, [r7, #12]
    }
    if (err == MP_OKAY) {
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d105      	bne.n	801ae9a <sp_init+0x2a>
        a->used = 0;
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	2200      	movs	r2, #0
 801ae92:	601a      	str	r2, [r3, #0]
        a->size = SP_INT_DIGITS;
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	22c1      	movs	r2, #193	; 0xc1
 801ae98:	605a      	str	r2, [r3, #4]
    #ifdef HAVE_WOLF_BIGINT
        wc_bigint_init(&a->raw);
    #endif
    }

    return err;
 801ae9a:	68fb      	ldr	r3, [r7, #12]
}
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	3714      	adds	r7, #20
 801aea0:	46bd      	mov	sp, r7
 801aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea6:	4770      	bx	lr

0801aea8 <sp_init_multi>:
 *
 * @return  MP_OKAY on success.
 */
int sp_init_multi(sp_int* n1, sp_int* n2, sp_int* n3, sp_int* n4, sp_int* n5,
                  sp_int* n6)
{
 801aea8:	b480      	push	{r7}
 801aeaa:	b085      	sub	sp, #20
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	60f8      	str	r0, [r7, #12]
 801aeb0:	60b9      	str	r1, [r7, #8]
 801aeb2:	607a      	str	r2, [r7, #4]
 801aeb4:	603b      	str	r3, [r7, #0]
    if (n1 != NULL) {
 801aeb6:	68fb      	ldr	r3, [r7, #12]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d005      	beq.n	801aec8 <sp_init_multi+0x20>
        n1->used = 0;
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	2200      	movs	r2, #0
 801aec0:	601a      	str	r2, [r3, #0]
        n1->size = SP_INT_DIGITS;
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	22c1      	movs	r2, #193	; 0xc1
 801aec6:	605a      	str	r2, [r3, #4]
#ifdef WOLFSSL_SP_INT_NEGATIVE
        n1->sign = MP_ZPOS;
#endif
    }
    if (n2 != NULL) {
 801aec8:	68bb      	ldr	r3, [r7, #8]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d005      	beq.n	801aeda <sp_init_multi+0x32>
        n2->used = 0;
 801aece:	68bb      	ldr	r3, [r7, #8]
 801aed0:	2200      	movs	r2, #0
 801aed2:	601a      	str	r2, [r3, #0]
        n2->size = SP_INT_DIGITS;
 801aed4:	68bb      	ldr	r3, [r7, #8]
 801aed6:	22c1      	movs	r2, #193	; 0xc1
 801aed8:	605a      	str	r2, [r3, #4]
#ifdef WOLFSSL_SP_INT_NEGATIVE
        n2->sign = MP_ZPOS;
#endif
    }
    if (n3 != NULL) {
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d005      	beq.n	801aeec <sp_init_multi+0x44>
        n3->used = 0;
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	2200      	movs	r2, #0
 801aee4:	601a      	str	r2, [r3, #0]
        n3->size = SP_INT_DIGITS;
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	22c1      	movs	r2, #193	; 0xc1
 801aeea:	605a      	str	r2, [r3, #4]
#ifdef WOLFSSL_SP_INT_NEGATIVE
        n3->sign = MP_ZPOS;
#endif
    }
    if (n4 != NULL) {
 801aeec:	683b      	ldr	r3, [r7, #0]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d005      	beq.n	801aefe <sp_init_multi+0x56>
        n4->used = 0;
 801aef2:	683b      	ldr	r3, [r7, #0]
 801aef4:	2200      	movs	r2, #0
 801aef6:	601a      	str	r2, [r3, #0]
        n4->size = SP_INT_DIGITS;
 801aef8:	683b      	ldr	r3, [r7, #0]
 801aefa:	22c1      	movs	r2, #193	; 0xc1
 801aefc:	605a      	str	r2, [r3, #4]
#ifdef WOLFSSL_SP_INT_NEGATIVE
        n4->sign = MP_ZPOS;
#endif
    }
    if (n5 != NULL) {
 801aefe:	69bb      	ldr	r3, [r7, #24]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d005      	beq.n	801af10 <sp_init_multi+0x68>
        n5->used = 0;
 801af04:	69bb      	ldr	r3, [r7, #24]
 801af06:	2200      	movs	r2, #0
 801af08:	601a      	str	r2, [r3, #0]
        n5->size = SP_INT_DIGITS;
 801af0a:	69bb      	ldr	r3, [r7, #24]
 801af0c:	22c1      	movs	r2, #193	; 0xc1
 801af0e:	605a      	str	r2, [r3, #4]
#ifdef WOLFSSL_SP_INT_NEGATIVE
        n5->sign = MP_ZPOS;
#endif
    }
    if (n6 != NULL) {
 801af10:	69fb      	ldr	r3, [r7, #28]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d005      	beq.n	801af22 <sp_init_multi+0x7a>
        n6->used = 0;
 801af16:	69fb      	ldr	r3, [r7, #28]
 801af18:	2200      	movs	r2, #0
 801af1a:	601a      	str	r2, [r3, #0]
        n6->size = SP_INT_DIGITS;
 801af1c:	69fb      	ldr	r3, [r7, #28]
 801af1e:	22c1      	movs	r2, #193	; 0xc1
 801af20:	605a      	str	r2, [r3, #4]
#ifdef WOLFSSL_SP_INT_NEGATIVE
        n6->sign = MP_ZPOS;
#endif
    }

    return MP_OKAY;
 801af22:	2300      	movs	r3, #0
}
 801af24:	4618      	mov	r0, r3
 801af26:	3714      	adds	r7, #20
 801af28:	46bd      	mov	sp, r7
 801af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2e:	4770      	bx	lr

0801af30 <sp_grow>:
 *
 * @return  MP_OKAY on success
 * @return  MP_MEM if the number of digits requested is more than available.
 */
int sp_grow(sp_int* a, int l)
{
 801af30:	b480      	push	{r7}
 801af32:	b085      	sub	sp, #20
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
 801af38:	6039      	str	r1, [r7, #0]
    int err = MP_OKAY;
 801af3a:	2300      	movs	r3, #0
 801af3c:	60fb      	str	r3, [r7, #12]

    if (a == NULL) {
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	2b00      	cmp	r3, #0
 801af42:	d102      	bne.n	801af4a <sp_grow+0x1a>
        err = MP_VAL;
 801af44:	f06f 0302 	mvn.w	r3, #2
 801af48:	60fb      	str	r3, [r7, #12]
    }
    if ((err == MP_OKAY) && (l > a->size)) {
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d107      	bne.n	801af60 <sp_grow+0x30>
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	685b      	ldr	r3, [r3, #4]
 801af54:	683a      	ldr	r2, [r7, #0]
 801af56:	429a      	cmp	r2, r3
 801af58:	dd02      	ble.n	801af60 <sp_grow+0x30>
        err = MP_MEM;
 801af5a:	f06f 0301 	mvn.w	r3, #1
 801af5e:	60fb      	str	r3, [r7, #12]
    }
    if (err == MP_OKAY) {
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	2b00      	cmp	r3, #0
 801af64:	d110      	bne.n	801af88 <sp_grow+0x58>
        int i;

        for (i = a->used; i < l; i++) {
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	60bb      	str	r3, [r7, #8]
 801af6c:	e008      	b.n	801af80 <sp_grow+0x50>
            a->dp[i] = 0;
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	68ba      	ldr	r2, [r7, #8]
 801af72:	3202      	adds	r2, #2
 801af74:	2100      	movs	r1, #0
 801af76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = a->used; i < l; i++) {
 801af7a:	68bb      	ldr	r3, [r7, #8]
 801af7c:	3301      	adds	r3, #1
 801af7e:	60bb      	str	r3, [r7, #8]
 801af80:	68ba      	ldr	r2, [r7, #8]
 801af82:	683b      	ldr	r3, [r7, #0]
 801af84:	429a      	cmp	r2, r3
 801af86:	dbf2      	blt.n	801af6e <sp_grow+0x3e>
        }
    }

    return err;
 801af88:	68fb      	ldr	r3, [r7, #12]
}
 801af8a:	4618      	mov	r0, r3
 801af8c:	3714      	adds	r7, #20
 801af8e:	46bd      	mov	sp, r7
 801af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af94:	4770      	bx	lr

0801af96 <_sp_zero>:
 * Assumes a is not NULL.
 *
 * @param  [out]  a  SP integer to set to zero.
 */
static void _sp_zero(sp_int* a)
{
 801af96:	b480      	push	{r7}
 801af98:	b083      	sub	sp, #12
 801af9a:	af00      	add	r7, sp, #0
 801af9c:	6078      	str	r0, [r7, #4]
    a->dp[0] = 0;
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	2200      	movs	r2, #0
 801afa2:	609a      	str	r2, [r3, #8]
    a->used = 0;
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	2200      	movs	r2, #0
 801afa8:	601a      	str	r2, [r3, #0]
#ifdef WOLFSSL_SP_INT_NEGATIVE
    a->sign = MP_ZPOS;
#endif
}
 801afaa:	bf00      	nop
 801afac:	370c      	adds	r7, #12
 801afae:	46bd      	mov	sp, r7
 801afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb4:	4770      	bx	lr

0801afb6 <sp_zero>:
/* Set the multi-precision number to zero.
 *
 * @param  [out]  a  SP integer to set to zero.
 */
void sp_zero(sp_int* a)
{
 801afb6:	b580      	push	{r7, lr}
 801afb8:	b082      	sub	sp, #8
 801afba:	af00      	add	r7, sp, #0
 801afbc:	6078      	str	r0, [r7, #4]
    if (a != NULL) {
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d002      	beq.n	801afca <sp_zero+0x14>
        _sp_zero(a);
 801afc4:	6878      	ldr	r0, [r7, #4]
 801afc6:	f7ff ffe6 	bl	801af96 <_sp_zero>
    }
}
 801afca:	bf00      	nop
 801afcc:	3708      	adds	r7, #8
 801afce:	46bd      	mov	sp, r7
 801afd0:	bd80      	pop	{r7, pc}

0801afd2 <sp_clear>:
/* Clear the data from the multi-precision number and set to zero.
 *
 * @param  [out]  a  SP integer.
 */
void sp_clear(sp_int* a)
{
 801afd2:	b480      	push	{r7}
 801afd4:	b085      	sub	sp, #20
 801afd6:	af00      	add	r7, sp, #0
 801afd8:	6078      	str	r0, [r7, #4]
    if (a != NULL) {
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d013      	beq.n	801b008 <sp_clear+0x36>
        int i;

        for (i = 0; i < a->used; i++) {
 801afe0:	2300      	movs	r3, #0
 801afe2:	60fb      	str	r3, [r7, #12]
 801afe4:	e008      	b.n	801aff8 <sp_clear+0x26>
            a->dp[i] = 0;
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	68fa      	ldr	r2, [r7, #12]
 801afea:	3202      	adds	r2, #2
 801afec:	2100      	movs	r1, #0
 801afee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0; i < a->used; i++) {
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	3301      	adds	r3, #1
 801aff6:	60fb      	str	r3, [r7, #12]
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	68fa      	ldr	r2, [r7, #12]
 801affe:	429a      	cmp	r2, r3
 801b000:	dbf1      	blt.n	801afe6 <sp_clear+0x14>
        }
        a->used = 0;
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	2200      	movs	r2, #0
 801b006:	601a      	str	r2, [r3, #0]
    #ifdef WOLFSSL_SP_INT_NEGATIVE
        a->sign = MP_ZPOS;
    #endif
    }
}
 801b008:	bf00      	nop
 801b00a:	3714      	adds	r7, #20
 801b00c:	46bd      	mov	sp, r7
 801b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b012:	4770      	bx	lr

0801b014 <sp_forcezero>:
 * Use when security sensitive data needs to be wiped.
 *
 * @param  [in]  a  SP integer.
 */
void sp_forcezero(sp_int* a)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b082      	sub	sp, #8
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
    ForceZero(a->dp, a->used * sizeof(sp_int_digit));
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	f103 0208 	add.w	r2, r3, #8
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	009b      	lsls	r3, r3, #2
 801b028:	4619      	mov	r1, r3
 801b02a:	4610      	mov	r0, r2
 801b02c:	f7ff ff08 	bl	801ae40 <ForceZero>
    a->used = 0;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	2200      	movs	r2, #0
 801b034:	601a      	str	r2, [r3, #0]
    a->sign = MP_ZPOS;
#endif
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_zero(&a->raw);
#endif
}
 801b036:	bf00      	nop
 801b038:	3708      	adds	r7, #8
 801b03a:	46bd      	mov	sp, r7
 801b03c:	bd80      	pop	{r7, pc}

0801b03e <_sp_cmp_abs>:
 * @return  MP_GT when a is greater than b.
 * @return  MP_LT when a is less than b.
 * @return  MP_EQ when a is equals b.
 */
static int _sp_cmp_abs(sp_int* a, sp_int* b)
{
 801b03e:	b480      	push	{r7}
 801b040:	b085      	sub	sp, #20
 801b042:	af00      	add	r7, sp, #0
 801b044:	6078      	str	r0, [r7, #4]
 801b046:	6039      	str	r1, [r7, #0]
    int ret = MP_EQ;
 801b048:	2300      	movs	r3, #0
 801b04a:	60fb      	str	r3, [r7, #12]

    if (a->used > b->used) {
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681a      	ldr	r2, [r3, #0]
 801b050:	683b      	ldr	r3, [r7, #0]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	429a      	cmp	r2, r3
 801b056:	dd02      	ble.n	801b05e <_sp_cmp_abs+0x20>
        ret = MP_GT;
 801b058:	2301      	movs	r3, #1
 801b05a:	60fb      	str	r3, [r7, #12]
 801b05c:	e033      	b.n	801b0c6 <_sp_cmp_abs+0x88>
    }
    else if (a->used < b->used) {
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	681a      	ldr	r2, [r3, #0]
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	429a      	cmp	r2, r3
 801b068:	da03      	bge.n	801b072 <_sp_cmp_abs+0x34>
        ret = MP_LT;
 801b06a:	f04f 33ff 	mov.w	r3, #4294967295
 801b06e:	60fb      	str	r3, [r7, #12]
 801b070:	e029      	b.n	801b0c6 <_sp_cmp_abs+0x88>
    }
    else {
        int i;

        for (i = a->used - 1; i >= 0; i--) {
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	3b01      	subs	r3, #1
 801b078:	60bb      	str	r3, [r7, #8]
 801b07a:	e021      	b.n	801b0c0 <_sp_cmp_abs+0x82>
            if (a->dp[i] > b->dp[i]) {
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	68ba      	ldr	r2, [r7, #8]
 801b080:	3202      	adds	r2, #2
 801b082:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b086:	683b      	ldr	r3, [r7, #0]
 801b088:	68b9      	ldr	r1, [r7, #8]
 801b08a:	3102      	adds	r1, #2
 801b08c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b090:	429a      	cmp	r2, r3
 801b092:	d902      	bls.n	801b09a <_sp_cmp_abs+0x5c>
                ret = MP_GT;
 801b094:	2301      	movs	r3, #1
 801b096:	60fb      	str	r3, [r7, #12]
                break;
 801b098:	e015      	b.n	801b0c6 <_sp_cmp_abs+0x88>
            }
            else if (a->dp[i] < b->dp[i]) {
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	68ba      	ldr	r2, [r7, #8]
 801b09e:	3202      	adds	r2, #2
 801b0a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	68b9      	ldr	r1, [r7, #8]
 801b0a8:	3102      	adds	r1, #2
 801b0aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b0ae:	429a      	cmp	r2, r3
 801b0b0:	d203      	bcs.n	801b0ba <_sp_cmp_abs+0x7c>
                ret = MP_LT;
 801b0b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b0b6:	60fb      	str	r3, [r7, #12]
                break;
 801b0b8:	e005      	b.n	801b0c6 <_sp_cmp_abs+0x88>
        for (i = a->used - 1; i >= 0; i--) {
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	3b01      	subs	r3, #1
 801b0be:	60bb      	str	r3, [r7, #8]
 801b0c0:	68bb      	ldr	r3, [r7, #8]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	dada      	bge.n	801b07c <_sp_cmp_abs+0x3e>
            }
        }
    }

    return ret;
 801b0c6:	68fb      	ldr	r3, [r7, #12]
}
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	3714      	adds	r7, #20
 801b0cc:	46bd      	mov	sp, r7
 801b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d2:	4770      	bx	lr

0801b0d4 <_sp_cmp>:
 * @return  MP_GT when a is greater than b.
 * @return  MP_LT when a is less than b.
 * @return  MP_EQ when a is equals b.
 */
static int _sp_cmp(sp_int* a, sp_int* b)
{
 801b0d4:	b580      	push	{r7, lr}
 801b0d6:	b084      	sub	sp, #16
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	6078      	str	r0, [r7, #4]
 801b0dc:	6039      	str	r1, [r7, #0]
    int ret;

#ifdef WOLFSSL_SP_INT_NEGATIVE
    if (a->sign == b->sign) {
#endif
        ret = _sp_cmp_abs(a, b);
 801b0de:	6839      	ldr	r1, [r7, #0]
 801b0e0:	6878      	ldr	r0, [r7, #4]
 801b0e2:	f7ff ffac 	bl	801b03e <_sp_cmp_abs>
 801b0e6:	60f8      	str	r0, [r7, #12]
    else /* (a->sign < b->sign) */ {
        ret = MP_GT;
    }
#endif

    return ret;
 801b0e8:	68fb      	ldr	r3, [r7, #12]
}
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	3710      	adds	r7, #16
 801b0ee:	46bd      	mov	sp, r7
 801b0f0:	bd80      	pop	{r7, pc}

0801b0f2 <sp_cmp>:
 * @return  MP_GT when a is greater than b.
 * @return  MP_LT when a is less than b.
 * @return  MP_EQ when a is equals b.
 */
int sp_cmp(sp_int* a, sp_int* b)
{
 801b0f2:	b580      	push	{r7, lr}
 801b0f4:	b084      	sub	sp, #16
 801b0f6:	af00      	add	r7, sp, #0
 801b0f8:	6078      	str	r0, [r7, #4]
 801b0fa:	6039      	str	r1, [r7, #0]
    int ret;

    if (a == b) {
 801b0fc:	687a      	ldr	r2, [r7, #4]
 801b0fe:	683b      	ldr	r3, [r7, #0]
 801b100:	429a      	cmp	r2, r3
 801b102:	d102      	bne.n	801b10a <sp_cmp+0x18>
        ret = MP_EQ;
 801b104:	2300      	movs	r3, #0
 801b106:	60fb      	str	r3, [r7, #12]
 801b108:	e011      	b.n	801b12e <sp_cmp+0x3c>
    }
    else if (a == NULL) {
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d103      	bne.n	801b118 <sp_cmp+0x26>
        ret = MP_LT;
 801b110:	f04f 33ff 	mov.w	r3, #4294967295
 801b114:	60fb      	str	r3, [r7, #12]
 801b116:	e00a      	b.n	801b12e <sp_cmp+0x3c>
    }
    else if (b == NULL) {
 801b118:	683b      	ldr	r3, [r7, #0]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d102      	bne.n	801b124 <sp_cmp+0x32>
        ret = MP_GT;
 801b11e:	2301      	movs	r3, #1
 801b120:	60fb      	str	r3, [r7, #12]
 801b122:	e004      	b.n	801b12e <sp_cmp+0x3c>
    }
    else
    {
        ret = _sp_cmp(a, b);
 801b124:	6839      	ldr	r1, [r7, #0]
 801b126:	6878      	ldr	r0, [r7, #4]
 801b128:	f7ff ffd4 	bl	801b0d4 <_sp_cmp>
 801b12c:	60f8      	str	r0, [r7, #12]
    }

    return ret;
 801b12e:	68fb      	ldr	r3, [r7, #12]
}
 801b130:	4618      	mov	r0, r3
 801b132:	3710      	adds	r7, #16
 801b134:	46bd      	mov	sp, r7
 801b136:	bd80      	pop	{r7, pc}

0801b138 <sp_count_bits>:
 * @param  [in]  a  SP integer.
 *
 * @return  The number of bits in the number.
 */
int sp_count_bits(sp_int* a)
{
 801b138:	b480      	push	{r7}
 801b13a:	b085      	sub	sp, #20
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
    int r = 0;
 801b140:	2300      	movs	r3, #0
 801b142:	60fb      	str	r3, [r7, #12]

    if (a != NULL) {
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d03b      	beq.n	801b1c2 <sp_count_bits+0x8a>
        r = a->used - 1;
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	3b01      	subs	r3, #1
 801b150:	60fb      	str	r3, [r7, #12]
        while ((r >= 0) && (a->dp[r] == 0)) {
 801b152:	e002      	b.n	801b15a <sp_count_bits+0x22>
            r--;
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	3b01      	subs	r3, #1
 801b158:	60fb      	str	r3, [r7, #12]
        while ((r >= 0) && (a->dp[r] == 0)) {
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	db06      	blt.n	801b16e <sp_count_bits+0x36>
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	68fa      	ldr	r2, [r7, #12]
 801b164:	3202      	adds	r2, #2
 801b166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d0f2      	beq.n	801b154 <sp_count_bits+0x1c>
        }
        if (r < 0) {
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	2b00      	cmp	r3, #0
 801b172:	da02      	bge.n	801b17a <sp_count_bits+0x42>
            r = 0;
 801b174:	2300      	movs	r3, #0
 801b176:	60fb      	str	r3, [r7, #12]
 801b178:	e023      	b.n	801b1c2 <sp_count_bits+0x8a>
        }
        else {
            sp_int_digit d;

            d = a->dp[r];
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	68fa      	ldr	r2, [r7, #12]
 801b17e:	3202      	adds	r2, #2
 801b180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b184:	60bb      	str	r3, [r7, #8]
            r *= SP_WORD_SIZE;
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	015b      	lsls	r3, r3, #5
 801b18a:	60fb      	str	r3, [r7, #12]
            if (d > SP_HALF_MAX) {
 801b18c:	68bb      	ldr	r3, [r7, #8]
 801b18e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b192:	d313      	bcc.n	801b1bc <sp_count_bits+0x84>
                r += SP_WORD_SIZE;
 801b194:	68fb      	ldr	r3, [r7, #12]
 801b196:	3320      	adds	r3, #32
 801b198:	60fb      	str	r3, [r7, #12]
                while ((d & (1UL << (SP_WORD_SIZE - 1))) == 0) {
 801b19a:	e005      	b.n	801b1a8 <sp_count_bits+0x70>
                    r--;
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	3b01      	subs	r3, #1
 801b1a0:	60fb      	str	r3, [r7, #12]
                    d <<= 1;
 801b1a2:	68bb      	ldr	r3, [r7, #8]
 801b1a4:	005b      	lsls	r3, r3, #1
 801b1a6:	60bb      	str	r3, [r7, #8]
                while ((d & (1UL << (SP_WORD_SIZE - 1))) == 0) {
 801b1a8:	68bb      	ldr	r3, [r7, #8]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	daf6      	bge.n	801b19c <sp_count_bits+0x64>
 801b1ae:	e008      	b.n	801b1c2 <sp_count_bits+0x8a>
                }
            }
            else {
                while (d != 0) {
                    r++;
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	3301      	adds	r3, #1
 801b1b4:	60fb      	str	r3, [r7, #12]
                    d >>= 1;
 801b1b6:	68bb      	ldr	r3, [r7, #8]
 801b1b8:	085b      	lsrs	r3, r3, #1
 801b1ba:	60bb      	str	r3, [r7, #8]
                while (d != 0) {
 801b1bc:	68bb      	ldr	r3, [r7, #8]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d1f6      	bne.n	801b1b0 <sp_count_bits+0x78>
                }
            }
        }
    }

    return r;
 801b1c2:	68fb      	ldr	r3, [r7, #12]
}
 801b1c4:	4618      	mov	r0, r3
 801b1c6:	3714      	adds	r7, #20
 801b1c8:	46bd      	mov	sp, r7
 801b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ce:	4770      	bx	lr

0801b1d0 <sp_set>:
 *
 * @return  MP_OKAY on success.
 * @return  MP_VAL when a is NULL.
 */
int sp_set(sp_int* a, sp_int_digit d)
{
 801b1d0:	b480      	push	{r7}
 801b1d2:	b085      	sub	sp, #20
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	6078      	str	r0, [r7, #4]
 801b1d8:	6039      	str	r1, [r7, #0]
    int err = MP_OKAY;
 801b1da:	2300      	movs	r3, #0
 801b1dc:	60fb      	str	r3, [r7, #12]

    if (a == NULL) {
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d102      	bne.n	801b1ea <sp_set+0x1a>
        err = MP_VAL;
 801b1e4:	f06f 0302 	mvn.w	r3, #2
 801b1e8:	60fb      	str	r3, [r7, #12]
    }
    if (err == MP_OKAY) {
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d10b      	bne.n	801b208 <sp_set+0x38>
        a->dp[0] = d;
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	683a      	ldr	r2, [r7, #0]
 801b1f4:	609a      	str	r2, [r3, #8]
        a->used = d > 0;
 801b1f6:	683b      	ldr	r3, [r7, #0]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	bf14      	ite	ne
 801b1fc:	2301      	movne	r3, #1
 801b1fe:	2300      	moveq	r3, #0
 801b200:	b2db      	uxtb	r3, r3
 801b202:	461a      	mov	r2, r3
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	601a      	str	r2, [r3, #0]
    #ifdef WOLFSSL_SP_INT_NEGATIVE
        a->sign = MP_ZPOS;
    #endif
    }

    return err;
 801b208:	68fb      	ldr	r3, [r7, #12]
}
 801b20a:	4618      	mov	r0, r3
 801b20c:	3714      	adds	r7, #20
 801b20e:	46bd      	mov	sp, r7
 801b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b214:	4770      	bx	lr

0801b216 <sp_cmp_d>:
 * @return  MP_GT when a is greater than d.
 * @return  MP_LT when a is less than d.
 * @return  MP_EQ when a is equals d.
 */
int sp_cmp_d(sp_int* a, sp_int_digit d)
{
 801b216:	b480      	push	{r7}
 801b218:	b085      	sub	sp, #20
 801b21a:	af00      	add	r7, sp, #0
 801b21c:	6078      	str	r0, [r7, #4]
 801b21e:	6039      	str	r1, [r7, #0]
    int ret = MP_EQ;
 801b220:	2300      	movs	r3, #0
 801b222:	60fb      	str	r3, [r7, #12]

    if (a == NULL) {
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d103      	bne.n	801b232 <sp_cmp_d+0x1c>
        ret = MP_LT;
 801b22a:	f04f 33ff 	mov.w	r3, #4294967295
 801b22e:	60fb      	str	r3, [r7, #12]
 801b230:	e024      	b.n	801b27c <sp_cmp_d+0x66>
    }
    else
#endif
    {
        /* special case for zero*/
        if (a->used == 0) {
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d109      	bne.n	801b24e <sp_cmp_d+0x38>
            if (d == 0) {
 801b23a:	683b      	ldr	r3, [r7, #0]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d102      	bne.n	801b246 <sp_cmp_d+0x30>
                ret = MP_EQ;
 801b240:	2300      	movs	r3, #0
 801b242:	60fb      	str	r3, [r7, #12]
 801b244:	e01a      	b.n	801b27c <sp_cmp_d+0x66>
            }
            else {
                ret = MP_LT;
 801b246:	f04f 33ff 	mov.w	r3, #4294967295
 801b24a:	60fb      	str	r3, [r7, #12]
 801b24c:	e016      	b.n	801b27c <sp_cmp_d+0x66>
            }
        }
        else if (a->used > 1) {
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	2b01      	cmp	r3, #1
 801b254:	dd02      	ble.n	801b25c <sp_cmp_d+0x46>
            ret = MP_GT;
 801b256:	2301      	movs	r3, #1
 801b258:	60fb      	str	r3, [r7, #12]
 801b25a:	e00f      	b.n	801b27c <sp_cmp_d+0x66>
        }
        else {
            if (a->dp[0] > d) {
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	689b      	ldr	r3, [r3, #8]
 801b260:	683a      	ldr	r2, [r7, #0]
 801b262:	429a      	cmp	r2, r3
 801b264:	d202      	bcs.n	801b26c <sp_cmp_d+0x56>
                ret = MP_GT;
 801b266:	2301      	movs	r3, #1
 801b268:	60fb      	str	r3, [r7, #12]
 801b26a:	e007      	b.n	801b27c <sp_cmp_d+0x66>
            }
            else if (a->dp[0] < d) {
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	689b      	ldr	r3, [r3, #8]
 801b270:	683a      	ldr	r2, [r7, #0]
 801b272:	429a      	cmp	r2, r3
 801b274:	d902      	bls.n	801b27c <sp_cmp_d+0x66>
                ret = MP_LT;
 801b276:	f04f 33ff 	mov.w	r3, #4294967295
 801b27a:	60fb      	str	r3, [r7, #12]
            }
        }
    }

    return ret;
 801b27c:	68fb      	ldr	r3, [r7, #12]
}
 801b27e:	4618      	mov	r0, r3
 801b280:	3714      	adds	r7, #20
 801b282:	46bd      	mov	sp, r7
 801b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b288:	4770      	bx	lr

0801b28a <_sp_add_d>:
 *
 * @returnn  MP_OKAY on success.
 * @returnn  MP_VAL when result is too large for fixed size dp array.
 */
static int _sp_add_d(sp_int* a, sp_int_digit d, sp_int* r)
{
 801b28a:	b480      	push	{r7}
 801b28c:	b089      	sub	sp, #36	; 0x24
 801b28e:	af00      	add	r7, sp, #0
 801b290:	60f8      	str	r0, [r7, #12]
 801b292:	60b9      	str	r1, [r7, #8]
 801b294:	607a      	str	r2, [r7, #4]
    int err = MP_OKAY;
 801b296:	2300      	movs	r3, #0
 801b298:	61fb      	str	r3, [r7, #28]
    int i = 0;
 801b29a:	2300      	movs	r3, #0
 801b29c:	61bb      	str	r3, [r7, #24]
    sp_int_digit t;

    r->used = a->used;
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	681a      	ldr	r2, [r3, #0]
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	601a      	str	r2, [r3, #0]
    if (a->used == 0) {
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d108      	bne.n	801b2c0 <_sp_add_d+0x36>
        r->used = d > 0;
 801b2ae:	68bb      	ldr	r3, [r7, #8]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	bf14      	ite	ne
 801b2b4:	2301      	movne	r3, #1
 801b2b6:	2300      	moveq	r3, #0
 801b2b8:	b2db      	uxtb	r3, r3
 801b2ba:	461a      	mov	r2, r3
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	601a      	str	r2, [r3, #0]
    }
    t = a->dp[0] + d;
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	689b      	ldr	r3, [r3, #8]
 801b2c4:	68ba      	ldr	r2, [r7, #8]
 801b2c6:	4413      	add	r3, r2
 801b2c8:	617b      	str	r3, [r7, #20]
    if (t < a->dp[0]) {
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	689b      	ldr	r3, [r3, #8]
 801b2ce:	697a      	ldr	r2, [r7, #20]
 801b2d0:	429a      	cmp	r2, r3
 801b2d2:	d238      	bcs.n	801b346 <_sp_add_d+0xbc>
        for (++i; i < a->used; i++) {
 801b2d4:	69bb      	ldr	r3, [r7, #24]
 801b2d6:	3301      	adds	r3, #1
 801b2d8:	61bb      	str	r3, [r7, #24]
 801b2da:	e014      	b.n	801b306 <_sp_add_d+0x7c>
            r->dp[i] = a->dp[i] + 1;
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	69ba      	ldr	r2, [r7, #24]
 801b2e0:	3202      	adds	r2, #2
 801b2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2e6:	1c59      	adds	r1, r3, #1
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	69ba      	ldr	r2, [r7, #24]
 801b2ec:	3202      	adds	r2, #2
 801b2ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if (r->dp[i] != 0) {
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	69ba      	ldr	r2, [r7, #24]
 801b2f6:	3202      	adds	r2, #2
 801b2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d108      	bne.n	801b312 <_sp_add_d+0x88>
        for (++i; i < a->used; i++) {
 801b300:	69bb      	ldr	r3, [r7, #24]
 801b302:	3301      	adds	r3, #1
 801b304:	61bb      	str	r3, [r7, #24]
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	69ba      	ldr	r2, [r7, #24]
 801b30c:	429a      	cmp	r2, r3
 801b30e:	dbe5      	blt.n	801b2dc <_sp_add_d+0x52>
 801b310:	e000      	b.n	801b314 <_sp_add_d+0x8a>
               break;
 801b312:	bf00      	nop
            }
        }
        if (i == a->used) {
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	69ba      	ldr	r2, [r7, #24]
 801b31a:	429a      	cmp	r2, r3
 801b31c:	d113      	bne.n	801b346 <_sp_add_d+0xbc>
            r->used++;
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	1c5a      	adds	r2, r3, #1
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	601a      	str	r2, [r3, #0]
            if (i < r->size)
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	685b      	ldr	r3, [r3, #4]
 801b32c:	69ba      	ldr	r2, [r7, #24]
 801b32e:	429a      	cmp	r2, r3
 801b330:	da06      	bge.n	801b340 <_sp_add_d+0xb6>
                r->dp[i] = 1;
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	69ba      	ldr	r2, [r7, #24]
 801b336:	3202      	adds	r2, #2
 801b338:	2101      	movs	r1, #1
 801b33a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801b33e:	e002      	b.n	801b346 <_sp_add_d+0xbc>
            else
                err = MP_VAL;
 801b340:	f06f 0302 	mvn.w	r3, #2
 801b344:	61fb      	str	r3, [r7, #28]
        }
    }
    if (err == MP_OKAY) {
 801b346:	69fb      	ldr	r3, [r7, #28]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d11c      	bne.n	801b386 <_sp_add_d+0xfc>
        r->dp[0] = t;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	697a      	ldr	r2, [r7, #20]
 801b350:	609a      	str	r2, [r3, #8]
        if (r != a) {
 801b352:	687a      	ldr	r2, [r7, #4]
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	429a      	cmp	r2, r3
 801b358:	d015      	beq.n	801b386 <_sp_add_d+0xfc>
            for (++i; i < a->used; i++) {
 801b35a:	69bb      	ldr	r3, [r7, #24]
 801b35c:	3301      	adds	r3, #1
 801b35e:	61bb      	str	r3, [r7, #24]
 801b360:	e00c      	b.n	801b37c <_sp_add_d+0xf2>
                r->dp[i] = a->dp[i];
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	69ba      	ldr	r2, [r7, #24]
 801b366:	3202      	adds	r2, #2
 801b368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	69ba      	ldr	r2, [r7, #24]
 801b370:	3202      	adds	r2, #2
 801b372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (++i; i < a->used; i++) {
 801b376:	69bb      	ldr	r3, [r7, #24]
 801b378:	3301      	adds	r3, #1
 801b37a:	61bb      	str	r3, [r7, #24]
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	69ba      	ldr	r2, [r7, #24]
 801b382:	429a      	cmp	r2, r3
 801b384:	dbed      	blt.n	801b362 <_sp_add_d+0xd8>
            }
        }
    }

    return err;
 801b386:	69fb      	ldr	r3, [r7, #28]
}
 801b388:	4618      	mov	r0, r3
 801b38a:	3724      	adds	r7, #36	; 0x24
 801b38c:	46bd      	mov	sp, r7
 801b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b392:	4770      	bx	lr

0801b394 <sp_add_d>:
 *
 * @returnn  MP_OKAY on success.
 * @returnn  MP_VAL when result is too large for fixed size dp array.
 */
int sp_add_d(sp_int* a, sp_int_digit d, sp_int* r)
{
 801b394:	b580      	push	{r7, lr}
 801b396:	b086      	sub	sp, #24
 801b398:	af00      	add	r7, sp, #0
 801b39a:	60f8      	str	r0, [r7, #12]
 801b39c:	60b9      	str	r1, [r7, #8]
 801b39e:	607a      	str	r2, [r7, #4]
    int err = MP_OKAY;
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	617b      	str	r3, [r7, #20]

    if ((a == NULL) || (r == NULL)) {
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d002      	beq.n	801b3b0 <sp_add_d+0x1c>
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d103      	bne.n	801b3b8 <sp_add_d+0x24>
        err = MP_VAL;
 801b3b0:	f06f 0302 	mvn.w	r3, #2
 801b3b4:	617b      	str	r3, [r7, #20]
 801b3b6:	e005      	b.n	801b3c4 <sp_add_d+0x30>
    }
    else
    {
    #ifndef WOLFSSL_SP_INT_NEGATIVE
        err = _sp_add_d(a, d, r);
 801b3b8:	687a      	ldr	r2, [r7, #4]
 801b3ba:	68b9      	ldr	r1, [r7, #8]
 801b3bc:	68f8      	ldr	r0, [r7, #12]
 801b3be:	f7ff ff64 	bl	801b28a <_sp_add_d>
 801b3c2:	6178      	str	r0, [r7, #20]
            r->dp[0] = d - a->dp[0];
        }
    #endif
    }

    return err;
 801b3c4:	697b      	ldr	r3, [r7, #20]
}
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	3718      	adds	r7, #24
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	bd80      	pop	{r7, pc}

0801b3ce <sp_unsigned_bin_size>:
 * @param  [in]  a  SP integer.
 *
 * @return  The count of 8-bit values.
 */
int sp_unsigned_bin_size(sp_int* a)
{
 801b3ce:	b580      	push	{r7, lr}
 801b3d0:	b084      	sub	sp, #16
 801b3d2:	af00      	add	r7, sp, #0
 801b3d4:	6078      	str	r0, [r7, #4]
    int cnt = 0;
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	60fb      	str	r3, [r7, #12]

    if (a != NULL) {
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d009      	beq.n	801b3f4 <sp_unsigned_bin_size+0x26>
        cnt = (sp_count_bits(a) + 7) / 8;
 801b3e0:	6878      	ldr	r0, [r7, #4]
 801b3e2:	f7ff fea9 	bl	801b138 <sp_count_bits>
 801b3e6:	4603      	mov	r3, r0
 801b3e8:	3307      	adds	r3, #7
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	da00      	bge.n	801b3f0 <sp_unsigned_bin_size+0x22>
 801b3ee:	3307      	adds	r3, #7
 801b3f0:	10db      	asrs	r3, r3, #3
 801b3f2:	60fb      	str	r3, [r7, #12]
    }

    return cnt;
 801b3f4:	68fb      	ldr	r3, [r7, #12]
}
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	3710      	adds	r7, #16
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	bd80      	pop	{r7, pc}
	...

0801b400 <sp_read_unsigned_bin>:
 *
 * @return  MP_OKAY on success.
 * @return  MP_VAL when the number is too big to fit in an SP.
 */
int sp_read_unsigned_bin(sp_int* a, const byte* in, word32 inSz)
{
 801b400:	b480      	push	{r7}
 801b402:	b08b      	sub	sp, #44	; 0x2c
 801b404:	af00      	add	r7, sp, #0
 801b406:	60f8      	str	r0, [r7, #12]
 801b408:	60b9      	str	r1, [r7, #8]
 801b40a:	607a      	str	r2, [r7, #4]
    int err = MP_OKAY;
 801b40c:	2300      	movs	r3, #0
 801b40e:	627b      	str	r3, [r7, #36]	; 0x24

    if ((a == NULL) || ((in == NULL) && (inSz > 0))) {
 801b410:	68fb      	ldr	r3, [r7, #12]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d005      	beq.n	801b422 <sp_read_unsigned_bin+0x22>
 801b416:	68bb      	ldr	r3, [r7, #8]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d105      	bne.n	801b428 <sp_read_unsigned_bin+0x28>
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d002      	beq.n	801b428 <sp_read_unsigned_bin+0x28>
        err = MP_VAL;
 801b422:	f06f 0302 	mvn.w	r3, #2
 801b426:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Extra digit added to SP_INT_DIGITS to be used in calculations. */
    if ((err == MP_OKAY) && (inSz > ((word32)a->size - 1) * SP_WORD_SIZEOF)) {
 801b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d10b      	bne.n	801b446 <sp_read_unsigned_bin+0x46>
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	685b      	ldr	r3, [r3, #4]
 801b432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b436:	3b01      	subs	r3, #1
 801b438:	009b      	lsls	r3, r3, #2
 801b43a:	687a      	ldr	r2, [r7, #4]
 801b43c:	429a      	cmp	r2, r3
 801b43e:	d902      	bls.n	801b446 <sp_read_unsigned_bin+0x46>
        err = MP_VAL;
 801b440:	f06f 0302 	mvn.w	r3, #2
 801b444:	627b      	str	r3, [r7, #36]	; 0x24
        }
        a->used = j + 1;
        sp_clamp(a);
    }
#else
    if (err == MP_OKAY) {
 801b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b448:	2b00      	cmp	r3, #0
 801b44a:	f040 80ba 	bne.w	801b5c2 <sp_read_unsigned_bin+0x1c2>
        int i;
        int j;

        a->used = (inSz + SP_WORD_SIZEOF - 1) / SP_WORD_SIZEOF;
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	3303      	adds	r3, #3
 801b452:	089b      	lsrs	r3, r3, #2
 801b454:	461a      	mov	r2, r3
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	601a      	str	r2, [r3, #0]

        for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	3b01      	subs	r3, #1
 801b45e:	623b      	str	r3, [r7, #32]
 801b460:	2300      	movs	r3, #0
 801b462:	61fb      	str	r3, [r7, #28]
 801b464:	e03a      	b.n	801b4dc <sp_read_unsigned_bin+0xdc>
            a->dp[j]  = ((sp_int_digit)in[i - 0] <<  0);
 801b466:	6a3b      	ldr	r3, [r7, #32]
 801b468:	68ba      	ldr	r2, [r7, #8]
 801b46a:	4413      	add	r3, r2
 801b46c:	781b      	ldrb	r3, [r3, #0]
 801b46e:	4619      	mov	r1, r3
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	69fa      	ldr	r2, [r7, #28]
 801b474:	3202      	adds	r2, #2
 801b476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        #if SP_WORD_SIZE >= 16
            a->dp[j] |= ((sp_int_digit)in[i - 1] <<  8);
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	69fa      	ldr	r2, [r7, #28]
 801b47e:	3202      	adds	r2, #2
 801b480:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b484:	6a3b      	ldr	r3, [r7, #32]
 801b486:	3b01      	subs	r3, #1
 801b488:	68b9      	ldr	r1, [r7, #8]
 801b48a:	440b      	add	r3, r1
 801b48c:	781b      	ldrb	r3, [r3, #0]
 801b48e:	021b      	lsls	r3, r3, #8
 801b490:	ea42 0103 	orr.w	r1, r2, r3
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	69fa      	ldr	r2, [r7, #28]
 801b498:	3202      	adds	r2, #2
 801b49a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        #endif
        #if SP_WORD_SIZE >= 32
            a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	69fa      	ldr	r2, [r7, #28]
 801b4a2:	3202      	adds	r2, #2
 801b4a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b4a8:	6a3b      	ldr	r3, [r7, #32]
 801b4aa:	3b02      	subs	r3, #2
 801b4ac:	68b9      	ldr	r1, [r7, #8]
 801b4ae:	440b      	add	r3, r1
 801b4b0:	781b      	ldrb	r3, [r3, #0]
 801b4b2:	0419      	lsls	r1, r3, #16
                        ((sp_int_digit)in[i - 3] << 24);
 801b4b4:	6a3b      	ldr	r3, [r7, #32]
 801b4b6:	3b03      	subs	r3, #3
 801b4b8:	68b8      	ldr	r0, [r7, #8]
 801b4ba:	4403      	add	r3, r0
 801b4bc:	781b      	ldrb	r3, [r3, #0]
 801b4be:	061b      	lsls	r3, r3, #24
            a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
 801b4c0:	430b      	orrs	r3, r1
 801b4c2:	ea42 0103 	orr.w	r1, r2, r3
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	69fa      	ldr	r2, [r7, #28]
 801b4ca:	3202      	adds	r2, #2
 801b4cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            a->dp[j] |= ((sp_int_digit)in[i - 4] << 32) |
                        ((sp_int_digit)in[i - 5] << 40) |
                        ((sp_int_digit)in[i - 6] << 48) |
                        ((sp_int_digit)in[i - 7] << 56);
        #endif
            j++;
 801b4d0:	69fb      	ldr	r3, [r7, #28]
 801b4d2:	3301      	adds	r3, #1
 801b4d4:	61fb      	str	r3, [r7, #28]
        for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
 801b4d6:	6a3b      	ldr	r3, [r7, #32]
 801b4d8:	3b04      	subs	r3, #4
 801b4da:	623b      	str	r3, [r7, #32]
 801b4dc:	6a3b      	ldr	r3, [r7, #32]
 801b4de:	2b02      	cmp	r3, #2
 801b4e0:	dcc1      	bgt.n	801b466 <sp_read_unsigned_bin+0x66>
        }
        a->dp[j] = 0;
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	69fa      	ldr	r2, [r7, #28]
 801b4e6:	3202      	adds	r2, #2
 801b4e8:	2100      	movs	r1, #0
 801b4ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    #if SP_WORD_SIZE >= 16
        if (i >= 0) {
 801b4ee:	6a3b      	ldr	r3, [r7, #32]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	db50      	blt.n	801b596 <sp_read_unsigned_bin+0x196>
            byte *d = (byte*)a->dp;
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	3308      	adds	r3, #8
 801b4f8:	617b      	str	r3, [r7, #20]

            a->dp[a->used - 1] = 0;
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	1e5a      	subs	r2, r3, #1
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	3202      	adds	r2, #2
 801b504:	2100      	movs	r1, #0
 801b506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            switch (i) {
 801b50a:	6a3b      	ldr	r3, [r7, #32]
 801b50c:	2b06      	cmp	r3, #6
 801b50e:	d842      	bhi.n	801b596 <sp_read_unsigned_bin+0x196>
 801b510:	a201      	add	r2, pc, #4	; (adr r2, 801b518 <sp_read_unsigned_bin+0x118>)
 801b512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b516:	bf00      	nop
 801b518:	0801b589 	.word	0x0801b589
 801b51c:	0801b57b 	.word	0x0801b57b
 801b520:	0801b56d 	.word	0x0801b56d
 801b524:	0801b55f 	.word	0x0801b55f
 801b528:	0801b551 	.word	0x0801b551
 801b52c:	0801b543 	.word	0x0801b543
 801b530:	0801b535 	.word	0x0801b535
                case 6: d[inSz - 1 - 6] = in[6]; FALL_THROUGH;
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	3b07      	subs	r3, #7
 801b538:	697a      	ldr	r2, [r7, #20]
 801b53a:	4413      	add	r3, r2
 801b53c:	68ba      	ldr	r2, [r7, #8]
 801b53e:	7992      	ldrb	r2, [r2, #6]
 801b540:	701a      	strb	r2, [r3, #0]
                case 5: d[inSz - 1 - 5] = in[5]; FALL_THROUGH;
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	3b06      	subs	r3, #6
 801b546:	697a      	ldr	r2, [r7, #20]
 801b548:	4413      	add	r3, r2
 801b54a:	68ba      	ldr	r2, [r7, #8]
 801b54c:	7952      	ldrb	r2, [r2, #5]
 801b54e:	701a      	strb	r2, [r3, #0]
                case 4: d[inSz - 1 - 4] = in[4]; FALL_THROUGH;
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	3b05      	subs	r3, #5
 801b554:	697a      	ldr	r2, [r7, #20]
 801b556:	4413      	add	r3, r2
 801b558:	68ba      	ldr	r2, [r7, #8]
 801b55a:	7912      	ldrb	r2, [r2, #4]
 801b55c:	701a      	strb	r2, [r3, #0]
                case 3: d[inSz - 1 - 3] = in[3]; FALL_THROUGH;
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	3b04      	subs	r3, #4
 801b562:	697a      	ldr	r2, [r7, #20]
 801b564:	4413      	add	r3, r2
 801b566:	68ba      	ldr	r2, [r7, #8]
 801b568:	78d2      	ldrb	r2, [r2, #3]
 801b56a:	701a      	strb	r2, [r3, #0]
                case 2: d[inSz - 1 - 2] = in[2]; FALL_THROUGH;
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	3b03      	subs	r3, #3
 801b570:	697a      	ldr	r2, [r7, #20]
 801b572:	4413      	add	r3, r2
 801b574:	68ba      	ldr	r2, [r7, #8]
 801b576:	7892      	ldrb	r2, [r2, #2]
 801b578:	701a      	strb	r2, [r3, #0]
                case 1: d[inSz - 1 - 1] = in[1]; FALL_THROUGH;
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	3b02      	subs	r3, #2
 801b57e:	697a      	ldr	r2, [r7, #20]
 801b580:	4413      	add	r3, r2
 801b582:	68ba      	ldr	r2, [r7, #8]
 801b584:	7852      	ldrb	r2, [r2, #1]
 801b586:	701a      	strb	r2, [r3, #0]
                case 0: d[inSz - 1 - 0] = in[0];
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	3b01      	subs	r3, #1
 801b58c:	697a      	ldr	r2, [r7, #20]
 801b58e:	4413      	add	r3, r2
 801b590:	68ba      	ldr	r2, [r7, #8]
 801b592:	7812      	ldrb	r2, [r2, #0]
 801b594:	701a      	strb	r2, [r3, #0]
            }
        }
    #endif

        sp_clamp(a);
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	3b01      	subs	r3, #1
 801b59c:	61bb      	str	r3, [r7, #24]
 801b59e:	e002      	b.n	801b5a6 <sp_read_unsigned_bin+0x1a6>
 801b5a0:	69bb      	ldr	r3, [r7, #24]
 801b5a2:	3b01      	subs	r3, #1
 801b5a4:	61bb      	str	r3, [r7, #24]
 801b5a6:	69bb      	ldr	r3, [r7, #24]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	db06      	blt.n	801b5ba <sp_read_unsigned_bin+0x1ba>
 801b5ac:	68fb      	ldr	r3, [r7, #12]
 801b5ae:	69ba      	ldr	r2, [r7, #24]
 801b5b0:	3202      	adds	r2, #2
 801b5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d0f2      	beq.n	801b5a0 <sp_read_unsigned_bin+0x1a0>
 801b5ba:	69bb      	ldr	r3, [r7, #24]
 801b5bc:	1c5a      	adds	r2, r3, #1
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	601a      	str	r2, [r3, #0]
    }
#endif /* LITTLE_ENDIAN_ORDER */

    return err;
 801b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	372c      	adds	r7, #44	; 0x2c
 801b5c8:	46bd      	mov	sp, r7
 801b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ce:	4770      	bx	lr

0801b5d0 <_sp_read_radix_16>:
 * @return  MP_OKAY on success.
 * @return  MP_VAL when radix not supported, value is negative, or a character
 *          is not valid.
 */
static int _sp_read_radix_16(sp_int* a, const char* in)
{
 801b5d0:	b580      	push	{r7, lr}
 801b5d2:	b088      	sub	sp, #32
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	6078      	str	r0, [r7, #4]
 801b5d8:	6039      	str	r1, [r7, #0]
    int  err = MP_OKAY;
 801b5da:	2300      	movs	r3, #0
 801b5dc:	61fb      	str	r3, [r7, #28]
    int  i;
    int  s = 0;
 801b5de:	2300      	movs	r3, #0
 801b5e0:	617b      	str	r3, [r7, #20]
    int  j = 0;
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	613b      	str	r3, [r7, #16]
        a->sign = MP_NEG;
        in++;
    }
#endif

    while (*in == '0') {
 801b5e6:	e002      	b.n	801b5ee <_sp_read_radix_16+0x1e>
        in++;
 801b5e8:	683b      	ldr	r3, [r7, #0]
 801b5ea:	3301      	adds	r3, #1
 801b5ec:	603b      	str	r3, [r7, #0]
    while (*in == '0') {
 801b5ee:	683b      	ldr	r3, [r7, #0]
 801b5f0:	781b      	ldrb	r3, [r3, #0]
 801b5f2:	2b30      	cmp	r3, #48	; 0x30
 801b5f4:	d0f8      	beq.n	801b5e8 <_sp_read_radix_16+0x18>
    }

    a->dp[0] = 0;
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	2200      	movs	r2, #0
 801b5fa:	609a      	str	r2, [r3, #8]
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 801b5fc:	6838      	ldr	r0, [r7, #0]
 801b5fe:	f7e4 fdff 	bl	8000200 <strlen>
 801b602:	4603      	mov	r3, r0
 801b604:	3b01      	subs	r3, #1
 801b606:	61bb      	str	r3, [r7, #24]
 801b608:	e053      	b.n	801b6b2 <_sp_read_radix_16+0xe2>
        char ch = in[i];
 801b60a:	69bb      	ldr	r3, [r7, #24]
 801b60c:	683a      	ldr	r2, [r7, #0]
 801b60e:	4413      	add	r3, r2
 801b610:	781b      	ldrb	r3, [r3, #0]
 801b612:	73fb      	strb	r3, [r7, #15]
        if ((ch >= '0') && (ch <= '9')) {
 801b614:	7bfb      	ldrb	r3, [r7, #15]
 801b616:	2b2f      	cmp	r3, #47	; 0x2f
 801b618:	d906      	bls.n	801b628 <_sp_read_radix_16+0x58>
 801b61a:	7bfb      	ldrb	r3, [r7, #15]
 801b61c:	2b39      	cmp	r3, #57	; 0x39
 801b61e:	d803      	bhi.n	801b628 <_sp_read_radix_16+0x58>
            ch -= '0';
 801b620:	7bfb      	ldrb	r3, [r7, #15]
 801b622:	3b30      	subs	r3, #48	; 0x30
 801b624:	73fb      	strb	r3, [r7, #15]
 801b626:	e017      	b.n	801b658 <_sp_read_radix_16+0x88>
        }
        else if ((ch >= 'A') && (ch <= 'F')) {
 801b628:	7bfb      	ldrb	r3, [r7, #15]
 801b62a:	2b40      	cmp	r3, #64	; 0x40
 801b62c:	d906      	bls.n	801b63c <_sp_read_radix_16+0x6c>
 801b62e:	7bfb      	ldrb	r3, [r7, #15]
 801b630:	2b46      	cmp	r3, #70	; 0x46
 801b632:	d803      	bhi.n	801b63c <_sp_read_radix_16+0x6c>
            ch -= 'A' - 10;
 801b634:	7bfb      	ldrb	r3, [r7, #15]
 801b636:	3b37      	subs	r3, #55	; 0x37
 801b638:	73fb      	strb	r3, [r7, #15]
 801b63a:	e00d      	b.n	801b658 <_sp_read_radix_16+0x88>
        }
        else if ((ch >= 'a') && (ch <= 'f')) {
 801b63c:	7bfb      	ldrb	r3, [r7, #15]
 801b63e:	2b60      	cmp	r3, #96	; 0x60
 801b640:	d906      	bls.n	801b650 <_sp_read_radix_16+0x80>
 801b642:	7bfb      	ldrb	r3, [r7, #15]
 801b644:	2b66      	cmp	r3, #102	; 0x66
 801b646:	d803      	bhi.n	801b650 <_sp_read_radix_16+0x80>
            ch -= 'a' - 10;
 801b648:	7bfb      	ldrb	r3, [r7, #15]
 801b64a:	3b57      	subs	r3, #87	; 0x57
 801b64c:	73fb      	strb	r3, [r7, #15]
 801b64e:	e003      	b.n	801b658 <_sp_read_radix_16+0x88>
        }
        else {
            err = MP_VAL;
 801b650:	f06f 0302 	mvn.w	r3, #2
 801b654:	61fb      	str	r3, [r7, #28]
            break;
 801b656:	e02f      	b.n	801b6b8 <_sp_read_radix_16+0xe8>
        }

        if (s == SP_WORD_SIZE) {
 801b658:	697b      	ldr	r3, [r7, #20]
 801b65a:	2b20      	cmp	r3, #32
 801b65c:	d113      	bne.n	801b686 <_sp_read_radix_16+0xb6>
            j++;
 801b65e:	693b      	ldr	r3, [r7, #16]
 801b660:	3301      	adds	r3, #1
 801b662:	613b      	str	r3, [r7, #16]
            if (j >= a->size) {
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	685b      	ldr	r3, [r3, #4]
 801b668:	693a      	ldr	r2, [r7, #16]
 801b66a:	429a      	cmp	r2, r3
 801b66c:	db03      	blt.n	801b676 <_sp_read_radix_16+0xa6>
                err = MP_VAL;
 801b66e:	f06f 0302 	mvn.w	r3, #2
 801b672:	61fb      	str	r3, [r7, #28]
                break;
 801b674:	e020      	b.n	801b6b8 <_sp_read_radix_16+0xe8>
            }
            s = 0;
 801b676:	2300      	movs	r3, #0
 801b678:	617b      	str	r3, [r7, #20]
            a->dp[j] = 0;
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	693a      	ldr	r2, [r7, #16]
 801b67e:	3202      	adds	r2, #2
 801b680:	2100      	movs	r1, #0
 801b682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        a->dp[j] |= ((sp_int_digit)ch) << s;
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	693a      	ldr	r2, [r7, #16]
 801b68a:	3202      	adds	r2, #2
 801b68c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b690:	7bf9      	ldrb	r1, [r7, #15]
 801b692:	697b      	ldr	r3, [r7, #20]
 801b694:	fa01 f303 	lsl.w	r3, r1, r3
 801b698:	ea42 0103 	orr.w	r1, r2, r3
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	693a      	ldr	r2, [r7, #16]
 801b6a0:	3202      	adds	r2, #2
 801b6a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s += 4;
 801b6a6:	697b      	ldr	r3, [r7, #20]
 801b6a8:	3304      	adds	r3, #4
 801b6aa:	617b      	str	r3, [r7, #20]
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 801b6ac:	69bb      	ldr	r3, [r7, #24]
 801b6ae:	3b01      	subs	r3, #1
 801b6b0:	61bb      	str	r3, [r7, #24]
 801b6b2:	69bb      	ldr	r3, [r7, #24]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	daa8      	bge.n	801b60a <_sp_read_radix_16+0x3a>
    }

    if (err == MP_OKAY) {
 801b6b8:	69fb      	ldr	r3, [r7, #28]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d119      	bne.n	801b6f2 <_sp_read_radix_16+0x122>
        a->used = j + 1;
 801b6be:	693b      	ldr	r3, [r7, #16]
 801b6c0:	1c5a      	adds	r2, r3, #1
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	601a      	str	r2, [r3, #0]
        sp_clamp(a);
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	3b01      	subs	r3, #1
 801b6cc:	60bb      	str	r3, [r7, #8]
 801b6ce:	e002      	b.n	801b6d6 <_sp_read_radix_16+0x106>
 801b6d0:	68bb      	ldr	r3, [r7, #8]
 801b6d2:	3b01      	subs	r3, #1
 801b6d4:	60bb      	str	r3, [r7, #8]
 801b6d6:	68bb      	ldr	r3, [r7, #8]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	db06      	blt.n	801b6ea <_sp_read_radix_16+0x11a>
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	68ba      	ldr	r2, [r7, #8]
 801b6e0:	3202      	adds	r2, #2
 801b6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d0f2      	beq.n	801b6d0 <_sp_read_radix_16+0x100>
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	1c5a      	adds	r2, r3, #1
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	601a      	str	r2, [r3, #0]
    }

    return err;
 801b6f2:	69fb      	ldr	r3, [r7, #28]
}
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	3720      	adds	r7, #32
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	bd80      	pop	{r7, pc}

0801b6fc <sp_read_radix>:
 * @return  MP_OKAY on success.
 * @return  MP_VAL when a or in is NULL, radix not supported, value is negative,
 *          or a character is not valid.
 */
int sp_read_radix(sp_int* a, const char* in, int radix)
{
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b086      	sub	sp, #24
 801b700:	af00      	add	r7, sp, #0
 801b702:	60f8      	str	r0, [r7, #12]
 801b704:	60b9      	str	r1, [r7, #8]
 801b706:	607a      	str	r2, [r7, #4]
    int err = MP_OKAY;
 801b708:	2300      	movs	r3, #0
 801b70a:	617b      	str	r3, [r7, #20]

    if ((a == NULL) || (in == NULL)) {
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d002      	beq.n	801b718 <sp_read_radix+0x1c>
 801b712:	68bb      	ldr	r3, [r7, #8]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d102      	bne.n	801b71e <sp_read_radix+0x22>
        err = MP_VAL;
 801b718:	f06f 0302 	mvn.w	r3, #2
 801b71c:	617b      	str	r3, [r7, #20]
    }

    if (err == MP_OKAY) {
 801b71e:	697b      	ldr	r3, [r7, #20]
 801b720:	2b00      	cmp	r3, #0
 801b722:	d113      	bne.n	801b74c <sp_read_radix+0x50>
    #ifndef WOLFSSL_SP_INT_NEGATIVE
        if (*in == '-') {
 801b724:	68bb      	ldr	r3, [r7, #8]
 801b726:	781b      	ldrb	r3, [r3, #0]
 801b728:	2b2d      	cmp	r3, #45	; 0x2d
 801b72a:	d103      	bne.n	801b734 <sp_read_radix+0x38>
            err = MP_VAL;
 801b72c:	f06f 0302 	mvn.w	r3, #2
 801b730:	617b      	str	r3, [r7, #20]
 801b732:	e00b      	b.n	801b74c <sp_read_radix+0x50>
        }
        else
    #endif
        if (radix == 16) {
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	2b10      	cmp	r3, #16
 801b738:	d105      	bne.n	801b746 <sp_read_radix+0x4a>
            err = _sp_read_radix_16(a, in);
 801b73a:	68b9      	ldr	r1, [r7, #8]
 801b73c:	68f8      	ldr	r0, [r7, #12]
 801b73e:	f7ff ff47 	bl	801b5d0 <_sp_read_radix_16>
 801b742:	6178      	str	r0, [r7, #20]
 801b744:	e002      	b.n	801b74c <sp_read_radix+0x50>
        else if (radix == 10) {
            err = _sp_read_radix_10(a, in);
        }
    #endif
        else {
            err = MP_VAL;
 801b746:	f06f 0302 	mvn.w	r3, #2
 801b74a:	617b      	str	r3, [r7, #20]
        }
    }

    return err;
 801b74c:	697b      	ldr	r3, [r7, #20]
}
 801b74e:	4618      	mov	r0, r3
 801b750:	3718      	adds	r7, #24
 801b752:	46bd      	mov	sp, r7
 801b754:	bd80      	pop	{r7, pc}
	...

0801b758 <wolfCrypt_Init>:

/* Used to initialize state for wolfcrypt
   return 0 on success
 */
int wolfCrypt_Init(void)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b082      	sub	sp, #8
 801b75c:	af00      	add	r7, sp, #0
    int ret = 0;
 801b75e:	2300      	movs	r3, #0
 801b760:	607b      	str	r3, [r7, #4]
    if (initRefCount == 0) {
 801b762:	4b0b      	ldr	r3, [pc, #44]	; (801b790 <wolfCrypt_Init+0x38>)
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d107      	bne.n	801b77a <wolfCrypt_Init+0x22>
        }
    #endif

    #if WOLFSSL_CRYPT_HW_MUTEX
        /* If crypto hardware mutex protection is enabled, then initialize it */
        ret = wolfSSL_CryptHwMutexInit();
 801b76a:	f000 f813 	bl	801b794 <wolfSSL_CryptHwMutexInit>
 801b76e:	6078      	str	r0, [r7, #4]
        if (ret != 0) {
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d001      	beq.n	801b77a <wolfCrypt_Init+0x22>
            WOLFSSL_MSG("Hw crypt mutex init failed");
            return ret;
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	e005      	b.n	801b786 <wolfCrypt_Init+0x2e>
            return ret;
        }
        rpcmem_init();
#endif
    }
    initRefCount++;
 801b77a:	4b05      	ldr	r3, [pc, #20]	; (801b790 <wolfCrypt_Init+0x38>)
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	3301      	adds	r3, #1
 801b780:	4a03      	ldr	r2, [pc, #12]	; (801b790 <wolfCrypt_Init+0x38>)
 801b782:	6013      	str	r3, [r2, #0]

    return ret;
 801b784:	687b      	ldr	r3, [r7, #4]
}
 801b786:	4618      	mov	r0, r3
 801b788:	3708      	adds	r7, #8
 801b78a:	46bd      	mov	sp, r7
 801b78c:	bd80      	pop	{r7, pc}
 801b78e:	bf00      	nop
 801b790:	20000b60 	.word	0x20000b60

0801b794 <wolfSSL_CryptHwMutexInit>:
/* Mutex for protection of cryptography hardware */
static wolfSSL_Mutex wcCryptHwMutex;
static int wcCryptHwMutexInit = 0;

int wolfSSL_CryptHwMutexInit(void)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b082      	sub	sp, #8
 801b798:	af00      	add	r7, sp, #0
    int ret = 0;
 801b79a:	2300      	movs	r3, #0
 801b79c:	607b      	str	r3, [r7, #4]
    if (wcCryptHwMutexInit == 0) {
 801b79e:	4b09      	ldr	r3, [pc, #36]	; (801b7c4 <wolfSSL_CryptHwMutexInit+0x30>)
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d109      	bne.n	801b7ba <wolfSSL_CryptHwMutexInit+0x26>
        ret = wc_InitMutex(&wcCryptHwMutex);
 801b7a6:	4808      	ldr	r0, [pc, #32]	; (801b7c8 <wolfSSL_CryptHwMutexInit+0x34>)
 801b7a8:	f000 f810 	bl	801b7cc <wc_InitMutex>
 801b7ac:	6078      	str	r0, [r7, #4]
        if (ret == 0) {
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d102      	bne.n	801b7ba <wolfSSL_CryptHwMutexInit+0x26>
            wcCryptHwMutexInit = 1;
 801b7b4:	4b03      	ldr	r3, [pc, #12]	; (801b7c4 <wolfSSL_CryptHwMutexInit+0x30>)
 801b7b6:	2201      	movs	r2, #1
 801b7b8:	601a      	str	r2, [r3, #0]
        }
    }
    return ret;
 801b7ba:	687b      	ldr	r3, [r7, #4]
}
 801b7bc:	4618      	mov	r0, r3
 801b7be:	3708      	adds	r7, #8
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	bd80      	pop	{r7, pc}
 801b7c4:	20000b68 	.word	0x20000b68
 801b7c8:	20000b64 	.word	0x20000b64

0801b7cc <wc_InitMutex>:
    }
#endif /* defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER) */
#ifdef SINGLE_THREADED

    int wc_InitMutex(wolfSSL_Mutex* m)
    {
 801b7cc:	b480      	push	{r7}
 801b7ce:	b083      	sub	sp, #12
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 801b7d4:	2300      	movs	r3, #0
    }
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	370c      	adds	r7, #12
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e0:	4770      	bx	lr

0801b7e2 <wc_FreeMutex>:

    int wc_FreeMutex(wolfSSL_Mutex *m)
    {
 801b7e2:	b480      	push	{r7}
 801b7e4:	b083      	sub	sp, #12
 801b7e6:	af00      	add	r7, sp, #0
 801b7e8:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 801b7ea:	2300      	movs	r3, #0
    }
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	370c      	adds	r7, #12
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f6:	4770      	bx	lr

0801b7f8 <wc_LockMutex>:


    int wc_LockMutex(wolfSSL_Mutex *m)
    {
 801b7f8:	b480      	push	{r7}
 801b7fa:	b083      	sub	sp, #12
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 801b800:	2300      	movs	r3, #0
    }
 801b802:	4618      	mov	r0, r3
 801b804:	370c      	adds	r7, #12
 801b806:	46bd      	mov	sp, r7
 801b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b80c:	4770      	bx	lr

0801b80e <wc_UnLockMutex>:


    int wc_UnLockMutex(wolfSSL_Mutex *m)
    {
 801b80e:	b480      	push	{r7}
 801b810:	b083      	sub	sp, #12
 801b812:	af00      	add	r7, sp, #0
 801b814:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 801b816:	2300      	movs	r3, #0
    }
 801b818:	4618      	mov	r0, r3
 801b81a:	370c      	adds	r7, #12
 801b81c:	46bd      	mov	sp, r7
 801b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b822:	4770      	bx	lr

0801b824 <mystrnstr>:

#endif /* !NO_ASN_TIME */

#ifndef WOLFSSL_LEANPSK
char* mystrnstr(const char* s1, const char* s2, unsigned int n)
{
 801b824:	b580      	push	{r7, lr}
 801b826:	b086      	sub	sp, #24
 801b828:	af00      	add	r7, sp, #0
 801b82a:	60f8      	str	r0, [r7, #12]
 801b82c:	60b9      	str	r1, [r7, #8]
 801b82e:	607a      	str	r2, [r7, #4]
    unsigned int s2_len = (unsigned int)XSTRLEN(s2);
 801b830:	68b8      	ldr	r0, [r7, #8]
 801b832:	f7e4 fce5 	bl	8000200 <strlen>
 801b836:	6178      	str	r0, [r7, #20]

    if (s2_len == 0)
 801b838:	697b      	ldr	r3, [r7, #20]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d117      	bne.n	801b86e <mystrnstr+0x4a>
        return (char*)s1;
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	e01e      	b.n	801b880 <mystrnstr+0x5c>

    while (n >= s2_len && s1[0]) {
        if (s1[0] == s2[0])
 801b842:	68fb      	ldr	r3, [r7, #12]
 801b844:	781a      	ldrb	r2, [r3, #0]
 801b846:	68bb      	ldr	r3, [r7, #8]
 801b848:	781b      	ldrb	r3, [r3, #0]
 801b84a:	429a      	cmp	r2, r3
 801b84c:	d109      	bne.n	801b862 <mystrnstr+0x3e>
            if (XMEMCMP(s1, s2, s2_len) == 0)
 801b84e:	697a      	ldr	r2, [r7, #20]
 801b850:	68b9      	ldr	r1, [r7, #8]
 801b852:	68f8      	ldr	r0, [r7, #12]
 801b854:	f000 f8ce 	bl	801b9f4 <memcmp>
 801b858:	4603      	mov	r3, r0
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d101      	bne.n	801b862 <mystrnstr+0x3e>
                return (char*)s1;
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	e00e      	b.n	801b880 <mystrnstr+0x5c>
        s1++;
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	3301      	adds	r3, #1
 801b866:	60fb      	str	r3, [r7, #12]
        n--;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	3b01      	subs	r3, #1
 801b86c:	607b      	str	r3, [r7, #4]
    while (n >= s2_len && s1[0]) {
 801b86e:	687a      	ldr	r2, [r7, #4]
 801b870:	697b      	ldr	r3, [r7, #20]
 801b872:	429a      	cmp	r2, r3
 801b874:	d303      	bcc.n	801b87e <mystrnstr+0x5a>
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	781b      	ldrb	r3, [r3, #0]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d1e1      	bne.n	801b842 <mystrnstr+0x1e>
    }

    return NULL;
 801b87e:	2300      	movs	r3, #0
}
 801b880:	4618      	mov	r0, r3
 801b882:	3718      	adds	r7, #24
 801b884:	46bd      	mov	sp, r7
 801b886:	bd80      	pop	{r7, pc}

0801b888 <__errno>:
 801b888:	4b01      	ldr	r3, [pc, #4]	; (801b890 <__errno+0x8>)
 801b88a:	6818      	ldr	r0, [r3, #0]
 801b88c:	4770      	bx	lr
 801b88e:	bf00      	nop
 801b890:	20000060 	.word	0x20000060

0801b894 <getchar>:
 801b894:	4b07      	ldr	r3, [pc, #28]	; (801b8b4 <getchar+0x20>)
 801b896:	b510      	push	{r4, lr}
 801b898:	681c      	ldr	r4, [r3, #0]
 801b89a:	b124      	cbz	r4, 801b8a6 <getchar+0x12>
 801b89c:	69a3      	ldr	r3, [r4, #24]
 801b89e:	b913      	cbnz	r3, 801b8a6 <getchar+0x12>
 801b8a0:	4620      	mov	r0, r4
 801b8a2:	f000 fd99 	bl	801c3d8 <__sinit>
 801b8a6:	6861      	ldr	r1, [r4, #4]
 801b8a8:	4620      	mov	r0, r4
 801b8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8ae:	f000 be39 	b.w	801c524 <_getc_r>
 801b8b2:	bf00      	nop
 801b8b4:	20000060 	.word	0x20000060

0801b8b8 <_gets_r>:
 801b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8ba:	460e      	mov	r6, r1
 801b8bc:	4605      	mov	r5, r0
 801b8be:	b118      	cbz	r0, 801b8c8 <_gets_r+0x10>
 801b8c0:	6983      	ldr	r3, [r0, #24]
 801b8c2:	b90b      	cbnz	r3, 801b8c8 <_gets_r+0x10>
 801b8c4:	f000 fd88 	bl	801c3d8 <__sinit>
 801b8c8:	69ab      	ldr	r3, [r5, #24]
 801b8ca:	686c      	ldr	r4, [r5, #4]
 801b8cc:	b913      	cbnz	r3, 801b8d4 <_gets_r+0x1c>
 801b8ce:	4628      	mov	r0, r5
 801b8d0:	f000 fd82 	bl	801c3d8 <__sinit>
 801b8d4:	4b16      	ldr	r3, [pc, #88]	; (801b930 <_gets_r+0x78>)
 801b8d6:	429c      	cmp	r4, r3
 801b8d8:	d114      	bne.n	801b904 <_gets_r+0x4c>
 801b8da:	686c      	ldr	r4, [r5, #4]
 801b8dc:	4637      	mov	r7, r6
 801b8de:	6863      	ldr	r3, [r4, #4]
 801b8e0:	3b01      	subs	r3, #1
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	6063      	str	r3, [r4, #4]
 801b8e6:	da17      	bge.n	801b918 <_gets_r+0x60>
 801b8e8:	4621      	mov	r1, r4
 801b8ea:	4628      	mov	r0, r5
 801b8ec:	f000 f9f6 	bl	801bcdc <__srget_r>
 801b8f0:	280a      	cmp	r0, #10
 801b8f2:	d003      	beq.n	801b8fc <_gets_r+0x44>
 801b8f4:	1c43      	adds	r3, r0, #1
 801b8f6:	d115      	bne.n	801b924 <_gets_r+0x6c>
 801b8f8:	42b7      	cmp	r7, r6
 801b8fa:	d016      	beq.n	801b92a <_gets_r+0x72>
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	703b      	strb	r3, [r7, #0]
 801b900:	4630      	mov	r0, r6
 801b902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b904:	4b0b      	ldr	r3, [pc, #44]	; (801b934 <_gets_r+0x7c>)
 801b906:	429c      	cmp	r4, r3
 801b908:	d101      	bne.n	801b90e <_gets_r+0x56>
 801b90a:	68ac      	ldr	r4, [r5, #8]
 801b90c:	e7e6      	b.n	801b8dc <_gets_r+0x24>
 801b90e:	4b0a      	ldr	r3, [pc, #40]	; (801b938 <_gets_r+0x80>)
 801b910:	429c      	cmp	r4, r3
 801b912:	bf08      	it	eq
 801b914:	68ec      	ldreq	r4, [r5, #12]
 801b916:	e7e1      	b.n	801b8dc <_gets_r+0x24>
 801b918:	6823      	ldr	r3, [r4, #0]
 801b91a:	1c5a      	adds	r2, r3, #1
 801b91c:	6022      	str	r2, [r4, #0]
 801b91e:	7818      	ldrb	r0, [r3, #0]
 801b920:	280a      	cmp	r0, #10
 801b922:	d0eb      	beq.n	801b8fc <_gets_r+0x44>
 801b924:	f807 0b01 	strb.w	r0, [r7], #1
 801b928:	e7d9      	b.n	801b8de <_gets_r+0x26>
 801b92a:	2000      	movs	r0, #0
 801b92c:	e7e9      	b.n	801b902 <_gets_r+0x4a>
 801b92e:	bf00      	nop
 801b930:	0801ee58 	.word	0x0801ee58
 801b934:	0801ee78 	.word	0x0801ee78
 801b938:	0801ee38 	.word	0x0801ee38

0801b93c <gets>:
 801b93c:	4b02      	ldr	r3, [pc, #8]	; (801b948 <gets+0xc>)
 801b93e:	4601      	mov	r1, r0
 801b940:	6818      	ldr	r0, [r3, #0]
 801b942:	f7ff bfb9 	b.w	801b8b8 <_gets_r>
 801b946:	bf00      	nop
 801b948:	20000060 	.word	0x20000060

0801b94c <__libc_init_array>:
 801b94c:	b570      	push	{r4, r5, r6, lr}
 801b94e:	4e0d      	ldr	r6, [pc, #52]	; (801b984 <__libc_init_array+0x38>)
 801b950:	4c0d      	ldr	r4, [pc, #52]	; (801b988 <__libc_init_array+0x3c>)
 801b952:	1ba4      	subs	r4, r4, r6
 801b954:	10a4      	asrs	r4, r4, #2
 801b956:	2500      	movs	r5, #0
 801b958:	42a5      	cmp	r5, r4
 801b95a:	d109      	bne.n	801b970 <__libc_init_array+0x24>
 801b95c:	4e0b      	ldr	r6, [pc, #44]	; (801b98c <__libc_init_array+0x40>)
 801b95e:	4c0c      	ldr	r4, [pc, #48]	; (801b990 <__libc_init_array+0x44>)
 801b960:	f001 fc32 	bl	801d1c8 <_init>
 801b964:	1ba4      	subs	r4, r4, r6
 801b966:	10a4      	asrs	r4, r4, #2
 801b968:	2500      	movs	r5, #0
 801b96a:	42a5      	cmp	r5, r4
 801b96c:	d105      	bne.n	801b97a <__libc_init_array+0x2e>
 801b96e:	bd70      	pop	{r4, r5, r6, pc}
 801b970:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b974:	4798      	blx	r3
 801b976:	3501      	adds	r5, #1
 801b978:	e7ee      	b.n	801b958 <__libc_init_array+0xc>
 801b97a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b97e:	4798      	blx	r3
 801b980:	3501      	adds	r5, #1
 801b982:	e7f2      	b.n	801b96a <__libc_init_array+0x1e>
 801b984:	0801eed4 	.word	0x0801eed4
 801b988:	0801eed4 	.word	0x0801eed4
 801b98c:	0801eed4 	.word	0x0801eed4
 801b990:	0801eed8 	.word	0x0801eed8

0801b994 <__locale_ctype_ptr>:
 801b994:	4b04      	ldr	r3, [pc, #16]	; (801b9a8 <__locale_ctype_ptr+0x14>)
 801b996:	4a05      	ldr	r2, [pc, #20]	; (801b9ac <__locale_ctype_ptr+0x18>)
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	6a1b      	ldr	r3, [r3, #32]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	bf08      	it	eq
 801b9a0:	4613      	moveq	r3, r2
 801b9a2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801b9a6:	4770      	bx	lr
 801b9a8:	20000060 	.word	0x20000060
 801b9ac:	200000c4 	.word	0x200000c4

0801b9b0 <malloc>:
 801b9b0:	4b02      	ldr	r3, [pc, #8]	; (801b9bc <malloc+0xc>)
 801b9b2:	4601      	mov	r1, r0
 801b9b4:	6818      	ldr	r0, [r3, #0]
 801b9b6:	f000 b8a7 	b.w	801bb08 <_malloc_r>
 801b9ba:	bf00      	nop
 801b9bc:	20000060 	.word	0x20000060

0801b9c0 <free>:
 801b9c0:	4b02      	ldr	r3, [pc, #8]	; (801b9cc <free+0xc>)
 801b9c2:	4601      	mov	r1, r0
 801b9c4:	6818      	ldr	r0, [r3, #0]
 801b9c6:	f000 b851 	b.w	801ba6c <_free_r>
 801b9ca:	bf00      	nop
 801b9cc:	20000060 	.word	0x20000060

0801b9d0 <__ascii_mbtowc>:
 801b9d0:	b082      	sub	sp, #8
 801b9d2:	b901      	cbnz	r1, 801b9d6 <__ascii_mbtowc+0x6>
 801b9d4:	a901      	add	r1, sp, #4
 801b9d6:	b142      	cbz	r2, 801b9ea <__ascii_mbtowc+0x1a>
 801b9d8:	b14b      	cbz	r3, 801b9ee <__ascii_mbtowc+0x1e>
 801b9da:	7813      	ldrb	r3, [r2, #0]
 801b9dc:	600b      	str	r3, [r1, #0]
 801b9de:	7812      	ldrb	r2, [r2, #0]
 801b9e0:	1c10      	adds	r0, r2, #0
 801b9e2:	bf18      	it	ne
 801b9e4:	2001      	movne	r0, #1
 801b9e6:	b002      	add	sp, #8
 801b9e8:	4770      	bx	lr
 801b9ea:	4610      	mov	r0, r2
 801b9ec:	e7fb      	b.n	801b9e6 <__ascii_mbtowc+0x16>
 801b9ee:	f06f 0001 	mvn.w	r0, #1
 801b9f2:	e7f8      	b.n	801b9e6 <__ascii_mbtowc+0x16>

0801b9f4 <memcmp>:
 801b9f4:	b530      	push	{r4, r5, lr}
 801b9f6:	2400      	movs	r4, #0
 801b9f8:	42a2      	cmp	r2, r4
 801b9fa:	d101      	bne.n	801ba00 <memcmp+0xc>
 801b9fc:	2000      	movs	r0, #0
 801b9fe:	e007      	b.n	801ba10 <memcmp+0x1c>
 801ba00:	5d03      	ldrb	r3, [r0, r4]
 801ba02:	3401      	adds	r4, #1
 801ba04:	190d      	adds	r5, r1, r4
 801ba06:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801ba0a:	42ab      	cmp	r3, r5
 801ba0c:	d0f4      	beq.n	801b9f8 <memcmp+0x4>
 801ba0e:	1b58      	subs	r0, r3, r5
 801ba10:	bd30      	pop	{r4, r5, pc}

0801ba12 <memcpy>:
 801ba12:	b510      	push	{r4, lr}
 801ba14:	1e43      	subs	r3, r0, #1
 801ba16:	440a      	add	r2, r1
 801ba18:	4291      	cmp	r1, r2
 801ba1a:	d100      	bne.n	801ba1e <memcpy+0xc>
 801ba1c:	bd10      	pop	{r4, pc}
 801ba1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba22:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba26:	e7f7      	b.n	801ba18 <memcpy+0x6>

0801ba28 <memmove>:
 801ba28:	4288      	cmp	r0, r1
 801ba2a:	b510      	push	{r4, lr}
 801ba2c:	eb01 0302 	add.w	r3, r1, r2
 801ba30:	d807      	bhi.n	801ba42 <memmove+0x1a>
 801ba32:	1e42      	subs	r2, r0, #1
 801ba34:	4299      	cmp	r1, r3
 801ba36:	d00a      	beq.n	801ba4e <memmove+0x26>
 801ba38:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801ba40:	e7f8      	b.n	801ba34 <memmove+0xc>
 801ba42:	4283      	cmp	r3, r0
 801ba44:	d9f5      	bls.n	801ba32 <memmove+0xa>
 801ba46:	1881      	adds	r1, r0, r2
 801ba48:	1ad2      	subs	r2, r2, r3
 801ba4a:	42d3      	cmn	r3, r2
 801ba4c:	d100      	bne.n	801ba50 <memmove+0x28>
 801ba4e:	bd10      	pop	{r4, pc}
 801ba50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ba54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801ba58:	e7f7      	b.n	801ba4a <memmove+0x22>

0801ba5a <memset>:
 801ba5a:	4402      	add	r2, r0
 801ba5c:	4603      	mov	r3, r0
 801ba5e:	4293      	cmp	r3, r2
 801ba60:	d100      	bne.n	801ba64 <memset+0xa>
 801ba62:	4770      	bx	lr
 801ba64:	f803 1b01 	strb.w	r1, [r3], #1
 801ba68:	e7f9      	b.n	801ba5e <memset+0x4>
	...

0801ba6c <_free_r>:
 801ba6c:	b538      	push	{r3, r4, r5, lr}
 801ba6e:	4605      	mov	r5, r0
 801ba70:	2900      	cmp	r1, #0
 801ba72:	d045      	beq.n	801bb00 <_free_r+0x94>
 801ba74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ba78:	1f0c      	subs	r4, r1, #4
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	bfb8      	it	lt
 801ba7e:	18e4      	addlt	r4, r4, r3
 801ba80:	f000 fde0 	bl	801c644 <__malloc_lock>
 801ba84:	4a1f      	ldr	r2, [pc, #124]	; (801bb04 <_free_r+0x98>)
 801ba86:	6813      	ldr	r3, [r2, #0]
 801ba88:	4610      	mov	r0, r2
 801ba8a:	b933      	cbnz	r3, 801ba9a <_free_r+0x2e>
 801ba8c:	6063      	str	r3, [r4, #4]
 801ba8e:	6014      	str	r4, [r2, #0]
 801ba90:	4628      	mov	r0, r5
 801ba92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ba96:	f000 bdd6 	b.w	801c646 <__malloc_unlock>
 801ba9a:	42a3      	cmp	r3, r4
 801ba9c:	d90c      	bls.n	801bab8 <_free_r+0x4c>
 801ba9e:	6821      	ldr	r1, [r4, #0]
 801baa0:	1862      	adds	r2, r4, r1
 801baa2:	4293      	cmp	r3, r2
 801baa4:	bf04      	itt	eq
 801baa6:	681a      	ldreq	r2, [r3, #0]
 801baa8:	685b      	ldreq	r3, [r3, #4]
 801baaa:	6063      	str	r3, [r4, #4]
 801baac:	bf04      	itt	eq
 801baae:	1852      	addeq	r2, r2, r1
 801bab0:	6022      	streq	r2, [r4, #0]
 801bab2:	6004      	str	r4, [r0, #0]
 801bab4:	e7ec      	b.n	801ba90 <_free_r+0x24>
 801bab6:	4613      	mov	r3, r2
 801bab8:	685a      	ldr	r2, [r3, #4]
 801baba:	b10a      	cbz	r2, 801bac0 <_free_r+0x54>
 801babc:	42a2      	cmp	r2, r4
 801babe:	d9fa      	bls.n	801bab6 <_free_r+0x4a>
 801bac0:	6819      	ldr	r1, [r3, #0]
 801bac2:	1858      	adds	r0, r3, r1
 801bac4:	42a0      	cmp	r0, r4
 801bac6:	d10b      	bne.n	801bae0 <_free_r+0x74>
 801bac8:	6820      	ldr	r0, [r4, #0]
 801baca:	4401      	add	r1, r0
 801bacc:	1858      	adds	r0, r3, r1
 801bace:	4282      	cmp	r2, r0
 801bad0:	6019      	str	r1, [r3, #0]
 801bad2:	d1dd      	bne.n	801ba90 <_free_r+0x24>
 801bad4:	6810      	ldr	r0, [r2, #0]
 801bad6:	6852      	ldr	r2, [r2, #4]
 801bad8:	605a      	str	r2, [r3, #4]
 801bada:	4401      	add	r1, r0
 801badc:	6019      	str	r1, [r3, #0]
 801bade:	e7d7      	b.n	801ba90 <_free_r+0x24>
 801bae0:	d902      	bls.n	801bae8 <_free_r+0x7c>
 801bae2:	230c      	movs	r3, #12
 801bae4:	602b      	str	r3, [r5, #0]
 801bae6:	e7d3      	b.n	801ba90 <_free_r+0x24>
 801bae8:	6820      	ldr	r0, [r4, #0]
 801baea:	1821      	adds	r1, r4, r0
 801baec:	428a      	cmp	r2, r1
 801baee:	bf04      	itt	eq
 801baf0:	6811      	ldreq	r1, [r2, #0]
 801baf2:	6852      	ldreq	r2, [r2, #4]
 801baf4:	6062      	str	r2, [r4, #4]
 801baf6:	bf04      	itt	eq
 801baf8:	1809      	addeq	r1, r1, r0
 801bafa:	6021      	streq	r1, [r4, #0]
 801bafc:	605c      	str	r4, [r3, #4]
 801bafe:	e7c7      	b.n	801ba90 <_free_r+0x24>
 801bb00:	bd38      	pop	{r3, r4, r5, pc}
 801bb02:	bf00      	nop
 801bb04:	20000b6c 	.word	0x20000b6c

0801bb08 <_malloc_r>:
 801bb08:	b570      	push	{r4, r5, r6, lr}
 801bb0a:	1ccd      	adds	r5, r1, #3
 801bb0c:	f025 0503 	bic.w	r5, r5, #3
 801bb10:	3508      	adds	r5, #8
 801bb12:	2d0c      	cmp	r5, #12
 801bb14:	bf38      	it	cc
 801bb16:	250c      	movcc	r5, #12
 801bb18:	2d00      	cmp	r5, #0
 801bb1a:	4606      	mov	r6, r0
 801bb1c:	db01      	blt.n	801bb22 <_malloc_r+0x1a>
 801bb1e:	42a9      	cmp	r1, r5
 801bb20:	d903      	bls.n	801bb2a <_malloc_r+0x22>
 801bb22:	230c      	movs	r3, #12
 801bb24:	6033      	str	r3, [r6, #0]
 801bb26:	2000      	movs	r0, #0
 801bb28:	bd70      	pop	{r4, r5, r6, pc}
 801bb2a:	f000 fd8b 	bl	801c644 <__malloc_lock>
 801bb2e:	4a21      	ldr	r2, [pc, #132]	; (801bbb4 <_malloc_r+0xac>)
 801bb30:	6814      	ldr	r4, [r2, #0]
 801bb32:	4621      	mov	r1, r4
 801bb34:	b991      	cbnz	r1, 801bb5c <_malloc_r+0x54>
 801bb36:	4c20      	ldr	r4, [pc, #128]	; (801bbb8 <_malloc_r+0xb0>)
 801bb38:	6823      	ldr	r3, [r4, #0]
 801bb3a:	b91b      	cbnz	r3, 801bb44 <_malloc_r+0x3c>
 801bb3c:	4630      	mov	r0, r6
 801bb3e:	f000 f8f9 	bl	801bd34 <_sbrk_r>
 801bb42:	6020      	str	r0, [r4, #0]
 801bb44:	4629      	mov	r1, r5
 801bb46:	4630      	mov	r0, r6
 801bb48:	f000 f8f4 	bl	801bd34 <_sbrk_r>
 801bb4c:	1c43      	adds	r3, r0, #1
 801bb4e:	d124      	bne.n	801bb9a <_malloc_r+0x92>
 801bb50:	230c      	movs	r3, #12
 801bb52:	6033      	str	r3, [r6, #0]
 801bb54:	4630      	mov	r0, r6
 801bb56:	f000 fd76 	bl	801c646 <__malloc_unlock>
 801bb5a:	e7e4      	b.n	801bb26 <_malloc_r+0x1e>
 801bb5c:	680b      	ldr	r3, [r1, #0]
 801bb5e:	1b5b      	subs	r3, r3, r5
 801bb60:	d418      	bmi.n	801bb94 <_malloc_r+0x8c>
 801bb62:	2b0b      	cmp	r3, #11
 801bb64:	d90f      	bls.n	801bb86 <_malloc_r+0x7e>
 801bb66:	600b      	str	r3, [r1, #0]
 801bb68:	50cd      	str	r5, [r1, r3]
 801bb6a:	18cc      	adds	r4, r1, r3
 801bb6c:	4630      	mov	r0, r6
 801bb6e:	f000 fd6a 	bl	801c646 <__malloc_unlock>
 801bb72:	f104 000b 	add.w	r0, r4, #11
 801bb76:	1d23      	adds	r3, r4, #4
 801bb78:	f020 0007 	bic.w	r0, r0, #7
 801bb7c:	1ac3      	subs	r3, r0, r3
 801bb7e:	d0d3      	beq.n	801bb28 <_malloc_r+0x20>
 801bb80:	425a      	negs	r2, r3
 801bb82:	50e2      	str	r2, [r4, r3]
 801bb84:	e7d0      	b.n	801bb28 <_malloc_r+0x20>
 801bb86:	428c      	cmp	r4, r1
 801bb88:	684b      	ldr	r3, [r1, #4]
 801bb8a:	bf16      	itet	ne
 801bb8c:	6063      	strne	r3, [r4, #4]
 801bb8e:	6013      	streq	r3, [r2, #0]
 801bb90:	460c      	movne	r4, r1
 801bb92:	e7eb      	b.n	801bb6c <_malloc_r+0x64>
 801bb94:	460c      	mov	r4, r1
 801bb96:	6849      	ldr	r1, [r1, #4]
 801bb98:	e7cc      	b.n	801bb34 <_malloc_r+0x2c>
 801bb9a:	1cc4      	adds	r4, r0, #3
 801bb9c:	f024 0403 	bic.w	r4, r4, #3
 801bba0:	42a0      	cmp	r0, r4
 801bba2:	d005      	beq.n	801bbb0 <_malloc_r+0xa8>
 801bba4:	1a21      	subs	r1, r4, r0
 801bba6:	4630      	mov	r0, r6
 801bba8:	f000 f8c4 	bl	801bd34 <_sbrk_r>
 801bbac:	3001      	adds	r0, #1
 801bbae:	d0cf      	beq.n	801bb50 <_malloc_r+0x48>
 801bbb0:	6025      	str	r5, [r4, #0]
 801bbb2:	e7db      	b.n	801bb6c <_malloc_r+0x64>
 801bbb4:	20000b6c 	.word	0x20000b6c
 801bbb8:	20000b70 	.word	0x20000b70

0801bbbc <iprintf>:
 801bbbc:	b40f      	push	{r0, r1, r2, r3}
 801bbbe:	4b0a      	ldr	r3, [pc, #40]	; (801bbe8 <iprintf+0x2c>)
 801bbc0:	b513      	push	{r0, r1, r4, lr}
 801bbc2:	681c      	ldr	r4, [r3, #0]
 801bbc4:	b124      	cbz	r4, 801bbd0 <iprintf+0x14>
 801bbc6:	69a3      	ldr	r3, [r4, #24]
 801bbc8:	b913      	cbnz	r3, 801bbd0 <iprintf+0x14>
 801bbca:	4620      	mov	r0, r4
 801bbcc:	f000 fc04 	bl	801c3d8 <__sinit>
 801bbd0:	ab05      	add	r3, sp, #20
 801bbd2:	9a04      	ldr	r2, [sp, #16]
 801bbd4:	68a1      	ldr	r1, [r4, #8]
 801bbd6:	9301      	str	r3, [sp, #4]
 801bbd8:	4620      	mov	r0, r4
 801bbda:	f000 fed7 	bl	801c98c <_vfiprintf_r>
 801bbde:	b002      	add	sp, #8
 801bbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbe4:	b004      	add	sp, #16
 801bbe6:	4770      	bx	lr
 801bbe8:	20000060 	.word	0x20000060

0801bbec <putchar>:
 801bbec:	b538      	push	{r3, r4, r5, lr}
 801bbee:	4b08      	ldr	r3, [pc, #32]	; (801bc10 <putchar+0x24>)
 801bbf0:	681c      	ldr	r4, [r3, #0]
 801bbf2:	4605      	mov	r5, r0
 801bbf4:	b124      	cbz	r4, 801bc00 <putchar+0x14>
 801bbf6:	69a3      	ldr	r3, [r4, #24]
 801bbf8:	b913      	cbnz	r3, 801bc00 <putchar+0x14>
 801bbfa:	4620      	mov	r0, r4
 801bbfc:	f000 fbec 	bl	801c3d8 <__sinit>
 801bc00:	68a2      	ldr	r2, [r4, #8]
 801bc02:	4629      	mov	r1, r5
 801bc04:	4620      	mov	r0, r4
 801bc06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bc0a:	f001 b95d 	b.w	801cec8 <_putc_r>
 801bc0e:	bf00      	nop
 801bc10:	20000060 	.word	0x20000060

0801bc14 <_puts_r>:
 801bc14:	b570      	push	{r4, r5, r6, lr}
 801bc16:	460e      	mov	r6, r1
 801bc18:	4605      	mov	r5, r0
 801bc1a:	b118      	cbz	r0, 801bc24 <_puts_r+0x10>
 801bc1c:	6983      	ldr	r3, [r0, #24]
 801bc1e:	b90b      	cbnz	r3, 801bc24 <_puts_r+0x10>
 801bc20:	f000 fbda 	bl	801c3d8 <__sinit>
 801bc24:	69ab      	ldr	r3, [r5, #24]
 801bc26:	68ac      	ldr	r4, [r5, #8]
 801bc28:	b913      	cbnz	r3, 801bc30 <_puts_r+0x1c>
 801bc2a:	4628      	mov	r0, r5
 801bc2c:	f000 fbd4 	bl	801c3d8 <__sinit>
 801bc30:	4b23      	ldr	r3, [pc, #140]	; (801bcc0 <_puts_r+0xac>)
 801bc32:	429c      	cmp	r4, r3
 801bc34:	d117      	bne.n	801bc66 <_puts_r+0x52>
 801bc36:	686c      	ldr	r4, [r5, #4]
 801bc38:	89a3      	ldrh	r3, [r4, #12]
 801bc3a:	071b      	lsls	r3, r3, #28
 801bc3c:	d51d      	bpl.n	801bc7a <_puts_r+0x66>
 801bc3e:	6923      	ldr	r3, [r4, #16]
 801bc40:	b1db      	cbz	r3, 801bc7a <_puts_r+0x66>
 801bc42:	3e01      	subs	r6, #1
 801bc44:	68a3      	ldr	r3, [r4, #8]
 801bc46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bc4a:	3b01      	subs	r3, #1
 801bc4c:	60a3      	str	r3, [r4, #8]
 801bc4e:	b9e9      	cbnz	r1, 801bc8c <_puts_r+0x78>
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	da2e      	bge.n	801bcb2 <_puts_r+0x9e>
 801bc54:	4622      	mov	r2, r4
 801bc56:	210a      	movs	r1, #10
 801bc58:	4628      	mov	r0, r5
 801bc5a:	f000 f9ed 	bl	801c038 <__swbuf_r>
 801bc5e:	3001      	adds	r0, #1
 801bc60:	d011      	beq.n	801bc86 <_puts_r+0x72>
 801bc62:	200a      	movs	r0, #10
 801bc64:	e011      	b.n	801bc8a <_puts_r+0x76>
 801bc66:	4b17      	ldr	r3, [pc, #92]	; (801bcc4 <_puts_r+0xb0>)
 801bc68:	429c      	cmp	r4, r3
 801bc6a:	d101      	bne.n	801bc70 <_puts_r+0x5c>
 801bc6c:	68ac      	ldr	r4, [r5, #8]
 801bc6e:	e7e3      	b.n	801bc38 <_puts_r+0x24>
 801bc70:	4b15      	ldr	r3, [pc, #84]	; (801bcc8 <_puts_r+0xb4>)
 801bc72:	429c      	cmp	r4, r3
 801bc74:	bf08      	it	eq
 801bc76:	68ec      	ldreq	r4, [r5, #12]
 801bc78:	e7de      	b.n	801bc38 <_puts_r+0x24>
 801bc7a:	4621      	mov	r1, r4
 801bc7c:	4628      	mov	r0, r5
 801bc7e:	f000 fa3b 	bl	801c0f8 <__swsetup_r>
 801bc82:	2800      	cmp	r0, #0
 801bc84:	d0dd      	beq.n	801bc42 <_puts_r+0x2e>
 801bc86:	f04f 30ff 	mov.w	r0, #4294967295
 801bc8a:	bd70      	pop	{r4, r5, r6, pc}
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	da04      	bge.n	801bc9a <_puts_r+0x86>
 801bc90:	69a2      	ldr	r2, [r4, #24]
 801bc92:	429a      	cmp	r2, r3
 801bc94:	dc06      	bgt.n	801bca4 <_puts_r+0x90>
 801bc96:	290a      	cmp	r1, #10
 801bc98:	d004      	beq.n	801bca4 <_puts_r+0x90>
 801bc9a:	6823      	ldr	r3, [r4, #0]
 801bc9c:	1c5a      	adds	r2, r3, #1
 801bc9e:	6022      	str	r2, [r4, #0]
 801bca0:	7019      	strb	r1, [r3, #0]
 801bca2:	e7cf      	b.n	801bc44 <_puts_r+0x30>
 801bca4:	4622      	mov	r2, r4
 801bca6:	4628      	mov	r0, r5
 801bca8:	f000 f9c6 	bl	801c038 <__swbuf_r>
 801bcac:	3001      	adds	r0, #1
 801bcae:	d1c9      	bne.n	801bc44 <_puts_r+0x30>
 801bcb0:	e7e9      	b.n	801bc86 <_puts_r+0x72>
 801bcb2:	6823      	ldr	r3, [r4, #0]
 801bcb4:	200a      	movs	r0, #10
 801bcb6:	1c5a      	adds	r2, r3, #1
 801bcb8:	6022      	str	r2, [r4, #0]
 801bcba:	7018      	strb	r0, [r3, #0]
 801bcbc:	e7e5      	b.n	801bc8a <_puts_r+0x76>
 801bcbe:	bf00      	nop
 801bcc0:	0801ee58 	.word	0x0801ee58
 801bcc4:	0801ee78 	.word	0x0801ee78
 801bcc8:	0801ee38 	.word	0x0801ee38

0801bccc <puts>:
 801bccc:	4b02      	ldr	r3, [pc, #8]	; (801bcd8 <puts+0xc>)
 801bcce:	4601      	mov	r1, r0
 801bcd0:	6818      	ldr	r0, [r3, #0]
 801bcd2:	f7ff bf9f 	b.w	801bc14 <_puts_r>
 801bcd6:	bf00      	nop
 801bcd8:	20000060 	.word	0x20000060

0801bcdc <__srget_r>:
 801bcdc:	b538      	push	{r3, r4, r5, lr}
 801bcde:	460c      	mov	r4, r1
 801bce0:	4605      	mov	r5, r0
 801bce2:	b118      	cbz	r0, 801bcec <__srget_r+0x10>
 801bce4:	6983      	ldr	r3, [r0, #24]
 801bce6:	b90b      	cbnz	r3, 801bcec <__srget_r+0x10>
 801bce8:	f000 fb76 	bl	801c3d8 <__sinit>
 801bcec:	4b0e      	ldr	r3, [pc, #56]	; (801bd28 <__srget_r+0x4c>)
 801bcee:	429c      	cmp	r4, r3
 801bcf0:	d10d      	bne.n	801bd0e <__srget_r+0x32>
 801bcf2:	686c      	ldr	r4, [r5, #4]
 801bcf4:	4621      	mov	r1, r4
 801bcf6:	4628      	mov	r0, r5
 801bcf8:	f001 f926 	bl	801cf48 <__srefill_r>
 801bcfc:	b988      	cbnz	r0, 801bd22 <__srget_r+0x46>
 801bcfe:	6863      	ldr	r3, [r4, #4]
 801bd00:	3b01      	subs	r3, #1
 801bd02:	6063      	str	r3, [r4, #4]
 801bd04:	6823      	ldr	r3, [r4, #0]
 801bd06:	1c5a      	adds	r2, r3, #1
 801bd08:	6022      	str	r2, [r4, #0]
 801bd0a:	7818      	ldrb	r0, [r3, #0]
 801bd0c:	bd38      	pop	{r3, r4, r5, pc}
 801bd0e:	4b07      	ldr	r3, [pc, #28]	; (801bd2c <__srget_r+0x50>)
 801bd10:	429c      	cmp	r4, r3
 801bd12:	d101      	bne.n	801bd18 <__srget_r+0x3c>
 801bd14:	68ac      	ldr	r4, [r5, #8]
 801bd16:	e7ed      	b.n	801bcf4 <__srget_r+0x18>
 801bd18:	4b05      	ldr	r3, [pc, #20]	; (801bd30 <__srget_r+0x54>)
 801bd1a:	429c      	cmp	r4, r3
 801bd1c:	bf08      	it	eq
 801bd1e:	68ec      	ldreq	r4, [r5, #12]
 801bd20:	e7e8      	b.n	801bcf4 <__srget_r+0x18>
 801bd22:	f04f 30ff 	mov.w	r0, #4294967295
 801bd26:	e7f1      	b.n	801bd0c <__srget_r+0x30>
 801bd28:	0801ee58 	.word	0x0801ee58
 801bd2c:	0801ee78 	.word	0x0801ee78
 801bd30:	0801ee38 	.word	0x0801ee38

0801bd34 <_sbrk_r>:
 801bd34:	b538      	push	{r3, r4, r5, lr}
 801bd36:	4c06      	ldr	r4, [pc, #24]	; (801bd50 <_sbrk_r+0x1c>)
 801bd38:	2300      	movs	r3, #0
 801bd3a:	4605      	mov	r5, r0
 801bd3c:	4608      	mov	r0, r1
 801bd3e:	6023      	str	r3, [r4, #0]
 801bd40:	f7e5 fc32 	bl	80015a8 <_sbrk>
 801bd44:	1c43      	adds	r3, r0, #1
 801bd46:	d102      	bne.n	801bd4e <_sbrk_r+0x1a>
 801bd48:	6823      	ldr	r3, [r4, #0]
 801bd4a:	b103      	cbz	r3, 801bd4e <_sbrk_r+0x1a>
 801bd4c:	602b      	str	r3, [r5, #0]
 801bd4e:	bd38      	pop	{r3, r4, r5, pc}
 801bd50:	200015b4 	.word	0x200015b4

0801bd54 <setvbuf>:
 801bd54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bd58:	461d      	mov	r5, r3
 801bd5a:	4b51      	ldr	r3, [pc, #324]	; (801bea0 <setvbuf+0x14c>)
 801bd5c:	681e      	ldr	r6, [r3, #0]
 801bd5e:	4604      	mov	r4, r0
 801bd60:	460f      	mov	r7, r1
 801bd62:	4690      	mov	r8, r2
 801bd64:	b126      	cbz	r6, 801bd70 <setvbuf+0x1c>
 801bd66:	69b3      	ldr	r3, [r6, #24]
 801bd68:	b913      	cbnz	r3, 801bd70 <setvbuf+0x1c>
 801bd6a:	4630      	mov	r0, r6
 801bd6c:	f000 fb34 	bl	801c3d8 <__sinit>
 801bd70:	4b4c      	ldr	r3, [pc, #304]	; (801bea4 <setvbuf+0x150>)
 801bd72:	429c      	cmp	r4, r3
 801bd74:	d152      	bne.n	801be1c <setvbuf+0xc8>
 801bd76:	6874      	ldr	r4, [r6, #4]
 801bd78:	f1b8 0f02 	cmp.w	r8, #2
 801bd7c:	d006      	beq.n	801bd8c <setvbuf+0x38>
 801bd7e:	f1b8 0f01 	cmp.w	r8, #1
 801bd82:	f200 8089 	bhi.w	801be98 <setvbuf+0x144>
 801bd86:	2d00      	cmp	r5, #0
 801bd88:	f2c0 8086 	blt.w	801be98 <setvbuf+0x144>
 801bd8c:	4621      	mov	r1, r4
 801bd8e:	4630      	mov	r0, r6
 801bd90:	f000 faa6 	bl	801c2e0 <_fflush_r>
 801bd94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bd96:	b141      	cbz	r1, 801bdaa <setvbuf+0x56>
 801bd98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd9c:	4299      	cmp	r1, r3
 801bd9e:	d002      	beq.n	801bda6 <setvbuf+0x52>
 801bda0:	4630      	mov	r0, r6
 801bda2:	f7ff fe63 	bl	801ba6c <_free_r>
 801bda6:	2300      	movs	r3, #0
 801bda8:	6363      	str	r3, [r4, #52]	; 0x34
 801bdaa:	2300      	movs	r3, #0
 801bdac:	61a3      	str	r3, [r4, #24]
 801bdae:	6063      	str	r3, [r4, #4]
 801bdb0:	89a3      	ldrh	r3, [r4, #12]
 801bdb2:	061b      	lsls	r3, r3, #24
 801bdb4:	d503      	bpl.n	801bdbe <setvbuf+0x6a>
 801bdb6:	6921      	ldr	r1, [r4, #16]
 801bdb8:	4630      	mov	r0, r6
 801bdba:	f7ff fe57 	bl	801ba6c <_free_r>
 801bdbe:	89a3      	ldrh	r3, [r4, #12]
 801bdc0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801bdc4:	f023 0303 	bic.w	r3, r3, #3
 801bdc8:	f1b8 0f02 	cmp.w	r8, #2
 801bdcc:	81a3      	strh	r3, [r4, #12]
 801bdce:	d05d      	beq.n	801be8c <setvbuf+0x138>
 801bdd0:	ab01      	add	r3, sp, #4
 801bdd2:	466a      	mov	r2, sp
 801bdd4:	4621      	mov	r1, r4
 801bdd6:	4630      	mov	r0, r6
 801bdd8:	f000 fbd0 	bl	801c57c <__swhatbuf_r>
 801bddc:	89a3      	ldrh	r3, [r4, #12]
 801bdde:	4318      	orrs	r0, r3
 801bde0:	81a0      	strh	r0, [r4, #12]
 801bde2:	bb2d      	cbnz	r5, 801be30 <setvbuf+0xdc>
 801bde4:	9d00      	ldr	r5, [sp, #0]
 801bde6:	4628      	mov	r0, r5
 801bde8:	f7ff fde2 	bl	801b9b0 <malloc>
 801bdec:	4607      	mov	r7, r0
 801bdee:	2800      	cmp	r0, #0
 801bdf0:	d14e      	bne.n	801be90 <setvbuf+0x13c>
 801bdf2:	f8dd 9000 	ldr.w	r9, [sp]
 801bdf6:	45a9      	cmp	r9, r5
 801bdf8:	d13c      	bne.n	801be74 <setvbuf+0x120>
 801bdfa:	f04f 30ff 	mov.w	r0, #4294967295
 801bdfe:	89a3      	ldrh	r3, [r4, #12]
 801be00:	f043 0302 	orr.w	r3, r3, #2
 801be04:	81a3      	strh	r3, [r4, #12]
 801be06:	2300      	movs	r3, #0
 801be08:	60a3      	str	r3, [r4, #8]
 801be0a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801be0e:	6023      	str	r3, [r4, #0]
 801be10:	6123      	str	r3, [r4, #16]
 801be12:	2301      	movs	r3, #1
 801be14:	6163      	str	r3, [r4, #20]
 801be16:	b003      	add	sp, #12
 801be18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be1c:	4b22      	ldr	r3, [pc, #136]	; (801bea8 <setvbuf+0x154>)
 801be1e:	429c      	cmp	r4, r3
 801be20:	d101      	bne.n	801be26 <setvbuf+0xd2>
 801be22:	68b4      	ldr	r4, [r6, #8]
 801be24:	e7a8      	b.n	801bd78 <setvbuf+0x24>
 801be26:	4b21      	ldr	r3, [pc, #132]	; (801beac <setvbuf+0x158>)
 801be28:	429c      	cmp	r4, r3
 801be2a:	bf08      	it	eq
 801be2c:	68f4      	ldreq	r4, [r6, #12]
 801be2e:	e7a3      	b.n	801bd78 <setvbuf+0x24>
 801be30:	2f00      	cmp	r7, #0
 801be32:	d0d8      	beq.n	801bde6 <setvbuf+0x92>
 801be34:	69b3      	ldr	r3, [r6, #24]
 801be36:	b913      	cbnz	r3, 801be3e <setvbuf+0xea>
 801be38:	4630      	mov	r0, r6
 801be3a:	f000 facd 	bl	801c3d8 <__sinit>
 801be3e:	f1b8 0f01 	cmp.w	r8, #1
 801be42:	bf08      	it	eq
 801be44:	89a3      	ldrheq	r3, [r4, #12]
 801be46:	6027      	str	r7, [r4, #0]
 801be48:	bf04      	itt	eq
 801be4a:	f043 0301 	orreq.w	r3, r3, #1
 801be4e:	81a3      	strheq	r3, [r4, #12]
 801be50:	89a3      	ldrh	r3, [r4, #12]
 801be52:	f013 0008 	ands.w	r0, r3, #8
 801be56:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801be5a:	d01b      	beq.n	801be94 <setvbuf+0x140>
 801be5c:	f013 0001 	ands.w	r0, r3, #1
 801be60:	bf18      	it	ne
 801be62:	426d      	negne	r5, r5
 801be64:	f04f 0300 	mov.w	r3, #0
 801be68:	bf1d      	ittte	ne
 801be6a:	60a3      	strne	r3, [r4, #8]
 801be6c:	61a5      	strne	r5, [r4, #24]
 801be6e:	4618      	movne	r0, r3
 801be70:	60a5      	streq	r5, [r4, #8]
 801be72:	e7d0      	b.n	801be16 <setvbuf+0xc2>
 801be74:	4648      	mov	r0, r9
 801be76:	f7ff fd9b 	bl	801b9b0 <malloc>
 801be7a:	4607      	mov	r7, r0
 801be7c:	2800      	cmp	r0, #0
 801be7e:	d0bc      	beq.n	801bdfa <setvbuf+0xa6>
 801be80:	89a3      	ldrh	r3, [r4, #12]
 801be82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801be86:	81a3      	strh	r3, [r4, #12]
 801be88:	464d      	mov	r5, r9
 801be8a:	e7d3      	b.n	801be34 <setvbuf+0xe0>
 801be8c:	2000      	movs	r0, #0
 801be8e:	e7b6      	b.n	801bdfe <setvbuf+0xaa>
 801be90:	46a9      	mov	r9, r5
 801be92:	e7f5      	b.n	801be80 <setvbuf+0x12c>
 801be94:	60a0      	str	r0, [r4, #8]
 801be96:	e7be      	b.n	801be16 <setvbuf+0xc2>
 801be98:	f04f 30ff 	mov.w	r0, #4294967295
 801be9c:	e7bb      	b.n	801be16 <setvbuf+0xc2>
 801be9e:	bf00      	nop
 801bea0:	20000060 	.word	0x20000060
 801bea4:	0801ee58 	.word	0x0801ee58
 801bea8:	0801ee78 	.word	0x0801ee78
 801beac:	0801ee38 	.word	0x0801ee38

0801beb0 <siprintf>:
 801beb0:	b40e      	push	{r1, r2, r3}
 801beb2:	b500      	push	{lr}
 801beb4:	b09c      	sub	sp, #112	; 0x70
 801beb6:	ab1d      	add	r3, sp, #116	; 0x74
 801beb8:	9002      	str	r0, [sp, #8]
 801beba:	9006      	str	r0, [sp, #24]
 801bebc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bec0:	4809      	ldr	r0, [pc, #36]	; (801bee8 <siprintf+0x38>)
 801bec2:	9107      	str	r1, [sp, #28]
 801bec4:	9104      	str	r1, [sp, #16]
 801bec6:	4909      	ldr	r1, [pc, #36]	; (801beec <siprintf+0x3c>)
 801bec8:	f853 2b04 	ldr.w	r2, [r3], #4
 801becc:	9105      	str	r1, [sp, #20]
 801bece:	6800      	ldr	r0, [r0, #0]
 801bed0:	9301      	str	r3, [sp, #4]
 801bed2:	a902      	add	r1, sp, #8
 801bed4:	f000 fc38 	bl	801c748 <_svfiprintf_r>
 801bed8:	9b02      	ldr	r3, [sp, #8]
 801beda:	2200      	movs	r2, #0
 801bedc:	701a      	strb	r2, [r3, #0]
 801bede:	b01c      	add	sp, #112	; 0x70
 801bee0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bee4:	b003      	add	sp, #12
 801bee6:	4770      	bx	lr
 801bee8:	20000060 	.word	0x20000060
 801beec:	ffff0208 	.word	0xffff0208

0801bef0 <strcat>:
 801bef0:	b510      	push	{r4, lr}
 801bef2:	4603      	mov	r3, r0
 801bef4:	781a      	ldrb	r2, [r3, #0]
 801bef6:	1c5c      	adds	r4, r3, #1
 801bef8:	b93a      	cbnz	r2, 801bf0a <strcat+0x1a>
 801befa:	3b01      	subs	r3, #1
 801befc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bf00:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bf04:	2a00      	cmp	r2, #0
 801bf06:	d1f9      	bne.n	801befc <strcat+0xc>
 801bf08:	bd10      	pop	{r4, pc}
 801bf0a:	4623      	mov	r3, r4
 801bf0c:	e7f2      	b.n	801bef4 <strcat+0x4>

0801bf0e <strncmp>:
 801bf0e:	b510      	push	{r4, lr}
 801bf10:	b16a      	cbz	r2, 801bf2e <strncmp+0x20>
 801bf12:	3901      	subs	r1, #1
 801bf14:	1884      	adds	r4, r0, r2
 801bf16:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bf1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bf1e:	4293      	cmp	r3, r2
 801bf20:	d103      	bne.n	801bf2a <strncmp+0x1c>
 801bf22:	42a0      	cmp	r0, r4
 801bf24:	d001      	beq.n	801bf2a <strncmp+0x1c>
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d1f5      	bne.n	801bf16 <strncmp+0x8>
 801bf2a:	1a98      	subs	r0, r3, r2
 801bf2c:	bd10      	pop	{r4, pc}
 801bf2e:	4610      	mov	r0, r2
 801bf30:	e7fc      	b.n	801bf2c <strncmp+0x1e>

0801bf32 <strncpy>:
 801bf32:	b570      	push	{r4, r5, r6, lr}
 801bf34:	3901      	subs	r1, #1
 801bf36:	4604      	mov	r4, r0
 801bf38:	b902      	cbnz	r2, 801bf3c <strncpy+0xa>
 801bf3a:	bd70      	pop	{r4, r5, r6, pc}
 801bf3c:	4623      	mov	r3, r4
 801bf3e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801bf42:	f803 5b01 	strb.w	r5, [r3], #1
 801bf46:	1e56      	subs	r6, r2, #1
 801bf48:	b92d      	cbnz	r5, 801bf56 <strncpy+0x24>
 801bf4a:	4414      	add	r4, r2
 801bf4c:	42a3      	cmp	r3, r4
 801bf4e:	d0f4      	beq.n	801bf3a <strncpy+0x8>
 801bf50:	f803 5b01 	strb.w	r5, [r3], #1
 801bf54:	e7fa      	b.n	801bf4c <strncpy+0x1a>
 801bf56:	461c      	mov	r4, r3
 801bf58:	4632      	mov	r2, r6
 801bf5a:	e7ed      	b.n	801bf38 <strncpy+0x6>

0801bf5c <strstr>:
 801bf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf5e:	7803      	ldrb	r3, [r0, #0]
 801bf60:	b17b      	cbz	r3, 801bf82 <strstr+0x26>
 801bf62:	4604      	mov	r4, r0
 801bf64:	7823      	ldrb	r3, [r4, #0]
 801bf66:	4620      	mov	r0, r4
 801bf68:	1c66      	adds	r6, r4, #1
 801bf6a:	b17b      	cbz	r3, 801bf8c <strstr+0x30>
 801bf6c:	1e4a      	subs	r2, r1, #1
 801bf6e:	1e63      	subs	r3, r4, #1
 801bf70:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801bf74:	b14d      	cbz	r5, 801bf8a <strstr+0x2e>
 801bf76:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801bf7a:	42af      	cmp	r7, r5
 801bf7c:	4634      	mov	r4, r6
 801bf7e:	d0f7      	beq.n	801bf70 <strstr+0x14>
 801bf80:	e7f0      	b.n	801bf64 <strstr+0x8>
 801bf82:	780b      	ldrb	r3, [r1, #0]
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	bf18      	it	ne
 801bf88:	2000      	movne	r0, #0
 801bf8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	e7fc      	b.n	801bf8a <strstr+0x2e>

0801bf90 <strtok>:
 801bf90:	4b13      	ldr	r3, [pc, #76]	; (801bfe0 <strtok+0x50>)
 801bf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf96:	681d      	ldr	r5, [r3, #0]
 801bf98:	6dac      	ldr	r4, [r5, #88]	; 0x58
 801bf9a:	4606      	mov	r6, r0
 801bf9c:	460f      	mov	r7, r1
 801bf9e:	b9b4      	cbnz	r4, 801bfce <strtok+0x3e>
 801bfa0:	2050      	movs	r0, #80	; 0x50
 801bfa2:	f7ff fd05 	bl	801b9b0 <malloc>
 801bfa6:	65a8      	str	r0, [r5, #88]	; 0x58
 801bfa8:	e9c0 4400 	strd	r4, r4, [r0]
 801bfac:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801bfb0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801bfb4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801bfb8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801bfbc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801bfc0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801bfc4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801bfc8:	6184      	str	r4, [r0, #24]
 801bfca:	7704      	strb	r4, [r0, #28]
 801bfcc:	6244      	str	r4, [r0, #36]	; 0x24
 801bfce:	6daa      	ldr	r2, [r5, #88]	; 0x58
 801bfd0:	4639      	mov	r1, r7
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	2301      	movs	r3, #1
 801bfd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bfda:	f000 b803 	b.w	801bfe4 <__strtok_r>
 801bfde:	bf00      	nop
 801bfe0:	20000060 	.word	0x20000060

0801bfe4 <__strtok_r>:
 801bfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfe6:	b918      	cbnz	r0, 801bff0 <__strtok_r+0xc>
 801bfe8:	6810      	ldr	r0, [r2, #0]
 801bfea:	b908      	cbnz	r0, 801bff0 <__strtok_r+0xc>
 801bfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfee:	4620      	mov	r0, r4
 801bff0:	4604      	mov	r4, r0
 801bff2:	460f      	mov	r7, r1
 801bff4:	f814 5b01 	ldrb.w	r5, [r4], #1
 801bff8:	f817 6b01 	ldrb.w	r6, [r7], #1
 801bffc:	b91e      	cbnz	r6, 801c006 <__strtok_r+0x22>
 801bffe:	b96d      	cbnz	r5, 801c01c <__strtok_r+0x38>
 801c000:	6015      	str	r5, [r2, #0]
 801c002:	4628      	mov	r0, r5
 801c004:	e7f2      	b.n	801bfec <__strtok_r+0x8>
 801c006:	42b5      	cmp	r5, r6
 801c008:	d1f6      	bne.n	801bff8 <__strtok_r+0x14>
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d1ef      	bne.n	801bfee <__strtok_r+0xa>
 801c00e:	6014      	str	r4, [r2, #0]
 801c010:	7003      	strb	r3, [r0, #0]
 801c012:	e7eb      	b.n	801bfec <__strtok_r+0x8>
 801c014:	462b      	mov	r3, r5
 801c016:	e00d      	b.n	801c034 <__strtok_r+0x50>
 801c018:	b926      	cbnz	r6, 801c024 <__strtok_r+0x40>
 801c01a:	461c      	mov	r4, r3
 801c01c:	4623      	mov	r3, r4
 801c01e:	460f      	mov	r7, r1
 801c020:	f813 5b01 	ldrb.w	r5, [r3], #1
 801c024:	f817 6b01 	ldrb.w	r6, [r7], #1
 801c028:	42b5      	cmp	r5, r6
 801c02a:	d1f5      	bne.n	801c018 <__strtok_r+0x34>
 801c02c:	2d00      	cmp	r5, #0
 801c02e:	d0f1      	beq.n	801c014 <__strtok_r+0x30>
 801c030:	2100      	movs	r1, #0
 801c032:	7021      	strb	r1, [r4, #0]
 801c034:	6013      	str	r3, [r2, #0]
 801c036:	e7d9      	b.n	801bfec <__strtok_r+0x8>

0801c038 <__swbuf_r>:
 801c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c03a:	460e      	mov	r6, r1
 801c03c:	4614      	mov	r4, r2
 801c03e:	4605      	mov	r5, r0
 801c040:	b118      	cbz	r0, 801c04a <__swbuf_r+0x12>
 801c042:	6983      	ldr	r3, [r0, #24]
 801c044:	b90b      	cbnz	r3, 801c04a <__swbuf_r+0x12>
 801c046:	f000 f9c7 	bl	801c3d8 <__sinit>
 801c04a:	4b21      	ldr	r3, [pc, #132]	; (801c0d0 <__swbuf_r+0x98>)
 801c04c:	429c      	cmp	r4, r3
 801c04e:	d12a      	bne.n	801c0a6 <__swbuf_r+0x6e>
 801c050:	686c      	ldr	r4, [r5, #4]
 801c052:	69a3      	ldr	r3, [r4, #24]
 801c054:	60a3      	str	r3, [r4, #8]
 801c056:	89a3      	ldrh	r3, [r4, #12]
 801c058:	071a      	lsls	r2, r3, #28
 801c05a:	d52e      	bpl.n	801c0ba <__swbuf_r+0x82>
 801c05c:	6923      	ldr	r3, [r4, #16]
 801c05e:	b363      	cbz	r3, 801c0ba <__swbuf_r+0x82>
 801c060:	6923      	ldr	r3, [r4, #16]
 801c062:	6820      	ldr	r0, [r4, #0]
 801c064:	1ac0      	subs	r0, r0, r3
 801c066:	6963      	ldr	r3, [r4, #20]
 801c068:	b2f6      	uxtb	r6, r6
 801c06a:	4283      	cmp	r3, r0
 801c06c:	4637      	mov	r7, r6
 801c06e:	dc04      	bgt.n	801c07a <__swbuf_r+0x42>
 801c070:	4621      	mov	r1, r4
 801c072:	4628      	mov	r0, r5
 801c074:	f000 f934 	bl	801c2e0 <_fflush_r>
 801c078:	bb28      	cbnz	r0, 801c0c6 <__swbuf_r+0x8e>
 801c07a:	68a3      	ldr	r3, [r4, #8]
 801c07c:	3b01      	subs	r3, #1
 801c07e:	60a3      	str	r3, [r4, #8]
 801c080:	6823      	ldr	r3, [r4, #0]
 801c082:	1c5a      	adds	r2, r3, #1
 801c084:	6022      	str	r2, [r4, #0]
 801c086:	701e      	strb	r6, [r3, #0]
 801c088:	6963      	ldr	r3, [r4, #20]
 801c08a:	3001      	adds	r0, #1
 801c08c:	4283      	cmp	r3, r0
 801c08e:	d004      	beq.n	801c09a <__swbuf_r+0x62>
 801c090:	89a3      	ldrh	r3, [r4, #12]
 801c092:	07db      	lsls	r3, r3, #31
 801c094:	d519      	bpl.n	801c0ca <__swbuf_r+0x92>
 801c096:	2e0a      	cmp	r6, #10
 801c098:	d117      	bne.n	801c0ca <__swbuf_r+0x92>
 801c09a:	4621      	mov	r1, r4
 801c09c:	4628      	mov	r0, r5
 801c09e:	f000 f91f 	bl	801c2e0 <_fflush_r>
 801c0a2:	b190      	cbz	r0, 801c0ca <__swbuf_r+0x92>
 801c0a4:	e00f      	b.n	801c0c6 <__swbuf_r+0x8e>
 801c0a6:	4b0b      	ldr	r3, [pc, #44]	; (801c0d4 <__swbuf_r+0x9c>)
 801c0a8:	429c      	cmp	r4, r3
 801c0aa:	d101      	bne.n	801c0b0 <__swbuf_r+0x78>
 801c0ac:	68ac      	ldr	r4, [r5, #8]
 801c0ae:	e7d0      	b.n	801c052 <__swbuf_r+0x1a>
 801c0b0:	4b09      	ldr	r3, [pc, #36]	; (801c0d8 <__swbuf_r+0xa0>)
 801c0b2:	429c      	cmp	r4, r3
 801c0b4:	bf08      	it	eq
 801c0b6:	68ec      	ldreq	r4, [r5, #12]
 801c0b8:	e7cb      	b.n	801c052 <__swbuf_r+0x1a>
 801c0ba:	4621      	mov	r1, r4
 801c0bc:	4628      	mov	r0, r5
 801c0be:	f000 f81b 	bl	801c0f8 <__swsetup_r>
 801c0c2:	2800      	cmp	r0, #0
 801c0c4:	d0cc      	beq.n	801c060 <__swbuf_r+0x28>
 801c0c6:	f04f 37ff 	mov.w	r7, #4294967295
 801c0ca:	4638      	mov	r0, r7
 801c0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0ce:	bf00      	nop
 801c0d0:	0801ee58 	.word	0x0801ee58
 801c0d4:	0801ee78 	.word	0x0801ee78
 801c0d8:	0801ee38 	.word	0x0801ee38

0801c0dc <__ascii_wctomb>:
 801c0dc:	b149      	cbz	r1, 801c0f2 <__ascii_wctomb+0x16>
 801c0de:	2aff      	cmp	r2, #255	; 0xff
 801c0e0:	bf85      	ittet	hi
 801c0e2:	238a      	movhi	r3, #138	; 0x8a
 801c0e4:	6003      	strhi	r3, [r0, #0]
 801c0e6:	700a      	strbls	r2, [r1, #0]
 801c0e8:	f04f 30ff 	movhi.w	r0, #4294967295
 801c0ec:	bf98      	it	ls
 801c0ee:	2001      	movls	r0, #1
 801c0f0:	4770      	bx	lr
 801c0f2:	4608      	mov	r0, r1
 801c0f4:	4770      	bx	lr
	...

0801c0f8 <__swsetup_r>:
 801c0f8:	4b32      	ldr	r3, [pc, #200]	; (801c1c4 <__swsetup_r+0xcc>)
 801c0fa:	b570      	push	{r4, r5, r6, lr}
 801c0fc:	681d      	ldr	r5, [r3, #0]
 801c0fe:	4606      	mov	r6, r0
 801c100:	460c      	mov	r4, r1
 801c102:	b125      	cbz	r5, 801c10e <__swsetup_r+0x16>
 801c104:	69ab      	ldr	r3, [r5, #24]
 801c106:	b913      	cbnz	r3, 801c10e <__swsetup_r+0x16>
 801c108:	4628      	mov	r0, r5
 801c10a:	f000 f965 	bl	801c3d8 <__sinit>
 801c10e:	4b2e      	ldr	r3, [pc, #184]	; (801c1c8 <__swsetup_r+0xd0>)
 801c110:	429c      	cmp	r4, r3
 801c112:	d10f      	bne.n	801c134 <__swsetup_r+0x3c>
 801c114:	686c      	ldr	r4, [r5, #4]
 801c116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c11a:	b29a      	uxth	r2, r3
 801c11c:	0715      	lsls	r5, r2, #28
 801c11e:	d42c      	bmi.n	801c17a <__swsetup_r+0x82>
 801c120:	06d0      	lsls	r0, r2, #27
 801c122:	d411      	bmi.n	801c148 <__swsetup_r+0x50>
 801c124:	2209      	movs	r2, #9
 801c126:	6032      	str	r2, [r6, #0]
 801c128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c12c:	81a3      	strh	r3, [r4, #12]
 801c12e:	f04f 30ff 	mov.w	r0, #4294967295
 801c132:	e03e      	b.n	801c1b2 <__swsetup_r+0xba>
 801c134:	4b25      	ldr	r3, [pc, #148]	; (801c1cc <__swsetup_r+0xd4>)
 801c136:	429c      	cmp	r4, r3
 801c138:	d101      	bne.n	801c13e <__swsetup_r+0x46>
 801c13a:	68ac      	ldr	r4, [r5, #8]
 801c13c:	e7eb      	b.n	801c116 <__swsetup_r+0x1e>
 801c13e:	4b24      	ldr	r3, [pc, #144]	; (801c1d0 <__swsetup_r+0xd8>)
 801c140:	429c      	cmp	r4, r3
 801c142:	bf08      	it	eq
 801c144:	68ec      	ldreq	r4, [r5, #12]
 801c146:	e7e6      	b.n	801c116 <__swsetup_r+0x1e>
 801c148:	0751      	lsls	r1, r2, #29
 801c14a:	d512      	bpl.n	801c172 <__swsetup_r+0x7a>
 801c14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c14e:	b141      	cbz	r1, 801c162 <__swsetup_r+0x6a>
 801c150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c154:	4299      	cmp	r1, r3
 801c156:	d002      	beq.n	801c15e <__swsetup_r+0x66>
 801c158:	4630      	mov	r0, r6
 801c15a:	f7ff fc87 	bl	801ba6c <_free_r>
 801c15e:	2300      	movs	r3, #0
 801c160:	6363      	str	r3, [r4, #52]	; 0x34
 801c162:	89a3      	ldrh	r3, [r4, #12]
 801c164:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c168:	81a3      	strh	r3, [r4, #12]
 801c16a:	2300      	movs	r3, #0
 801c16c:	6063      	str	r3, [r4, #4]
 801c16e:	6923      	ldr	r3, [r4, #16]
 801c170:	6023      	str	r3, [r4, #0]
 801c172:	89a3      	ldrh	r3, [r4, #12]
 801c174:	f043 0308 	orr.w	r3, r3, #8
 801c178:	81a3      	strh	r3, [r4, #12]
 801c17a:	6923      	ldr	r3, [r4, #16]
 801c17c:	b94b      	cbnz	r3, 801c192 <__swsetup_r+0x9a>
 801c17e:	89a3      	ldrh	r3, [r4, #12]
 801c180:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c188:	d003      	beq.n	801c192 <__swsetup_r+0x9a>
 801c18a:	4621      	mov	r1, r4
 801c18c:	4630      	mov	r0, r6
 801c18e:	f000 fa19 	bl	801c5c4 <__smakebuf_r>
 801c192:	89a2      	ldrh	r2, [r4, #12]
 801c194:	f012 0301 	ands.w	r3, r2, #1
 801c198:	d00c      	beq.n	801c1b4 <__swsetup_r+0xbc>
 801c19a:	2300      	movs	r3, #0
 801c19c:	60a3      	str	r3, [r4, #8]
 801c19e:	6963      	ldr	r3, [r4, #20]
 801c1a0:	425b      	negs	r3, r3
 801c1a2:	61a3      	str	r3, [r4, #24]
 801c1a4:	6923      	ldr	r3, [r4, #16]
 801c1a6:	b953      	cbnz	r3, 801c1be <__swsetup_r+0xc6>
 801c1a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c1b0:	d1ba      	bne.n	801c128 <__swsetup_r+0x30>
 801c1b2:	bd70      	pop	{r4, r5, r6, pc}
 801c1b4:	0792      	lsls	r2, r2, #30
 801c1b6:	bf58      	it	pl
 801c1b8:	6963      	ldrpl	r3, [r4, #20]
 801c1ba:	60a3      	str	r3, [r4, #8]
 801c1bc:	e7f2      	b.n	801c1a4 <__swsetup_r+0xac>
 801c1be:	2000      	movs	r0, #0
 801c1c0:	e7f7      	b.n	801c1b2 <__swsetup_r+0xba>
 801c1c2:	bf00      	nop
 801c1c4:	20000060 	.word	0x20000060
 801c1c8:	0801ee58 	.word	0x0801ee58
 801c1cc:	0801ee78 	.word	0x0801ee78
 801c1d0:	0801ee38 	.word	0x0801ee38

0801c1d4 <__sflush_r>:
 801c1d4:	898a      	ldrh	r2, [r1, #12]
 801c1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1da:	4605      	mov	r5, r0
 801c1dc:	0710      	lsls	r0, r2, #28
 801c1de:	460c      	mov	r4, r1
 801c1e0:	d458      	bmi.n	801c294 <__sflush_r+0xc0>
 801c1e2:	684b      	ldr	r3, [r1, #4]
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	dc05      	bgt.n	801c1f4 <__sflush_r+0x20>
 801c1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	dc02      	bgt.n	801c1f4 <__sflush_r+0x20>
 801c1ee:	2000      	movs	r0, #0
 801c1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c1f6:	2e00      	cmp	r6, #0
 801c1f8:	d0f9      	beq.n	801c1ee <__sflush_r+0x1a>
 801c1fa:	2300      	movs	r3, #0
 801c1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c200:	682f      	ldr	r7, [r5, #0]
 801c202:	6a21      	ldr	r1, [r4, #32]
 801c204:	602b      	str	r3, [r5, #0]
 801c206:	d032      	beq.n	801c26e <__sflush_r+0x9a>
 801c208:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c20a:	89a3      	ldrh	r3, [r4, #12]
 801c20c:	075a      	lsls	r2, r3, #29
 801c20e:	d505      	bpl.n	801c21c <__sflush_r+0x48>
 801c210:	6863      	ldr	r3, [r4, #4]
 801c212:	1ac0      	subs	r0, r0, r3
 801c214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c216:	b10b      	cbz	r3, 801c21c <__sflush_r+0x48>
 801c218:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c21a:	1ac0      	subs	r0, r0, r3
 801c21c:	2300      	movs	r3, #0
 801c21e:	4602      	mov	r2, r0
 801c220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c222:	6a21      	ldr	r1, [r4, #32]
 801c224:	4628      	mov	r0, r5
 801c226:	47b0      	blx	r6
 801c228:	1c43      	adds	r3, r0, #1
 801c22a:	89a3      	ldrh	r3, [r4, #12]
 801c22c:	d106      	bne.n	801c23c <__sflush_r+0x68>
 801c22e:	6829      	ldr	r1, [r5, #0]
 801c230:	291d      	cmp	r1, #29
 801c232:	d848      	bhi.n	801c2c6 <__sflush_r+0xf2>
 801c234:	4a29      	ldr	r2, [pc, #164]	; (801c2dc <__sflush_r+0x108>)
 801c236:	40ca      	lsrs	r2, r1
 801c238:	07d6      	lsls	r6, r2, #31
 801c23a:	d544      	bpl.n	801c2c6 <__sflush_r+0xf2>
 801c23c:	2200      	movs	r2, #0
 801c23e:	6062      	str	r2, [r4, #4]
 801c240:	04d9      	lsls	r1, r3, #19
 801c242:	6922      	ldr	r2, [r4, #16]
 801c244:	6022      	str	r2, [r4, #0]
 801c246:	d504      	bpl.n	801c252 <__sflush_r+0x7e>
 801c248:	1c42      	adds	r2, r0, #1
 801c24a:	d101      	bne.n	801c250 <__sflush_r+0x7c>
 801c24c:	682b      	ldr	r3, [r5, #0]
 801c24e:	b903      	cbnz	r3, 801c252 <__sflush_r+0x7e>
 801c250:	6560      	str	r0, [r4, #84]	; 0x54
 801c252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c254:	602f      	str	r7, [r5, #0]
 801c256:	2900      	cmp	r1, #0
 801c258:	d0c9      	beq.n	801c1ee <__sflush_r+0x1a>
 801c25a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c25e:	4299      	cmp	r1, r3
 801c260:	d002      	beq.n	801c268 <__sflush_r+0x94>
 801c262:	4628      	mov	r0, r5
 801c264:	f7ff fc02 	bl	801ba6c <_free_r>
 801c268:	2000      	movs	r0, #0
 801c26a:	6360      	str	r0, [r4, #52]	; 0x34
 801c26c:	e7c0      	b.n	801c1f0 <__sflush_r+0x1c>
 801c26e:	2301      	movs	r3, #1
 801c270:	4628      	mov	r0, r5
 801c272:	47b0      	blx	r6
 801c274:	1c41      	adds	r1, r0, #1
 801c276:	d1c8      	bne.n	801c20a <__sflush_r+0x36>
 801c278:	682b      	ldr	r3, [r5, #0]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d0c5      	beq.n	801c20a <__sflush_r+0x36>
 801c27e:	2b1d      	cmp	r3, #29
 801c280:	d001      	beq.n	801c286 <__sflush_r+0xb2>
 801c282:	2b16      	cmp	r3, #22
 801c284:	d101      	bne.n	801c28a <__sflush_r+0xb6>
 801c286:	602f      	str	r7, [r5, #0]
 801c288:	e7b1      	b.n	801c1ee <__sflush_r+0x1a>
 801c28a:	89a3      	ldrh	r3, [r4, #12]
 801c28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c290:	81a3      	strh	r3, [r4, #12]
 801c292:	e7ad      	b.n	801c1f0 <__sflush_r+0x1c>
 801c294:	690f      	ldr	r7, [r1, #16]
 801c296:	2f00      	cmp	r7, #0
 801c298:	d0a9      	beq.n	801c1ee <__sflush_r+0x1a>
 801c29a:	0793      	lsls	r3, r2, #30
 801c29c:	680e      	ldr	r6, [r1, #0]
 801c29e:	bf08      	it	eq
 801c2a0:	694b      	ldreq	r3, [r1, #20]
 801c2a2:	600f      	str	r7, [r1, #0]
 801c2a4:	bf18      	it	ne
 801c2a6:	2300      	movne	r3, #0
 801c2a8:	eba6 0807 	sub.w	r8, r6, r7
 801c2ac:	608b      	str	r3, [r1, #8]
 801c2ae:	f1b8 0f00 	cmp.w	r8, #0
 801c2b2:	dd9c      	ble.n	801c1ee <__sflush_r+0x1a>
 801c2b4:	4643      	mov	r3, r8
 801c2b6:	463a      	mov	r2, r7
 801c2b8:	6a21      	ldr	r1, [r4, #32]
 801c2ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c2bc:	4628      	mov	r0, r5
 801c2be:	47b0      	blx	r6
 801c2c0:	2800      	cmp	r0, #0
 801c2c2:	dc06      	bgt.n	801c2d2 <__sflush_r+0xfe>
 801c2c4:	89a3      	ldrh	r3, [r4, #12]
 801c2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2ca:	81a3      	strh	r3, [r4, #12]
 801c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 801c2d0:	e78e      	b.n	801c1f0 <__sflush_r+0x1c>
 801c2d2:	4407      	add	r7, r0
 801c2d4:	eba8 0800 	sub.w	r8, r8, r0
 801c2d8:	e7e9      	b.n	801c2ae <__sflush_r+0xda>
 801c2da:	bf00      	nop
 801c2dc:	20400001 	.word	0x20400001

0801c2e0 <_fflush_r>:
 801c2e0:	b538      	push	{r3, r4, r5, lr}
 801c2e2:	690b      	ldr	r3, [r1, #16]
 801c2e4:	4605      	mov	r5, r0
 801c2e6:	460c      	mov	r4, r1
 801c2e8:	b1db      	cbz	r3, 801c322 <_fflush_r+0x42>
 801c2ea:	b118      	cbz	r0, 801c2f4 <_fflush_r+0x14>
 801c2ec:	6983      	ldr	r3, [r0, #24]
 801c2ee:	b90b      	cbnz	r3, 801c2f4 <_fflush_r+0x14>
 801c2f0:	f000 f872 	bl	801c3d8 <__sinit>
 801c2f4:	4b0c      	ldr	r3, [pc, #48]	; (801c328 <_fflush_r+0x48>)
 801c2f6:	429c      	cmp	r4, r3
 801c2f8:	d109      	bne.n	801c30e <_fflush_r+0x2e>
 801c2fa:	686c      	ldr	r4, [r5, #4]
 801c2fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c300:	b17b      	cbz	r3, 801c322 <_fflush_r+0x42>
 801c302:	4621      	mov	r1, r4
 801c304:	4628      	mov	r0, r5
 801c306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c30a:	f7ff bf63 	b.w	801c1d4 <__sflush_r>
 801c30e:	4b07      	ldr	r3, [pc, #28]	; (801c32c <_fflush_r+0x4c>)
 801c310:	429c      	cmp	r4, r3
 801c312:	d101      	bne.n	801c318 <_fflush_r+0x38>
 801c314:	68ac      	ldr	r4, [r5, #8]
 801c316:	e7f1      	b.n	801c2fc <_fflush_r+0x1c>
 801c318:	4b05      	ldr	r3, [pc, #20]	; (801c330 <_fflush_r+0x50>)
 801c31a:	429c      	cmp	r4, r3
 801c31c:	bf08      	it	eq
 801c31e:	68ec      	ldreq	r4, [r5, #12]
 801c320:	e7ec      	b.n	801c2fc <_fflush_r+0x1c>
 801c322:	2000      	movs	r0, #0
 801c324:	bd38      	pop	{r3, r4, r5, pc}
 801c326:	bf00      	nop
 801c328:	0801ee58 	.word	0x0801ee58
 801c32c:	0801ee78 	.word	0x0801ee78
 801c330:	0801ee38 	.word	0x0801ee38

0801c334 <fflush>:
 801c334:	4601      	mov	r1, r0
 801c336:	b920      	cbnz	r0, 801c342 <fflush+0xe>
 801c338:	4b04      	ldr	r3, [pc, #16]	; (801c34c <fflush+0x18>)
 801c33a:	4905      	ldr	r1, [pc, #20]	; (801c350 <fflush+0x1c>)
 801c33c:	6818      	ldr	r0, [r3, #0]
 801c33e:	f000 b8d3 	b.w	801c4e8 <_fwalk_reent>
 801c342:	4b04      	ldr	r3, [pc, #16]	; (801c354 <fflush+0x20>)
 801c344:	6818      	ldr	r0, [r3, #0]
 801c346:	f7ff bfcb 	b.w	801c2e0 <_fflush_r>
 801c34a:	bf00      	nop
 801c34c:	0801ed28 	.word	0x0801ed28
 801c350:	0801c2e1 	.word	0x0801c2e1
 801c354:	20000060 	.word	0x20000060

0801c358 <std>:
 801c358:	2300      	movs	r3, #0
 801c35a:	b510      	push	{r4, lr}
 801c35c:	4604      	mov	r4, r0
 801c35e:	e9c0 3300 	strd	r3, r3, [r0]
 801c362:	6083      	str	r3, [r0, #8]
 801c364:	8181      	strh	r1, [r0, #12]
 801c366:	6643      	str	r3, [r0, #100]	; 0x64
 801c368:	81c2      	strh	r2, [r0, #14]
 801c36a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c36e:	6183      	str	r3, [r0, #24]
 801c370:	4619      	mov	r1, r3
 801c372:	2208      	movs	r2, #8
 801c374:	305c      	adds	r0, #92	; 0x5c
 801c376:	f7ff fb70 	bl	801ba5a <memset>
 801c37a:	4b05      	ldr	r3, [pc, #20]	; (801c390 <std+0x38>)
 801c37c:	6263      	str	r3, [r4, #36]	; 0x24
 801c37e:	4b05      	ldr	r3, [pc, #20]	; (801c394 <std+0x3c>)
 801c380:	62a3      	str	r3, [r4, #40]	; 0x28
 801c382:	4b05      	ldr	r3, [pc, #20]	; (801c398 <std+0x40>)
 801c384:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c386:	4b05      	ldr	r3, [pc, #20]	; (801c39c <std+0x44>)
 801c388:	6224      	str	r4, [r4, #32]
 801c38a:	6323      	str	r3, [r4, #48]	; 0x30
 801c38c:	bd10      	pop	{r4, pc}
 801c38e:	bf00      	nop
 801c390:	0801d061 	.word	0x0801d061
 801c394:	0801d083 	.word	0x0801d083
 801c398:	0801d0bb 	.word	0x0801d0bb
 801c39c:	0801d0df 	.word	0x0801d0df

0801c3a0 <_cleanup_r>:
 801c3a0:	4901      	ldr	r1, [pc, #4]	; (801c3a8 <_cleanup_r+0x8>)
 801c3a2:	f000 b8a1 	b.w	801c4e8 <_fwalk_reent>
 801c3a6:	bf00      	nop
 801c3a8:	0801c2e1 	.word	0x0801c2e1

0801c3ac <__sfmoreglue>:
 801c3ac:	b570      	push	{r4, r5, r6, lr}
 801c3ae:	1e4a      	subs	r2, r1, #1
 801c3b0:	2568      	movs	r5, #104	; 0x68
 801c3b2:	4355      	muls	r5, r2
 801c3b4:	460e      	mov	r6, r1
 801c3b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c3ba:	f7ff fba5 	bl	801bb08 <_malloc_r>
 801c3be:	4604      	mov	r4, r0
 801c3c0:	b140      	cbz	r0, 801c3d4 <__sfmoreglue+0x28>
 801c3c2:	2100      	movs	r1, #0
 801c3c4:	e9c0 1600 	strd	r1, r6, [r0]
 801c3c8:	300c      	adds	r0, #12
 801c3ca:	60a0      	str	r0, [r4, #8]
 801c3cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c3d0:	f7ff fb43 	bl	801ba5a <memset>
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	bd70      	pop	{r4, r5, r6, pc}

0801c3d8 <__sinit>:
 801c3d8:	6983      	ldr	r3, [r0, #24]
 801c3da:	b510      	push	{r4, lr}
 801c3dc:	4604      	mov	r4, r0
 801c3de:	bb33      	cbnz	r3, 801c42e <__sinit+0x56>
 801c3e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801c3e4:	6503      	str	r3, [r0, #80]	; 0x50
 801c3e6:	4b12      	ldr	r3, [pc, #72]	; (801c430 <__sinit+0x58>)
 801c3e8:	4a12      	ldr	r2, [pc, #72]	; (801c434 <__sinit+0x5c>)
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	6282      	str	r2, [r0, #40]	; 0x28
 801c3ee:	4298      	cmp	r0, r3
 801c3f0:	bf04      	itt	eq
 801c3f2:	2301      	moveq	r3, #1
 801c3f4:	6183      	streq	r3, [r0, #24]
 801c3f6:	f000 f81f 	bl	801c438 <__sfp>
 801c3fa:	6060      	str	r0, [r4, #4]
 801c3fc:	4620      	mov	r0, r4
 801c3fe:	f000 f81b 	bl	801c438 <__sfp>
 801c402:	60a0      	str	r0, [r4, #8]
 801c404:	4620      	mov	r0, r4
 801c406:	f000 f817 	bl	801c438 <__sfp>
 801c40a:	2200      	movs	r2, #0
 801c40c:	60e0      	str	r0, [r4, #12]
 801c40e:	2104      	movs	r1, #4
 801c410:	6860      	ldr	r0, [r4, #4]
 801c412:	f7ff ffa1 	bl	801c358 <std>
 801c416:	2201      	movs	r2, #1
 801c418:	2109      	movs	r1, #9
 801c41a:	68a0      	ldr	r0, [r4, #8]
 801c41c:	f7ff ff9c 	bl	801c358 <std>
 801c420:	2202      	movs	r2, #2
 801c422:	2112      	movs	r1, #18
 801c424:	68e0      	ldr	r0, [r4, #12]
 801c426:	f7ff ff97 	bl	801c358 <std>
 801c42a:	2301      	movs	r3, #1
 801c42c:	61a3      	str	r3, [r4, #24]
 801c42e:	bd10      	pop	{r4, pc}
 801c430:	0801ed28 	.word	0x0801ed28
 801c434:	0801c3a1 	.word	0x0801c3a1

0801c438 <__sfp>:
 801c438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c43a:	4b1b      	ldr	r3, [pc, #108]	; (801c4a8 <__sfp+0x70>)
 801c43c:	681e      	ldr	r6, [r3, #0]
 801c43e:	69b3      	ldr	r3, [r6, #24]
 801c440:	4607      	mov	r7, r0
 801c442:	b913      	cbnz	r3, 801c44a <__sfp+0x12>
 801c444:	4630      	mov	r0, r6
 801c446:	f7ff ffc7 	bl	801c3d8 <__sinit>
 801c44a:	3648      	adds	r6, #72	; 0x48
 801c44c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c450:	3b01      	subs	r3, #1
 801c452:	d503      	bpl.n	801c45c <__sfp+0x24>
 801c454:	6833      	ldr	r3, [r6, #0]
 801c456:	b133      	cbz	r3, 801c466 <__sfp+0x2e>
 801c458:	6836      	ldr	r6, [r6, #0]
 801c45a:	e7f7      	b.n	801c44c <__sfp+0x14>
 801c45c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c460:	b16d      	cbz	r5, 801c47e <__sfp+0x46>
 801c462:	3468      	adds	r4, #104	; 0x68
 801c464:	e7f4      	b.n	801c450 <__sfp+0x18>
 801c466:	2104      	movs	r1, #4
 801c468:	4638      	mov	r0, r7
 801c46a:	f7ff ff9f 	bl	801c3ac <__sfmoreglue>
 801c46e:	6030      	str	r0, [r6, #0]
 801c470:	2800      	cmp	r0, #0
 801c472:	d1f1      	bne.n	801c458 <__sfp+0x20>
 801c474:	230c      	movs	r3, #12
 801c476:	603b      	str	r3, [r7, #0]
 801c478:	4604      	mov	r4, r0
 801c47a:	4620      	mov	r0, r4
 801c47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c47e:	4b0b      	ldr	r3, [pc, #44]	; (801c4ac <__sfp+0x74>)
 801c480:	6665      	str	r5, [r4, #100]	; 0x64
 801c482:	e9c4 5500 	strd	r5, r5, [r4]
 801c486:	60a5      	str	r5, [r4, #8]
 801c488:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801c48c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c490:	2208      	movs	r2, #8
 801c492:	4629      	mov	r1, r5
 801c494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c498:	f7ff fadf 	bl	801ba5a <memset>
 801c49c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c4a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c4a4:	e7e9      	b.n	801c47a <__sfp+0x42>
 801c4a6:	bf00      	nop
 801c4a8:	0801ed28 	.word	0x0801ed28
 801c4ac:	ffff0001 	.word	0xffff0001

0801c4b0 <_fwalk>:
 801c4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4b4:	4688      	mov	r8, r1
 801c4b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c4ba:	2600      	movs	r6, #0
 801c4bc:	b914      	cbnz	r4, 801c4c4 <_fwalk+0x14>
 801c4be:	4630      	mov	r0, r6
 801c4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4c4:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c4c8:	3f01      	subs	r7, #1
 801c4ca:	d501      	bpl.n	801c4d0 <_fwalk+0x20>
 801c4cc:	6824      	ldr	r4, [r4, #0]
 801c4ce:	e7f5      	b.n	801c4bc <_fwalk+0xc>
 801c4d0:	89ab      	ldrh	r3, [r5, #12]
 801c4d2:	2b01      	cmp	r3, #1
 801c4d4:	d906      	bls.n	801c4e4 <_fwalk+0x34>
 801c4d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c4da:	3301      	adds	r3, #1
 801c4dc:	d002      	beq.n	801c4e4 <_fwalk+0x34>
 801c4de:	4628      	mov	r0, r5
 801c4e0:	47c0      	blx	r8
 801c4e2:	4306      	orrs	r6, r0
 801c4e4:	3568      	adds	r5, #104	; 0x68
 801c4e6:	e7ef      	b.n	801c4c8 <_fwalk+0x18>

0801c4e8 <_fwalk_reent>:
 801c4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4ec:	4680      	mov	r8, r0
 801c4ee:	4689      	mov	r9, r1
 801c4f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c4f4:	2600      	movs	r6, #0
 801c4f6:	b914      	cbnz	r4, 801c4fe <_fwalk_reent+0x16>
 801c4f8:	4630      	mov	r0, r6
 801c4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c502:	3f01      	subs	r7, #1
 801c504:	d501      	bpl.n	801c50a <_fwalk_reent+0x22>
 801c506:	6824      	ldr	r4, [r4, #0]
 801c508:	e7f5      	b.n	801c4f6 <_fwalk_reent+0xe>
 801c50a:	89ab      	ldrh	r3, [r5, #12]
 801c50c:	2b01      	cmp	r3, #1
 801c50e:	d907      	bls.n	801c520 <_fwalk_reent+0x38>
 801c510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c514:	3301      	adds	r3, #1
 801c516:	d003      	beq.n	801c520 <_fwalk_reent+0x38>
 801c518:	4629      	mov	r1, r5
 801c51a:	4640      	mov	r0, r8
 801c51c:	47c8      	blx	r9
 801c51e:	4306      	orrs	r6, r0
 801c520:	3568      	adds	r5, #104	; 0x68
 801c522:	e7ee      	b.n	801c502 <_fwalk_reent+0x1a>

0801c524 <_getc_r>:
 801c524:	b538      	push	{r3, r4, r5, lr}
 801c526:	460c      	mov	r4, r1
 801c528:	4605      	mov	r5, r0
 801c52a:	b118      	cbz	r0, 801c534 <_getc_r+0x10>
 801c52c:	6983      	ldr	r3, [r0, #24]
 801c52e:	b90b      	cbnz	r3, 801c534 <_getc_r+0x10>
 801c530:	f7ff ff52 	bl	801c3d8 <__sinit>
 801c534:	4b0e      	ldr	r3, [pc, #56]	; (801c570 <_getc_r+0x4c>)
 801c536:	429c      	cmp	r4, r3
 801c538:	d10b      	bne.n	801c552 <_getc_r+0x2e>
 801c53a:	686c      	ldr	r4, [r5, #4]
 801c53c:	6863      	ldr	r3, [r4, #4]
 801c53e:	3b01      	subs	r3, #1
 801c540:	2b00      	cmp	r3, #0
 801c542:	6063      	str	r3, [r4, #4]
 801c544:	da0f      	bge.n	801c566 <_getc_r+0x42>
 801c546:	4621      	mov	r1, r4
 801c548:	4628      	mov	r0, r5
 801c54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c54e:	f7ff bbc5 	b.w	801bcdc <__srget_r>
 801c552:	4b08      	ldr	r3, [pc, #32]	; (801c574 <_getc_r+0x50>)
 801c554:	429c      	cmp	r4, r3
 801c556:	d101      	bne.n	801c55c <_getc_r+0x38>
 801c558:	68ac      	ldr	r4, [r5, #8]
 801c55a:	e7ef      	b.n	801c53c <_getc_r+0x18>
 801c55c:	4b06      	ldr	r3, [pc, #24]	; (801c578 <_getc_r+0x54>)
 801c55e:	429c      	cmp	r4, r3
 801c560:	bf08      	it	eq
 801c562:	68ec      	ldreq	r4, [r5, #12]
 801c564:	e7ea      	b.n	801c53c <_getc_r+0x18>
 801c566:	6823      	ldr	r3, [r4, #0]
 801c568:	1c5a      	adds	r2, r3, #1
 801c56a:	6022      	str	r2, [r4, #0]
 801c56c:	7818      	ldrb	r0, [r3, #0]
 801c56e:	bd38      	pop	{r3, r4, r5, pc}
 801c570:	0801ee58 	.word	0x0801ee58
 801c574:	0801ee78 	.word	0x0801ee78
 801c578:	0801ee38 	.word	0x0801ee38

0801c57c <__swhatbuf_r>:
 801c57c:	b570      	push	{r4, r5, r6, lr}
 801c57e:	460e      	mov	r6, r1
 801c580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c584:	2900      	cmp	r1, #0
 801c586:	b096      	sub	sp, #88	; 0x58
 801c588:	4614      	mov	r4, r2
 801c58a:	461d      	mov	r5, r3
 801c58c:	da07      	bge.n	801c59e <__swhatbuf_r+0x22>
 801c58e:	2300      	movs	r3, #0
 801c590:	602b      	str	r3, [r5, #0]
 801c592:	89b3      	ldrh	r3, [r6, #12]
 801c594:	061a      	lsls	r2, r3, #24
 801c596:	d410      	bmi.n	801c5ba <__swhatbuf_r+0x3e>
 801c598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c59c:	e00e      	b.n	801c5bc <__swhatbuf_r+0x40>
 801c59e:	466a      	mov	r2, sp
 801c5a0:	f000 fdc4 	bl	801d12c <_fstat_r>
 801c5a4:	2800      	cmp	r0, #0
 801c5a6:	dbf2      	blt.n	801c58e <__swhatbuf_r+0x12>
 801c5a8:	9a01      	ldr	r2, [sp, #4]
 801c5aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c5ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c5b2:	425a      	negs	r2, r3
 801c5b4:	415a      	adcs	r2, r3
 801c5b6:	602a      	str	r2, [r5, #0]
 801c5b8:	e7ee      	b.n	801c598 <__swhatbuf_r+0x1c>
 801c5ba:	2340      	movs	r3, #64	; 0x40
 801c5bc:	2000      	movs	r0, #0
 801c5be:	6023      	str	r3, [r4, #0]
 801c5c0:	b016      	add	sp, #88	; 0x58
 801c5c2:	bd70      	pop	{r4, r5, r6, pc}

0801c5c4 <__smakebuf_r>:
 801c5c4:	898b      	ldrh	r3, [r1, #12]
 801c5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c5c8:	079d      	lsls	r5, r3, #30
 801c5ca:	4606      	mov	r6, r0
 801c5cc:	460c      	mov	r4, r1
 801c5ce:	d507      	bpl.n	801c5e0 <__smakebuf_r+0x1c>
 801c5d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c5d4:	6023      	str	r3, [r4, #0]
 801c5d6:	6123      	str	r3, [r4, #16]
 801c5d8:	2301      	movs	r3, #1
 801c5da:	6163      	str	r3, [r4, #20]
 801c5dc:	b002      	add	sp, #8
 801c5de:	bd70      	pop	{r4, r5, r6, pc}
 801c5e0:	ab01      	add	r3, sp, #4
 801c5e2:	466a      	mov	r2, sp
 801c5e4:	f7ff ffca 	bl	801c57c <__swhatbuf_r>
 801c5e8:	9900      	ldr	r1, [sp, #0]
 801c5ea:	4605      	mov	r5, r0
 801c5ec:	4630      	mov	r0, r6
 801c5ee:	f7ff fa8b 	bl	801bb08 <_malloc_r>
 801c5f2:	b948      	cbnz	r0, 801c608 <__smakebuf_r+0x44>
 801c5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c5f8:	059a      	lsls	r2, r3, #22
 801c5fa:	d4ef      	bmi.n	801c5dc <__smakebuf_r+0x18>
 801c5fc:	f023 0303 	bic.w	r3, r3, #3
 801c600:	f043 0302 	orr.w	r3, r3, #2
 801c604:	81a3      	strh	r3, [r4, #12]
 801c606:	e7e3      	b.n	801c5d0 <__smakebuf_r+0xc>
 801c608:	4b0d      	ldr	r3, [pc, #52]	; (801c640 <__smakebuf_r+0x7c>)
 801c60a:	62b3      	str	r3, [r6, #40]	; 0x28
 801c60c:	89a3      	ldrh	r3, [r4, #12]
 801c60e:	6020      	str	r0, [r4, #0]
 801c610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c614:	81a3      	strh	r3, [r4, #12]
 801c616:	9b00      	ldr	r3, [sp, #0]
 801c618:	6163      	str	r3, [r4, #20]
 801c61a:	9b01      	ldr	r3, [sp, #4]
 801c61c:	6120      	str	r0, [r4, #16]
 801c61e:	b15b      	cbz	r3, 801c638 <__smakebuf_r+0x74>
 801c620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c624:	4630      	mov	r0, r6
 801c626:	f000 fd93 	bl	801d150 <_isatty_r>
 801c62a:	b128      	cbz	r0, 801c638 <__smakebuf_r+0x74>
 801c62c:	89a3      	ldrh	r3, [r4, #12]
 801c62e:	f023 0303 	bic.w	r3, r3, #3
 801c632:	f043 0301 	orr.w	r3, r3, #1
 801c636:	81a3      	strh	r3, [r4, #12]
 801c638:	89a3      	ldrh	r3, [r4, #12]
 801c63a:	431d      	orrs	r5, r3
 801c63c:	81a5      	strh	r5, [r4, #12]
 801c63e:	e7cd      	b.n	801c5dc <__smakebuf_r+0x18>
 801c640:	0801c3a1 	.word	0x0801c3a1

0801c644 <__malloc_lock>:
 801c644:	4770      	bx	lr

0801c646 <__malloc_unlock>:
 801c646:	4770      	bx	lr

0801c648 <_realloc_r>:
 801c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c64a:	4607      	mov	r7, r0
 801c64c:	4614      	mov	r4, r2
 801c64e:	460e      	mov	r6, r1
 801c650:	b921      	cbnz	r1, 801c65c <_realloc_r+0x14>
 801c652:	4611      	mov	r1, r2
 801c654:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c658:	f7ff ba56 	b.w	801bb08 <_malloc_r>
 801c65c:	b922      	cbnz	r2, 801c668 <_realloc_r+0x20>
 801c65e:	f7ff fa05 	bl	801ba6c <_free_r>
 801c662:	4625      	mov	r5, r4
 801c664:	4628      	mov	r0, r5
 801c666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c668:	f000 fd94 	bl	801d194 <_malloc_usable_size_r>
 801c66c:	42a0      	cmp	r0, r4
 801c66e:	d20f      	bcs.n	801c690 <_realloc_r+0x48>
 801c670:	4621      	mov	r1, r4
 801c672:	4638      	mov	r0, r7
 801c674:	f7ff fa48 	bl	801bb08 <_malloc_r>
 801c678:	4605      	mov	r5, r0
 801c67a:	2800      	cmp	r0, #0
 801c67c:	d0f2      	beq.n	801c664 <_realloc_r+0x1c>
 801c67e:	4631      	mov	r1, r6
 801c680:	4622      	mov	r2, r4
 801c682:	f7ff f9c6 	bl	801ba12 <memcpy>
 801c686:	4631      	mov	r1, r6
 801c688:	4638      	mov	r0, r7
 801c68a:	f7ff f9ef 	bl	801ba6c <_free_r>
 801c68e:	e7e9      	b.n	801c664 <_realloc_r+0x1c>
 801c690:	4635      	mov	r5, r6
 801c692:	e7e7      	b.n	801c664 <_realloc_r+0x1c>

0801c694 <__ssputs_r>:
 801c694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c698:	688e      	ldr	r6, [r1, #8]
 801c69a:	429e      	cmp	r6, r3
 801c69c:	4682      	mov	sl, r0
 801c69e:	460c      	mov	r4, r1
 801c6a0:	4690      	mov	r8, r2
 801c6a2:	4699      	mov	r9, r3
 801c6a4:	d837      	bhi.n	801c716 <__ssputs_r+0x82>
 801c6a6:	898a      	ldrh	r2, [r1, #12]
 801c6a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c6ac:	d031      	beq.n	801c712 <__ssputs_r+0x7e>
 801c6ae:	6825      	ldr	r5, [r4, #0]
 801c6b0:	6909      	ldr	r1, [r1, #16]
 801c6b2:	1a6f      	subs	r7, r5, r1
 801c6b4:	6965      	ldr	r5, [r4, #20]
 801c6b6:	2302      	movs	r3, #2
 801c6b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c6bc:	fb95 f5f3 	sdiv	r5, r5, r3
 801c6c0:	f109 0301 	add.w	r3, r9, #1
 801c6c4:	443b      	add	r3, r7
 801c6c6:	429d      	cmp	r5, r3
 801c6c8:	bf38      	it	cc
 801c6ca:	461d      	movcc	r5, r3
 801c6cc:	0553      	lsls	r3, r2, #21
 801c6ce:	d530      	bpl.n	801c732 <__ssputs_r+0x9e>
 801c6d0:	4629      	mov	r1, r5
 801c6d2:	f7ff fa19 	bl	801bb08 <_malloc_r>
 801c6d6:	4606      	mov	r6, r0
 801c6d8:	b950      	cbnz	r0, 801c6f0 <__ssputs_r+0x5c>
 801c6da:	230c      	movs	r3, #12
 801c6dc:	f8ca 3000 	str.w	r3, [sl]
 801c6e0:	89a3      	ldrh	r3, [r4, #12]
 801c6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c6e6:	81a3      	strh	r3, [r4, #12]
 801c6e8:	f04f 30ff 	mov.w	r0, #4294967295
 801c6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6f0:	463a      	mov	r2, r7
 801c6f2:	6921      	ldr	r1, [r4, #16]
 801c6f4:	f7ff f98d 	bl	801ba12 <memcpy>
 801c6f8:	89a3      	ldrh	r3, [r4, #12]
 801c6fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c6fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c702:	81a3      	strh	r3, [r4, #12]
 801c704:	6126      	str	r6, [r4, #16]
 801c706:	6165      	str	r5, [r4, #20]
 801c708:	443e      	add	r6, r7
 801c70a:	1bed      	subs	r5, r5, r7
 801c70c:	6026      	str	r6, [r4, #0]
 801c70e:	60a5      	str	r5, [r4, #8]
 801c710:	464e      	mov	r6, r9
 801c712:	454e      	cmp	r6, r9
 801c714:	d900      	bls.n	801c718 <__ssputs_r+0x84>
 801c716:	464e      	mov	r6, r9
 801c718:	4632      	mov	r2, r6
 801c71a:	4641      	mov	r1, r8
 801c71c:	6820      	ldr	r0, [r4, #0]
 801c71e:	f7ff f983 	bl	801ba28 <memmove>
 801c722:	68a3      	ldr	r3, [r4, #8]
 801c724:	1b9b      	subs	r3, r3, r6
 801c726:	60a3      	str	r3, [r4, #8]
 801c728:	6823      	ldr	r3, [r4, #0]
 801c72a:	441e      	add	r6, r3
 801c72c:	6026      	str	r6, [r4, #0]
 801c72e:	2000      	movs	r0, #0
 801c730:	e7dc      	b.n	801c6ec <__ssputs_r+0x58>
 801c732:	462a      	mov	r2, r5
 801c734:	f7ff ff88 	bl	801c648 <_realloc_r>
 801c738:	4606      	mov	r6, r0
 801c73a:	2800      	cmp	r0, #0
 801c73c:	d1e2      	bne.n	801c704 <__ssputs_r+0x70>
 801c73e:	6921      	ldr	r1, [r4, #16]
 801c740:	4650      	mov	r0, sl
 801c742:	f7ff f993 	bl	801ba6c <_free_r>
 801c746:	e7c8      	b.n	801c6da <__ssputs_r+0x46>

0801c748 <_svfiprintf_r>:
 801c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c74c:	461d      	mov	r5, r3
 801c74e:	898b      	ldrh	r3, [r1, #12]
 801c750:	061f      	lsls	r7, r3, #24
 801c752:	b09d      	sub	sp, #116	; 0x74
 801c754:	4680      	mov	r8, r0
 801c756:	460c      	mov	r4, r1
 801c758:	4616      	mov	r6, r2
 801c75a:	d50f      	bpl.n	801c77c <_svfiprintf_r+0x34>
 801c75c:	690b      	ldr	r3, [r1, #16]
 801c75e:	b96b      	cbnz	r3, 801c77c <_svfiprintf_r+0x34>
 801c760:	2140      	movs	r1, #64	; 0x40
 801c762:	f7ff f9d1 	bl	801bb08 <_malloc_r>
 801c766:	6020      	str	r0, [r4, #0]
 801c768:	6120      	str	r0, [r4, #16]
 801c76a:	b928      	cbnz	r0, 801c778 <_svfiprintf_r+0x30>
 801c76c:	230c      	movs	r3, #12
 801c76e:	f8c8 3000 	str.w	r3, [r8]
 801c772:	f04f 30ff 	mov.w	r0, #4294967295
 801c776:	e0c8      	b.n	801c90a <_svfiprintf_r+0x1c2>
 801c778:	2340      	movs	r3, #64	; 0x40
 801c77a:	6163      	str	r3, [r4, #20]
 801c77c:	2300      	movs	r3, #0
 801c77e:	9309      	str	r3, [sp, #36]	; 0x24
 801c780:	2320      	movs	r3, #32
 801c782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c786:	2330      	movs	r3, #48	; 0x30
 801c788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c78c:	9503      	str	r5, [sp, #12]
 801c78e:	f04f 0b01 	mov.w	fp, #1
 801c792:	4637      	mov	r7, r6
 801c794:	463d      	mov	r5, r7
 801c796:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c79a:	b10b      	cbz	r3, 801c7a0 <_svfiprintf_r+0x58>
 801c79c:	2b25      	cmp	r3, #37	; 0x25
 801c79e:	d13e      	bne.n	801c81e <_svfiprintf_r+0xd6>
 801c7a0:	ebb7 0a06 	subs.w	sl, r7, r6
 801c7a4:	d00b      	beq.n	801c7be <_svfiprintf_r+0x76>
 801c7a6:	4653      	mov	r3, sl
 801c7a8:	4632      	mov	r2, r6
 801c7aa:	4621      	mov	r1, r4
 801c7ac:	4640      	mov	r0, r8
 801c7ae:	f7ff ff71 	bl	801c694 <__ssputs_r>
 801c7b2:	3001      	adds	r0, #1
 801c7b4:	f000 80a4 	beq.w	801c900 <_svfiprintf_r+0x1b8>
 801c7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7ba:	4453      	add	r3, sl
 801c7bc:	9309      	str	r3, [sp, #36]	; 0x24
 801c7be:	783b      	ldrb	r3, [r7, #0]
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	f000 809d 	beq.w	801c900 <_svfiprintf_r+0x1b8>
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	f04f 32ff 	mov.w	r2, #4294967295
 801c7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c7d0:	9304      	str	r3, [sp, #16]
 801c7d2:	9307      	str	r3, [sp, #28]
 801c7d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c7d8:	931a      	str	r3, [sp, #104]	; 0x68
 801c7da:	462f      	mov	r7, r5
 801c7dc:	2205      	movs	r2, #5
 801c7de:	f817 1b01 	ldrb.w	r1, [r7], #1
 801c7e2:	4850      	ldr	r0, [pc, #320]	; (801c924 <_svfiprintf_r+0x1dc>)
 801c7e4:	f7e3 fd14 	bl	8000210 <memchr>
 801c7e8:	9b04      	ldr	r3, [sp, #16]
 801c7ea:	b9d0      	cbnz	r0, 801c822 <_svfiprintf_r+0xda>
 801c7ec:	06d9      	lsls	r1, r3, #27
 801c7ee:	bf44      	itt	mi
 801c7f0:	2220      	movmi	r2, #32
 801c7f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c7f6:	071a      	lsls	r2, r3, #28
 801c7f8:	bf44      	itt	mi
 801c7fa:	222b      	movmi	r2, #43	; 0x2b
 801c7fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c800:	782a      	ldrb	r2, [r5, #0]
 801c802:	2a2a      	cmp	r2, #42	; 0x2a
 801c804:	d015      	beq.n	801c832 <_svfiprintf_r+0xea>
 801c806:	9a07      	ldr	r2, [sp, #28]
 801c808:	462f      	mov	r7, r5
 801c80a:	2000      	movs	r0, #0
 801c80c:	250a      	movs	r5, #10
 801c80e:	4639      	mov	r1, r7
 801c810:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c814:	3b30      	subs	r3, #48	; 0x30
 801c816:	2b09      	cmp	r3, #9
 801c818:	d94d      	bls.n	801c8b6 <_svfiprintf_r+0x16e>
 801c81a:	b1b8      	cbz	r0, 801c84c <_svfiprintf_r+0x104>
 801c81c:	e00f      	b.n	801c83e <_svfiprintf_r+0xf6>
 801c81e:	462f      	mov	r7, r5
 801c820:	e7b8      	b.n	801c794 <_svfiprintf_r+0x4c>
 801c822:	4a40      	ldr	r2, [pc, #256]	; (801c924 <_svfiprintf_r+0x1dc>)
 801c824:	1a80      	subs	r0, r0, r2
 801c826:	fa0b f000 	lsl.w	r0, fp, r0
 801c82a:	4318      	orrs	r0, r3
 801c82c:	9004      	str	r0, [sp, #16]
 801c82e:	463d      	mov	r5, r7
 801c830:	e7d3      	b.n	801c7da <_svfiprintf_r+0x92>
 801c832:	9a03      	ldr	r2, [sp, #12]
 801c834:	1d11      	adds	r1, r2, #4
 801c836:	6812      	ldr	r2, [r2, #0]
 801c838:	9103      	str	r1, [sp, #12]
 801c83a:	2a00      	cmp	r2, #0
 801c83c:	db01      	blt.n	801c842 <_svfiprintf_r+0xfa>
 801c83e:	9207      	str	r2, [sp, #28]
 801c840:	e004      	b.n	801c84c <_svfiprintf_r+0x104>
 801c842:	4252      	negs	r2, r2
 801c844:	f043 0302 	orr.w	r3, r3, #2
 801c848:	9207      	str	r2, [sp, #28]
 801c84a:	9304      	str	r3, [sp, #16]
 801c84c:	783b      	ldrb	r3, [r7, #0]
 801c84e:	2b2e      	cmp	r3, #46	; 0x2e
 801c850:	d10c      	bne.n	801c86c <_svfiprintf_r+0x124>
 801c852:	787b      	ldrb	r3, [r7, #1]
 801c854:	2b2a      	cmp	r3, #42	; 0x2a
 801c856:	d133      	bne.n	801c8c0 <_svfiprintf_r+0x178>
 801c858:	9b03      	ldr	r3, [sp, #12]
 801c85a:	1d1a      	adds	r2, r3, #4
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	9203      	str	r2, [sp, #12]
 801c860:	2b00      	cmp	r3, #0
 801c862:	bfb8      	it	lt
 801c864:	f04f 33ff 	movlt.w	r3, #4294967295
 801c868:	3702      	adds	r7, #2
 801c86a:	9305      	str	r3, [sp, #20]
 801c86c:	4d2e      	ldr	r5, [pc, #184]	; (801c928 <_svfiprintf_r+0x1e0>)
 801c86e:	7839      	ldrb	r1, [r7, #0]
 801c870:	2203      	movs	r2, #3
 801c872:	4628      	mov	r0, r5
 801c874:	f7e3 fccc 	bl	8000210 <memchr>
 801c878:	b138      	cbz	r0, 801c88a <_svfiprintf_r+0x142>
 801c87a:	2340      	movs	r3, #64	; 0x40
 801c87c:	1b40      	subs	r0, r0, r5
 801c87e:	fa03 f000 	lsl.w	r0, r3, r0
 801c882:	9b04      	ldr	r3, [sp, #16]
 801c884:	4303      	orrs	r3, r0
 801c886:	3701      	adds	r7, #1
 801c888:	9304      	str	r3, [sp, #16]
 801c88a:	7839      	ldrb	r1, [r7, #0]
 801c88c:	4827      	ldr	r0, [pc, #156]	; (801c92c <_svfiprintf_r+0x1e4>)
 801c88e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c892:	2206      	movs	r2, #6
 801c894:	1c7e      	adds	r6, r7, #1
 801c896:	f7e3 fcbb 	bl	8000210 <memchr>
 801c89a:	2800      	cmp	r0, #0
 801c89c:	d038      	beq.n	801c910 <_svfiprintf_r+0x1c8>
 801c89e:	4b24      	ldr	r3, [pc, #144]	; (801c930 <_svfiprintf_r+0x1e8>)
 801c8a0:	bb13      	cbnz	r3, 801c8e8 <_svfiprintf_r+0x1a0>
 801c8a2:	9b03      	ldr	r3, [sp, #12]
 801c8a4:	3307      	adds	r3, #7
 801c8a6:	f023 0307 	bic.w	r3, r3, #7
 801c8aa:	3308      	adds	r3, #8
 801c8ac:	9303      	str	r3, [sp, #12]
 801c8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8b0:	444b      	add	r3, r9
 801c8b2:	9309      	str	r3, [sp, #36]	; 0x24
 801c8b4:	e76d      	b.n	801c792 <_svfiprintf_r+0x4a>
 801c8b6:	fb05 3202 	mla	r2, r5, r2, r3
 801c8ba:	2001      	movs	r0, #1
 801c8bc:	460f      	mov	r7, r1
 801c8be:	e7a6      	b.n	801c80e <_svfiprintf_r+0xc6>
 801c8c0:	2300      	movs	r3, #0
 801c8c2:	3701      	adds	r7, #1
 801c8c4:	9305      	str	r3, [sp, #20]
 801c8c6:	4619      	mov	r1, r3
 801c8c8:	250a      	movs	r5, #10
 801c8ca:	4638      	mov	r0, r7
 801c8cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c8d0:	3a30      	subs	r2, #48	; 0x30
 801c8d2:	2a09      	cmp	r2, #9
 801c8d4:	d903      	bls.n	801c8de <_svfiprintf_r+0x196>
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d0c8      	beq.n	801c86c <_svfiprintf_r+0x124>
 801c8da:	9105      	str	r1, [sp, #20]
 801c8dc:	e7c6      	b.n	801c86c <_svfiprintf_r+0x124>
 801c8de:	fb05 2101 	mla	r1, r5, r1, r2
 801c8e2:	2301      	movs	r3, #1
 801c8e4:	4607      	mov	r7, r0
 801c8e6:	e7f0      	b.n	801c8ca <_svfiprintf_r+0x182>
 801c8e8:	ab03      	add	r3, sp, #12
 801c8ea:	9300      	str	r3, [sp, #0]
 801c8ec:	4622      	mov	r2, r4
 801c8ee:	4b11      	ldr	r3, [pc, #68]	; (801c934 <_svfiprintf_r+0x1ec>)
 801c8f0:	a904      	add	r1, sp, #16
 801c8f2:	4640      	mov	r0, r8
 801c8f4:	f3af 8000 	nop.w
 801c8f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c8fc:	4681      	mov	r9, r0
 801c8fe:	d1d6      	bne.n	801c8ae <_svfiprintf_r+0x166>
 801c900:	89a3      	ldrh	r3, [r4, #12]
 801c902:	065b      	lsls	r3, r3, #25
 801c904:	f53f af35 	bmi.w	801c772 <_svfiprintf_r+0x2a>
 801c908:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c90a:	b01d      	add	sp, #116	; 0x74
 801c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c910:	ab03      	add	r3, sp, #12
 801c912:	9300      	str	r3, [sp, #0]
 801c914:	4622      	mov	r2, r4
 801c916:	4b07      	ldr	r3, [pc, #28]	; (801c934 <_svfiprintf_r+0x1ec>)
 801c918:	a904      	add	r1, sp, #16
 801c91a:	4640      	mov	r0, r8
 801c91c:	f000 f9c2 	bl	801cca4 <_printf_i>
 801c920:	e7ea      	b.n	801c8f8 <_svfiprintf_r+0x1b0>
 801c922:	bf00      	nop
 801c924:	0801ee98 	.word	0x0801ee98
 801c928:	0801ee9e 	.word	0x0801ee9e
 801c92c:	0801eea2 	.word	0x0801eea2
 801c930:	00000000 	.word	0x00000000
 801c934:	0801c695 	.word	0x0801c695

0801c938 <__sfputc_r>:
 801c938:	6893      	ldr	r3, [r2, #8]
 801c93a:	3b01      	subs	r3, #1
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	b410      	push	{r4}
 801c940:	6093      	str	r3, [r2, #8]
 801c942:	da08      	bge.n	801c956 <__sfputc_r+0x1e>
 801c944:	6994      	ldr	r4, [r2, #24]
 801c946:	42a3      	cmp	r3, r4
 801c948:	db01      	blt.n	801c94e <__sfputc_r+0x16>
 801c94a:	290a      	cmp	r1, #10
 801c94c:	d103      	bne.n	801c956 <__sfputc_r+0x1e>
 801c94e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c952:	f7ff bb71 	b.w	801c038 <__swbuf_r>
 801c956:	6813      	ldr	r3, [r2, #0]
 801c958:	1c58      	adds	r0, r3, #1
 801c95a:	6010      	str	r0, [r2, #0]
 801c95c:	7019      	strb	r1, [r3, #0]
 801c95e:	4608      	mov	r0, r1
 801c960:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c964:	4770      	bx	lr

0801c966 <__sfputs_r>:
 801c966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c968:	4606      	mov	r6, r0
 801c96a:	460f      	mov	r7, r1
 801c96c:	4614      	mov	r4, r2
 801c96e:	18d5      	adds	r5, r2, r3
 801c970:	42ac      	cmp	r4, r5
 801c972:	d101      	bne.n	801c978 <__sfputs_r+0x12>
 801c974:	2000      	movs	r0, #0
 801c976:	e007      	b.n	801c988 <__sfputs_r+0x22>
 801c978:	463a      	mov	r2, r7
 801c97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c97e:	4630      	mov	r0, r6
 801c980:	f7ff ffda 	bl	801c938 <__sfputc_r>
 801c984:	1c43      	adds	r3, r0, #1
 801c986:	d1f3      	bne.n	801c970 <__sfputs_r+0xa>
 801c988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c98c <_vfiprintf_r>:
 801c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c990:	460c      	mov	r4, r1
 801c992:	b09d      	sub	sp, #116	; 0x74
 801c994:	4617      	mov	r7, r2
 801c996:	461d      	mov	r5, r3
 801c998:	4606      	mov	r6, r0
 801c99a:	b118      	cbz	r0, 801c9a4 <_vfiprintf_r+0x18>
 801c99c:	6983      	ldr	r3, [r0, #24]
 801c99e:	b90b      	cbnz	r3, 801c9a4 <_vfiprintf_r+0x18>
 801c9a0:	f7ff fd1a 	bl	801c3d8 <__sinit>
 801c9a4:	4b7c      	ldr	r3, [pc, #496]	; (801cb98 <_vfiprintf_r+0x20c>)
 801c9a6:	429c      	cmp	r4, r3
 801c9a8:	d158      	bne.n	801ca5c <_vfiprintf_r+0xd0>
 801c9aa:	6874      	ldr	r4, [r6, #4]
 801c9ac:	89a3      	ldrh	r3, [r4, #12]
 801c9ae:	0718      	lsls	r0, r3, #28
 801c9b0:	d55e      	bpl.n	801ca70 <_vfiprintf_r+0xe4>
 801c9b2:	6923      	ldr	r3, [r4, #16]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d05b      	beq.n	801ca70 <_vfiprintf_r+0xe4>
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	9309      	str	r3, [sp, #36]	; 0x24
 801c9bc:	2320      	movs	r3, #32
 801c9be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c9c2:	2330      	movs	r3, #48	; 0x30
 801c9c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c9c8:	9503      	str	r5, [sp, #12]
 801c9ca:	f04f 0b01 	mov.w	fp, #1
 801c9ce:	46b8      	mov	r8, r7
 801c9d0:	4645      	mov	r5, r8
 801c9d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c9d6:	b10b      	cbz	r3, 801c9dc <_vfiprintf_r+0x50>
 801c9d8:	2b25      	cmp	r3, #37	; 0x25
 801c9da:	d154      	bne.n	801ca86 <_vfiprintf_r+0xfa>
 801c9dc:	ebb8 0a07 	subs.w	sl, r8, r7
 801c9e0:	d00b      	beq.n	801c9fa <_vfiprintf_r+0x6e>
 801c9e2:	4653      	mov	r3, sl
 801c9e4:	463a      	mov	r2, r7
 801c9e6:	4621      	mov	r1, r4
 801c9e8:	4630      	mov	r0, r6
 801c9ea:	f7ff ffbc 	bl	801c966 <__sfputs_r>
 801c9ee:	3001      	adds	r0, #1
 801c9f0:	f000 80c2 	beq.w	801cb78 <_vfiprintf_r+0x1ec>
 801c9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9f6:	4453      	add	r3, sl
 801c9f8:	9309      	str	r3, [sp, #36]	; 0x24
 801c9fa:	f898 3000 	ldrb.w	r3, [r8]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	f000 80ba 	beq.w	801cb78 <_vfiprintf_r+0x1ec>
 801ca04:	2300      	movs	r3, #0
 801ca06:	f04f 32ff 	mov.w	r2, #4294967295
 801ca0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca0e:	9304      	str	r3, [sp, #16]
 801ca10:	9307      	str	r3, [sp, #28]
 801ca12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ca16:	931a      	str	r3, [sp, #104]	; 0x68
 801ca18:	46a8      	mov	r8, r5
 801ca1a:	2205      	movs	r2, #5
 801ca1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 801ca20:	485e      	ldr	r0, [pc, #376]	; (801cb9c <_vfiprintf_r+0x210>)
 801ca22:	f7e3 fbf5 	bl	8000210 <memchr>
 801ca26:	9b04      	ldr	r3, [sp, #16]
 801ca28:	bb78      	cbnz	r0, 801ca8a <_vfiprintf_r+0xfe>
 801ca2a:	06d9      	lsls	r1, r3, #27
 801ca2c:	bf44      	itt	mi
 801ca2e:	2220      	movmi	r2, #32
 801ca30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ca34:	071a      	lsls	r2, r3, #28
 801ca36:	bf44      	itt	mi
 801ca38:	222b      	movmi	r2, #43	; 0x2b
 801ca3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ca3e:	782a      	ldrb	r2, [r5, #0]
 801ca40:	2a2a      	cmp	r2, #42	; 0x2a
 801ca42:	d02a      	beq.n	801ca9a <_vfiprintf_r+0x10e>
 801ca44:	9a07      	ldr	r2, [sp, #28]
 801ca46:	46a8      	mov	r8, r5
 801ca48:	2000      	movs	r0, #0
 801ca4a:	250a      	movs	r5, #10
 801ca4c:	4641      	mov	r1, r8
 801ca4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca52:	3b30      	subs	r3, #48	; 0x30
 801ca54:	2b09      	cmp	r3, #9
 801ca56:	d969      	bls.n	801cb2c <_vfiprintf_r+0x1a0>
 801ca58:	b360      	cbz	r0, 801cab4 <_vfiprintf_r+0x128>
 801ca5a:	e024      	b.n	801caa6 <_vfiprintf_r+0x11a>
 801ca5c:	4b50      	ldr	r3, [pc, #320]	; (801cba0 <_vfiprintf_r+0x214>)
 801ca5e:	429c      	cmp	r4, r3
 801ca60:	d101      	bne.n	801ca66 <_vfiprintf_r+0xda>
 801ca62:	68b4      	ldr	r4, [r6, #8]
 801ca64:	e7a2      	b.n	801c9ac <_vfiprintf_r+0x20>
 801ca66:	4b4f      	ldr	r3, [pc, #316]	; (801cba4 <_vfiprintf_r+0x218>)
 801ca68:	429c      	cmp	r4, r3
 801ca6a:	bf08      	it	eq
 801ca6c:	68f4      	ldreq	r4, [r6, #12]
 801ca6e:	e79d      	b.n	801c9ac <_vfiprintf_r+0x20>
 801ca70:	4621      	mov	r1, r4
 801ca72:	4630      	mov	r0, r6
 801ca74:	f7ff fb40 	bl	801c0f8 <__swsetup_r>
 801ca78:	2800      	cmp	r0, #0
 801ca7a:	d09d      	beq.n	801c9b8 <_vfiprintf_r+0x2c>
 801ca7c:	f04f 30ff 	mov.w	r0, #4294967295
 801ca80:	b01d      	add	sp, #116	; 0x74
 801ca82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca86:	46a8      	mov	r8, r5
 801ca88:	e7a2      	b.n	801c9d0 <_vfiprintf_r+0x44>
 801ca8a:	4a44      	ldr	r2, [pc, #272]	; (801cb9c <_vfiprintf_r+0x210>)
 801ca8c:	1a80      	subs	r0, r0, r2
 801ca8e:	fa0b f000 	lsl.w	r0, fp, r0
 801ca92:	4318      	orrs	r0, r3
 801ca94:	9004      	str	r0, [sp, #16]
 801ca96:	4645      	mov	r5, r8
 801ca98:	e7be      	b.n	801ca18 <_vfiprintf_r+0x8c>
 801ca9a:	9a03      	ldr	r2, [sp, #12]
 801ca9c:	1d11      	adds	r1, r2, #4
 801ca9e:	6812      	ldr	r2, [r2, #0]
 801caa0:	9103      	str	r1, [sp, #12]
 801caa2:	2a00      	cmp	r2, #0
 801caa4:	db01      	blt.n	801caaa <_vfiprintf_r+0x11e>
 801caa6:	9207      	str	r2, [sp, #28]
 801caa8:	e004      	b.n	801cab4 <_vfiprintf_r+0x128>
 801caaa:	4252      	negs	r2, r2
 801caac:	f043 0302 	orr.w	r3, r3, #2
 801cab0:	9207      	str	r2, [sp, #28]
 801cab2:	9304      	str	r3, [sp, #16]
 801cab4:	f898 3000 	ldrb.w	r3, [r8]
 801cab8:	2b2e      	cmp	r3, #46	; 0x2e
 801caba:	d10e      	bne.n	801cada <_vfiprintf_r+0x14e>
 801cabc:	f898 3001 	ldrb.w	r3, [r8, #1]
 801cac0:	2b2a      	cmp	r3, #42	; 0x2a
 801cac2:	d138      	bne.n	801cb36 <_vfiprintf_r+0x1aa>
 801cac4:	9b03      	ldr	r3, [sp, #12]
 801cac6:	1d1a      	adds	r2, r3, #4
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	9203      	str	r2, [sp, #12]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	bfb8      	it	lt
 801cad0:	f04f 33ff 	movlt.w	r3, #4294967295
 801cad4:	f108 0802 	add.w	r8, r8, #2
 801cad8:	9305      	str	r3, [sp, #20]
 801cada:	4d33      	ldr	r5, [pc, #204]	; (801cba8 <_vfiprintf_r+0x21c>)
 801cadc:	f898 1000 	ldrb.w	r1, [r8]
 801cae0:	2203      	movs	r2, #3
 801cae2:	4628      	mov	r0, r5
 801cae4:	f7e3 fb94 	bl	8000210 <memchr>
 801cae8:	b140      	cbz	r0, 801cafc <_vfiprintf_r+0x170>
 801caea:	2340      	movs	r3, #64	; 0x40
 801caec:	1b40      	subs	r0, r0, r5
 801caee:	fa03 f000 	lsl.w	r0, r3, r0
 801caf2:	9b04      	ldr	r3, [sp, #16]
 801caf4:	4303      	orrs	r3, r0
 801caf6:	f108 0801 	add.w	r8, r8, #1
 801cafa:	9304      	str	r3, [sp, #16]
 801cafc:	f898 1000 	ldrb.w	r1, [r8]
 801cb00:	482a      	ldr	r0, [pc, #168]	; (801cbac <_vfiprintf_r+0x220>)
 801cb02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cb06:	2206      	movs	r2, #6
 801cb08:	f108 0701 	add.w	r7, r8, #1
 801cb0c:	f7e3 fb80 	bl	8000210 <memchr>
 801cb10:	2800      	cmp	r0, #0
 801cb12:	d037      	beq.n	801cb84 <_vfiprintf_r+0x1f8>
 801cb14:	4b26      	ldr	r3, [pc, #152]	; (801cbb0 <_vfiprintf_r+0x224>)
 801cb16:	bb1b      	cbnz	r3, 801cb60 <_vfiprintf_r+0x1d4>
 801cb18:	9b03      	ldr	r3, [sp, #12]
 801cb1a:	3307      	adds	r3, #7
 801cb1c:	f023 0307 	bic.w	r3, r3, #7
 801cb20:	3308      	adds	r3, #8
 801cb22:	9303      	str	r3, [sp, #12]
 801cb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb26:	444b      	add	r3, r9
 801cb28:	9309      	str	r3, [sp, #36]	; 0x24
 801cb2a:	e750      	b.n	801c9ce <_vfiprintf_r+0x42>
 801cb2c:	fb05 3202 	mla	r2, r5, r2, r3
 801cb30:	2001      	movs	r0, #1
 801cb32:	4688      	mov	r8, r1
 801cb34:	e78a      	b.n	801ca4c <_vfiprintf_r+0xc0>
 801cb36:	2300      	movs	r3, #0
 801cb38:	f108 0801 	add.w	r8, r8, #1
 801cb3c:	9305      	str	r3, [sp, #20]
 801cb3e:	4619      	mov	r1, r3
 801cb40:	250a      	movs	r5, #10
 801cb42:	4640      	mov	r0, r8
 801cb44:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb48:	3a30      	subs	r2, #48	; 0x30
 801cb4a:	2a09      	cmp	r2, #9
 801cb4c:	d903      	bls.n	801cb56 <_vfiprintf_r+0x1ca>
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d0c3      	beq.n	801cada <_vfiprintf_r+0x14e>
 801cb52:	9105      	str	r1, [sp, #20]
 801cb54:	e7c1      	b.n	801cada <_vfiprintf_r+0x14e>
 801cb56:	fb05 2101 	mla	r1, r5, r1, r2
 801cb5a:	2301      	movs	r3, #1
 801cb5c:	4680      	mov	r8, r0
 801cb5e:	e7f0      	b.n	801cb42 <_vfiprintf_r+0x1b6>
 801cb60:	ab03      	add	r3, sp, #12
 801cb62:	9300      	str	r3, [sp, #0]
 801cb64:	4622      	mov	r2, r4
 801cb66:	4b13      	ldr	r3, [pc, #76]	; (801cbb4 <_vfiprintf_r+0x228>)
 801cb68:	a904      	add	r1, sp, #16
 801cb6a:	4630      	mov	r0, r6
 801cb6c:	f3af 8000 	nop.w
 801cb70:	f1b0 3fff 	cmp.w	r0, #4294967295
 801cb74:	4681      	mov	r9, r0
 801cb76:	d1d5      	bne.n	801cb24 <_vfiprintf_r+0x198>
 801cb78:	89a3      	ldrh	r3, [r4, #12]
 801cb7a:	065b      	lsls	r3, r3, #25
 801cb7c:	f53f af7e 	bmi.w	801ca7c <_vfiprintf_r+0xf0>
 801cb80:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cb82:	e77d      	b.n	801ca80 <_vfiprintf_r+0xf4>
 801cb84:	ab03      	add	r3, sp, #12
 801cb86:	9300      	str	r3, [sp, #0]
 801cb88:	4622      	mov	r2, r4
 801cb8a:	4b0a      	ldr	r3, [pc, #40]	; (801cbb4 <_vfiprintf_r+0x228>)
 801cb8c:	a904      	add	r1, sp, #16
 801cb8e:	4630      	mov	r0, r6
 801cb90:	f000 f888 	bl	801cca4 <_printf_i>
 801cb94:	e7ec      	b.n	801cb70 <_vfiprintf_r+0x1e4>
 801cb96:	bf00      	nop
 801cb98:	0801ee58 	.word	0x0801ee58
 801cb9c:	0801ee98 	.word	0x0801ee98
 801cba0:	0801ee78 	.word	0x0801ee78
 801cba4:	0801ee38 	.word	0x0801ee38
 801cba8:	0801ee9e 	.word	0x0801ee9e
 801cbac:	0801eea2 	.word	0x0801eea2
 801cbb0:	00000000 	.word	0x00000000
 801cbb4:	0801c967 	.word	0x0801c967

0801cbb8 <_printf_common>:
 801cbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbbc:	4691      	mov	r9, r2
 801cbbe:	461f      	mov	r7, r3
 801cbc0:	688a      	ldr	r2, [r1, #8]
 801cbc2:	690b      	ldr	r3, [r1, #16]
 801cbc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cbc8:	4293      	cmp	r3, r2
 801cbca:	bfb8      	it	lt
 801cbcc:	4613      	movlt	r3, r2
 801cbce:	f8c9 3000 	str.w	r3, [r9]
 801cbd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cbd6:	4606      	mov	r6, r0
 801cbd8:	460c      	mov	r4, r1
 801cbda:	b112      	cbz	r2, 801cbe2 <_printf_common+0x2a>
 801cbdc:	3301      	adds	r3, #1
 801cbde:	f8c9 3000 	str.w	r3, [r9]
 801cbe2:	6823      	ldr	r3, [r4, #0]
 801cbe4:	0699      	lsls	r1, r3, #26
 801cbe6:	bf42      	ittt	mi
 801cbe8:	f8d9 3000 	ldrmi.w	r3, [r9]
 801cbec:	3302      	addmi	r3, #2
 801cbee:	f8c9 3000 	strmi.w	r3, [r9]
 801cbf2:	6825      	ldr	r5, [r4, #0]
 801cbf4:	f015 0506 	ands.w	r5, r5, #6
 801cbf8:	d107      	bne.n	801cc0a <_printf_common+0x52>
 801cbfa:	f104 0a19 	add.w	sl, r4, #25
 801cbfe:	68e3      	ldr	r3, [r4, #12]
 801cc00:	f8d9 2000 	ldr.w	r2, [r9]
 801cc04:	1a9b      	subs	r3, r3, r2
 801cc06:	42ab      	cmp	r3, r5
 801cc08:	dc28      	bgt.n	801cc5c <_printf_common+0xa4>
 801cc0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801cc0e:	6822      	ldr	r2, [r4, #0]
 801cc10:	3300      	adds	r3, #0
 801cc12:	bf18      	it	ne
 801cc14:	2301      	movne	r3, #1
 801cc16:	0692      	lsls	r2, r2, #26
 801cc18:	d42d      	bmi.n	801cc76 <_printf_common+0xbe>
 801cc1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cc1e:	4639      	mov	r1, r7
 801cc20:	4630      	mov	r0, r6
 801cc22:	47c0      	blx	r8
 801cc24:	3001      	adds	r0, #1
 801cc26:	d020      	beq.n	801cc6a <_printf_common+0xb2>
 801cc28:	6823      	ldr	r3, [r4, #0]
 801cc2a:	68e5      	ldr	r5, [r4, #12]
 801cc2c:	f8d9 2000 	ldr.w	r2, [r9]
 801cc30:	f003 0306 	and.w	r3, r3, #6
 801cc34:	2b04      	cmp	r3, #4
 801cc36:	bf08      	it	eq
 801cc38:	1aad      	subeq	r5, r5, r2
 801cc3a:	68a3      	ldr	r3, [r4, #8]
 801cc3c:	6922      	ldr	r2, [r4, #16]
 801cc3e:	bf0c      	ite	eq
 801cc40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cc44:	2500      	movne	r5, #0
 801cc46:	4293      	cmp	r3, r2
 801cc48:	bfc4      	itt	gt
 801cc4a:	1a9b      	subgt	r3, r3, r2
 801cc4c:	18ed      	addgt	r5, r5, r3
 801cc4e:	f04f 0900 	mov.w	r9, #0
 801cc52:	341a      	adds	r4, #26
 801cc54:	454d      	cmp	r5, r9
 801cc56:	d11a      	bne.n	801cc8e <_printf_common+0xd6>
 801cc58:	2000      	movs	r0, #0
 801cc5a:	e008      	b.n	801cc6e <_printf_common+0xb6>
 801cc5c:	2301      	movs	r3, #1
 801cc5e:	4652      	mov	r2, sl
 801cc60:	4639      	mov	r1, r7
 801cc62:	4630      	mov	r0, r6
 801cc64:	47c0      	blx	r8
 801cc66:	3001      	adds	r0, #1
 801cc68:	d103      	bne.n	801cc72 <_printf_common+0xba>
 801cc6a:	f04f 30ff 	mov.w	r0, #4294967295
 801cc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc72:	3501      	adds	r5, #1
 801cc74:	e7c3      	b.n	801cbfe <_printf_common+0x46>
 801cc76:	18e1      	adds	r1, r4, r3
 801cc78:	1c5a      	adds	r2, r3, #1
 801cc7a:	2030      	movs	r0, #48	; 0x30
 801cc7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cc80:	4422      	add	r2, r4
 801cc82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cc86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cc8a:	3302      	adds	r3, #2
 801cc8c:	e7c5      	b.n	801cc1a <_printf_common+0x62>
 801cc8e:	2301      	movs	r3, #1
 801cc90:	4622      	mov	r2, r4
 801cc92:	4639      	mov	r1, r7
 801cc94:	4630      	mov	r0, r6
 801cc96:	47c0      	blx	r8
 801cc98:	3001      	adds	r0, #1
 801cc9a:	d0e6      	beq.n	801cc6a <_printf_common+0xb2>
 801cc9c:	f109 0901 	add.w	r9, r9, #1
 801cca0:	e7d8      	b.n	801cc54 <_printf_common+0x9c>
	...

0801cca4 <_printf_i>:
 801cca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cca8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801ccac:	460c      	mov	r4, r1
 801ccae:	7e09      	ldrb	r1, [r1, #24]
 801ccb0:	b085      	sub	sp, #20
 801ccb2:	296e      	cmp	r1, #110	; 0x6e
 801ccb4:	4617      	mov	r7, r2
 801ccb6:	4606      	mov	r6, r0
 801ccb8:	4698      	mov	r8, r3
 801ccba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ccbc:	f000 80b3 	beq.w	801ce26 <_printf_i+0x182>
 801ccc0:	d822      	bhi.n	801cd08 <_printf_i+0x64>
 801ccc2:	2963      	cmp	r1, #99	; 0x63
 801ccc4:	d036      	beq.n	801cd34 <_printf_i+0x90>
 801ccc6:	d80a      	bhi.n	801ccde <_printf_i+0x3a>
 801ccc8:	2900      	cmp	r1, #0
 801ccca:	f000 80b9 	beq.w	801ce40 <_printf_i+0x19c>
 801ccce:	2958      	cmp	r1, #88	; 0x58
 801ccd0:	f000 8083 	beq.w	801cdda <_printf_i+0x136>
 801ccd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ccd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801ccdc:	e032      	b.n	801cd44 <_printf_i+0xa0>
 801ccde:	2964      	cmp	r1, #100	; 0x64
 801cce0:	d001      	beq.n	801cce6 <_printf_i+0x42>
 801cce2:	2969      	cmp	r1, #105	; 0x69
 801cce4:	d1f6      	bne.n	801ccd4 <_printf_i+0x30>
 801cce6:	6820      	ldr	r0, [r4, #0]
 801cce8:	6813      	ldr	r3, [r2, #0]
 801ccea:	0605      	lsls	r5, r0, #24
 801ccec:	f103 0104 	add.w	r1, r3, #4
 801ccf0:	d52a      	bpl.n	801cd48 <_printf_i+0xa4>
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	6011      	str	r1, [r2, #0]
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	da03      	bge.n	801cd02 <_printf_i+0x5e>
 801ccfa:	222d      	movs	r2, #45	; 0x2d
 801ccfc:	425b      	negs	r3, r3
 801ccfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801cd02:	486f      	ldr	r0, [pc, #444]	; (801cec0 <_printf_i+0x21c>)
 801cd04:	220a      	movs	r2, #10
 801cd06:	e039      	b.n	801cd7c <_printf_i+0xd8>
 801cd08:	2973      	cmp	r1, #115	; 0x73
 801cd0a:	f000 809d 	beq.w	801ce48 <_printf_i+0x1a4>
 801cd0e:	d808      	bhi.n	801cd22 <_printf_i+0x7e>
 801cd10:	296f      	cmp	r1, #111	; 0x6f
 801cd12:	d020      	beq.n	801cd56 <_printf_i+0xb2>
 801cd14:	2970      	cmp	r1, #112	; 0x70
 801cd16:	d1dd      	bne.n	801ccd4 <_printf_i+0x30>
 801cd18:	6823      	ldr	r3, [r4, #0]
 801cd1a:	f043 0320 	orr.w	r3, r3, #32
 801cd1e:	6023      	str	r3, [r4, #0]
 801cd20:	e003      	b.n	801cd2a <_printf_i+0x86>
 801cd22:	2975      	cmp	r1, #117	; 0x75
 801cd24:	d017      	beq.n	801cd56 <_printf_i+0xb2>
 801cd26:	2978      	cmp	r1, #120	; 0x78
 801cd28:	d1d4      	bne.n	801ccd4 <_printf_i+0x30>
 801cd2a:	2378      	movs	r3, #120	; 0x78
 801cd2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801cd30:	4864      	ldr	r0, [pc, #400]	; (801cec4 <_printf_i+0x220>)
 801cd32:	e055      	b.n	801cde0 <_printf_i+0x13c>
 801cd34:	6813      	ldr	r3, [r2, #0]
 801cd36:	1d19      	adds	r1, r3, #4
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	6011      	str	r1, [r2, #0]
 801cd3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cd40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cd44:	2301      	movs	r3, #1
 801cd46:	e08c      	b.n	801ce62 <_printf_i+0x1be>
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	6011      	str	r1, [r2, #0]
 801cd4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801cd50:	bf18      	it	ne
 801cd52:	b21b      	sxthne	r3, r3
 801cd54:	e7cf      	b.n	801ccf6 <_printf_i+0x52>
 801cd56:	6813      	ldr	r3, [r2, #0]
 801cd58:	6825      	ldr	r5, [r4, #0]
 801cd5a:	1d18      	adds	r0, r3, #4
 801cd5c:	6010      	str	r0, [r2, #0]
 801cd5e:	0628      	lsls	r0, r5, #24
 801cd60:	d501      	bpl.n	801cd66 <_printf_i+0xc2>
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	e002      	b.n	801cd6c <_printf_i+0xc8>
 801cd66:	0668      	lsls	r0, r5, #25
 801cd68:	d5fb      	bpl.n	801cd62 <_printf_i+0xbe>
 801cd6a:	881b      	ldrh	r3, [r3, #0]
 801cd6c:	4854      	ldr	r0, [pc, #336]	; (801cec0 <_printf_i+0x21c>)
 801cd6e:	296f      	cmp	r1, #111	; 0x6f
 801cd70:	bf14      	ite	ne
 801cd72:	220a      	movne	r2, #10
 801cd74:	2208      	moveq	r2, #8
 801cd76:	2100      	movs	r1, #0
 801cd78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cd7c:	6865      	ldr	r5, [r4, #4]
 801cd7e:	60a5      	str	r5, [r4, #8]
 801cd80:	2d00      	cmp	r5, #0
 801cd82:	f2c0 8095 	blt.w	801ceb0 <_printf_i+0x20c>
 801cd86:	6821      	ldr	r1, [r4, #0]
 801cd88:	f021 0104 	bic.w	r1, r1, #4
 801cd8c:	6021      	str	r1, [r4, #0]
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d13d      	bne.n	801ce0e <_printf_i+0x16a>
 801cd92:	2d00      	cmp	r5, #0
 801cd94:	f040 808e 	bne.w	801ceb4 <_printf_i+0x210>
 801cd98:	4665      	mov	r5, ip
 801cd9a:	2a08      	cmp	r2, #8
 801cd9c:	d10b      	bne.n	801cdb6 <_printf_i+0x112>
 801cd9e:	6823      	ldr	r3, [r4, #0]
 801cda0:	07db      	lsls	r3, r3, #31
 801cda2:	d508      	bpl.n	801cdb6 <_printf_i+0x112>
 801cda4:	6923      	ldr	r3, [r4, #16]
 801cda6:	6862      	ldr	r2, [r4, #4]
 801cda8:	429a      	cmp	r2, r3
 801cdaa:	bfde      	ittt	le
 801cdac:	2330      	movle	r3, #48	; 0x30
 801cdae:	f805 3c01 	strble.w	r3, [r5, #-1]
 801cdb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801cdb6:	ebac 0305 	sub.w	r3, ip, r5
 801cdba:	6123      	str	r3, [r4, #16]
 801cdbc:	f8cd 8000 	str.w	r8, [sp]
 801cdc0:	463b      	mov	r3, r7
 801cdc2:	aa03      	add	r2, sp, #12
 801cdc4:	4621      	mov	r1, r4
 801cdc6:	4630      	mov	r0, r6
 801cdc8:	f7ff fef6 	bl	801cbb8 <_printf_common>
 801cdcc:	3001      	adds	r0, #1
 801cdce:	d14d      	bne.n	801ce6c <_printf_i+0x1c8>
 801cdd0:	f04f 30ff 	mov.w	r0, #4294967295
 801cdd4:	b005      	add	sp, #20
 801cdd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cdda:	4839      	ldr	r0, [pc, #228]	; (801cec0 <_printf_i+0x21c>)
 801cddc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801cde0:	6813      	ldr	r3, [r2, #0]
 801cde2:	6821      	ldr	r1, [r4, #0]
 801cde4:	1d1d      	adds	r5, r3, #4
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	6015      	str	r5, [r2, #0]
 801cdea:	060a      	lsls	r2, r1, #24
 801cdec:	d50b      	bpl.n	801ce06 <_printf_i+0x162>
 801cdee:	07ca      	lsls	r2, r1, #31
 801cdf0:	bf44      	itt	mi
 801cdf2:	f041 0120 	orrmi.w	r1, r1, #32
 801cdf6:	6021      	strmi	r1, [r4, #0]
 801cdf8:	b91b      	cbnz	r3, 801ce02 <_printf_i+0x15e>
 801cdfa:	6822      	ldr	r2, [r4, #0]
 801cdfc:	f022 0220 	bic.w	r2, r2, #32
 801ce00:	6022      	str	r2, [r4, #0]
 801ce02:	2210      	movs	r2, #16
 801ce04:	e7b7      	b.n	801cd76 <_printf_i+0xd2>
 801ce06:	064d      	lsls	r5, r1, #25
 801ce08:	bf48      	it	mi
 801ce0a:	b29b      	uxthmi	r3, r3
 801ce0c:	e7ef      	b.n	801cdee <_printf_i+0x14a>
 801ce0e:	4665      	mov	r5, ip
 801ce10:	fbb3 f1f2 	udiv	r1, r3, r2
 801ce14:	fb02 3311 	mls	r3, r2, r1, r3
 801ce18:	5cc3      	ldrb	r3, [r0, r3]
 801ce1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ce1e:	460b      	mov	r3, r1
 801ce20:	2900      	cmp	r1, #0
 801ce22:	d1f5      	bne.n	801ce10 <_printf_i+0x16c>
 801ce24:	e7b9      	b.n	801cd9a <_printf_i+0xf6>
 801ce26:	6813      	ldr	r3, [r2, #0]
 801ce28:	6825      	ldr	r5, [r4, #0]
 801ce2a:	6961      	ldr	r1, [r4, #20]
 801ce2c:	1d18      	adds	r0, r3, #4
 801ce2e:	6010      	str	r0, [r2, #0]
 801ce30:	0628      	lsls	r0, r5, #24
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	d501      	bpl.n	801ce3a <_printf_i+0x196>
 801ce36:	6019      	str	r1, [r3, #0]
 801ce38:	e002      	b.n	801ce40 <_printf_i+0x19c>
 801ce3a:	066a      	lsls	r2, r5, #25
 801ce3c:	d5fb      	bpl.n	801ce36 <_printf_i+0x192>
 801ce3e:	8019      	strh	r1, [r3, #0]
 801ce40:	2300      	movs	r3, #0
 801ce42:	6123      	str	r3, [r4, #16]
 801ce44:	4665      	mov	r5, ip
 801ce46:	e7b9      	b.n	801cdbc <_printf_i+0x118>
 801ce48:	6813      	ldr	r3, [r2, #0]
 801ce4a:	1d19      	adds	r1, r3, #4
 801ce4c:	6011      	str	r1, [r2, #0]
 801ce4e:	681d      	ldr	r5, [r3, #0]
 801ce50:	6862      	ldr	r2, [r4, #4]
 801ce52:	2100      	movs	r1, #0
 801ce54:	4628      	mov	r0, r5
 801ce56:	f7e3 f9db 	bl	8000210 <memchr>
 801ce5a:	b108      	cbz	r0, 801ce60 <_printf_i+0x1bc>
 801ce5c:	1b40      	subs	r0, r0, r5
 801ce5e:	6060      	str	r0, [r4, #4]
 801ce60:	6863      	ldr	r3, [r4, #4]
 801ce62:	6123      	str	r3, [r4, #16]
 801ce64:	2300      	movs	r3, #0
 801ce66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ce6a:	e7a7      	b.n	801cdbc <_printf_i+0x118>
 801ce6c:	6923      	ldr	r3, [r4, #16]
 801ce6e:	462a      	mov	r2, r5
 801ce70:	4639      	mov	r1, r7
 801ce72:	4630      	mov	r0, r6
 801ce74:	47c0      	blx	r8
 801ce76:	3001      	adds	r0, #1
 801ce78:	d0aa      	beq.n	801cdd0 <_printf_i+0x12c>
 801ce7a:	6823      	ldr	r3, [r4, #0]
 801ce7c:	079b      	lsls	r3, r3, #30
 801ce7e:	d413      	bmi.n	801cea8 <_printf_i+0x204>
 801ce80:	68e0      	ldr	r0, [r4, #12]
 801ce82:	9b03      	ldr	r3, [sp, #12]
 801ce84:	4298      	cmp	r0, r3
 801ce86:	bfb8      	it	lt
 801ce88:	4618      	movlt	r0, r3
 801ce8a:	e7a3      	b.n	801cdd4 <_printf_i+0x130>
 801ce8c:	2301      	movs	r3, #1
 801ce8e:	464a      	mov	r2, r9
 801ce90:	4639      	mov	r1, r7
 801ce92:	4630      	mov	r0, r6
 801ce94:	47c0      	blx	r8
 801ce96:	3001      	adds	r0, #1
 801ce98:	d09a      	beq.n	801cdd0 <_printf_i+0x12c>
 801ce9a:	3501      	adds	r5, #1
 801ce9c:	68e3      	ldr	r3, [r4, #12]
 801ce9e:	9a03      	ldr	r2, [sp, #12]
 801cea0:	1a9b      	subs	r3, r3, r2
 801cea2:	42ab      	cmp	r3, r5
 801cea4:	dcf2      	bgt.n	801ce8c <_printf_i+0x1e8>
 801cea6:	e7eb      	b.n	801ce80 <_printf_i+0x1dc>
 801cea8:	2500      	movs	r5, #0
 801ceaa:	f104 0919 	add.w	r9, r4, #25
 801ceae:	e7f5      	b.n	801ce9c <_printf_i+0x1f8>
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d1ac      	bne.n	801ce0e <_printf_i+0x16a>
 801ceb4:	7803      	ldrb	r3, [r0, #0]
 801ceb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ceba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cebe:	e76c      	b.n	801cd9a <_printf_i+0xf6>
 801cec0:	0801eea9 	.word	0x0801eea9
 801cec4:	0801eeba 	.word	0x0801eeba

0801cec8 <_putc_r>:
 801cec8:	b570      	push	{r4, r5, r6, lr}
 801ceca:	460d      	mov	r5, r1
 801cecc:	4614      	mov	r4, r2
 801cece:	4606      	mov	r6, r0
 801ced0:	b118      	cbz	r0, 801ceda <_putc_r+0x12>
 801ced2:	6983      	ldr	r3, [r0, #24]
 801ced4:	b90b      	cbnz	r3, 801ceda <_putc_r+0x12>
 801ced6:	f7ff fa7f 	bl	801c3d8 <__sinit>
 801ceda:	4b13      	ldr	r3, [pc, #76]	; (801cf28 <_putc_r+0x60>)
 801cedc:	429c      	cmp	r4, r3
 801cede:	d112      	bne.n	801cf06 <_putc_r+0x3e>
 801cee0:	6874      	ldr	r4, [r6, #4]
 801cee2:	68a3      	ldr	r3, [r4, #8]
 801cee4:	3b01      	subs	r3, #1
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	60a3      	str	r3, [r4, #8]
 801ceea:	da16      	bge.n	801cf1a <_putc_r+0x52>
 801ceec:	69a2      	ldr	r2, [r4, #24]
 801ceee:	4293      	cmp	r3, r2
 801cef0:	db02      	blt.n	801cef8 <_putc_r+0x30>
 801cef2:	b2eb      	uxtb	r3, r5
 801cef4:	2b0a      	cmp	r3, #10
 801cef6:	d110      	bne.n	801cf1a <_putc_r+0x52>
 801cef8:	4622      	mov	r2, r4
 801cefa:	4629      	mov	r1, r5
 801cefc:	4630      	mov	r0, r6
 801cefe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf02:	f7ff b899 	b.w	801c038 <__swbuf_r>
 801cf06:	4b09      	ldr	r3, [pc, #36]	; (801cf2c <_putc_r+0x64>)
 801cf08:	429c      	cmp	r4, r3
 801cf0a:	d101      	bne.n	801cf10 <_putc_r+0x48>
 801cf0c:	68b4      	ldr	r4, [r6, #8]
 801cf0e:	e7e8      	b.n	801cee2 <_putc_r+0x1a>
 801cf10:	4b07      	ldr	r3, [pc, #28]	; (801cf30 <_putc_r+0x68>)
 801cf12:	429c      	cmp	r4, r3
 801cf14:	bf08      	it	eq
 801cf16:	68f4      	ldreq	r4, [r6, #12]
 801cf18:	e7e3      	b.n	801cee2 <_putc_r+0x1a>
 801cf1a:	6823      	ldr	r3, [r4, #0]
 801cf1c:	1c5a      	adds	r2, r3, #1
 801cf1e:	6022      	str	r2, [r4, #0]
 801cf20:	701d      	strb	r5, [r3, #0]
 801cf22:	b2e8      	uxtb	r0, r5
 801cf24:	bd70      	pop	{r4, r5, r6, pc}
 801cf26:	bf00      	nop
 801cf28:	0801ee58 	.word	0x0801ee58
 801cf2c:	0801ee78 	.word	0x0801ee78
 801cf30:	0801ee38 	.word	0x0801ee38

0801cf34 <lflush>:
 801cf34:	8983      	ldrh	r3, [r0, #12]
 801cf36:	f003 0309 	and.w	r3, r3, #9
 801cf3a:	2b09      	cmp	r3, #9
 801cf3c:	d101      	bne.n	801cf42 <lflush+0xe>
 801cf3e:	f7ff b9f9 	b.w	801c334 <fflush>
 801cf42:	2000      	movs	r0, #0
 801cf44:	4770      	bx	lr
	...

0801cf48 <__srefill_r>:
 801cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf4a:	460c      	mov	r4, r1
 801cf4c:	4605      	mov	r5, r0
 801cf4e:	b118      	cbz	r0, 801cf58 <__srefill_r+0x10>
 801cf50:	6983      	ldr	r3, [r0, #24]
 801cf52:	b90b      	cbnz	r3, 801cf58 <__srefill_r+0x10>
 801cf54:	f7ff fa40 	bl	801c3d8 <__sinit>
 801cf58:	4b3c      	ldr	r3, [pc, #240]	; (801d04c <__srefill_r+0x104>)
 801cf5a:	429c      	cmp	r4, r3
 801cf5c:	d10a      	bne.n	801cf74 <__srefill_r+0x2c>
 801cf5e:	686c      	ldr	r4, [r5, #4]
 801cf60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cf64:	2300      	movs	r3, #0
 801cf66:	6063      	str	r3, [r4, #4]
 801cf68:	b293      	uxth	r3, r2
 801cf6a:	069e      	lsls	r6, r3, #26
 801cf6c:	d50c      	bpl.n	801cf88 <__srefill_r+0x40>
 801cf6e:	f04f 30ff 	mov.w	r0, #4294967295
 801cf72:	e067      	b.n	801d044 <__srefill_r+0xfc>
 801cf74:	4b36      	ldr	r3, [pc, #216]	; (801d050 <__srefill_r+0x108>)
 801cf76:	429c      	cmp	r4, r3
 801cf78:	d101      	bne.n	801cf7e <__srefill_r+0x36>
 801cf7a:	68ac      	ldr	r4, [r5, #8]
 801cf7c:	e7f0      	b.n	801cf60 <__srefill_r+0x18>
 801cf7e:	4b35      	ldr	r3, [pc, #212]	; (801d054 <__srefill_r+0x10c>)
 801cf80:	429c      	cmp	r4, r3
 801cf82:	bf08      	it	eq
 801cf84:	68ec      	ldreq	r4, [r5, #12]
 801cf86:	e7eb      	b.n	801cf60 <__srefill_r+0x18>
 801cf88:	0758      	lsls	r0, r3, #29
 801cf8a:	d449      	bmi.n	801d020 <__srefill_r+0xd8>
 801cf8c:	06d9      	lsls	r1, r3, #27
 801cf8e:	d405      	bmi.n	801cf9c <__srefill_r+0x54>
 801cf90:	2309      	movs	r3, #9
 801cf92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cf96:	602b      	str	r3, [r5, #0]
 801cf98:	81a2      	strh	r2, [r4, #12]
 801cf9a:	e7e8      	b.n	801cf6e <__srefill_r+0x26>
 801cf9c:	071a      	lsls	r2, r3, #28
 801cf9e:	d50b      	bpl.n	801cfb8 <__srefill_r+0x70>
 801cfa0:	4621      	mov	r1, r4
 801cfa2:	4628      	mov	r0, r5
 801cfa4:	f7ff f99c 	bl	801c2e0 <_fflush_r>
 801cfa8:	2800      	cmp	r0, #0
 801cfaa:	d1e0      	bne.n	801cf6e <__srefill_r+0x26>
 801cfac:	89a3      	ldrh	r3, [r4, #12]
 801cfae:	60a0      	str	r0, [r4, #8]
 801cfb0:	f023 0308 	bic.w	r3, r3, #8
 801cfb4:	81a3      	strh	r3, [r4, #12]
 801cfb6:	61a0      	str	r0, [r4, #24]
 801cfb8:	89a3      	ldrh	r3, [r4, #12]
 801cfba:	f043 0304 	orr.w	r3, r3, #4
 801cfbe:	81a3      	strh	r3, [r4, #12]
 801cfc0:	6923      	ldr	r3, [r4, #16]
 801cfc2:	b91b      	cbnz	r3, 801cfcc <__srefill_r+0x84>
 801cfc4:	4621      	mov	r1, r4
 801cfc6:	4628      	mov	r0, r5
 801cfc8:	f7ff fafc 	bl	801c5c4 <__smakebuf_r>
 801cfcc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 801cfd0:	b2be      	uxth	r6, r7
 801cfd2:	07b3      	lsls	r3, r6, #30
 801cfd4:	d00f      	beq.n	801cff6 <__srefill_r+0xae>
 801cfd6:	2301      	movs	r3, #1
 801cfd8:	81a3      	strh	r3, [r4, #12]
 801cfda:	4b1f      	ldr	r3, [pc, #124]	; (801d058 <__srefill_r+0x110>)
 801cfdc:	491f      	ldr	r1, [pc, #124]	; (801d05c <__srefill_r+0x114>)
 801cfde:	6818      	ldr	r0, [r3, #0]
 801cfe0:	f006 0609 	and.w	r6, r6, #9
 801cfe4:	f7ff fa64 	bl	801c4b0 <_fwalk>
 801cfe8:	2e09      	cmp	r6, #9
 801cfea:	81a7      	strh	r7, [r4, #12]
 801cfec:	d103      	bne.n	801cff6 <__srefill_r+0xae>
 801cfee:	4621      	mov	r1, r4
 801cff0:	4628      	mov	r0, r5
 801cff2:	f7ff f8ef 	bl	801c1d4 <__sflush_r>
 801cff6:	6922      	ldr	r2, [r4, #16]
 801cff8:	6022      	str	r2, [r4, #0]
 801cffa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cffc:	6963      	ldr	r3, [r4, #20]
 801cffe:	6a21      	ldr	r1, [r4, #32]
 801d000:	4628      	mov	r0, r5
 801d002:	47b0      	blx	r6
 801d004:	2800      	cmp	r0, #0
 801d006:	6060      	str	r0, [r4, #4]
 801d008:	dc1d      	bgt.n	801d046 <__srefill_r+0xfe>
 801d00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d00e:	bf17      	itett	ne
 801d010:	2200      	movne	r2, #0
 801d012:	f043 0320 	orreq.w	r3, r3, #32
 801d016:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 801d01a:	6062      	strne	r2, [r4, #4]
 801d01c:	81a3      	strh	r3, [r4, #12]
 801d01e:	e7a6      	b.n	801cf6e <__srefill_r+0x26>
 801d020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d022:	2900      	cmp	r1, #0
 801d024:	d0cc      	beq.n	801cfc0 <__srefill_r+0x78>
 801d026:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d02a:	4299      	cmp	r1, r3
 801d02c:	d002      	beq.n	801d034 <__srefill_r+0xec>
 801d02e:	4628      	mov	r0, r5
 801d030:	f7fe fd1c 	bl	801ba6c <_free_r>
 801d034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d036:	6063      	str	r3, [r4, #4]
 801d038:	2000      	movs	r0, #0
 801d03a:	6360      	str	r0, [r4, #52]	; 0x34
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d0bf      	beq.n	801cfc0 <__srefill_r+0x78>
 801d040:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d042:	6023      	str	r3, [r4, #0]
 801d044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d046:	2000      	movs	r0, #0
 801d048:	e7fc      	b.n	801d044 <__srefill_r+0xfc>
 801d04a:	bf00      	nop
 801d04c:	0801ee58 	.word	0x0801ee58
 801d050:	0801ee78 	.word	0x0801ee78
 801d054:	0801ee38 	.word	0x0801ee38
 801d058:	0801ed28 	.word	0x0801ed28
 801d05c:	0801cf35 	.word	0x0801cf35

0801d060 <__sread>:
 801d060:	b510      	push	{r4, lr}
 801d062:	460c      	mov	r4, r1
 801d064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d068:	f000 f89c 	bl	801d1a4 <_read_r>
 801d06c:	2800      	cmp	r0, #0
 801d06e:	bfab      	itete	ge
 801d070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d072:	89a3      	ldrhlt	r3, [r4, #12]
 801d074:	181b      	addge	r3, r3, r0
 801d076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d07a:	bfac      	ite	ge
 801d07c:	6563      	strge	r3, [r4, #84]	; 0x54
 801d07e:	81a3      	strhlt	r3, [r4, #12]
 801d080:	bd10      	pop	{r4, pc}

0801d082 <__swrite>:
 801d082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d086:	461f      	mov	r7, r3
 801d088:	898b      	ldrh	r3, [r1, #12]
 801d08a:	05db      	lsls	r3, r3, #23
 801d08c:	4605      	mov	r5, r0
 801d08e:	460c      	mov	r4, r1
 801d090:	4616      	mov	r6, r2
 801d092:	d505      	bpl.n	801d0a0 <__swrite+0x1e>
 801d094:	2302      	movs	r3, #2
 801d096:	2200      	movs	r2, #0
 801d098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d09c:	f000 f868 	bl	801d170 <_lseek_r>
 801d0a0:	89a3      	ldrh	r3, [r4, #12]
 801d0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d0a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d0aa:	81a3      	strh	r3, [r4, #12]
 801d0ac:	4632      	mov	r2, r6
 801d0ae:	463b      	mov	r3, r7
 801d0b0:	4628      	mov	r0, r5
 801d0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d0b6:	f000 b817 	b.w	801d0e8 <_write_r>

0801d0ba <__sseek>:
 801d0ba:	b510      	push	{r4, lr}
 801d0bc:	460c      	mov	r4, r1
 801d0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0c2:	f000 f855 	bl	801d170 <_lseek_r>
 801d0c6:	1c43      	adds	r3, r0, #1
 801d0c8:	89a3      	ldrh	r3, [r4, #12]
 801d0ca:	bf15      	itete	ne
 801d0cc:	6560      	strne	r0, [r4, #84]	; 0x54
 801d0ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d0d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d0d6:	81a3      	strheq	r3, [r4, #12]
 801d0d8:	bf18      	it	ne
 801d0da:	81a3      	strhne	r3, [r4, #12]
 801d0dc:	bd10      	pop	{r4, pc}

0801d0de <__sclose>:
 801d0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0e2:	f000 b813 	b.w	801d10c <_close_r>
	...

0801d0e8 <_write_r>:
 801d0e8:	b538      	push	{r3, r4, r5, lr}
 801d0ea:	4c07      	ldr	r4, [pc, #28]	; (801d108 <_write_r+0x20>)
 801d0ec:	4605      	mov	r5, r0
 801d0ee:	4608      	mov	r0, r1
 801d0f0:	4611      	mov	r1, r2
 801d0f2:	2200      	movs	r2, #0
 801d0f4:	6022      	str	r2, [r4, #0]
 801d0f6:	461a      	mov	r2, r3
 801d0f8:	f7e4 fa06 	bl	8001508 <_write>
 801d0fc:	1c43      	adds	r3, r0, #1
 801d0fe:	d102      	bne.n	801d106 <_write_r+0x1e>
 801d100:	6823      	ldr	r3, [r4, #0]
 801d102:	b103      	cbz	r3, 801d106 <_write_r+0x1e>
 801d104:	602b      	str	r3, [r5, #0]
 801d106:	bd38      	pop	{r3, r4, r5, pc}
 801d108:	200015b4 	.word	0x200015b4

0801d10c <_close_r>:
 801d10c:	b538      	push	{r3, r4, r5, lr}
 801d10e:	4c06      	ldr	r4, [pc, #24]	; (801d128 <_close_r+0x1c>)
 801d110:	2300      	movs	r3, #0
 801d112:	4605      	mov	r5, r0
 801d114:	4608      	mov	r0, r1
 801d116:	6023      	str	r3, [r4, #0]
 801d118:	f7e4 fa12 	bl	8001540 <_close>
 801d11c:	1c43      	adds	r3, r0, #1
 801d11e:	d102      	bne.n	801d126 <_close_r+0x1a>
 801d120:	6823      	ldr	r3, [r4, #0]
 801d122:	b103      	cbz	r3, 801d126 <_close_r+0x1a>
 801d124:	602b      	str	r3, [r5, #0]
 801d126:	bd38      	pop	{r3, r4, r5, pc}
 801d128:	200015b4 	.word	0x200015b4

0801d12c <_fstat_r>:
 801d12c:	b538      	push	{r3, r4, r5, lr}
 801d12e:	4c07      	ldr	r4, [pc, #28]	; (801d14c <_fstat_r+0x20>)
 801d130:	2300      	movs	r3, #0
 801d132:	4605      	mov	r5, r0
 801d134:	4608      	mov	r0, r1
 801d136:	4611      	mov	r1, r2
 801d138:	6023      	str	r3, [r4, #0]
 801d13a:	f7e4 fa0d 	bl	8001558 <_fstat>
 801d13e:	1c43      	adds	r3, r0, #1
 801d140:	d102      	bne.n	801d148 <_fstat_r+0x1c>
 801d142:	6823      	ldr	r3, [r4, #0]
 801d144:	b103      	cbz	r3, 801d148 <_fstat_r+0x1c>
 801d146:	602b      	str	r3, [r5, #0]
 801d148:	bd38      	pop	{r3, r4, r5, pc}
 801d14a:	bf00      	nop
 801d14c:	200015b4 	.word	0x200015b4

0801d150 <_isatty_r>:
 801d150:	b538      	push	{r3, r4, r5, lr}
 801d152:	4c06      	ldr	r4, [pc, #24]	; (801d16c <_isatty_r+0x1c>)
 801d154:	2300      	movs	r3, #0
 801d156:	4605      	mov	r5, r0
 801d158:	4608      	mov	r0, r1
 801d15a:	6023      	str	r3, [r4, #0]
 801d15c:	f7e4 fa0c 	bl	8001578 <_isatty>
 801d160:	1c43      	adds	r3, r0, #1
 801d162:	d102      	bne.n	801d16a <_isatty_r+0x1a>
 801d164:	6823      	ldr	r3, [r4, #0]
 801d166:	b103      	cbz	r3, 801d16a <_isatty_r+0x1a>
 801d168:	602b      	str	r3, [r5, #0]
 801d16a:	bd38      	pop	{r3, r4, r5, pc}
 801d16c:	200015b4 	.word	0x200015b4

0801d170 <_lseek_r>:
 801d170:	b538      	push	{r3, r4, r5, lr}
 801d172:	4c07      	ldr	r4, [pc, #28]	; (801d190 <_lseek_r+0x20>)
 801d174:	4605      	mov	r5, r0
 801d176:	4608      	mov	r0, r1
 801d178:	4611      	mov	r1, r2
 801d17a:	2200      	movs	r2, #0
 801d17c:	6022      	str	r2, [r4, #0]
 801d17e:	461a      	mov	r2, r3
 801d180:	f7e4 fa05 	bl	800158e <_lseek>
 801d184:	1c43      	adds	r3, r0, #1
 801d186:	d102      	bne.n	801d18e <_lseek_r+0x1e>
 801d188:	6823      	ldr	r3, [r4, #0]
 801d18a:	b103      	cbz	r3, 801d18e <_lseek_r+0x1e>
 801d18c:	602b      	str	r3, [r5, #0]
 801d18e:	bd38      	pop	{r3, r4, r5, pc}
 801d190:	200015b4 	.word	0x200015b4

0801d194 <_malloc_usable_size_r>:
 801d194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d198:	1f18      	subs	r0, r3, #4
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	bfbc      	itt	lt
 801d19e:	580b      	ldrlt	r3, [r1, r0]
 801d1a0:	18c0      	addlt	r0, r0, r3
 801d1a2:	4770      	bx	lr

0801d1a4 <_read_r>:
 801d1a4:	b538      	push	{r3, r4, r5, lr}
 801d1a6:	4c07      	ldr	r4, [pc, #28]	; (801d1c4 <_read_r+0x20>)
 801d1a8:	4605      	mov	r5, r0
 801d1aa:	4608      	mov	r0, r1
 801d1ac:	4611      	mov	r1, r2
 801d1ae:	2200      	movs	r2, #0
 801d1b0:	6022      	str	r2, [r4, #0]
 801d1b2:	461a      	mov	r2, r3
 801d1b4:	f7e4 f997 	bl	80014e6 <_read>
 801d1b8:	1c43      	adds	r3, r0, #1
 801d1ba:	d102      	bne.n	801d1c2 <_read_r+0x1e>
 801d1bc:	6823      	ldr	r3, [r4, #0]
 801d1be:	b103      	cbz	r3, 801d1c2 <_read_r+0x1e>
 801d1c0:	602b      	str	r3, [r5, #0]
 801d1c2:	bd38      	pop	{r3, r4, r5, pc}
 801d1c4:	200015b4 	.word	0x200015b4

0801d1c8 <_init>:
 801d1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1ca:	bf00      	nop
 801d1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1ce:	bc08      	pop	{r3}
 801d1d0:	469e      	mov	lr, r3
 801d1d2:	4770      	bx	lr

0801d1d4 <_fini>:
 801d1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1d6:	bf00      	nop
 801d1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1da:	bc08      	pop	{r3}
 801d1dc:	469e      	mov	lr, r3
 801d1de:	4770      	bx	lr
